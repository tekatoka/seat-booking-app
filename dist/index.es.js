"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customTableFilter = exports.RowStatus = exports.LabelSize = exports.InputType = exports.IbbTreeMenu = exports.IbbTableAdvanced = exports.IbbTable = exports.IbbNavbar = exports.IbbModalWindow = exports.IbbLoader = exports.IbbLeftSidebar = exports.IbbFormTable = exports.IbbFormRadiobutton = exports.IbbFormLabelElement = exports.IbbFormInput = exports.IbbFormElementGroup = exports.IbbFormDatetimepicker = exports.IbbFormCheckbox = exports.IbbFormAccordion = exports.IbbDynamicFormBlock = exports.IbbDynamicForm = exports.IbbDropdown = exports.IbbButton = exports.IbbBreadcrumb = exports.ElementTypes = exports.ColumnFilter = exports.ButtonType = void 0;
const React$4 = __importStar(require("react"));
const react_1 = __importStar(require("react"));
const ReactDOM = __importStar(require("react-dom"));
const react_dom_1 = __importStar(require("react-dom"));
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */
var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
                d[p] = b[p]; };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign$1 = function () {
    __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};
function __rest$1(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = { label: 0, sent: function () { if (t[0] & 1)
            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f)
            throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _)
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                    return t;
                if (y = 0, t)
                    op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return { value: op[1], done: false };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [0];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2])
                            _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            }
            catch (e) {
                op = [6, e];
                y = 0;
            }
            finally {
                f = t = 0;
            }
        if (op[0] & 5)
            throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
    }
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
        return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
    }
    catch (error) {
        e = { error: error };
    }
    finally {
        try {
            if (r && !r.done && (m = i["return"]))
                m.call(i);
        }
        finally {
            if (e)
                throw e.error;
        }
    }
    return ar;
}
function __spreadArray$1(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar)
                    ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
    }
    else {
        cooked.raw = raw;
    }
    return cooked;
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
function commonjsRequire(path) {
    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var moment$1 = { exports: {} };
(function (module, exports) {
    (function (global, factory) {
        module.exports = factory();
    }(commonjsGlobal, (function () {
        var hookCallback;
        function hooks() {
            return hookCallback.apply(null, arguments);
        }
        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback(callback) {
            hookCallback = callback;
        }
        function isArray(input) {
            return (input instanceof Array ||
                Object.prototype.toString.call(input) === '[object Array]');
        }
        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (input != null &&
                Object.prototype.toString.call(input) === '[object Object]');
        }
        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }
        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            }
            else {
                var k;
                for (k in obj) {
                    if (hasOwnProp(obj, k)) {
                        return false;
                    }
                }
                return true;
            }
        }
        function isUndefined(input) {
            return input === void 0;
        }
        function isNumber(input) {
            return (typeof input === 'number' ||
                Object.prototype.toString.call(input) === '[object Number]');
        }
        function isDate(input) {
            return (input instanceof Date ||
                Object.prototype.toString.call(input) === '[object Date]');
        }
        function map(arr, fn) {
            var res = [], i, arrLen = arr.length;
            for (i = 0; i < arrLen; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }
        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }
            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }
            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }
            return a;
        }
        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }
        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
            };
        }
        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }
        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        }
        else {
            some = function (fun) {
                var t = Object(this), len = t.length >>> 0, i;
                for (i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }
                return false;
            };
        }
        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }), isNowValid = !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));
                if (m._strict) {
                    isNowValid =
                        isNowValid &&
                            flags.charsLeftOver === 0 &&
                            flags.unusedTokens.length === 0 &&
                            flags.bigHour === undefined;
                }
                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                }
                else {
                    return isNowValid;
                }
            }
            return m._isValid;
        }
        function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            }
            else {
                getParsingFlags(m).userInvalidated = true;
            }
            return m;
        }
        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = (hooks.momentProperties = []), updateInProgress = false;
        function copyConfig(to, from) {
            var i, prop, val, momentPropertiesLen = momentProperties.length;
            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }
            if (momentPropertiesLen > 0) {
                for (i = 0; i < momentPropertiesLen; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }
            return to;
        }
        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }
        function isMoment(obj) {
            return (obj instanceof Moment || (obj != null && obj._isAMomentObject != null));
        }
        function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' &&
                console.warn) {
                console.warn('Deprecation warning: ' + msg);
            }
        }
        function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [], arg, i, key, argLen = arguments.length;
                    for (i = 0; i < argLen; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (key in arguments[0]) {
                                if (hasOwnProp(arguments[0], key)) {
                                    arg += key + ': ' + arguments[0][key] + ', ';
                                }
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        }
                        else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack);
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }
        var deprecations = {};
        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }
        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;
        function isFunction(input) {
            return ((typeof Function !== 'undefined' && input instanceof Function) ||
                Object.prototype.toString.call(input) === '[object Function]');
        }
        function set(config) {
            var prop, i;
            for (i in config) {
                if (hasOwnProp(config, i)) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop;
                    }
                    else {
                        this['_' + i] = prop;
                    }
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source);
        }
        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig), prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    }
                    else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    }
                    else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }
        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }
        var keys;
        if (Object.keys) {
            keys = Object.keys;
        }
        else {
            keys = function (obj) {
                var i, res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }
        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        };
        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }
        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
            return ((sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                absNumber);
        }
        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(func.apply(this, arguments), token);
                };
            }
        }
        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }
        function makeFormatFunction(format) {
            var array = format.match(formattingTokens), i, length;
            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                }
                else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }
            return function (mom) {
                var output = '', i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i])
                        ? array[i].call(mom, format)
                        : array[i];
                }
                return output;
            };
        }
        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }
            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);
            return formatFunctions[format](m);
        }
        function expandFormat(format, locale) {
            var i = 5;
            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }
            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }
            return format;
        }
        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        };
        function longDateFormat(key) {
            var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
            if (format || !formatUpper) {
                return format;
            }
            this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function (tok) {
                if (tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd') {
                    return tok.slice(1);
                }
                return tok;
            })
                .join('');
            return this._longDateFormat[key];
        }
        var defaultInvalidDate = 'Invalid date';
        function invalidDate() {
            return this._invalidDate;
        }
        var defaultOrdinal = '%d', defaultDayOfMonthOrdinalParse = /\d{1,2}/;
        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }
        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        };
        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
        }
        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }
        var aliases = {};
        function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }
        function normalizeUnits(units) {
            return typeof units === 'string'
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
        }
        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {}, normalizedProp, prop;
            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }
            return normalizedInput;
        }
        var priorities = {};
        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }
        function getPrioritizedUnits(unitsObj) {
            var units = [], u;
            for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                    units.push({ unit: u, priority: priorities[u] });
                }
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }
        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }
        function absFloor(number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            }
            else {
                return Math.floor(number);
            }
        }
        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion, value = 0;
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }
            return value;
        }
        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                }
                else {
                    return get(this, unit);
                }
            };
        }
        function get(mom, unit) {
            return mom.isValid()
                ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
                : NaN;
        }
        function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (unit === 'FullYear' &&
                    isLeapYear(mom.year()) &&
                    mom.month() === 1 &&
                    mom.date() === 29) {
                    value = toInt(value);
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
                }
                else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }
        // MOMENTS
        function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }
        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
                for (i = 0; i < prioritizedLen; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            }
            else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }
        var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
        regexes = {};
        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
                ? regex
                : function (isStrict, localeData) {
                    return isStrict && strictRegex ? strictRegex : regex;
                };
        }
        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }
            return regexes[token](config._strict, config._locale);
        }
        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(s
                .replace('\\', '')
                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            }));
        }
        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }
        var tokens = {};
        function addParseToken(token, callback) {
            var i, func = callback, tokenLen;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            tokenLen = token.length;
            for (i = 0; i < tokenLen; i++) {
                tokens[token[i]] = func;
            }
        }
        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }
        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }
        var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
        function mod(n, x) {
            return ((n % x) + x) % x;
        }
        var indexOf;
        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        }
        else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }
        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
                ? isLeapYear(year)
                    ? 29
                    : 28
                : 31 - ((modMonth % 7) % 2);
        }
        // FORMATTING
        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });
        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });
        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });
        // ALIASES
        addUnitAlias('month', 'M');
        // PRIORITY
        addUnitPriority('month', 8);
        // PARSING
        addRegexToken('M', match1to2);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });
        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });
        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            }
            else {
                getParsingFlags(config).invalidMonth = input;
            }
        });
        // LOCALES
        var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months)
                    ? this._months
                    : this._months['standalone'];
            }
            return isArray(this._months)
                ? this._months[m.month()]
                : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                    ? 'format'
                    : 'standalone'][m.month()];
        }
        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort)
                    ? this._monthsShort
                    : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
        }
        function handleStrictParse(monthName, format, strict) {
            var i, ii, mom, llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }
            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
                else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
            else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
                else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }
        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;
            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }
            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }
            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                    this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
                }
                if (!strict && !this._monthsParse[i]) {
                    regex =
                        '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict &&
                    format === 'MMMM' &&
                    this._longMonthsParse[i].test(monthName)) {
                    return i;
                }
                else if (strict &&
                    format === 'MMM' &&
                    this._shortMonthsParse[i].test(monthName)) {
                    return i;
                }
                else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }
        // MOMENTS
        function setMonth(mom, value) {
            var dayOfMonth;
            if (!mom.isValid()) {
                // No op
                return mom;
            }
            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                }
                else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }
            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }
        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            }
            else {
                return get(this, 'Month');
            }
        }
        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }
        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                }
                else {
                    return this._monthsShortRegex;
                }
            }
            else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                    ? this._monthsShortStrictRegex
                    : this._monthsShortRegex;
            }
        }
        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                }
                else {
                    return this._monthsRegex;
                }
            }
            else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                    ? this._monthsStrictRegex
                    : this._monthsRegex;
            }
        }
        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }
            var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }
            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        }
        // FORMATTING
        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
        });
        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });
        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
        // ALIASES
        addUnitAlias('year', 'y');
        // PRIORITIES
        addUnitPriority('year', 1);
        // PARSING
        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);
        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] =
                input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });
        // HELPERS
        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }
        // HOOKS
        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };
        // MOMENTS
        var getSetYear = makeGetSet('FullYear', true);
        function getIsLeapYear() {
            return isLeapYear(this.year());
        }
        function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            }
            else {
                date = new Date(y, m, d, h, M, s, ms);
            }
            return date;
        }
        function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            }
            else {
                date = new Date(Date.UTC.apply(null, arguments));
            }
            return date;
        }
        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy, 
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
            return -fwdlw + fwd - 1;
        }
        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            }
            else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            }
            else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }
            return {
                year: resYear,
                dayOfYear: resDayOfYear,
            };
        }
        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            }
            else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            }
            else {
                resYear = mom.year();
                resWeek = week;
            }
            return {
                week: resWeek,
                year: resYear,
            };
        }
        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }
        // FORMATTING
        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
        // ALIASES
        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');
        // PRIORITIES
        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);
        // PARSING
        addRegexToken('w', match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2);
        addRegexToken('WW', match1to2, match2);
        addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        });
        // HELPERS
        // LOCALES
        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }
        var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        };
        function localeFirstDayOfWeek() {
            return this._week.dow;
        }
        function localeFirstDayOfYear() {
            return this._week.doy;
        }
        // MOMENTS
        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }
        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }
        // FORMATTING
        addFormatToken('d', 0, 'do', 'day');
        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });
        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });
        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });
        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');
        // ALIASES
        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');
        // PRIORITY
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);
        // PARSING
        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });
        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            }
            else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });
        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });
        // HELPERS
        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }
            if (!isNaN(input)) {
                return parseInt(input, 10);
            }
            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }
            return null;
        }
        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }
        // LOCALES
        function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }
        var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'), defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
        function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format)
                    ? 'format'
                    : 'standalone'];
            return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                    ? weekdays[m.day()]
                    : weekdays;
        }
        function localeWeekdaysShort(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                    ? this._weekdaysShort[m.day()]
                    : this._weekdaysShort;
        }
        function localeWeekdaysMin(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                    ? this._weekdaysMin[m.day()]
                    : this._weekdaysMin;
        }
        function handleStrictParse$1(weekdayName, format, strict) {
            var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];
                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }
            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
                else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
                else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
            else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
                else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
                else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }
        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;
            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                    this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                    this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
                }
                if (!this._weekdaysParse[i]) {
                    regex =
                        '^' +
                            this.weekdays(mom, '') +
                            '|^' +
                            this.weekdaysShort(mom, '') +
                            '|^' +
                            this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (strict &&
                    format === 'dddd' &&
                    this._fullWeekdaysParse[i].test(weekdayName)) {
                    return i;
                }
                else if (strict &&
                    format === 'ddd' &&
                    this._shortWeekdaysParse[i].test(weekdayName)) {
                    return i;
                }
                else if (strict &&
                    format === 'dd' &&
                    this._minWeekdaysParse[i].test(weekdayName)) {
                    return i;
                }
                else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }
        // MOMENTS
        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            }
            else {
                return day;
            }
        }
        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }
        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            }
            else {
                return this.day() || 7;
            }
        }
        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                }
                else {
                    return this._weekdaysRegex;
                }
            }
            else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                    ? this._weekdaysStrictRegex
                    : this._weekdaysRegex;
            }
        }
        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                }
                else {
                    return this._weekdaysShortRegex;
                }
            }
            else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                    ? this._weekdaysShortStrictRegex
                    : this._weekdaysShortRegex;
            }
        }
        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                }
                else {
                    return this._weekdaysMinRegex;
                }
            }
            else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                    ? this._weekdaysMinStrictRegex
                    : this._weekdaysMinRegex;
            }
        }
        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }
            var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ''));
                shortp = regexEscape(this.weekdaysShort(mom, ''));
                longp = regexEscape(this.weekdays(mom, ''));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
        }
        // FORMATTING
        function hFormat() {
            return this.hours() % 12 || 12;
        }
        function kFormat() {
            return this.hours() || 24;
        }
        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);
        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken('hmmss', 0, 0, function () {
            return ('' +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2));
        });
        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken('Hmmss', 0, 0, function () {
            return ('' +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2));
        });
        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
        }
        meridiem('a', true);
        meridiem('A', false);
        // ALIASES
        addUnitAlias('hour', 'h');
        // PRIORITY
        addUnitPriority('hour', 13);
        // PARSING
        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }
        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2);
        addRegexToken('h', match1to2);
        addRegexToken('k', match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);
        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);
        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4, pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4, pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });
        // LOCALES
        function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
        }
        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, 
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);
        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            }
            else {
                return isLower ? 'am' : 'AM';
            }
        }
        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
            week: defaultLocaleWeek,
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
            meridiemParse: defaultLocaleMeridiemParse,
        };
        // internal storage for locale config files
        var locales = {}, localeFamilies = {}, globalLocale;
        function commonPrefix(arr1, arr2) {
            var i, minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                    return i;
                }
            }
            return minl;
        }
        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }
        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0, j, next, locale, split;
            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (next &&
                        next.length >= j &&
                        commonPrefix(split, next) >= j - 1) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }
        function isLocaleNameSane(name) {
            // Prevent names that look like filesystem paths, i.e contain '/' or '\'
            return name.match('^[^/\\\\]*$') != null;
        }
        function loadLocale(name) {
            var oldLocale = null, aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (locales[name] === undefined &&
                'object' !== 'undefined' &&
                module &&
                module.exports &&
                isLocaleNameSane(name)) {
                try {
                    oldLocale = globalLocale._abbr;
                    aliasedRequire = commonjsRequire;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                }
                catch (e) {
                    // mark as not found to avoid repeating expensive file require call causing high CPU
                    // when trying to find en-US, en_US, en-us for every format call
                    locales[name] = null; // null means not found
                }
            }
            return locales[name];
        }
        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                }
                else {
                    data = defineLocale(key, values);
                }
                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                }
                else {
                    if (typeof console !== 'undefined' && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                    }
                }
            }
            return globalLocale._abbr;
        }
        function defineLocale(name, config) {
            if (config !== null) {
                var locale, parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                    parentConfig = locales[name]._config;
                }
                else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    }
                    else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        }
                        else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config,
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));
                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }
                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);
                return locales[name];
            }
            else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }
        function updateLocale(name, config) {
            if (config != null) {
                var locale, tmpLocale, parentConfig = baseConfig;
                if (locales[name] != null && locales[name].parentLocale != null) {
                    // Update existing child locale in-place to avoid memory-leaks
                    locales[name].set(mergeConfigs(locales[name]._config, config));
                }
                else {
                    // MERGE
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config;
                    }
                    config = mergeConfigs(parentConfig, config);
                    if (tmpLocale == null) {
                        // updateLocale is called for creating a new locale
                        // Set abbr so it will have a name (getters return
                        // undefined otherwise).
                        config.abbr = name;
                    }
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                }
                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            }
            else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                        if (name === getSetGlobalLocale()) {
                            getSetGlobalLocale(name);
                        }
                    }
                    else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }
        // returns locale data
        function getLocale(key) {
            var locale;
            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }
            if (!key) {
                return globalLocale;
            }
            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }
            return chooseLocale(key);
        }
        function listLocales() {
            return keys(locales);
        }
        function checkOverflow(m) {
            var overflow, a = m._a;
            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                            ? DATE
                            : a[HOUR] < 0 ||
                                a[HOUR] > 24 ||
                                (a[HOUR] === 24 &&
                                    (a[MINUTE] !== 0 ||
                                        a[SECOND] !== 0 ||
                                        a[MILLISECOND] !== 0))
                                ? HOUR
                                : a[MINUTE] < 0 || a[MINUTE] > 59
                                    ? MINUTE
                                    : a[SECOND] < 0 || a[SECOND] > 59
                                        ? SECOND
                                        : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                                            ? MILLISECOND
                                            : -1;
                if (getParsingFlags(m)._overflowDayOfYear &&
                    (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }
                getParsingFlags(m).overflow = overflow;
            }
            return m;
        }
        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ], 
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, 
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };
        // date from iso format
        function configFromISO(config) {
            var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
            if (match) {
                getParsingFlags(config).iso = true;
                for (i = 0, l = isoDatesLen; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimesLen; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    }
                    else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            }
            else {
                config._isValid = false;
            }
        }
        function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
            ];
            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }
            return result;
        }
        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            }
            else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }
        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
                .replace(/\([^()]*\)|[\n\t]/g, ' ')
                .replace(/(\s\s+)/g, ' ')
                .replace(/^\s\s*/, '')
                .replace(/\s\s*$/, '');
        }
        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }
        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            }
            else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            }
            else {
                var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
                return h * 60 + m;
            }
        }
        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
            if (match) {
                parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }
                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);
                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                getParsingFlags(config).rfc2822 = true;
            }
            else {
                config._isValid = false;
            }
        }
        // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }
            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            }
            else {
                return;
            }
            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            }
            else {
                return;
            }
            if (config._strict) {
                config._isValid = false;
            }
            else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
            }
        }
        hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        });
        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }
        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [
                    nowValue.getUTCFullYear(),
                    nowValue.getUTCMonth(),
                    nowValue.getUTCDate(),
                ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }
        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray(config) {
            var i, date, input = [], currentDate, expectedWeekday, yearToUse;
            if (config._d) {
                return;
            }
            currentDate = currentDateArray(config);
            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }
            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
                if (config._dayOfYear > daysInYear(yearToUse) ||
                    config._dayOfYear === 0) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }
                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }
            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }
            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] =
                    config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }
            // Check for 24:00:00.000
            if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }
            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();
            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }
            if (config._nextDay) {
                config._a[HOUR] = 24;
            }
            // check for mismatching day of week
            if (config._w &&
                typeof config._w.d !== 'undefined' &&
                config._w.d !== expectedWeekday) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }
        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            }
            else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;
                curWeek = weekOfYear(createLocal(), dow, doy);
                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
                // Default to current week.
                week = defaults(w.w, curWeek.week);
                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                }
                else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                }
                else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            }
            else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            }
            else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }
        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () { };
        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () { };
        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;
            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
            tokens =
                expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens.length;
            for (i = 0; i < tokenLen; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                    [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    }
                    else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                }
                else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }
            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }
            // clear _12h flag if hour is <= 12
            if (config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0) {
                getParsingFlags(config).bigHour = undefined;
            }
            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }
            configFromArray(config);
            checkOverflow(config);
        }
        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;
            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            }
            else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            }
            else {
                // this is not supposed to happen
                return hour;
            }
        }
        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
            if (configfLen === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }
            for (i = 0; i < configfLen; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);
                if (isValid(tempConfig)) {
                    validFormatFound = true;
                }
                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;
                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
                getParsingFlags(tempConfig).score = currentScore;
                if (!bestFormatIsValid) {
                    if (scoreToBeat == null ||
                        currentScore < scoreToBeat ||
                        validFormatFound) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                        if (validFormatFound) {
                            bestFormatIsValid = true;
                        }
                    }
                }
                else {
                    if (currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
            }
            extend(config, bestMoment || tempConfig);
        }
        function configFromObject(config) {
            if (config._d) {
                return;
            }
            var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
                return obj && parseInt(obj, 10);
            });
            configFromArray(config);
        }
        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }
            return res;
        }
        function prepareConfig(config) {
            var input = config._i, format = config._f;
            config._locale = config._locale || getLocale(config._l);
            if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
            }
            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }
            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            }
            else if (isDate(input)) {
                config._d = input;
            }
            else if (isArray(format)) {
                configFromStringAndArray(config);
            }
            else if (format) {
                configFromStringAndFormat(config);
            }
            else {
                configFromInput(config);
            }
            if (!isValid(config)) {
                config._d = null;
            }
            return config;
        }
        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            }
            else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            }
            else if (typeof input === 'string') {
                configFromString(config);
            }
            else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            }
            else if (isObject(input)) {
                configFromObject(config);
            }
            else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            }
            else {
                hooks.createFromInputFallback(config);
            }
        }
        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};
            if (format === true || format === false) {
                strict = format;
                format = undefined;
            }
            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }
            if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;
            return createFromConfig(c);
        }
        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }
        var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            }
            else {
                return createInvalid();
            }
        }), prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            }
            else {
                return createInvalid();
            }
        });
        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }
        // TODO: Use [].sort instead?
        function min() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
        }
        function max() {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
        }
        var now = function () {
            return Date.now ? Date.now() : +new Date();
        };
        var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
        ];
        function isDurationValid(m) {
            var key, unitHasDecimal = false, i, orderLen = ordering.length;
            for (key in m) {
                if (hasOwnProp(m, key) &&
                    !(indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key])))) {
                    return false;
                }
            }
            for (i = 0; i < orderLen; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }
            return true;
        }
        function isValid$1() {
            return this._isValid;
        }
        function createInvalid$1() {
            return createDuration(NaN);
        }
        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
            this._isValid = isDurationValid(normalizedInput);
            // representation for dateAddRemove
            this._milliseconds =
                +milliseconds +
                    seconds * 1e3 + // 1000
                    minutes * 6e4 + // 1000 * 60
                    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._locale = getLocale();
            this._bubble();
        }
        function isDuration(obj) {
            return obj instanceof Duration;
        }
        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            }
            else {
                return Math.round(number);
            }
        }
        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
            for (i = 0; i < len; i++) {
                if ((dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }
        // FORMATTING
        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset(), sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return (sign +
                    zeroFill(~~(offset / 60), 2) +
                    separator +
                    zeroFill(~~offset % 60, 2));
            });
        }
        offset('Z', ':');
        offset('ZZ', '');
        // PARSING
        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });
        // HELPERS
        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;
        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher), chunk, parts, minutes;
            if (matches === null) {
                return null;
            }
            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);
            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }
        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff =
                    (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            }
            else {
                return createLocal(input).local();
            }
        }
        function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
        }
        // HOOKS
        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () { };
        // MOMENTS
        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0, localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                }
                else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                    }
                    else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            }
            else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }
        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }
                this.utcOffset(input, keepLocalTime);
                return this;
            }
            else {
                return -this.utcOffset();
            }
        }
        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }
        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;
                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }
        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            }
            else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                }
                else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }
        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;
            return (this.utcOffset() - input) % 60 === 0;
        }
        function isDaylightSavingTime() {
            return (this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset());
        }
        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }
            var c = {}, other;
            copyConfig(c, this);
            c = prepareConfig(c);
            if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                    this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            }
            else {
                this._isDSTShifted = false;
            }
            return this._isDSTShifted;
        }
        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }
        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }
        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }
        // ASP.NET json date format regex
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, 
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
        function createDuration(input, key) {
            var duration = input, 
            // matching against regexp is expensive, do it on demand
            match = null, sign, ret, diffRes;
            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months,
                };
            }
            else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                    duration[key] = +input;
                }
                else {
                    duration.milliseconds = +input;
                }
            }
            else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
            }
            else if ((match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign),
                };
            }
            else if (duration == null) {
                // checks for null or undefined
                duration = {};
            }
            else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
                diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }
            ret = new Duration(duration);
            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }
            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                ret._isValid = input._isValid;
            }
            return ret;
        }
        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;
        function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }
        function positiveMomentsDifference(base, other) {
            var res = {};
            res.months =
                other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }
            res.milliseconds = +other - +base.clone().add(res.months, 'M');
            return res;
        }
        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
            }
            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            }
            else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }
            return res;
        }
        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(name, 'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                    tmp = val;
                    val = period;
                    period = tmp;
                }
                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }
        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
            if (!mom.isValid()) {
                // No op
                return;
            }
            updateOffset = updateOffset == null ? true : updateOffset;
            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }
        var add = createAdder(1, 'add'), subtract = createAdder(-1, 'subtract');
        function isString(input) {
            return typeof input === 'string' || input instanceof String;
        }
        // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
        function isMomentInput(input) {
            return (isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined);
        }
        function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ], i, property, propertyLen = properties.length;
            for (i = 0; i < propertyLen; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }
            return objectTest && propertyTest;
        }
        function isNumberOrStringArray(input) {
            var arrayTest = isArray(input), dataTypeTest = false;
            if (arrayTest) {
                dataTypeTest =
                    input.filter(function (item) {
                        return !isNumber(item) && isString(input);
                    }).length === 0;
            }
            return arrayTest && dataTypeTest;
        }
        function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ], i, property;
            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }
            return objectTest && propertyTest;
        }
        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
                ? 'sameElse'
                : diff < -1
                    ? 'lastWeek'
                    : diff < 0
                        ? 'lastDay'
                        : diff < 1
                            ? 'sameDay'
                            : diff < 2
                                ? 'nextDay'
                                : diff < 7
                                    ? 'nextWeek'
                                    : 'sameElse';
        }
        function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
                if (!arguments[0]) {
                    time = undefined;
                    formats = undefined;
                }
                else if (isMomentInput(arguments[0])) {
                    time = arguments[0];
                    formats = undefined;
                }
                else if (isCalendarSpec(arguments[0])) {
                    formats = arguments[0];
                    time = undefined;
                }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse', output = formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);
            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
        }
        function clone() {
            return new Moment(this);
        }
        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            }
            else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }
        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            }
            else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }
        function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return ((inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')'
                    ? this.isBefore(localTo, units)
                    : !this.isAfter(localTo, units)));
        }
        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input), inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            }
            else {
                inputMs = localInput.valueOf();
                return (this.clone().startOf(units).valueOf() <= inputMs &&
                    inputMs <= this.clone().endOf(units).valueOf());
            }
        }
        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }
        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }
        function diff(input, units, asFloat) {
            var that, zoneDelta, output;
            if (!this.isValid()) {
                return NaN;
            }
            that = cloneWithOffset(input, this);
            if (!that.isValid()) {
                return NaN;
            }
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
            units = normalizeUnits(units);
            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;
                case 'month':
                    output = monthDiff(this, that);
                    break;
                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;
                case 'second':
                    output = (this - that) / 1e3;
                    break; // 1000
                case 'minute':
                    output = (this - that) / 6e4;
                    break; // 1000 * 60
                case 'hour':
                    output = (this - that) / 36e5;
                    break; // 1000 * 60 * 60
                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break; // 1000 * 60 * 60 * 24, negate dst
                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                    output = this - that;
            }
            return asFloat ? output : absFloor(output);
        }
        function monthDiff(a, b) {
            if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), 
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            }
            else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }
            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }
        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }
        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(m, utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                }
                else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                        .toISOString()
                        .replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment', zone = '', prefix, year, datetime, suffix;
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';
            return this.format(prefix + year + datetime + suffix);
        }
        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc()
                    ? hooks.defaultFormatUtc
                    : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }
        function from(time, withoutSuffix) {
            if (this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())) {
                return createDuration({ to: this, from: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            }
            else {
                return this.localeData().invalidDate();
            }
        }
        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }
        function to(time, withoutSuffix) {
            if (this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())) {
                return createDuration({ from: this, to: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            }
            else {
                return this.localeData().invalidDate();
            }
        }
        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }
        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale(key) {
            var newLocaleData;
            if (key === undefined) {
                return this._locale._abbr;
            }
            else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }
        var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
            if (key === undefined) {
                return this.localeData();
            }
            else {
                return this.locale(key);
            }
        });
        function localeData() {
            return this._locale;
        }
        var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
        }
        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            }
            else {
                return new Date(y, m, d).valueOf();
            }
        }
        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            }
            else {
                return Date.UTC(y, m, d);
            }
        }
        function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(this.year(), this.month() - (this.month() % 3), 1);
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                    break;
                case 'isoWeek':
                    time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }
        function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time =
                        startOfDate(this.year(), this.month() - (this.month() % 3) + 3, 1) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time =
                        startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                    break;
                case 'isoWeek':
                    time =
                        startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time +=
                        MS_PER_HOUR -
                            mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) -
                            1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }
        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }
        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }
        function toDate() {
            return new Date(this.valueOf());
        }
        function toArray() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
            ];
        }
        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
            };
        }
        function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }
        function isValid$2() {
            return isValid(this);
        }
        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }
        function invalidAt() {
            return getParsingFlags(this).overflow;
        }
        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
            };
        }
        addFormatToken('N', 0, 0, 'eraAbbr');
        addFormatToken('NN', 0, 0, 'eraAbbr');
        addFormatToken('NNN', 0, 0, 'eraAbbr');
        addFormatToken('NNNN', 0, 0, 'eraName');
        addFormatToken('NNNNN', 0, 0, 'eraNarrow');
        addFormatToken('y', ['y', 1], 'yo', 'eraYear');
        addFormatToken('y', ['yy', 2], 0, 'eraYear');
        addFormatToken('y', ['yyy', 3], 0, 'eraYear');
        addFormatToken('y', ['yyyy', 4], 0, 'eraYear');
        addRegexToken('N', matchEraAbbr);
        addRegexToken('NN', matchEraAbbr);
        addRegexToken('NNN', matchEraAbbr);
        addRegexToken('NNNN', matchEraName);
        addRegexToken('NNNNN', matchEraNarrow);
        addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            }
            else {
                getParsingFlags(config).invalidEra = input;
            }
        });
        addRegexToken('y', matchUnsigned);
        addRegexToken('yy', matchUnsigned);
        addRegexToken('yyy', matchUnsigned);
        addRegexToken('yyyy', matchUnsigned);
        addRegexToken('yo', matchEraYearOrdinal);
        addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
        addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
            }
            if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            }
            else {
                array[YEAR] = parseInt(input, 10);
            }
        });
        function localeEras(m, format) {
            var i, l, date, eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].since).startOf('day');
                        eras[i].since = date.valueOf();
                        break;
                }
                switch (typeof eras[i].until) {
                    case 'undefined':
                        eras[i].until = +Infinity;
                        break;
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].until).startOf('day').valueOf();
                        eras[i].until = date.valueOf();
                        break;
                }
            }
            return eras;
        }
        function localeErasParse(eraName, format, strict) {
            var i, l, eras = this.eras(), name, abbr, narrow;
            eraName = eraName.toUpperCase();
            for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();
                if (strict) {
                    switch (format) {
                        case 'N':
                        case 'NN':
                        case 'NNN':
                            if (abbr === eraName) {
                                return eras[i];
                            }
                            break;
                        case 'NNNN':
                            if (name === eraName) {
                                return eras[i];
                            }
                            break;
                        case 'NNNNN':
                            if (narrow === eraName) {
                                return eras[i];
                            }
                            break;
                    }
                }
                else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                    return eras[i];
                }
            }
        }
        function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
                return hooks(era.since).year();
            }
            else {
                return hooks(era.since).year() + (year - era.offset) * dir;
            }
        }
        function getEraName() {
            var i, l, val, eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();
                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].name;
                }
            }
            return '';
        }
        function getEraNarrow() {
            var i, l, val, eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();
                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].narrow;
                }
            }
            return '';
        }
        function getEraAbbr() {
            var i, l, val, eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();
                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].abbr;
                }
            }
            return '';
        }
        function getEraYear() {
            var i, l, dir, val, eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;
                // truncate time
                val = this.clone().startOf('day').valueOf();
                if ((eras[i].since <= val && val <= eras[i].until) ||
                    (eras[i].until <= val && val <= eras[i].since)) {
                    return ((this.year() - hooks(eras[i].since).year()) * dir +
                        eras[i].offset);
                }
            }
            return this.year();
        }
        function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
        }
        function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }
        function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }
        function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
        }
        function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
        }
        function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
        }
        function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
        }
        function computeErasParse() {
            var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                namePieces.push(regexEscape(eras[i].name));
                abbrPieces.push(regexEscape(eras[i].abbr));
                narrowPieces.push(regexEscape(eras[i].narrow));
                mixedPieces.push(regexEscape(eras[i].name));
                mixedPieces.push(regexEscape(eras[i].abbr));
                mixedPieces.push(regexEscape(eras[i].narrow));
            }
            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
        }
        // FORMATTING
        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });
        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });
        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }
        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');
        // ALIASES
        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');
        // PRIORITY
        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);
        // PARSING
        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);
        addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        });
        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });
        // MOMENTS
        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
        }
        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
        }
        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }
        function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
        }
        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }
        function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }
        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            }
            else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }
        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }
        // FORMATTING
        addFormatToken('Q', 0, 'Qo', 'quarter');
        // ALIASES
        addUnitAlias('quarter', 'Q');
        // PRIORITY
        addUnitPriority('quarter', 7);
        // PARSING
        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });
        // MOMENTS
        function getSetQuarter(input) {
            return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
        }
        // FORMATTING
        addFormatToken('D', ['DD', 2], 'Do', 'date');
        // ALIASES
        addUnitAlias('date', 'D');
        // PRIORITY
        addUnitPriority('date', 9);
        // PARSING
        addRegexToken('D', match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
        });
        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });
        // MOMENTS
        var getSetDayOfMonth = makeGetSet('Date', true);
        // FORMATTING
        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
        // ALIASES
        addUnitAlias('dayOfYear', 'DDD');
        // PRIORITY
        addUnitPriority('dayOfYear', 4);
        // PARSING
        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });
        // HELPERS
        // MOMENTS
        function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }
        // FORMATTING
        addFormatToken('m', ['mm', 2], 0, 'minute');
        // ALIASES
        addUnitAlias('minute', 'm');
        // PRIORITY
        addUnitPriority('minute', 14);
        // PARSING
        addRegexToken('m', match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);
        // MOMENTS
        var getSetMinute = makeGetSet('Minutes', false);
        // FORMATTING
        addFormatToken('s', ['ss', 2], 0, 'second');
        // ALIASES
        addUnitAlias('second', 's');
        // PRIORITY
        addUnitPriority('second', 15);
        // PARSING
        addRegexToken('s', match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);
        // MOMENTS
        var getSetSecond = makeGetSet('Seconds', false);
        // FORMATTING
        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });
        // ALIASES
        addUnitAlias('millisecond', 'ms');
        // PRIORITY
        addUnitPriority('millisecond', 16);
        // PARSING
        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);
        var token, getSetMillisecond;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }
        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }
        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }
        getSetMillisecond = makeGetSet('Milliseconds', false);
        // FORMATTING
        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');
        // MOMENTS
        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }
        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }
        var proto = Moment.prototype;
        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                return 'Moment<' + this.format() + '>';
            };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
        proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
        proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
        proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
        proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
        function createUnix(input) {
            return createLocal(input * 1000);
        }
        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }
        function preParsePostFormat(string) {
            return string;
        }
        var proto$1 = Locale.prototype;
        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;
        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;
        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;
        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;
        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;
        function get$1(format, index, field, setter) {
            var locale = getLocale(), utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }
        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || '';
            if (index != null) {
                return get$1(format, index, field, 'month');
            }
            var i, out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }
        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }
                format = format || '';
            }
            else {
                format = localeSorted;
                index = format;
                localeSorted = false;
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }
                format = format || '';
            }
            var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];
            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }
            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }
        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }
        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }
        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }
        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }
        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }
        getSetGlobalLocale('en', {
            eras: [
                {
                    since: '0001-01-01',
                    until: +Infinity,
                    offset: 1,
                    name: 'Anno Domini',
                    narrow: 'AD',
                    abbr: 'AD',
                },
                {
                    since: '0000-12-31',
                    until: -Infinity,
                    offset: 1,
                    name: 'Before Christ',
                    narrow: 'BC',
                    abbr: 'BC',
                },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
                var b = number % 10, output = toInt((number % 100) / 10) === 1
                    ? 'th'
                    : b === 1
                        ? 'st'
                        : b === 2
                            ? 'nd'
                            : b === 3
                                ? 'rd'
                                : 'th';
                return number + output;
            },
        });
        // Side effect imports
        hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
        hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
        var mathAbs = Math.abs;
        function abs() {
            var data = this._data;
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
            return this;
        }
        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
            return duration._bubble();
        }
        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }
        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }
        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            }
            else {
                return Math.ceil(number);
            }
        }
        function bubble() {
            var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays;
            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }
            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;
            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;
            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;
            hours = absFloor(minutes / 60);
            data.hours = hours % 24;
            days += absFloor(hours / 24);
            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));
            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;
            data.days = days;
            data.months = months;
            data.years = years;
            return this;
        }
        function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
        }
        function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
        }
        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days, months, milliseconds = this._milliseconds;
            units = normalizeUnits(units);
            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':
                        return months;
                    case 'quarter':
                        return months / 3;
                    case 'year':
                        return months / 12;
                }
            }
            else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;
                    case 'day':
                        return days + milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + milliseconds / 36e5;
                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;
                    case 'second':
                        return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }
        // TODO: Use this.as('ms')?
        function valueOf$1() {
            if (!this.isValid()) {
                return NaN;
            }
            return (this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6);
        }
        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }
        var asMilliseconds = makeAs('ms'), asSeconds = makeAs('s'), asMinutes = makeAs('m'), asHours = makeAs('h'), asDays = makeAs('d'), asWeeks = makeAs('w'), asMonths = makeAs('M'), asQuarters = makeAs('Q'), asYears = makeAs('y');
        function clone$1() {
            return createDuration(this);
        }
        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }
        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }
        var milliseconds = makeGetter('milliseconds'), seconds = makeGetter('seconds'), minutes = makeGetter('minutes'), hours = makeGetter('hours'), days = makeGetter('days'), months = makeGetter('months'), years = makeGetter('years');
        function weeks() {
            return absFloor(this.days() / 7);
        }
        var round = Math.round, thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };
        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
        function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as('s')), minutes = round(duration.as('m')), hours = round(duration.as('h')), days = round(duration.as('d')), months = round(duration.as('M')), weeks = round(duration.as('w')), years = round(duration.as('y')), a = (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);
            if (thresholds.w != null) {
                a =
                    a ||
                        (weeks <= 1 && ['w']) ||
                        (weeks < thresholds.w && ['ww', weeks]);
            }
            a = a ||
                (months <= 1 && ['M']) ||
                (months < thresholds.M && ['MM', months]) ||
                (years <= 1 && ['y']) || ['yy', years];
            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }
        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }
        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }
        function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }
            var withSuffix = false, th = thresholds, locale, output;
            if (typeof argWithSuffix === 'object') {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
                withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                    th.ss = argThresholds.s - 1;
                }
            }
            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);
            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }
            return locale.postformat(output);
        }
        var abs$1 = Math.abs;
        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }
        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }
            var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }
            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;
            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
            return (totalSign +
                'P' +
                (years ? ymSign + years + 'Y' : '') +
                (months ? ymSign + months + 'M' : '') +
                (days ? daysSign + days + 'D' : '') +
                (hours || minutes || seconds ? 'T' : '') +
                (hours ? hmsSign + hours + 'H' : '') +
                (minutes ? hmsSign + minutes + 'M' : '') +
                (seconds ? hmsSign + s + 'S' : ''));
        }
        var proto$2 = Duration.prototype;
        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;
        proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
        proto$2.lang = lang;
        // FORMATTING
        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');
        // PARSING
        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });
        //! moment.js
        hooks.version = '2.29.4';
        setHookCallback(createLocal);
        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;
        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
        };
        return hooks;
    })));
}(moment$1));
var moment = moment$1.exports;
function CalendarIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
    }));
}
const ForwardRef$k = React$4.forwardRef(CalendarIcon);
var CalendarIcon$1 = ForwardRef$k;
function CheckIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M5 13l4 4L19 7"
    }));
}
const ForwardRef$j = React$4.forwardRef(CheckIcon);
var CheckIcon$1 = ForwardRef$j;
function ChevronDoubleLeftIcon$2(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M11 19l-7-7 7-7m8 14l-7-7 7-7"
    }));
}
const ForwardRef$i = React$4.forwardRef(ChevronDoubleLeftIcon$2);
var ChevronDoubleLeftIcon$3 = ForwardRef$i;
function ChevronDoubleRightIcon$2(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M13 5l7 7-7 7M5 5l7 7-7 7"
    }));
}
const ForwardRef$h = React$4.forwardRef(ChevronDoubleRightIcon$2);
var ChevronDoubleRightIcon$3 = ForwardRef$h;
function ChevronDownIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M19 9l-7 7-7-7"
    }));
}
const ForwardRef$g = React$4.forwardRef(ChevronDownIcon);
var ChevronDownIcon$1 = ForwardRef$g;
function ChevronRightIcon$2(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M9 5l7 7-7 7"
    }));
}
const ForwardRef$f = React$4.forwardRef(ChevronRightIcon$2);
var ChevronRightIcon$3 = ForwardRef$f;
function DotsVerticalIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"
    }));
}
const ForwardRef$e = React$4.forwardRef(DotsVerticalIcon);
var DotsVerticalIcon$1 = ForwardRef$e;
function EyeOffIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"
    }));
}
const ForwardRef$d = React$4.forwardRef(EyeOffIcon);
var EyeOffIcon$1 = ForwardRef$d;
function EyeIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z"
    }), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
    }));
}
const ForwardRef$c = React$4.forwardRef(EyeIcon);
var EyeIcon$1 = ForwardRef$c;
function MenuIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M4 6h16M4 12h16M4 18h16"
    }));
}
const ForwardRef$b = React$4.forwardRef(MenuIcon);
var MenuIcon$1 = ForwardRef$b;
function MinusCircleIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
    }));
}
const ForwardRef$a = React$4.forwardRef(MinusCircleIcon);
var MinusCircleIcon$1 = ForwardRef$a;
function MinusIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M20 12H4"
    }));
}
const ForwardRef$9 = React$4.forwardRef(MinusIcon);
var MinusIcon$1 = ForwardRef$9;
function PlusCircleIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
    }));
}
const ForwardRef$8 = React$4.forwardRef(PlusCircleIcon);
var PlusCircleIcon$1 = ForwardRef$8;
function PlusIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M12 4v16m8-8H4"
    }));
}
const ForwardRef$7 = React$4.forwardRef(PlusIcon);
var PlusIcon$1 = ForwardRef$7;
function ReplyIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"
    }));
}
const ForwardRef$6 = React$4.forwardRef(ReplyIcon);
var ReplyIcon$1 = ForwardRef$6;
function XIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 24 24",
        strokeWidth: 2,
        stroke: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M6 18L18 6M6 6l12 12"
    }));
}
const ForwardRef$5 = React$4.forwardRef(XIcon);
var XIcon$1 = ForwardRef$5;
var propTypes = { exports: {} };
var reactIs$1 = { exports: {} };
var reactIs_production_min = {};
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b$5 = "function" === typeof Symbol && Symbol.for, c$9 = b$5 ? Symbol.for("react.element") : 60103, d$6 = b$5 ? Symbol.for("react.portal") : 60106, e$2 = b$5 ? Symbol.for("react.fragment") : 60107, f$6 = b$5 ? Symbol.for("react.strict_mode") : 60108, g$4 = b$5 ? Symbol.for("react.profiler") : 60114, h$7 = b$5 ? Symbol.for("react.provider") : 60109, k$1 = b$5 ? Symbol.for("react.context") : 60110, l$5 = b$5 ? Symbol.for("react.async_mode") : 60111, m$2 = b$5 ? Symbol.for("react.concurrent_mode") : 60111, n$3 = b$5 ? Symbol.for("react.forward_ref") : 60112, p$5 = b$5 ? Symbol.for("react.suspense") : 60113, q$1 = b$5 ?
    Symbol.for("react.suspense_list") : 60120, r$5 = b$5 ? Symbol.for("react.memo") : 60115, t$8 = b$5 ? Symbol.for("react.lazy") : 60116, v$3 = b$5 ? Symbol.for("react.block") : 60121, w$6 = b$5 ? Symbol.for("react.fundamental") : 60117, x$2 = b$5 ? Symbol.for("react.responder") : 60118, y$5 = b$5 ? Symbol.for("react.scope") : 60119;
function z$2(a) { if ("object" === typeof a && null !== a) {
    var u = a.$$typeof;
    switch (u) {
        case c$9: switch (a = a.type, a) {
            case l$5:
            case m$2:
            case e$2:
            case g$4:
            case f$6:
            case p$5: return a;
            default: switch (a = a && a.$$typeof, a) {
                case k$1:
                case n$3:
                case t$8:
                case r$5:
                case h$7: return a;
                default: return u;
            }
        }
        case d$6: return u;
    }
} }
function A$1(a) { return z$2(a) === m$2; }
reactIs_production_min.AsyncMode = l$5;
reactIs_production_min.ConcurrentMode = m$2;
reactIs_production_min.ContextConsumer = k$1;
reactIs_production_min.ContextProvider = h$7;
reactIs_production_min.Element = c$9;
reactIs_production_min.ForwardRef = n$3;
reactIs_production_min.Fragment = e$2;
reactIs_production_min.Lazy = t$8;
reactIs_production_min.Memo = r$5;
reactIs_production_min.Portal = d$6;
reactIs_production_min.Profiler = g$4;
reactIs_production_min.StrictMode = f$6;
reactIs_production_min.Suspense = p$5;
reactIs_production_min.isAsyncMode = function (a) { return A$1(a) || z$2(a) === l$5; };
reactIs_production_min.isConcurrentMode = A$1;
reactIs_production_min.isContextConsumer = function (a) { return z$2(a) === k$1; };
reactIs_production_min.isContextProvider = function (a) { return z$2(a) === h$7; };
reactIs_production_min.isElement = function (a) { return "object" === typeof a && null !== a && a.$$typeof === c$9; };
reactIs_production_min.isForwardRef = function (a) { return z$2(a) === n$3; };
reactIs_production_min.isFragment = function (a) { return z$2(a) === e$2; };
reactIs_production_min.isLazy = function (a) { return z$2(a) === t$8; };
reactIs_production_min.isMemo = function (a) { return z$2(a) === r$5; };
reactIs_production_min.isPortal = function (a) { return z$2(a) === d$6; };
reactIs_production_min.isProfiler = function (a) { return z$2(a) === g$4; };
reactIs_production_min.isStrictMode = function (a) { return z$2(a) === f$6; };
reactIs_production_min.isSuspense = function (a) { return z$2(a) === p$5; };
reactIs_production_min.isValidElementType = function (a) { return "string" === typeof a || "function" === typeof a || a === e$2 || a === m$2 || a === g$4 || a === f$6 || a === p$5 || a === q$1 || "object" === typeof a && null !== a && (a.$$typeof === t$8 || a.$$typeof === r$5 || a.$$typeof === h$7 || a.$$typeof === k$1 || a.$$typeof === n$3 || a.$$typeof === w$6 || a.$$typeof === x$2 || a.$$typeof === y$5 || a.$$typeof === v$3); };
reactIs_production_min.typeOf = z$2;
var reactIs_development = {};
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== "production") {
    (function () {
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.
        var hasSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
        // (unstable) APIs that have been removed. Can we remove the symbols?
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
        function isValidElementType(type) {
            return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
                type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
            if (typeof object === 'object' && object !== null) {
                var $$typeof = object.$$typeof;
                switch ($$typeof) {
                    case REACT_ELEMENT_TYPE:
                        var type = object.type;
                        switch (type) {
                            case REACT_ASYNC_MODE_TYPE:
                            case REACT_CONCURRENT_MODE_TYPE:
                            case REACT_FRAGMENT_TYPE:
                            case REACT_PROFILER_TYPE:
                            case REACT_STRICT_MODE_TYPE:
                            case REACT_SUSPENSE_TYPE:
                                return type;
                            default:
                                var $$typeofType = type && type.$$typeof;
                                switch ($$typeofType) {
                                    case REACT_CONTEXT_TYPE:
                                    case REACT_FORWARD_REF_TYPE:
                                    case REACT_LAZY_TYPE:
                                    case REACT_MEMO_TYPE:
                                    case REACT_PROVIDER_TYPE:
                                        return $$typeofType;
                                    default:
                                        return $$typeof;
                                }
                        }
                    case REACT_PORTAL_TYPE:
                        return $$typeof;
                }
            }
            return undefined;
        } // AsyncMode is deprecated along with isAsyncMode
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
        function isAsyncMode(object) {
            {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
                    console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development.AsyncMode = AsyncMode;
        reactIs_development.ConcurrentMode = ConcurrentMode;
        reactIs_development.ContextConsumer = ContextConsumer;
        reactIs_development.ContextProvider = ContextProvider;
        reactIs_development.Element = Element;
        reactIs_development.ForwardRef = ForwardRef;
        reactIs_development.Fragment = Fragment;
        reactIs_development.Lazy = Lazy;
        reactIs_development.Memo = Memo;
        reactIs_development.Portal = Portal;
        reactIs_development.Profiler = Profiler;
        reactIs_development.StrictMode = StrictMode;
        reactIs_development.Suspense = Suspense;
        reactIs_development.isAsyncMode = isAsyncMode;
        reactIs_development.isConcurrentMode = isConcurrentMode;
        reactIs_development.isContextConsumer = isContextConsumer;
        reactIs_development.isContextProvider = isContextProvider;
        reactIs_development.isElement = isElement;
        reactIs_development.isForwardRef = isForwardRef;
        reactIs_development.isFragment = isFragment;
        reactIs_development.isLazy = isLazy;
        reactIs_development.isMemo = isMemo;
        reactIs_development.isPortal = isPortal;
        reactIs_development.isProfiler = isProfiler;
        reactIs_development.isStrictMode = isStrictMode;
        reactIs_development.isSuspense = isSuspense;
        reactIs_development.isValidElementType = isValidElementType;
        reactIs_development.typeOf = typeOf;
    })();
}
if (process.env.NODE_ENV === 'production') {
    reactIs$1.exports = reactIs_production_min;
}
else {
    reactIs$1.exports = reactIs_development;
}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
    }
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) {
            return false;
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') {
            return false;
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !==
            'abcdefghijklmnopqrst') {
            return false;
        }
        return true;
    }
    catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
            if (hasOwnProperty$1.call(from, key)) {
                to[key] = from[key];
            }
        }
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
                if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]];
                }
            }
        }
    }
    return to;
};
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret$3;
var has$3 = Function.call.bind(Object.prototype.hasOwnProperty);
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var printWarning$2 = function () { };
if (process.env.NODE_ENV !== 'production') {
    var ReactPropTypesSecret$2 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$2 = has$3;
    printWarning$2 = function (text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
            console.error(message);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        }
        catch (x) { /**/ }
    };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
    if (process.env.NODE_ENV !== 'production') {
        for (var typeSpecName in typeSpecs) {
            if (has$2(typeSpecs, typeSpecName)) {
                var error;
                // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                    // This is intentionally an invariant that gets caught. It's the same
                    // behavior as without this statement except with a better message.
                    if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
                            'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
                            'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                        err.name = 'Invariant Violation';
                        throw err;
                    }
                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$2);
                }
                catch (ex) {
                    error = ex;
                }
                if (error && !(error instanceof Error)) {
                    printWarning$2((componentName || 'React class') + ': type specification of ' +
                        location + ' `' + typeSpecName + '` is invalid; the type checker ' +
                        'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
                        'You may have forgotten to pass an argument to the type checker ' +
                        'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                        'shape all require an argument).');
                }
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                    // Only monitor this failure once because there tends to be a lot of the
                    // same error.
                    loggedTypeFailures[error.message] = true;
                    var stack = getStack ? getStack() : '';
                    printWarning$2('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                }
            }
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes$1.resetWarningCache = function () {
    if (process.env.NODE_ENV !== 'production') {
        loggedTypeFailures = {};
    }
};
var checkPropTypes_1 = checkPropTypes$1;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ReactIs$1 = reactIs$1.exports;
var assign$2 = objectAssign;
var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
var has$1 = has$3;
var checkPropTypes = checkPropTypes_1;
var printWarning$1 = function () { };
if (process.env.NODE_ENV !== 'production') {
    printWarning$1 = function (text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
            console.error(message);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        }
        catch (x) { }
    };
}
function emptyFunctionThatReturnsNull() {
    return null;
}
var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
            return iteratorFn;
        }
    }
    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */
    var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker,
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
        // SameValue algorithm
        if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
        }
        else {
            // Step 6.a: NaN == NaN
            return x !== x && y !== y;
        }
    }
    /*eslint-enable no-self-compare*/
    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {};
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        if (process.env.NODE_ENV !== 'production') {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret$1) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                        'Use `PropTypes.checkPropTypes()` to call them. ' +
                        'Read more at http://fb.me/use-check-prop-types');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] &&
                        // Avoid spamming the console because they are often not actionable except for lib authors
                        manualPropTypeWarningCount < 3) {
                        printWarning$1('You are manually calling a React.PropTypes validation ' +
                            'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
                            'and will throw in the standalone `prop-types` package. ' +
                            'You may be seeing this warning due to a third-party PropTypes ' +
                            'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) {
                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    }
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            }
            else {
                return validate(props, propName, componentName, location, propFullName);
            }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), { expectedType: expectedType });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);
                if (error instanceof Error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs$1.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            if (process.env.NODE_ENV !== 'production') {
                if (arguments.length > 1) {
                    printWarning$1('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
                        'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                }
                else {
                    printWarning$1('Invalid argument supplied to oneOf, expected an array.');
                }
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                    return null;
                }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') {
                    return String(value);
                }
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            }
            for (var key in propValue) {
                if (has$1(propValue, key)) {
                    var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
                    if (error instanceof Error) {
                        return error;
                    }
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
            return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                    'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1);
                if (checkerResult == null) {
                    return null;
                }
                if (checkerResult.data && has$1(checkerResult.data, 'expectedType')) {
                    expectedTypes.push(checkerResult.data.expectedType);
                }
            }
            var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
            'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') {
                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
                if (error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign$2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
                var checker = shapeTypes[key];
                if (has$1(shapeTypes, key) && typeof checker !== 'function') {
                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                }
                if (!checker) {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
                        '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
                        '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);
                if (error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch (typeof propValue) {
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) {
                    return propValue.every(isNode);
                }
                if (propValue === null || isValidElement(propValue)) {
                    return true;
                }
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) {
                        while (!(step = iterator.next()).done) {
                            if (!isNode(step.value)) {
                                return false;
                            }
                        }
                    }
                    else {
                        // Iterator will provide entry [k,v] tuples rather than values.
                        while (!(step = iterator.next()).done) {
                            var entry = step.value;
                            if (entry) {
                                if (!isNode(entry[1])) {
                                    return false;
                                }
                            }
                        }
                    }
                }
                else {
                    return false;
                }
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
            return true;
        }
        // falsy value can't be a Symbol
        if (!propValue) {
            return false;
        }
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
            return true;
        }
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
            return true;
        }
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
            return 'array';
        }
        if (propValue instanceof RegExp) {
            // Old webkits (at least until Android 4.0) return 'function' rather than
            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
            // passes PropTypes.object.
            return 'object';
        }
        if (isSymbol(propType, propValue)) {
            return 'symbol';
        }
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
            return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) {
                return 'date';
            }
            else if (propValue instanceof RegExp) {
                return 'regexp';
            }
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
        }
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ReactPropTypesSecret = ReactPropTypesSecret_1;
function emptyFunction() { }
function emptyFunctionWithReset() { }
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
        if (secret === ReactPropTypesSecret) {
            // It is still safe when called from React.
            return;
        }
        var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use PropTypes.checkPropTypes() to call them. ' +
            'Read more at http://fb.me/use-check-prop-types');
        err.name = 'Invariant Violation';
        throw err;
    }
    shim.isRequired = shim;
    function getShim() {
        return shim;
    } // Important!
    // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
    var ReactPropTypes = {
        array: shim,
        bigint: shim,
        bool: shim,
        func: shim,
        number: shim,
        object: shim,
        string: shim,
        symbol: shim,
        any: shim,
        arrayOf: getShim,
        element: shim,
        elementType: shim,
        instanceOf: getShim,
        node: shim,
        objectOf: getShim,
        oneOf: getShim,
        oneOfType: getShim,
        shape: getShim,
        exact: getShim,
        checkPropTypes: emptyFunctionWithReset,
        resetWarningCache: emptyFunction
    };
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== 'production') {
    var ReactIs = reactIs$1.exports;
    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
}
else {
    // By explicitly using `prop-types` you are opting into new production behavior.
    // http://fb.me/prop-types-in-prod
    propTypes.exports = factoryWithThrowingShims();
}
var PropTypes = propTypes.exports;
var classnames$1 = { exports: {} };
/*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
*/
(function (module) {
    /* global define */
    (function () {
        var hasOwn = {}.hasOwnProperty;
        function classNames() {
            var classes = [];
            for (var i = 0; i < arguments.length; i++) {
                var arg = arguments[i];
                if (!arg)
                    continue;
                var argType = typeof arg;
                if (argType === 'string' || argType === 'number') {
                    classes.push(arg);
                }
                else if (Array.isArray(arg)) {
                    if (arg.length) {
                        var inner = classNames.apply(null, arg);
                        if (inner) {
                            classes.push(inner);
                        }
                    }
                }
                else if (argType === 'object') {
                    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
                        classes.push(arg.toString());
                        continue;
                    }
                    for (var key in arg) {
                        if (hasOwn.call(arg, key) && arg[key]) {
                            classes.push(key);
                        }
                    }
                }
            }
            return classes.join(' ');
        }
        if (module.exports) {
            classNames.default = classNames;
            module.exports = classNames;
        }
        else {
            window.classNames = classNames;
        }
    }());
}(classnames$1));
var r$4 = classnames$1.exports;
function _typeof$2(o) {
    "@babel/helpers - typeof";
    return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
        return typeof o;
    } : function (o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof$2(o);
}
function requiredArgs(required, args) {
    if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
    }
}
/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */
function isDate(value) {
    requiredArgs(1, arguments);
    return value instanceof Date || _typeof$2(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}
/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
    requiredArgs(1, arguments);
    var argStr = Object.prototype.toString.call(argument);
    // Clone the date
    if (argument instanceof Date || _typeof$2(argument) === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
    }
    else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
    }
    else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
            // eslint-disable-next-line no-console
            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
            // eslint-disable-next-line no-console
            console.warn(new Error().stack);
        }
        return new Date(NaN);
    }
}
/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */
function isValid(dirtyDate) {
    requiredArgs(1, arguments);
    if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
        return false;
    }
    var date = toDate(dirtyDate);
    return !isNaN(Number(date));
}
function toInteger(dirtyNumber) {
    if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
    }
    var number = Number(dirtyNumber);
    if (isNaN(number)) {
        return number;
    }
    return number < 0 ? Math.ceil(number) : Math.floor(number);
}
/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var timestamp = toDate(dirtyDate).getTime();
    var amount = toInteger(dirtyAmount);
    return new Date(timestamp + amount);
}
/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY$1 = 86400000;
function getUTCDayOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
    var startOfYearTimestamp = date.getTime();
    var difference = timestamp - startOfYearTimestamp;
    return Math.floor(difference / MILLISECONDS_IN_DAY$1) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
}
function getUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}
function startOfUTCISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getUTCISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setUTCFullYear(year, 0, 4);
    fourthOfJanuary.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCISOWeek(fourthOfJanuary);
    return date;
}
var MILLISECONDS_IN_WEEK$2 = 604800000;
function getUTCISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$2) + 1;
}
var defaultOptions$1 = {};
function getDefaultOptions() {
    return defaultOptions$1;
}
function startOfUTCWeek(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    var date = toDate(dirtyDate);
    var day = date.getUTCDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setUTCDate(date.getUTCDate() - diff);
    date.setUTCHours(0, 0, 0, 0);
    return date;
}
function getUTCWeekYear(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getUTCFullYear();
    var defaultOptions = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }
    var firstWeekOfNextYear = new Date(0);
    firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
    var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
    var firstWeekOfThisYear = new Date(0);
    firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
    var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}
function startOfUTCWeekYear(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
    var year = getUTCWeekYear(dirtyDate, options);
    var firstWeek = new Date(0);
    firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setUTCHours(0, 0, 0, 0);
    var date = startOfUTCWeek(firstWeek, options);
    return date;
}
var MILLISECONDS_IN_WEEK$1 = 604800000;
function getUTCWeek(dirtyDate, options) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function addLeadingZeros(number, targetLength) {
    var sign = number < 0 ? '-' : '';
    var output = Math.abs(number).toString();
    while (output.length < targetLength) {
        output = '0' + output;
    }
    return sign + output;
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */
var formatters$2 = {
    // Year
    y: function y(date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
    },
    // Month
    M: function M(date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
    },
    // Day of the month
    d: function d(date, token) {
        return addLeadingZeros(date.getUTCDate(), token.length);
    },
    // AM or PM
    a: function a(date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
            case 'a':
            case 'aa':
                return dayPeriodEnumValue.toUpperCase();
            case 'aaa':
                return dayPeriodEnumValue;
            case 'aaaaa':
                return dayPeriodEnumValue[0];
            case 'aaaa':
            default:
                return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
    },
    // Hour [1-12]
    h: function h(date, token) {
        return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H: function H(date, token) {
        return addLeadingZeros(date.getUTCHours(), token.length);
    },
    // Minute
    m: function m(date, token) {
        return addLeadingZeros(date.getUTCMinutes(), token.length);
    },
    // Second
    s: function s(date, token) {
        return addLeadingZeros(date.getUTCSeconds(), token.length);
    },
    // Fraction of second
    S: function S(date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros(fractionalSeconds, token.length);
    }
};
var lightFormatters = formatters$2;
var dayPeriodEnum = {
    am: 'am',
    pm: 'pm',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */
var formatters = {
    // Era
    G: function G(date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;
        switch (token) {
            // AD, BC
            case 'G':
            case 'GG':
            case 'GGG':
                return localize.era(era, {
                    width: 'abbreviated'
                });
            // A, B
            case 'GGGGG':
                return localize.era(era, {
                    width: 'narrow'
                });
            // Anno Domini, Before Christ
            case 'GGGG':
            default:
                return localize.era(era, {
                    width: 'wide'
                });
        }
    },
    // Year
    y: function y(date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
            var signedYear = date.getUTCFullYear();
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            var year = signedYear > 0 ? signedYear : 1 - signedYear;
            return localize.ordinalNumber(year, {
                unit: 'year'
            });
        }
        return lightFormatters.y(date, token);
    },
    // Local week-numbering year
    Y: function Y(date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options);
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        // Two digit year
        if (token === 'YY') {
            var twoDigitYear = weekYear % 100;
            return addLeadingZeros(twoDigitYear, 2);
        }
        // Ordinal number
        if (token === 'Yo') {
            return localize.ordinalNumber(weekYear, {
                unit: 'year'
            });
        }
        // Padding
        return addLeadingZeros(weekYear, token.length);
    },
    // ISO week-numbering year
    R: function R(date, token) {
        var isoWeekYear = getUTCISOWeekYear(date);
        // Padding
        return addLeadingZeros(isoWeekYear, token.length);
    },
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function u(date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros(year, token.length);
    },
    // Quarter
    Q: function Q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
            // 1, 2, 3, 4
            case 'Q':
                return String(quarter);
            // 01, 02, 03, 04
            case 'QQ':
                return addLeadingZeros(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case 'Qo':
                return localize.ordinalNumber(quarter, {
                    unit: 'quarter'
                });
            // Q1, Q2, Q3, Q4
            case 'QQQ':
                return localize.quarter(quarter, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'QQQQQ':
                return localize.quarter(quarter, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // 1st quarter, 2nd quarter, ...
            case 'QQQQ':
            default:
                return localize.quarter(quarter, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone quarter
    q: function q(date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
        switch (token) {
            // 1, 2, 3, 4
            case 'q':
                return String(quarter);
            // 01, 02, 03, 04
            case 'qq':
                return addLeadingZeros(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case 'qo':
                return localize.ordinalNumber(quarter, {
                    unit: 'quarter'
                });
            // Q1, Q2, Q3, Q4
            case 'qqq':
                return localize.quarter(quarter, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case 'qqqqq':
                return localize.quarter(quarter, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // 1st quarter, 2nd quarter, ...
            case 'qqqq':
            default:
                return localize.quarter(quarter, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // Month
    M: function M(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
            case 'M':
            case 'MM':
                return lightFormatters.M(date, token);
            // 1st, 2nd, ..., 12th
            case 'Mo':
                return localize.ordinalNumber(month + 1, {
                    unit: 'month'
                });
            // Jan, Feb, ..., Dec
            case 'MMM':
                return localize.month(month, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // J, F, ..., D
            case 'MMMMM':
                return localize.month(month, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // January, February, ..., December
            case 'MMMM':
            default:
                return localize.month(month, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone month
    L: function L(date, token, localize) {
        var month = date.getUTCMonth();
        switch (token) {
            // 1, 2, ..., 12
            case 'L':
                return String(month + 1);
            // 01, 02, ..., 12
            case 'LL':
                return addLeadingZeros(month + 1, 2);
            // 1st, 2nd, ..., 12th
            case 'Lo':
                return localize.ordinalNumber(month + 1, {
                    unit: 'month'
                });
            // Jan, Feb, ..., Dec
            case 'LLL':
                return localize.month(month, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // J, F, ..., D
            case 'LLLLL':
                return localize.month(month, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // January, February, ..., December
            case 'LLLL':
            default:
                return localize.month(month, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // Local week of year
    w: function w(date, token, localize, options) {
        var week = getUTCWeek(date, options);
        if (token === 'wo') {
            return localize.ordinalNumber(week, {
                unit: 'week'
            });
        }
        return addLeadingZeros(week, token.length);
    },
    // ISO week of year
    I: function I(date, token, localize) {
        var isoWeek = getUTCISOWeek(date);
        if (token === 'Io') {
            return localize.ordinalNumber(isoWeek, {
                unit: 'week'
            });
        }
        return addLeadingZeros(isoWeek, token.length);
    },
    // Day of the month
    d: function d(date, token, localize) {
        if (token === 'do') {
            return localize.ordinalNumber(date.getUTCDate(), {
                unit: 'date'
            });
        }
        return lightFormatters.d(date, token);
    },
    // Day of year
    D: function D(date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);
        if (token === 'Do') {
            return localize.ordinalNumber(dayOfYear, {
                unit: 'dayOfYear'
            });
        }
        return addLeadingZeros(dayOfYear, token.length);
    },
    // Day of week
    E: function E(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        switch (token) {
            // Tue
            case 'E':
            case 'EE':
            case 'EEE':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'EEEEE':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'EEEEEE':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'EEEE':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Local day of week
    e: function e(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
            // Numerical value (Nth day of week with current locale or weekStartsOn)
            case 'e':
                return String(localDayOfWeek);
            // Padded numerical value
            case 'ee':
                return addLeadingZeros(localDayOfWeek, 2);
            // 1st, 2nd, ..., 7th
            case 'eo':
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: 'day'
                });
            case 'eee':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'eeeee':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'eeeeee':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'eeee':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Stand-alone local day of week
    c: function c(date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch (token) {
            // Numerical value (same as in `e`)
            case 'c':
                return String(localDayOfWeek);
            // Padded numerical value
            case 'cc':
                return addLeadingZeros(localDayOfWeek, token.length);
            // 1st, 2nd, ..., 7th
            case 'co':
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: 'day'
                });
            case 'ccc':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'standalone'
                });
            // T
            case 'ccccc':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'standalone'
                });
            // Tu
            case 'cccccc':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'standalone'
                });
            // Tuesday
            case 'cccc':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'standalone'
                });
        }
    },
    // ISO day of week
    i: function i(date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch (token) {
            // 2
            case 'i':
                return String(isoDayOfWeek);
            // 02
            case 'ii':
                return addLeadingZeros(isoDayOfWeek, token.length);
            // 2nd
            case 'io':
                return localize.ordinalNumber(isoDayOfWeek, {
                    unit: 'day'
                });
            // Tue
            case 'iii':
                return localize.day(dayOfWeek, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            // T
            case 'iiiii':
                return localize.day(dayOfWeek, {
                    width: 'narrow',
                    context: 'formatting'
                });
            // Tu
            case 'iiiiii':
                return localize.day(dayOfWeek, {
                    width: 'short',
                    context: 'formatting'
                });
            // Tuesday
            case 'iiii':
            default:
                return localize.day(dayOfWeek, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // AM or PM
    a: function a(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        switch (token) {
            case 'a':
            case 'aa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'aaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                }).toLowerCase();
            case 'aaaaa':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'aaaa':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // AM, PM, midnight, noon
    b: function b(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours === 12) {
            dayPeriodEnumValue = dayPeriodEnum.noon;
        }
        else if (hours === 0) {
            dayPeriodEnumValue = dayPeriodEnum.midnight;
        }
        else {
            dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }
        switch (token) {
            case 'b':
            case 'bb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'bbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                }).toLowerCase();
            case 'bbbbb':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'bbbb':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // in the morning, in the afternoon, in the evening, at night
    B: function B(date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;
        if (hours >= 17) {
            dayPeriodEnumValue = dayPeriodEnum.evening;
        }
        else if (hours >= 12) {
            dayPeriodEnumValue = dayPeriodEnum.afternoon;
        }
        else if (hours >= 4) {
            dayPeriodEnumValue = dayPeriodEnum.morning;
        }
        else {
            dayPeriodEnumValue = dayPeriodEnum.night;
        }
        switch (token) {
            case 'B':
            case 'BB':
            case 'BBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'abbreviated',
                    context: 'formatting'
                });
            case 'BBBBB':
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'narrow',
                    context: 'formatting'
                });
            case 'BBBB':
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: 'wide',
                    context: 'formatting'
                });
        }
    },
    // Hour [1-12]
    h: function h(date, token, localize) {
        if (token === 'ho') {
            var hours = date.getUTCHours() % 12;
            if (hours === 0)
                hours = 12;
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return lightFormatters.h(date, token);
    },
    // Hour [0-23]
    H: function H(date, token, localize) {
        if (token === 'Ho') {
            return localize.ordinalNumber(date.getUTCHours(), {
                unit: 'hour'
            });
        }
        return lightFormatters.H(date, token);
    },
    // Hour [0-11]
    K: function K(date, token, localize) {
        var hours = date.getUTCHours() % 12;
        if (token === 'Ko') {
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return addLeadingZeros(hours, token.length);
    },
    // Hour [1-24]
    k: function k(date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0)
            hours = 24;
        if (token === 'ko') {
            return localize.ordinalNumber(hours, {
                unit: 'hour'
            });
        }
        return addLeadingZeros(hours, token.length);
    },
    // Minute
    m: function m(date, token, localize) {
        if (token === 'mo') {
            return localize.ordinalNumber(date.getUTCMinutes(), {
                unit: 'minute'
            });
        }
        return lightFormatters.m(date, token);
    },
    // Second
    s: function s(date, token, localize) {
        if (token === 'so') {
            return localize.ordinalNumber(date.getUTCSeconds(), {
                unit: 'second'
            });
        }
        return lightFormatters.s(date, token);
    },
    // Fraction of second
    S: function S(date, token) {
        return lightFormatters.S(date, token);
    },
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function X(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        if (timezoneOffset === 0) {
            return 'Z';
        }
        switch (token) {
            // Hours and optional minutes
            case 'X':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XX`
            case 'XXXX':
            case 'XX':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XXX`
            case 'XXXXX':
            case 'XXX': // Hours and minutes with `:` delimiter
            default:
                return formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function x(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
            // Hours and optional minutes
            case 'x':
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xx`
            case 'xxxx':
            case 'xx':
                // Hours and minutes without `:` delimiter
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xxx`
            case 'xxxxx':
            case 'xxx': // Hours and minutes with `:` delimiter
            default:
                return formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (GMT)
    O: function O(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
            // Short
            case 'O':
            case 'OO':
            case 'OOO':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
            // Long
            case 'OOOO':
            default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
    },
    // Timezone (specific non-location)
    z: function z(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();
        switch (token) {
            // Short
            case 'z':
            case 'zz':
            case 'zzz':
                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
            // Long
            case 'zzzz':
            default:
                return 'GMT' + formatTimezone(timezoneOffset, ':');
        }
    },
    // Seconds timestamp
    t: function t(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros(timestamp, token.length);
    },
    // Milliseconds timestamp
    T: function T(date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros(timestamp, token.length);
    }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = Math.floor(absOffset / 60);
    var minutes = absOffset % 60;
    if (minutes === 0) {
        return sign + String(hours);
    }
    var delimiter = dirtyDelimiter || '';
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
    if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
    }
    return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
    var delimiter = dirtyDelimiter || '';
    var sign = offset > 0 ? '-' : '+';
    var absOffset = Math.abs(offset);
    var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
    var minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
}
var formatters$1 = formatters;
var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
    switch (pattern) {
        case 'P':
            return formatLong.date({
                width: 'short'
            });
        case 'PP':
            return formatLong.date({
                width: 'medium'
            });
        case 'PPP':
            return formatLong.date({
                width: 'long'
            });
        case 'PPPP':
        default:
            return formatLong.date({
                width: 'full'
            });
    }
};
var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
    switch (pattern) {
        case 'p':
            return formatLong.time({
                width: 'short'
            });
        case 'pp':
            return formatLong.time({
                width: 'medium'
            });
        case 'ppp':
            return formatLong.time({
                width: 'long'
            });
        case 'pppp':
        default:
            return formatLong.time({
                width: 'full'
            });
    }
};
var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
    var matchResult = pattern.match(/(P+)(p+)?/) || [];
    var datePattern = matchResult[1];
    var timePattern = matchResult[2];
    if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
    }
    var dateTimeFormat;
    switch (datePattern) {
        case 'P':
            dateTimeFormat = formatLong.dateTime({
                width: 'short'
            });
            break;
        case 'PP':
            dateTimeFormat = formatLong.dateTime({
                width: 'medium'
            });
            break;
        case 'PPP':
            dateTimeFormat = formatLong.dateTime({
                width: 'long'
            });
            break;
        case 'PPPP':
        default:
            dateTimeFormat = formatLong.dateTime({
                width: 'full'
            });
            break;
    }
    return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
};
var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
};
var longFormatters$1 = longFormatters;
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
    var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
    utcDate.setUTCFullYear(date.getFullYear());
    return date.getTime() - utcDate.getTime();
}
var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
    return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
    return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
    if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
    else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
    }
}
var formatDistanceLocale$1 = {
    lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
    },
    xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
    },
    halfAMinute: 'half a minute',
    lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
    },
    xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
    },
    aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
    },
    xHours: {
        one: '1 hour',
        other: '{{count}} hours'
    },
    xDays: {
        one: '1 day',
        other: '{{count}} days'
    },
    aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
    },
    xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
    },
    aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
    },
    xMonths: {
        one: '1 month',
        other: '{{count}} months'
    },
    aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
    },
    xYears: {
        one: '1 year',
        other: '{{count}} years'
    },
    overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
    },
    almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
    }
};
var formatDistance$2 = function formatDistance(token, count, options) {
    var result;
    var tokenValue = formatDistanceLocale$1[token];
    if (typeof tokenValue === 'string') {
        result = tokenValue;
    }
    else if (count === 1) {
        result = tokenValue.one;
    }
    else {
        result = tokenValue.other.replace('{{count}}', count.toString());
    }
    if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
            return 'in ' + result;
        }
        else {
            return result + ' ago';
        }
    }
    return result;
};
var formatDistance$3 = formatDistance$2;
function buildFormatLongFn(args) {
    return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
    };
}
var dateFormats$1 = {
    full: 'EEEE, MMMM do, y',
    long: 'MMMM do, y',
    medium: 'MMM d, y',
    short: 'MM/dd/yyyy'
};
var timeFormats$1 = {
    full: 'h:mm:ss a zzzz',
    long: 'h:mm:ss a z',
    medium: 'h:mm:ss a',
    short: 'h:mm a'
};
var dateTimeFormats$1 = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: '{{date}}, {{time}}',
    short: '{{date}}, {{time}}'
};
var formatLong$2 = {
    date: buildFormatLongFn({
        formats: dateFormats$1,
        defaultWidth: 'full'
    }),
    time: buildFormatLongFn({
        formats: timeFormats$1,
        defaultWidth: 'full'
    }),
    dateTime: buildFormatLongFn({
        formats: dateTimeFormats$1,
        defaultWidth: 'full'
    })
};
var formatLong$3 = formatLong$2;
var formatRelativeLocale$1 = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: 'P'
};
var formatRelative$2 = function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale$1[token];
};
var formatRelative$3 = formatRelative$2;
function buildLocalizeFn(args) {
    return function (dirtyIndex, options) {
        var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
        var valuesArray;
        if (context === 'formatting' && args.formattingValues) {
            var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
            var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        }
        else {
            var _defaultWidth = args.defaultWidth;
            var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
            valuesArray = args.values[_width] || args.values[_defaultWidth];
        }
        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
        // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
    };
}
var eraValues$1 = {
    narrow: ['B', 'A'],
    abbreviated: ['BC', 'AD'],
    wide: ['Before Christ', 'Anno Domini']
};
var quarterValues$1 = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
    wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues$1 = {
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues$1 = {
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
    abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues$1 = {
    narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    },
    abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    },
    wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
    }
};
var formattingDayPeriodValues$1 = {
    narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    },
    abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    },
    wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
    }
};
var ordinalNumber$1 = function ordinalNumber(dirtyNumber, _options) {
    var number = Number(dirtyNumber);
    // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`.
    //
    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'.
    var rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
            case 1:
                return number + 'st';
            case 2:
                return number + 'nd';
            case 3:
                return number + 'rd';
        }
    }
    return number + 'th';
};
var localize$2 = {
    ordinalNumber: ordinalNumber$1,
    era: buildLocalizeFn({
        values: eraValues$1,
        defaultWidth: 'wide'
    }),
    quarter: buildLocalizeFn({
        values: quarterValues$1,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
            return quarter - 1;
        }
    }),
    month: buildLocalizeFn({
        values: monthValues$1,
        defaultWidth: 'wide'
    }),
    day: buildLocalizeFn({
        values: dayValues$1,
        defaultWidth: 'wide'
    }),
    dayPeriod: buildLocalizeFn({
        values: dayPeriodValues$1,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues$1,
        defaultFormattingWidth: 'wide'
    })
};
var localize$3 = localize$2;
function buildMatchFn(args) {
    return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);
        if (!matchResult) {
            return null;
        }
        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
            return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
            value: value,
            rest: rest
        };
    };
}
function findKey(object, predicate) {
    for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
            return key;
        }
    }
    return undefined;
}
function findIndex(array, predicate) {
    for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
            return key;
        }
    }
    return undefined;
}
function buildMatchPatternFn(args) {
    return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult)
            return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult)
            return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
            value: value,
            rest: rest
        };
    };
}
var matchOrdinalNumberPattern$1 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns$1 = {
    any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$1 = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns$1 = {
    any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1 = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns$1 = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$1 = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns$1 = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$1 = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$1 = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
var match$3 = {
    ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern$1,
        parsePattern: parseOrdinalNumberPattern$1,
        valueCallback: function valueCallback(value) {
            return parseInt(value, 10);
        }
    }),
    era: buildMatchFn({
        matchPatterns: matchEraPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns$1,
        defaultParseWidth: 'any'
    }),
    quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns$1,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
            return index + 1;
        }
    }),
    month: buildMatchFn({
        matchPatterns: matchMonthPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns$1,
        defaultParseWidth: 'any'
    }),
    day: buildMatchFn({
        matchPatterns: matchDayPatterns$1,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns$1,
        defaultParseWidth: 'any'
    }),
    dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns$1,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns$1,
        defaultParseWidth: 'any'
    })
};
var match$4 = match$3;
/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale$1 = {
    code: 'en-US',
    formatDistance: formatDistance$3,
    formatLong: formatLong$3,
    formatRelative: formatRelative$3,
    localize: localize$3,
    match: match$4,
    options: {
        weekStartsOn: 0 /* Sunday */,
        firstWeekContainsDate: 1
    }
};
var defaultLocale$1 = locale$1;
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp$1 = /^'([^]*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;
var unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */
function format$1(dirtyDate, dirtyFormatStr, options) {
    var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
    requiredArgs(2, arguments);
    var formatStr = String(dirtyFormatStr);
    var defaultOptions = getDefaultOptions();
    var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale$1;
    var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }
    var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    if (!locale.localize) {
        throw new RangeError('locale must contain localize property');
    }
    if (!locale.formatLong) {
        throw new RangeError('locale must contain formatLong property');
    }
    var originalDate = toDate(dirtyDate);
    if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
    }
    // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    // This ensures that when UTC functions will be implemented, locales will be compatible with them.
    // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
    var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
    var utcDate = subMilliseconds(originalDate, timezoneOffset);
    var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale,
        _originalDate: originalDate
    };
    var result = formatStr.match(longFormattingTokensRegExp$1).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter === 'p' || firstCharacter === 'P') {
            var longFormatter = longFormatters$1[firstCharacter];
            return longFormatter(substring, locale.formatLong);
        }
        return substring;
    }).join('').match(formattingTokensRegExp$1).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
            return "'";
        }
        var firstCharacter = substring[0];
        if (firstCharacter === "'") {
            return cleanEscapedString$1(substring);
        }
        var formatter = formatters$1[firstCharacter];
        if (formatter) {
            if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
            }
            if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
                throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
            }
            return formatter(utcDate, substring, locale.localize, formatterOptions);
        }
        if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
            throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }
        return substring;
    }).join('');
    return result;
}
function cleanEscapedString$1(input) {
    var matched = input.match(escapedStringRegExp$1);
    if (!matched) {
        return input;
    }
    return matched[1].replace(doubleQuoteRegExp$1, "'");
}
var MILLISECONDS_IN_MINUTE = 60000;
/**
 * @name addMinutes
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the minutes added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */
function addMinutes(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
var MILLISECONDS_IN_HOUR = 3600000;
/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the hours added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */
function addHours(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */
function addDays(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var amount = toInteger(dirtyAmount);
    if (isNaN(amount)) {
        return new Date(NaN);
    }
    if (!amount) {
        // If 0 days, no-op to avoid changing times in the hour before end of DST
        return date;
    }
    date.setDate(date.getDate() + amount);
    return date;
}
/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the weeks added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */
function addWeeks(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    var days = amount * 7;
    return addDays(dirtyDate, days);
}
/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */
function addMonths(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var amount = toInteger(dirtyAmount);
    if (isNaN(amount)) {
        return new Date(NaN);
    }
    if (!amount) {
        // If 0 months, no-op to avoid changing times in the hour before end of DST
        return date;
    }
    var dayOfMonth = date.getDate();
    // The JS Date object supports date math by accepting out-of-bounds values for
    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
    // want except that dates will wrap around the end of a month, meaning that
    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
    // we'll default to the end of the desired month by adding 1 to the desired
    // month and using a date of 0 to back up one day to the end of the desired
    // month.
    var endOfDesiredMonth = new Date(date.getTime());
    endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
    var daysInMonth = endOfDesiredMonth.getDate();
    if (dayOfMonth >= daysInMonth) {
        // If we're already at the end of the month, then this is the correct date
        // and we're done.
        return endOfDesiredMonth;
    }
    else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return date;
    }
}
/**
 * @name addQuarters
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the quarters added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * const result = addQuarters(new Date(2014, 8, 1), 1)
 * //=> Mon Dec 01 2014 00:00:00
 */
function addQuarters(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    var months = amount * 3;
    return addMonths(dirtyDate, months);
}
/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */
function addYears(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMonths(dirtyDate, amount * 12);
}
/**
 * @name subDays
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the days subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * const result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */
function subDays(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addDays(dirtyDate, -amount);
}
/**
 * @name subWeeks
 * @category Week Helpers
 * @summary Subtract the specified number of weeks from the given date.
 *
 * @description
 * Subtract the specified number of weeks from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of weeks to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the weeks subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 4 weeks from 1 September 2014:
 * const result = subWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Aug 04 2014 00:00:00
 */
function subWeeks(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addWeeks(dirtyDate, -amount);
}
/**
 * @name subMonths
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * const result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */
function subMonths(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addMonths(dirtyDate, -amount);
}
/**
 * @name subQuarters
 * @category Quarter Helpers
 * @summary Subtract the specified number of year quarters from the given date.
 *
 * @description
 * Subtract the specified number of year quarters from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of quarters to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the quarters subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 3 quarters from 1 September 2014:
 * const result = subQuarters(new Date(2014, 8, 1), 3)
 * //=> Sun Dec 01 2013 00:00:00
 */
function subQuarters(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addQuarters(dirtyDate, -amount);
}
/**
 * @name subYears
 * @category Year Helpers
 * @summary Subtract the specified number of years from the given date.
 *
 * @description
 * Subtract the specified number of years from the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of years to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the years subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 5 years from 1 September 2014:
 * const result = subYears(new Date(2014, 8, 1), 5)
 * //=> Tue Sep 01 2009 00:00:00
 */
function subYears(dirtyDate, dirtyAmount) {
    requiredArgs(2, arguments);
    var amount = toInteger(dirtyAmount);
    return addYears(dirtyDate, -amount);
}
/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the seconds
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */
function getSeconds(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var seconds = date.getSeconds();
    return seconds;
}
/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the minutes
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */
function getMinutes(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var minutes = date.getMinutes();
    return minutes;
}
/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the hours
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */
function getHours(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var hours = date.getHours();
    return hours;
}
/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */
function getDay(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var day = date.getDay();
    return day;
}
/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the day of month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */
function getDate(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var dayOfMonth = date.getDate();
    return dayOfMonth;
}
/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions();
    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    var date = toDate(dirtyDate);
    var day = date.getDay();
    var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    date.setDate(date.getDate() - diff);
    date.setHours(0, 0, 0, 0);
    return date;
}
/**
 * @name startOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of an ISO week
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    return startOfWeek(dirtyDate, {
        weekStartsOn: 1
    });
}
/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the ISO week-numbering year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */
function getISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getFullYear();
    var fourthOfJanuaryOfNextYear = new Date(0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
    var fourthOfJanuaryOfThisYear = new Date(0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
    if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
    }
    else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
    }
    else {
        return year - 1;
    }
}
/**
 * @name startOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of an ISO week-numbering year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * const result = startOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */
function startOfISOWeekYear(dirtyDate) {
    requiredArgs(1, arguments);
    var year = getISOWeekYear(dirtyDate);
    var fourthOfJanuary = new Date(0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    var date = startOfISOWeek(fourthOfJanuary);
    return date;
}
var MILLISECONDS_IN_WEEK = 604800000;
/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the ISO week
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */
function getISOWeek(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a week is not constant
    // (e.g. it's different in the week of the daylight saving time clock shift)
    return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */
function getMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var month = date.getMonth();
    return month;
}
/**
 * @name getQuarter
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the quarter
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which quarter is 2 July 2014?
 * const result = getQuarter(new Date(2014, 6, 2))
 * //=> 3
 */
function getQuarter(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var quarter = Math.floor(date.getMonth() / 3) + 1;
    return quarter;
}
/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */
function getYear(dirtyDate) {
    requiredArgs(1, arguments);
    return toDate(dirtyDate).getFullYear();
}
/**
 * @name getTime
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the timestamp
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */
function getTime(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var timestamp = date.getTime();
    return timestamp;
}
/**
 * @name setSeconds
 * @category Second Helpers
 * @summary Set the seconds to the given date.
 *
 * @description
 * Set the seconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} seconds - the seconds of the new date
 * @returns {Date} the new date with the seconds set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 45 seconds to 1 September 2014 11:30:40:
 * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:30:45
 */
function setSeconds(dirtyDate, dirtySeconds) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var seconds = toInteger(dirtySeconds);
    date.setSeconds(seconds);
    return date;
}
/**
 * @name setMinutes
 * @category Minute Helpers
 * @summary Set the minutes to the given date.
 *
 * @description
 * Set the minutes to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} minutes - the minutes of the new date
 * @returns {Date} the new date with the minutes set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 45 minutes to 1 September 2014 11:30:40:
 * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:45:40
 */
function setMinutes(dirtyDate, dirtyMinutes) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var minutes = toInteger(dirtyMinutes);
    date.setMinutes(minutes);
    return date;
}
/**
 * @name setHours
 * @category Hour Helpers
 * @summary Set the hours to the given date.
 *
 * @description
 * Set the hours to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} hours - the hours of the new date
 * @returns {Date} the new date with the hours set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set 4 hours to 1 September 2014 11:30:00:
 * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)
 * //=> Mon Sep 01 2014 04:30:00
 */
function setHours(dirtyDate, dirtyHours) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var hours = toInteger(dirtyHours);
    date.setHours(hours);
    return date;
}
/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */
function getDaysInMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getFullYear();
    var monthIndex = date.getMonth();
    var lastDayOfMonth = new Date(0);
    lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
    lastDayOfMonth.setHours(0, 0, 0, 0);
    return lastDayOfMonth.getDate();
}
/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} month - the month of the new date
 * @returns {Date} the new date with the month set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */
function setMonth(dirtyDate, dirtyMonth) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var month = toInteger(dirtyMonth);
    var year = date.getFullYear();
    var day = date.getDate();
    var dateWithDesiredMonth = new Date(0);
    dateWithDesiredMonth.setFullYear(year, month, 15);
    dateWithDesiredMonth.setHours(0, 0, 0, 0);
    var daysInMonth = getDaysInMonth(dateWithDesiredMonth);
    // Set the last day of the new month
    // if the original date was the last day of the longer month
    date.setMonth(month, Math.min(day, daysInMonth));
    return date;
}
/**
 * @name setQuarter
 * @category Quarter Helpers
 * @summary Set the year quarter to the given date.
 *
 * @description
 * Set the year quarter to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} quarter - the quarter of the new date
 * @returns {Date} the new date with the quarter set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set the 2nd quarter to 2 July 2014:
 * const result = setQuarter(new Date(2014, 6, 2), 2)
 * //=> Wed Apr 02 2014 00:00:00
 */
function setQuarter(dirtyDate, dirtyQuarter) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var quarter = toInteger(dirtyQuarter);
    var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
    var diff = quarter - oldQuarter;
    return setMonth(date, date.getMonth() + diff * 3);
}
/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */
function setYear(dirtyDate, dirtyYear) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var year = toInteger(dirtyYear);
    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
    if (isNaN(date.getTime())) {
        return new Date(NaN);
    }
    date.setFullYear(year);
    return date;
}
/**
 * @name min
 * @category Common Helpers
 * @summary Returns the earliest of the given dates.
 *
 * @description
 * Returns the earliest of the given dates.
 *
 * @param {Date[]|Number[]} datesArray - the dates to compare
 * @returns {Date} - the earliest of the dates
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which of these dates is the earliest?
 * const result = min([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Wed Feb 11 1987 00:00:00
 */
function min$3(dirtyDatesArray) {
    requiredArgs(1, arguments);
    var datesArray;
    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
    if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
        datesArray = dirtyDatesArray;
        // If `dirtyDatesArray` is Array-like Object, convert to Array.
    }
    else if (_typeof$2(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
    }
    else {
        // `dirtyDatesArray` is non-iterable, return Invalid Date
        return new Date(NaN);
    }
    var result;
    datesArray.forEach(function (dirtyDate) {
        var currentDate = toDate(dirtyDate);
        if (result === undefined || result > currentDate || isNaN(currentDate.getDate())) {
            result = currentDate;
        }
    });
    return result || new Date(NaN);
}
/**
 * @name max
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * @param {Date[]|Number[]} datesArray - the dates to compare
 * @returns {Date} the latest of the dates
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which of these dates is the latest?
 * const result = max([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Sun Jul 02 1995 00:00:00
 */
function max$3(dirtyDatesArray) {
    requiredArgs(1, arguments);
    var datesArray;
    // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
    if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {
        datesArray = dirtyDatesArray;
        // If `dirtyDatesArray` is Array-like Object, convert to Array.
    }
    else if (_typeof$2(dirtyDatesArray) === 'object' && dirtyDatesArray !== null) {
        datesArray = Array.prototype.slice.call(dirtyDatesArray);
    }
    else {
        // `dirtyDatesArray` is non-iterable, return Invalid Date
        return new Date(NaN);
    }
    var result;
    datesArray.forEach(function (dirtyDate) {
        var currentDate = toDate(dirtyDate);
        if (result === undefined || result < currentDate || isNaN(Number(currentDate))) {
            result = currentDate;
        }
    });
    return result || new Date(NaN);
}
/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */
function startOfDay(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setHours(0, 0, 0, 0);
    return date;
}
var MILLISECONDS_IN_DAY = 86400000;
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar days
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */
function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var startOfDayLeft = startOfDay(dirtyDateLeft);
    var startOfDayRight = startOfDay(dirtyDateRight);
    var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
    var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);
    // Round the number of days to the nearest integer
    // because the number of milliseconds in a day is not constant
    // (e.g. it's different in the day of the daylight saving time clock shift)
    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}
/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
    var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
}
/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar years
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */
function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    return dateLeft.getFullYear() - dateRight.getFullYear();
}
/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
    return date;
}
/**
 * @name startOfQuarter
 * @category Quarter Helpers
 * @summary Return the start of a year quarter for the given date.
 *
 * @description
 * Return the start of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a quarter
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a quarter for 2 September 2014 11:55:00:
 * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Jul 01 2014 00:00:00
 */
function startOfQuarter(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var currentMonth = date.getMonth();
    var month = currentMonth - currentMonth % 3;
    date.setMonth(month, 1);
    date.setHours(0, 0, 0, 0);
    return date;
}
/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */
function startOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var cleanDate = toDate(dirtyDate);
    var date = new Date(0);
    date.setFullYear(cleanDate.getFullYear(), 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
}
/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    date.setHours(23, 59, 59, 999);
    return date;
}
/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var month = date.getMonth();
    date.setFullYear(date.getFullYear(), month + 1, 0);
    date.setHours(23, 59, 59, 999);
    return date;
}
/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */
function endOfYear(dirtyDate) {
    requiredArgs(1, arguments);
    var date = toDate(dirtyDate);
    var year = date.getFullYear();
    date.setFullYear(year + 1, 0, 0);
    date.setHours(23, 59, 59, 999);
    return date;
}
/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Boolean} the dates are equal
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * const result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
function isEqual$1(dirtyLeftDate, dirtyRightDate) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyLeftDate);
    var dateRight = toDate(dirtyRightDate);
    return dateLeft.getTime() === dateRight.getTime();
}
/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day (and year and month)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 *
 * @example
 * // Are 4 September and 4 October in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 *
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */
function isSameDay(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
    var dateRightStartOfDay = startOfDay(dirtyDateRight);
    return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}
/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */
function isSameMonth(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}
/**
 * @name isSameYear
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same year
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */
function isSameYear(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeft = toDate(dirtyDateLeft);
    var dateRight = toDate(dirtyDateRight);
    return dateLeft.getFullYear() === dateRight.getFullYear();
}
/**
 * @name isSameQuarter
 * @category Quarter Helpers
 * @summary Are the given dates in the same quarter (and year)?
 *
 * @description
 * Are the given dates in the same quarter (and year)?
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same quarter (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 1 January 2014 and 8 March 2014 in the same quarter?
 * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))
 * //=> true
 *
 * @example
 * // Are 1 January 2014 and 1 January 2015 in the same quarter?
 * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))
 * //=> false
 */
function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
    requiredArgs(2, arguments);
    var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
    var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);
    return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
}
/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|Number} date - the date that should be after the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter(dirtyDate, dirtyDateToCompare) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var dateToCompare = toDate(dirtyDateToCompare);
    return date.getTime() > dateToCompare.getTime();
}
/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore(dirtyDate, dirtyDateToCompare) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var dateToCompare = toDate(dirtyDateToCompare);
    return date.getTime() < dateToCompare.getTime();
}
/**
 * @name isWithinInterval
 * @category Interval Helpers
 * @summary Is the given date within the interval?
 *
 * @description
 * Is the given date within the interval? (Including start and end.)
 *
 * @param {Date|Number} date - the date to check
 * @param {Interval} interval - the interval to check
 * @returns {Boolean} the date is within the interval
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // For the date within the interval:
 * isWithinInterval(new Date(2014, 0, 3), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> true
 *
 * @example
 * // For the date outside of the interval:
 * isWithinInterval(new Date(2014, 0, 10), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> false
 *
 * @example
 * // For date equal to interval start:
 * isWithinInterval(date, { start, end: date }) // => true
 *
 * @example
 * // For date equal to interval end:
 * isWithinInterval(date, { start: date, end }) // => true
 */
function isWithinInterval(dirtyDate, interval) {
    requiredArgs(2, arguments);
    var time = toDate(dirtyDate).getTime();
    var startTime = toDate(interval.start).getTime();
    var endTime = toDate(interval.end).getTime();
    // Throw an exception if start date is after end date or if any date is `Invalid Date`
    if (!(startTime <= endTime)) {
        throw new RangeError('Invalid interval');
    }
    return time >= startTime && time <= endTime;
}
function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length)
        len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
    return arr2;
}
function _unsupportedIterableToArray$2(o, minLen) {
    if (!o)
        return;
    if (typeof o === "string")
        return _arrayLikeToArray$2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
        n = o.constructor.name;
    if (n === "Map" || n === "Set")
        return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$2(o, minLen);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it)
                o = it;
            var i = 0;
            var F = function F() { };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length)
                        return {
                            done: true
                        };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it["return"] != null)
                    it["return"]();
            }
            finally {
                if (didErr)
                    throw err;
            }
        }
    };
}
function assign$1(target, object) {
    if (target == null) {
        throw new TypeError('assign requires that input parameter not be null or undefined');
    }
    for (var property in object) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            target[property] = object[property];
        }
    }
    return target;
}
function _assertThisInitialized$1(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function _setPrototypeOf$1(o, p) {
    _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf$1(o, p);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass)
        _setPrototypeOf$1(subClass, superClass);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
    if (Reflect.construct.sham)
        return false;
    if (typeof Proxy === "function")
        return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
        return true;
    }
    catch (e) {
        return false;
    }
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
        return call;
    }
    else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized$1(self);
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        }
        else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _toPrimitive(input, hint) {
    if (_typeof$2(input) !== "object" || input === null)
        return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof$2(res) !== "object")
            return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof$2(key) === "symbol" ? key : String(key);
}
function _defineProperties$1(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
            descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass$1(Constructor, protoProps, staticProps) {
    if (protoProps)
        _defineProperties$1(Constructor.prototype, protoProps);
    if (staticProps)
        _defineProperties$1(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _defineProperty$2(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = /*#__PURE__*/ function () {
    function Setter() {
        _classCallCheck$1(this, Setter);
        _defineProperty$2(this, "priority", void 0);
        _defineProperty$2(this, "subPriority", 0);
    }
    _createClass$1(Setter, [{
            key: "validate",
            value: function validate(_utcDate, _options) {
                return true;
            }
        }]);
    return Setter;
}();
var ValueSetter = /*#__PURE__*/ function (_Setter) {
    _inherits(ValueSetter, _Setter);
    var _super = _createSuper(ValueSetter);
    function ValueSetter(value, validateValue, setValue, priority, subPriority) {
        var _this;
        _classCallCheck$1(this, ValueSetter);
        _this = _super.call(this);
        _this.value = value;
        _this.validateValue = validateValue;
        _this.setValue = setValue;
        _this.priority = priority;
        if (subPriority) {
            _this.subPriority = subPriority;
        }
        return _this;
    }
    _createClass$1(ValueSetter, [{
            key: "validate",
            value: function validate(utcDate, options) {
                return this.validateValue(utcDate, this.value, options);
            }
        }, {
            key: "set",
            value: function set(utcDate, flags, options) {
                return this.setValue(utcDate, flags, this.value, options);
            }
        }]);
    return ValueSetter;
}(Setter);
var DateToSystemTimezoneSetter = /*#__PURE__*/ function (_Setter2) {
    _inherits(DateToSystemTimezoneSetter, _Setter2);
    var _super2 = _createSuper(DateToSystemTimezoneSetter);
    function DateToSystemTimezoneSetter() {
        var _this2;
        _classCallCheck$1(this, DateToSystemTimezoneSetter);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this2), "priority", TIMEZONE_UNIT_PRIORITY);
        _defineProperty$2(_assertThisInitialized$1(_this2), "subPriority", -1);
        return _this2;
    }
    _createClass$1(DateToSystemTimezoneSetter, [{
            key: "set",
            value: function set(date, flags) {
                if (flags.timestampIsSet) {
                    return date;
                }
                var convertedDate = new Date(0);
                convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
                convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
                return convertedDate;
            }
        }]);
    return DateToSystemTimezoneSetter;
}(Setter);
var Parser$1 = /*#__PURE__*/ function () {
    function Parser() {
        _classCallCheck$1(this, Parser);
        _defineProperty$2(this, "incompatibleTokens", void 0);
        _defineProperty$2(this, "priority", void 0);
        _defineProperty$2(this, "subPriority", void 0);
    }
    _createClass$1(Parser, [{
            key: "run",
            value: function run(dateString, token, match, options) {
                var result = this.parse(dateString, token, match, options);
                if (!result) {
                    return null;
                }
                return {
                    setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
                    rest: result.rest
                };
            }
        }, {
            key: "validate",
            value: function validate(_utcDate, _value, _options) {
                return true;
            }
        }]);
    return Parser;
}();
var EraParser = /*#__PURE__*/ function (_Parser) {
    _inherits(EraParser, _Parser);
    var _super = _createSuper(EraParser);
    function EraParser() {
        var _this;
        _classCallCheck$1(this, EraParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 140);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['R', 'u', 't', 'T']);
        return _this;
    }
    _createClass$1(EraParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // AD, BC
                    case 'G':
                    case 'GG':
                    case 'GGG':
                        return match.era(dateString, {
                            width: 'abbreviated'
                        }) || match.era(dateString, {
                            width: 'narrow'
                        });
                    // A, B
                    case 'GGGGG':
                        return match.era(dateString, {
                            width: 'narrow'
                        });
                    // Anno Domini, Before Christ
                    case 'GGGG':
                    default:
                        return match.era(dateString, {
                            width: 'wide'
                        }) || match.era(dateString, {
                            width: 'abbreviated'
                        }) || match.era(dateString, {
                            width: 'narrow'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                flags.era = value;
                date.setUTCFullYear(value, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return EraParser;
}(Parser$1);
/**
 * Days in 1 week.
 *
 * @name daysInWeek
 * @constant
 * @type {number}
 * @default
 */
/**
 * Milliseconds in 1 minute
 *
 * @name millisecondsInMinute
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInMinute = 60000;
/**
 * Milliseconds in 1 hour
 *
 * @name millisecondsInHour
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInHour = 3600000;
/**
 * Milliseconds in 1 second
 *
 * @name millisecondsInSecond
 * @constant
 * @type {number}
 * @default
 */
var millisecondsInSecond = 1000;
var numericPatterns = {
    month: /^(1[0-2]|0?\d)/,
    // 0 to 12
    date: /^(3[0-1]|[0-2]?\d)/,
    // 0 to 31
    dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
    // 0 to 366
    week: /^(5[0-3]|[0-4]?\d)/,
    // 0 to 53
    hour23h: /^(2[0-3]|[0-1]?\d)/,
    // 0 to 23
    hour24h: /^(2[0-4]|[0-1]?\d)/,
    // 0 to 24
    hour11h: /^(1[0-1]|0?\d)/,
    // 0 to 11
    hour12h: /^(1[0-2]|0?\d)/,
    // 0 to 12
    minute: /^[0-5]?\d/,
    // 0 to 59
    second: /^[0-5]?\d/,
    // 0 to 59
    singleDigit: /^\d/,
    // 0 to 9
    twoDigits: /^\d{1,2}/,
    // 0 to 99
    threeDigits: /^\d{1,3}/,
    // 0 to 999
    fourDigits: /^\d{1,4}/,
    // 0 to 9999
    anyDigitsSigned: /^-?\d+/,
    singleDigitSigned: /^-?\d/,
    // 0 to 9, -0 to -9
    twoDigitsSigned: /^-?\d{1,2}/,
    // 0 to 99, -0 to -99
    threeDigitsSigned: /^-?\d{1,3}/,
    // 0 to 999, -0 to -999
    fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
    basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
    basic: /^([+-])(\d{2})(\d{2})|Z/,
    basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
    extended: /^([+-])(\d{2}):(\d{2})|Z/,
    extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};
function mapValue(parseFnResult, mapFn) {
    if (!parseFnResult) {
        return parseFnResult;
    }
    return {
        value: mapFn(parseFnResult.value),
        rest: parseFnResult.rest
    };
}
function parseNumericPattern(pattern, dateString) {
    var matchResult = dateString.match(pattern);
    if (!matchResult) {
        return null;
    }
    return {
        value: parseInt(matchResult[0], 10),
        rest: dateString.slice(matchResult[0].length)
    };
}
function parseTimezonePattern(pattern, dateString) {
    var matchResult = dateString.match(pattern);
    if (!matchResult) {
        return null;
    }
    // Input is 'Z'
    if (matchResult[0] === 'Z') {
        return {
            value: 0,
            rest: dateString.slice(1)
        };
    }
    var sign = matchResult[1] === '+' ? 1 : -1;
    var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
    var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
    var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
    return {
        value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
        rest: dateString.slice(matchResult[0].length)
    };
}
function parseAnyDigitsSigned(dateString) {
    return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
    switch (n) {
        case 1:
            return parseNumericPattern(numericPatterns.singleDigit, dateString);
        case 2:
            return parseNumericPattern(numericPatterns.twoDigits, dateString);
        case 3:
            return parseNumericPattern(numericPatterns.threeDigits, dateString);
        case 4:
            return parseNumericPattern(numericPatterns.fourDigits, dateString);
        default:
            return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), dateString);
    }
}
function parseNDigitsSigned(n, dateString) {
    switch (n) {
        case 1:
            return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
        case 2:
            return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
        case 3:
            return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
        case 4:
            return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
        default:
            return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), dateString);
    }
}
function dayPeriodEnumToHours(dayPeriod) {
    switch (dayPeriod) {
        case 'morning':
            return 4;
        case 'evening':
            return 17;
        case 'pm':
        case 'noon':
        case 'afternoon':
            return 12;
        case 'am':
        case 'midnight':
        case 'night':
        default:
            return 0;
    }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
    var isCommonEra = currentYear > 0;
    // Absolute number of the current year:
    // 1 -> 1 AC
    // 0 -> 1 BC
    // -1 -> 2 BC
    var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
    var result;
    if (absCurrentYear <= 50) {
        result = twoDigitYear || 100;
    }
    else {
        var rangeEnd = absCurrentYear + 50;
        var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
        var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
    }
    return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex$1(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
var YearParser = /*#__PURE__*/ function (_Parser) {
    _inherits(YearParser, _Parser);
    var _super = _createSuper(YearParser);
    function YearParser() {
        var _this;
        _classCallCheck$1(this, YearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 130);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(YearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(year) {
                    return {
                        year: year,
                        isTwoDigitYear: token === 'yy'
                    };
                };
                switch (token) {
                    case 'y':
                        return mapValue(parseNDigits(4, dateString), valueCallback);
                    case 'yo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'year'
                        }), valueCallback);
                    default:
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value.isTwoDigitYear || value.year > 0;
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                var currentYear = date.getUTCFullYear();
                if (value.isTwoDigitYear) {
                    var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
                    date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
                    date.setUTCHours(0, 0, 0, 0);
                    return date;
                }
                var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
                date.setUTCFullYear(year, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return YearParser;
}(Parser$1);
// Local week-numbering year
var LocalWeekYearParser = /*#__PURE__*/ function (_Parser) {
    _inherits(LocalWeekYearParser, _Parser);
    var _super = _createSuper(LocalWeekYearParser);
    function LocalWeekYearParser() {
        var _this;
        _classCallCheck$1(this, LocalWeekYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 130);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
        return _this;
    }
    _createClass$1(LocalWeekYearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(year) {
                    return {
                        year: year,
                        isTwoDigitYear: token === 'YY'
                    };
                };
                switch (token) {
                    case 'Y':
                        return mapValue(parseNDigits(4, dateString), valueCallback);
                    case 'Yo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'year'
                        }), valueCallback);
                    default:
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value.isTwoDigitYear || value.year > 0;
            }
        }, {
            key: "set",
            value: function set(date, flags, value, options) {
                var currentYear = getUTCWeekYear(date, options);
                if (value.isTwoDigitYear) {
                    var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
                    date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
                    date.setUTCHours(0, 0, 0, 0);
                    return startOfUTCWeek(date, options);
                }
                var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
                date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
                date.setUTCHours(0, 0, 0, 0);
                return startOfUTCWeek(date, options);
            }
        }]);
    return LocalWeekYearParser;
}(Parser$1);
var ISOWeekYearParser = /*#__PURE__*/ function (_Parser) {
    _inherits(ISOWeekYearParser, _Parser);
    var _super = _createSuper(ISOWeekYearParser);
    function ISOWeekYearParser() {
        var _this;
        _classCallCheck$1(this, ISOWeekYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 130);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(ISOWeekYearParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                if (token === 'R') {
                    return parseNDigitsSigned(4, dateString);
                }
                return parseNDigitsSigned(token.length, dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                var firstWeekOfYear = new Date(0);
                firstWeekOfYear.setUTCFullYear(value, 0, 4);
                firstWeekOfYear.setUTCHours(0, 0, 0, 0);
                return startOfUTCISOWeek(firstWeekOfYear);
            }
        }]);
    return ISOWeekYearParser;
}(Parser$1);
var ExtendedYearParser = /*#__PURE__*/ function (_Parser) {
    _inherits(ExtendedYearParser, _Parser);
    var _super = _createSuper(ExtendedYearParser);
    function ExtendedYearParser() {
        var _this;
        _classCallCheck$1(this, ExtendedYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 130);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(ExtendedYearParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                if (token === 'u') {
                    return parseNDigitsSigned(4, dateString);
                }
                return parseNDigitsSigned(token.length, dateString);
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCFullYear(value, 0, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return ExtendedYearParser;
}(Parser$1);
var QuarterParser = /*#__PURE__*/ function (_Parser) {
    _inherits(QuarterParser, _Parser);
    var _super = _createSuper(QuarterParser);
    function QuarterParser() {
        var _this;
        _classCallCheck$1(this, QuarterParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 120);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(QuarterParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // 1, 2, 3, 4
                    case 'Q':
                    case 'QQ':
                        // 01, 02, 03, 04
                        return parseNDigits(token.length, dateString);
                    // 1st, 2nd, 3rd, 4th
                    case 'Qo':
                        return match.ordinalNumber(dateString, {
                            unit: 'quarter'
                        });
                    // Q1, Q2, Q3, Q4
                    case 'QQQ':
                        return match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                    case 'QQQQQ':
                        return match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // 1st quarter, 2nd quarter, ...
                    case 'QQQQ':
                    default:
                        return match.quarter(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 4;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth((value - 1) * 3, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return QuarterParser;
}(Parser$1);
var StandAloneQuarterParser = /*#__PURE__*/ function (_Parser) {
    _inherits(StandAloneQuarterParser, _Parser);
    var _super = _createSuper(StandAloneQuarterParser);
    function StandAloneQuarterParser() {
        var _this;
        _classCallCheck$1(this, StandAloneQuarterParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 120);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(StandAloneQuarterParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // 1, 2, 3, 4
                    case 'q':
                    case 'qq':
                        // 01, 02, 03, 04
                        return parseNDigits(token.length, dateString);
                    // 1st, 2nd, 3rd, 4th
                    case 'qo':
                        return match.ordinalNumber(dateString, {
                            unit: 'quarter'
                        });
                    // Q1, Q2, Q3, Q4
                    case 'qqq':
                        return match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // 1, 2, 3, 4 (narrow quarter; could be not numerical)
                    case 'qqqqq':
                        return match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // 1st quarter, 2nd quarter, ...
                    case 'qqqq':
                    default:
                        return match.quarter(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.quarter(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 4;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth((value - 1) * 3, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return StandAloneQuarterParser;
}(Parser$1);
var MonthParser = /*#__PURE__*/ function (_Parser) {
    _inherits(MonthParser, _Parser);
    var _super = _createSuper(MonthParser);
    function MonthParser() {
        var _this;
        _classCallCheck$1(this, MonthParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 110);
        return _this;
    }
    _createClass$1(MonthParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    return value - 1;
                };
                switch (token) {
                    // 1, 2, ..., 12
                    case 'M':
                        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
                    // 01, 02, ..., 12
                    case 'MM':
                        return mapValue(parseNDigits(2, dateString), valueCallback);
                    // 1st, 2nd, ..., 12th
                    case 'Mo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'month'
                        }), valueCallback);
                    // Jan, Feb, ..., Dec
                    case 'MMM':
                        return match.month(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // J, F, ..., D
                    case 'MMMMM':
                        return match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // January, February, ..., December
                    case 'MMMM':
                    default:
                        return match.month(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(value, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return MonthParser;
}(Parser$1);
var StandAloneMonthParser = /*#__PURE__*/ function (_Parser) {
    _inherits(StandAloneMonthParser, _Parser);
    var _super = _createSuper(StandAloneMonthParser);
    function StandAloneMonthParser() {
        var _this;
        _classCallCheck$1(this, StandAloneMonthParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 110);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(StandAloneMonthParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    return value - 1;
                };
                switch (token) {
                    // 1, 2, ..., 12
                    case 'L':
                        return mapValue(parseNumericPattern(numericPatterns.month, dateString), valueCallback);
                    // 01, 02, ..., 12
                    case 'LL':
                        return mapValue(parseNDigits(2, dateString), valueCallback);
                    // 1st, 2nd, ..., 12th
                    case 'Lo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'month'
                        }), valueCallback);
                    // Jan, Feb, ..., Dec
                    case 'LLL':
                        return match.month(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // J, F, ..., D
                    case 'LLLLL':
                        return match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // January, February, ..., December
                    case 'LLLL':
                    default:
                        return match.month(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.month(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(value, 1);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return StandAloneMonthParser;
}(Parser$1);
function setUTCWeek(dirtyDate, dirtyWeek, options) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var week = toInteger(dirtyWeek);
    var diff = getUTCWeek(date, options) - week;
    date.setUTCDate(date.getUTCDate() - diff * 7);
    return date;
}
var LocalWeekParser = /*#__PURE__*/ function (_Parser) {
    _inherits(LocalWeekParser, _Parser);
    var _super = _createSuper(LocalWeekParser);
    function LocalWeekParser() {
        var _this;
        _classCallCheck$1(this, LocalWeekParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 100);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']);
        return _this;
    }
    _createClass$1(LocalWeekParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'w':
                        return parseNumericPattern(numericPatterns.week, dateString);
                    case 'wo':
                        return match.ordinalNumber(dateString, {
                            unit: 'week'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 53;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                return startOfUTCWeek(setUTCWeek(date, value, options), options);
            }
        }]);
    return LocalWeekParser;
}(Parser$1);
function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
    requiredArgs(2, arguments);
    var date = toDate(dirtyDate);
    var isoWeek = toInteger(dirtyISOWeek);
    var diff = getUTCISOWeek(date) - isoWeek;
    date.setUTCDate(date.getUTCDate() - diff * 7);
    return date;
}
var ISOWeekParser = /*#__PURE__*/ function (_Parser) {
    _inherits(ISOWeekParser, _Parser);
    var _super = _createSuper(ISOWeekParser);
    function ISOWeekParser() {
        var _this;
        _classCallCheck$1(this, ISOWeekParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 100);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(ISOWeekParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'I':
                        return parseNumericPattern(numericPatterns.week, dateString);
                    case 'Io':
                        return match.ordinalNumber(dateString, {
                            unit: 'week'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 53;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                return startOfUTCISOWeek(setUTCISOWeek(date, value));
            }
        }]);
    return ISOWeekParser;
}(Parser$1);
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
// Day of the month
var DateParser = /*#__PURE__*/ function (_Parser) {
    _inherits(DateParser, _Parser);
    var _super = _createSuper(DateParser);
    function DateParser() {
        var _this;
        _classCallCheck$1(this, DateParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 90);
        _defineProperty$2(_assertThisInitialized$1(_this), "subPriority", 1);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(DateParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'd':
                        return parseNumericPattern(numericPatterns.date, dateString);
                    case 'do':
                        return match.ordinalNumber(dateString, {
                            unit: 'date'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(date, value) {
                var year = date.getUTCFullYear();
                var isLeapYear = isLeapYearIndex$1(year);
                var month = date.getUTCMonth();
                if (isLeapYear) {
                    return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
                }
                else {
                    return value >= 1 && value <= DAYS_IN_MONTH[month];
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCDate(value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return DateParser;
}(Parser$1);
var DayOfYearParser = /*#__PURE__*/ function (_Parser) {
    _inherits(DayOfYearParser, _Parser);
    var _super = _createSuper(DayOfYearParser);
    function DayOfYearParser() {
        var _this;
        _classCallCheck$1(this, DayOfYearParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 90);
        _defineProperty$2(_assertThisInitialized$1(_this), "subpriority", 1);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(DayOfYearParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'D':
                    case 'DD':
                        return parseNumericPattern(numericPatterns.dayOfYear, dateString);
                    case 'Do':
                        return match.ordinalNumber(dateString, {
                            unit: 'date'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(date, value) {
                var year = date.getUTCFullYear();
                var isLeapYear = isLeapYearIndex$1(year);
                if (isLeapYear) {
                    return value >= 1 && value <= 366;
                }
                else {
                    return value >= 1 && value <= 365;
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMonth(0, value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return DayOfYearParser;
}(Parser$1);
function setUTCDay(dirtyDate, dirtyDay, options) {
    var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(2, arguments);
    var defaultOptions = getDefaultOptions();
    var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    var date = toDate(dirtyDate);
    var day = toInteger(dirtyDay);
    var currentDay = date.getUTCDay();
    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;
    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
}
var DayParser = /*#__PURE__*/ function (_Parser) {
    _inherits(DayParser, _Parser);
    var _super = _createSuper(DayParser);
    function DayParser() {
        var _this;
        _classCallCheck$1(this, DayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 90);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['D', 'i', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(DayParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    // Tue
                    case 'E':
                    case 'EE':
                    case 'EEE':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // T
                    case 'EEEEE':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tu
                    case 'EEEEEE':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tuesday
                    case 'EEEE':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = setUTCDay(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return DayParser;
}(Parser$1);
var LocalDayParser = /*#__PURE__*/ function (_Parser) {
    _inherits(LocalDayParser, _Parser);
    var _super = _createSuper(LocalDayParser);
    function LocalDayParser() {
        var _this;
        _classCallCheck$1(this, LocalDayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 90);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(LocalDayParser, [{
            key: "parse",
            value: function parse(dateString, token, match, options) {
                var valueCallback = function valueCallback(value) {
                    var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                    return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
                };
                switch (token) {
                    // 3
                    case 'e':
                    case 'ee':
                        // 03
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                    // 3rd
                    case 'eo':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'day'
                        }), valueCallback);
                    // Tue
                    case 'eee':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // T
                    case 'eeeee':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tu
                    case 'eeeeee':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    // Tuesday
                    case 'eeee':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = setUTCDay(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return LocalDayParser;
}(Parser$1);
var StandAloneLocalDayParser = /*#__PURE__*/ function (_Parser) {
    _inherits(StandAloneLocalDayParser, _Parser);
    var _super = _createSuper(StandAloneLocalDayParser);
    function StandAloneLocalDayParser() {
        var _this;
        _classCallCheck$1(this, StandAloneLocalDayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 90);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']);
        return _this;
    }
    _createClass$1(StandAloneLocalDayParser, [{
            key: "parse",
            value: function parse(dateString, token, match, options) {
                var valueCallback = function valueCallback(value) {
                    var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
                    return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
                };
                switch (token) {
                    // 3
                    case 'c':
                    case 'cc':
                        // 03
                        return mapValue(parseNDigits(token.length, dateString), valueCallback);
                    // 3rd
                    case 'co':
                        return mapValue(match.ordinalNumber(dateString, {
                            unit: 'day'
                        }), valueCallback);
                    // Tue
                    case 'ccc':
                        return match.day(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // T
                    case 'ccccc':
                        return match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // Tu
                    case 'cccccc':
                        return match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                    // Tuesday
                    case 'cccc':
                    default:
                        return match.day(dateString, {
                            width: 'wide',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'standalone'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'standalone'
                        });
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 6;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value, options) {
                date = setUTCDay(date, value, options);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return StandAloneLocalDayParser;
}(Parser$1);
function setUTCISODay(dirtyDate, dirtyDay) {
    requiredArgs(2, arguments);
    var day = toInteger(dirtyDay);
    if (day % 7 === 0) {
        day = day - 7;
    }
    var weekStartsOn = 1;
    var date = toDate(dirtyDate);
    var currentDay = date.getUTCDay();
    var remainder = day % 7;
    var dayIndex = (remainder + 7) % 7;
    var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
}
var ISODayParser = /*#__PURE__*/ function (_Parser) {
    _inherits(ISODayParser, _Parser);
    var _super = _createSuper(ISODayParser);
    function ISODayParser() {
        var _this;
        _classCallCheck$1(this, ISODayParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 90);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']);
        return _this;
    }
    _createClass$1(ISODayParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                var valueCallback = function valueCallback(value) {
                    if (value === 0) {
                        return 7;
                    }
                    return value;
                };
                switch (token) {
                    // 2
                    case 'i':
                    case 'ii':
                        // 02
                        return parseNDigits(token.length, dateString);
                    // 2nd
                    case 'io':
                        return match.ordinalNumber(dateString, {
                            unit: 'day'
                        });
                    // Tue
                    case 'iii':
                        return mapValue(match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // T
                    case 'iiiii':
                        return mapValue(match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // Tu
                    case 'iiiiii':
                        return mapValue(match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                    // Tuesday
                    case 'iiii':
                    default:
                        return mapValue(match.day(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'short',
                            context: 'formatting'
                        }) || match.day(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        }), valueCallback);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 7;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date = setUTCISODay(date, value);
                date.setUTCHours(0, 0, 0, 0);
                return date;
            }
        }]);
    return ISODayParser;
}(Parser$1);
var AMPMParser = /*#__PURE__*/ function (_Parser) {
    _inherits(AMPMParser, _Parser);
    var _super = _createSuper(AMPMParser);
    function AMPMParser() {
        var _this;
        _classCallCheck$1(this, AMPMParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 80);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['b', 'B', 'H', 'k', 't', 'T']);
        return _this;
    }
    _createClass$1(AMPMParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'a':
                    case 'aa':
                    case 'aaa':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'aaaaa':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'aaaa':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
                return date;
            }
        }]);
    return AMPMParser;
}(Parser$1);
var AMPMMidnightParser = /*#__PURE__*/ function (_Parser) {
    _inherits(AMPMMidnightParser, _Parser);
    var _super = _createSuper(AMPMMidnightParser);
    function AMPMMidnightParser() {
        var _this;
        _classCallCheck$1(this, AMPMMidnightParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 80);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['a', 'B', 'H', 'k', 't', 'T']);
        return _this;
    }
    _createClass$1(AMPMMidnightParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'b':
                    case 'bb':
                    case 'bbb':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'bbbbb':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'bbbb':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
                return date;
            }
        }]);
    return AMPMMidnightParser;
}(Parser$1);
var DayPeriodParser = /*#__PURE__*/ function (_Parser) {
    _inherits(DayPeriodParser, _Parser);
    var _super = _createSuper(DayPeriodParser);
    function DayPeriodParser() {
        var _this;
        _classCallCheck$1(this, DayPeriodParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 80);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['a', 'b', 't', 'T']);
        return _this;
    }
    _createClass$1(DayPeriodParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'B':
                    case 'BB':
                    case 'BBB':
                        return match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'BBBBB':
                        return match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                    case 'BBBB':
                    default:
                        return match.dayPeriod(dateString, {
                            width: 'wide',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'abbreviated',
                            context: 'formatting'
                        }) || match.dayPeriod(dateString, {
                            width: 'narrow',
                            context: 'formatting'
                        });
                }
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
                return date;
            }
        }]);
    return DayPeriodParser;
}(Parser$1);
var Hour1to12Parser = /*#__PURE__*/ function (_Parser) {
    _inherits(Hour1to12Parser, _Parser);
    var _super = _createSuper(Hour1to12Parser);
    function Hour1to12Parser() {
        var _this;
        _classCallCheck$1(this, Hour1to12Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 70);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['H', 'K', 'k', 't', 'T']);
        return _this;
    }
    _createClass$1(Hour1to12Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'h':
                        return parseNumericPattern(numericPatterns.hour12h, dateString);
                    case 'ho':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 12;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var isPM = date.getUTCHours() >= 12;
                if (isPM && value < 12) {
                    date.setUTCHours(value + 12, 0, 0, 0);
                }
                else if (!isPM && value === 12) {
                    date.setUTCHours(0, 0, 0, 0);
                }
                else {
                    date.setUTCHours(value, 0, 0, 0);
                }
                return date;
            }
        }]);
    return Hour1to12Parser;
}(Parser$1);
var Hour0to23Parser = /*#__PURE__*/ function (_Parser) {
    _inherits(Hour0to23Parser, _Parser);
    var _super = _createSuper(Hour0to23Parser);
    function Hour0to23Parser() {
        var _this;
        _classCallCheck$1(this, Hour0to23Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 70);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['a', 'b', 'h', 'K', 'k', 't', 'T']);
        return _this;
    }
    _createClass$1(Hour0to23Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'H':
                        return parseNumericPattern(numericPatterns.hour23h, dateString);
                    case 'Ho':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 23;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCHours(value, 0, 0, 0);
                return date;
            }
        }]);
    return Hour0to23Parser;
}(Parser$1);
var Hour0To11Parser = /*#__PURE__*/ function (_Parser) {
    _inherits(Hour0To11Parser, _Parser);
    var _super = _createSuper(Hour0To11Parser);
    function Hour0To11Parser() {
        var _this;
        _classCallCheck$1(this, Hour0To11Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 70);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['h', 'H', 'k', 't', 'T']);
        return _this;
    }
    _createClass$1(Hour0To11Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'K':
                        return parseNumericPattern(numericPatterns.hour11h, dateString);
                    case 'Ko':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 11;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var isPM = date.getUTCHours() >= 12;
                if (isPM && value < 12) {
                    date.setUTCHours(value + 12, 0, 0, 0);
                }
                else {
                    date.setUTCHours(value, 0, 0, 0);
                }
                return date;
            }
        }]);
    return Hour0To11Parser;
}(Parser$1);
var Hour1To24Parser = /*#__PURE__*/ function (_Parser) {
    _inherits(Hour1To24Parser, _Parser);
    var _super = _createSuper(Hour1To24Parser);
    function Hour1To24Parser() {
        var _this;
        _classCallCheck$1(this, Hour1To24Parser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 70);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['a', 'b', 'h', 'H', 'K', 't', 'T']);
        return _this;
    }
    _createClass$1(Hour1To24Parser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'k':
                        return parseNumericPattern(numericPatterns.hour24h, dateString);
                    case 'ko':
                        return match.ordinalNumber(dateString, {
                            unit: 'hour'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 1 && value <= 24;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                var hours = value <= 24 ? value % 24 : value;
                date.setUTCHours(hours, 0, 0, 0);
                return date;
            }
        }]);
    return Hour1To24Parser;
}(Parser$1);
var MinuteParser = /*#__PURE__*/ function (_Parser) {
    _inherits(MinuteParser, _Parser);
    var _super = _createSuper(MinuteParser);
    function MinuteParser() {
        var _this;
        _classCallCheck$1(this, MinuteParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 60);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
    }
    _createClass$1(MinuteParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 'm':
                        return parseNumericPattern(numericPatterns.minute, dateString);
                    case 'mo':
                        return match.ordinalNumber(dateString, {
                            unit: 'minute'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 59;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMinutes(value, 0, 0);
                return date;
            }
        }]);
    return MinuteParser;
}(Parser$1);
var SecondParser = /*#__PURE__*/ function (_Parser) {
    _inherits(SecondParser, _Parser);
    var _super = _createSuper(SecondParser);
    function SecondParser() {
        var _this;
        _classCallCheck$1(this, SecondParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 50);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
    }
    _createClass$1(SecondParser, [{
            key: "parse",
            value: function parse(dateString, token, match) {
                switch (token) {
                    case 's':
                        return parseNumericPattern(numericPatterns.second, dateString);
                    case 'so':
                        return match.ordinalNumber(dateString, {
                            unit: 'second'
                        });
                    default:
                        return parseNDigits(token.length, dateString);
                }
            }
        }, {
            key: "validate",
            value: function validate(_date, value) {
                return value >= 0 && value <= 59;
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCSeconds(value, 0);
                return date;
            }
        }]);
    return SecondParser;
}(Parser$1);
var FractionOfSecondParser = /*#__PURE__*/ function (_Parser) {
    _inherits(FractionOfSecondParser, _Parser);
    var _super = _createSuper(FractionOfSecondParser);
    function FractionOfSecondParser() {
        var _this;
        _classCallCheck$1(this, FractionOfSecondParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 30);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['t', 'T']);
        return _this;
    }
    _createClass$1(FractionOfSecondParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                var valueCallback = function valueCallback(value) {
                    return Math.floor(value * Math.pow(10, -token.length + 3));
                };
                return mapValue(parseNDigits(token.length, dateString), valueCallback);
            }
        }, {
            key: "set",
            value: function set(date, _flags, value) {
                date.setUTCMilliseconds(value);
                return date;
            }
        }]);
    return FractionOfSecondParser;
}(Parser$1);
var ISOTimezoneWithZParser = /*#__PURE__*/ function (_Parser) {
    _inherits(ISOTimezoneWithZParser, _Parser);
    var _super = _createSuper(ISOTimezoneWithZParser);
    function ISOTimezoneWithZParser() {
        var _this;
        _classCallCheck$1(this, ISOTimezoneWithZParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 10);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['t', 'T', 'x']);
        return _this;
    }
    _createClass$1(ISOTimezoneWithZParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                switch (token) {
                    case 'X':
                        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
                    case 'XX':
                        return parseTimezonePattern(timezonePatterns.basic, dateString);
                    case 'XXXX':
                        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
                    case 'XXXXX':
                        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
                    case 'XXX':
                    default:
                        return parseTimezonePattern(timezonePatterns.extended, dateString);
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                if (flags.timestampIsSet) {
                    return date;
                }
                return new Date(date.getTime() - value);
            }
        }]);
    return ISOTimezoneWithZParser;
}(Parser$1);
var ISOTimezoneParser = /*#__PURE__*/ function (_Parser) {
    _inherits(ISOTimezoneParser, _Parser);
    var _super = _createSuper(ISOTimezoneParser);
    function ISOTimezoneParser() {
        var _this;
        _classCallCheck$1(this, ISOTimezoneParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 10);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", ['t', 'T', 'X']);
        return _this;
    }
    _createClass$1(ISOTimezoneParser, [{
            key: "parse",
            value: function parse(dateString, token) {
                switch (token) {
                    case 'x':
                        return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, dateString);
                    case 'xx':
                        return parseTimezonePattern(timezonePatterns.basic, dateString);
                    case 'xxxx':
                        return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, dateString);
                    case 'xxxxx':
                        return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, dateString);
                    case 'xxx':
                    default:
                        return parseTimezonePattern(timezonePatterns.extended, dateString);
                }
            }
        }, {
            key: "set",
            value: function set(date, flags, value) {
                if (flags.timestampIsSet) {
                    return date;
                }
                return new Date(date.getTime() - value);
            }
        }]);
    return ISOTimezoneParser;
}(Parser$1);
var TimestampSecondsParser = /*#__PURE__*/ function (_Parser) {
    _inherits(TimestampSecondsParser, _Parser);
    var _super = _createSuper(TimestampSecondsParser);
    function TimestampSecondsParser() {
        var _this;
        _classCallCheck$1(this, TimestampSecondsParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 40);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", '*');
        return _this;
    }
    _createClass$1(TimestampSecondsParser, [{
            key: "parse",
            value: function parse(dateString) {
                return parseAnyDigitsSigned(dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                return [new Date(value * 1000), {
                        timestampIsSet: true
                    }];
            }
        }]);
    return TimestampSecondsParser;
}(Parser$1);
var TimestampMillisecondsParser = /*#__PURE__*/ function (_Parser) {
    _inherits(TimestampMillisecondsParser, _Parser);
    var _super = _createSuper(TimestampMillisecondsParser);
    function TimestampMillisecondsParser() {
        var _this;
        _classCallCheck$1(this, TimestampMillisecondsParser);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _defineProperty$2(_assertThisInitialized$1(_this), "priority", 20);
        _defineProperty$2(_assertThisInitialized$1(_this), "incompatibleTokens", '*');
        return _this;
    }
    _createClass$1(TimestampMillisecondsParser, [{
            key: "parse",
            value: function parse(dateString) {
                return parseAnyDigitsSigned(dateString);
            }
        }, {
            key: "set",
            value: function set(_date, _flags, value) {
                return [new Date(value), {
                        timestampIsSet: true
                    }];
            }
        }]);
    return TimestampMillisecondsParser;
}(Parser$1);
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */
var parsers = {
    G: new EraParser(),
    y: new YearParser(),
    Y: new LocalWeekYearParser(),
    R: new ISOWeekYearParser(),
    u: new ExtendedYearParser(),
    Q: new QuarterParser(),
    q: new StandAloneQuarterParser(),
    M: new MonthParser(),
    L: new StandAloneMonthParser(),
    w: new LocalWeekParser(),
    I: new ISOWeekParser(),
    d: new DateParser(),
    D: new DayOfYearParser(),
    E: new DayParser(),
    e: new LocalDayParser(),
    c: new StandAloneLocalDayParser(),
    i: new ISODayParser(),
    a: new AMPMParser(),
    b: new AMPMMidnightParser(),
    B: new DayPeriodParser(),
    h: new Hour1to12Parser(),
    H: new Hour0to23Parser(),
    K: new Hour0To11Parser(),
    k: new Hour1To24Parser(),
    m: new MinuteParser(),
    s: new SecondParser(),
    S: new FractionOfSecondParser(),
    X: new ISOTimezoneWithZParser(),
    x: new ISOTimezoneParser(),
    t: new TimestampSecondsParser(),
    T: new TimestampMillisecondsParser()
};
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */
function parse$3(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
    var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
    requiredArgs(3, arguments);
    var dateString = String(dirtyDateString);
    var formatString = String(dirtyFormatString);
    var defaultOptions = getDefaultOptions();
    var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale$1;
    if (!locale.match) {
        throw new RangeError('locale must contain match property');
    }
    var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
    // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
    }
    var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
    // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
    if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
    }
    if (formatString === '') {
        if (dateString === '') {
            return toDate(dirtyReferenceDate);
        }
        else {
            return new Date(NaN);
        }
    }
    var subFnOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale
    };
    // If timezone isn't specified, it will be set to the system timezone
    var setters = [new DateToSystemTimezoneSetter()];
    var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];
        if (firstCharacter in longFormatters$1) {
            var longFormatter = longFormatters$1[firstCharacter];
            return longFormatter(substring, locale.formatLong);
        }
        return substring;
    }).join('').match(formattingTokensRegExp);
    var usedTokens = [];
    var _iterator = _createForOfIteratorHelper(tokens), _step;
    try {
        var _loop = function _loop() {
            var token = _step.value;
            if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token)) {
                throwProtectedError(token, formatString, dirtyDateString);
            }
            if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
                throwProtectedError(token, formatString, dirtyDateString);
            }
            var firstCharacter = token[0];
            var parser = parsers[firstCharacter];
            if (parser) {
                var incompatibleTokens = parser.incompatibleTokens;
                if (Array.isArray(incompatibleTokens)) {
                    var incompatibleToken = usedTokens.find(function (usedToken) {
                        return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
                    });
                    if (incompatibleToken) {
                        throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
                    }
                }
                else if (parser.incompatibleTokens === '*' && usedTokens.length > 0) {
                    throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
                }
                usedTokens.push({
                    token: firstCharacter,
                    fullToken: token
                });
                var parseResult = parser.run(dateString, token, locale.match, subFnOptions);
                if (!parseResult) {
                    return {
                        v: new Date(NaN)
                    };
                }
                setters.push(parseResult.setter);
                dateString = parseResult.rest;
            }
            else {
                if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
                    throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
                }
                // Replace two single quote characters with one single quote character
                if (token === "''") {
                    token = "'";
                }
                else if (firstCharacter === "'") {
                    token = cleanEscapedString(token);
                }
                // Cut token from string, or, if string doesn't match the token, return Invalid Date
                if (dateString.indexOf(token) === 0) {
                    dateString = dateString.slice(token.length);
                }
                else {
                    return {
                        v: new Date(NaN)
                    };
                }
            }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _ret = _loop();
            if (_typeof$2(_ret) === "object")
                return _ret.v;
        }
        // Check if the remaining input contains something other than whitespace
    }
    catch (err) {
        _iterator.e(err);
    }
    finally {
        _iterator.f();
    }
    if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
        return new Date(NaN);
    }
    var uniquePrioritySetters = setters.map(function (setter) {
        return setter.priority;
    }).sort(function (a, b) {
        return b - a;
    }).filter(function (priority, index, array) {
        return array.indexOf(priority) === index;
    }).map(function (priority) {
        return setters.filter(function (setter) {
            return setter.priority === priority;
        }).sort(function (a, b) {
            return b.subPriority - a.subPriority;
        });
    }).map(function (setterArray) {
        return setterArray[0];
    });
    var date = toDate(dirtyReferenceDate);
    if (isNaN(date.getTime())) {
        return new Date(NaN);
    }
    // Convert the date in system timezone to the same date in UTC+00:00 timezone.
    var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));
    var flags = {};
    var _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters), _step2;
    try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var setter = _step2.value;
            if (!setter.validate(utcDate, subFnOptions)) {
                return new Date(NaN);
            }
            var result = setter.set(utcDate, flags, subFnOptions);
            // Result is tuple (date, flags)
            if (Array.isArray(result)) {
                utcDate = result[0];
                assign$1(flags, result[1]);
                // Result is date
            }
            else {
                utcDate = result;
            }
        }
    }
    catch (err) {
        _iterator2.e(err);
    }
    finally {
        _iterator2.f();
    }
    return utcDate;
}
function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}
/**
 * @name parseISO
 * @category Common Helpers
 * @summary Parse ISO string
 *
 * @description
 * Parse the given string in ISO 8601 format and return an instance of Date.
 *
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If the argument isn't a string, the function cannot parse the string or
 * the values are invalid, it returns Invalid Date.
 *
 * @param {String} argument - the value to convert
 * @param {Object} [options] - an object with options.
 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * const result = parseISO('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * const result = parseISO('+02014101', { additionalDigits: 1 })
 * //=> Fri Apr 11 2014 00:00:00
 */
function parseISO(argument, options) {
    var _options$additionalDi;
    requiredArgs(1, arguments);
    var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);
    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
        throw new RangeError('additionalDigits must be 0, 1 or 2');
    }
    if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
        return new Date(NaN);
    }
    var dateStrings = splitDateString(argument);
    var date;
    if (dateStrings.date) {
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
    }
    if (!date || isNaN(date.getTime())) {
        return new Date(NaN);
    }
    var timestamp = date.getTime();
    var time = 0;
    var offset;
    if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time)) {
            return new Date(NaN);
        }
    }
    if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) {
            return new Date(NaN);
        }
    }
    else {
        var dirtyDate = new Date(timestamp + time);
        // js parsed string assuming it's in UTC timezone
        // but we need it to be parsed in our timezone
        // so we use utc values to build date in our timezone.
        // Year values from 0 to 99 map to the years 1900 to 1999
        // so set year explicitly with setFullYear.
        var result = new Date(0);
        result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
        result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
        return result;
    }
    return new Date(timestamp + time + offset);
}
var patterns = {
    dateTimeDelimiter: /[T ]/,
    timeZoneDelimiter: /[Z ]/i,
    timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
    var dateStrings = {};
    var array = dateString.split(patterns.dateTimeDelimiter);
    var timeString;
    // The regex match should only return at maximum two array elements.
    // [date], [time], or [date, time].
    if (array.length > 2) {
        return dateStrings;
    }
    if (/:/.test(array[0])) {
        timeString = array[0];
    }
    else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
            dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
            timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
    }
    if (timeString) {
        var token = patterns.timezone.exec(timeString);
        if (token) {
            dateStrings.time = timeString.replace(token[1], '');
            dateStrings.timezone = token[1];
        }
        else {
            dateStrings.time = timeString;
        }
    }
    return dateStrings;
}
function parseYear(dateString, additionalDigits) {
    var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
    var captures = dateString.match(regex);
    // Invalid ISO-formatted year
    if (!captures)
        return {
            year: NaN,
            restDateString: ''
        };
    var year = captures[1] ? parseInt(captures[1]) : null;
    var century = captures[2] ? parseInt(captures[2]) : null;
    // either year or century is null, not both
    return {
        year: century === null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
    };
}
function parseDate(dateString, year) {
    // Invalid ISO-formatted year
    if (year === null)
        return new Date(NaN);
    var captures = dateString.match(dateRegex);
    // Invalid ISO-formatted string
    if (!captures)
        return new Date(NaN);
    var isWeekDate = !!captures[4];
    var dayOfYear = parseDateUnit(captures[1]);
    var month = parseDateUnit(captures[2]) - 1;
    var day = parseDateUnit(captures[3]);
    var week = parseDateUnit(captures[4]);
    var dayOfWeek = parseDateUnit(captures[5]) - 1;
    if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) {
            return new Date(NaN);
        }
        return dayOfISOWeekYear(year, week, dayOfWeek);
    }
    else {
        var date = new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
            return new Date(NaN);
        }
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
    }
}
function parseDateUnit(value) {
    return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
    var captures = timeString.match(timeRegex);
    if (!captures)
        return NaN; // Invalid ISO-formatted time
    var hours = parseTimeUnit(captures[1]);
    var minutes = parseTimeUnit(captures[2]);
    var seconds = parseTimeUnit(captures[3]);
    if (!validateTime(hours, minutes, seconds)) {
        return NaN;
    }
    return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;
}
function parseTimeUnit(value) {
    return value && parseFloat(value.replace(',', '.')) || 0;
}
function parseTimezone(timezoneString) {
    if (timezoneString === 'Z')
        return 0;
    var captures = timezoneString.match(timezoneRegex);
    if (!captures)
        return 0;
    var sign = captures[1] === '+' ? -1 : 1;
    var hours = parseInt(captures[2]);
    var minutes = captures[3] && parseInt(captures[3]) || 0;
    if (!validateTimezone(hours, minutes)) {
        return NaN;
    }
    return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
    var date = new Date(0);
    date.setUTCFullYear(isoWeekYear, 0, 4);
    var fourthOfJanuaryDay = date.getUTCDay() || 7;
    var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
}
// Validation functions
// February is null to handle the leap year (using ||)
var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
    return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
    return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
    return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
    if (hours === 24) {
        return minutes === 0 && seconds === 0;
    }
    return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
    return minutes >= 0 && minutes <= 59;
}
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _objectWithoutPropertiesLoose$3(source, excluded) {
    if (source == null)
        return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
            continue;
        target[key] = source[key];
    }
    return target;
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
} /**
 * Check whether some DOM node is our Component's node.
 */
function isNodeFound(current, componentNode, ignoreClass) {
    if (current === componentNode) {
        return true;
    } // SVG <use/> elements do not technically reside in the rendered DOM, so
    // they do not have classList directly, but they offer a link to their
    // corresponding element, which can have classList. This extra check is for
    // that case.
    // See: http://www.w3.org/TR/SVG11/struct.html#InterfaceSVGUseElement
    // Discussion: https://github.com/Pomax/react-onclickoutside/pull/17
    if (current.correspondingElement) {
        return current.correspondingElement.classList.contains(ignoreClass);
    }
    return current.classList.contains(ignoreClass);
}
/**
 * Try to find our node in a hierarchy of nodes, returning the document
 * node as highest node if our node is not found in the path up.
 */
function findHighest(current, componentNode, ignoreClass) {
    if (current === componentNode) {
        return true;
    } // If source=local then this event came from 'somewhere'
    // inside and should be ignored. We could handle this with
    // a layered approach, too, but that requires going back to
    // thinking in terms of Dom node nesting, running counter
    // to React's 'you shouldn't care about the DOM' philosophy.
    // Also cover shadowRoot node by checking current.host
    while (current.parentNode || current.host) {
        // Only check normal node without shadowRoot
        if (current.parentNode && isNodeFound(current, componentNode, ignoreClass)) {
            return true;
        }
        current = current.parentNode || current.host;
    }
    return current;
}
/**
 * Check if the browser scrollbar was clicked
 */
function clickedScrollbar(evt) {
    return document.documentElement.clientWidth <= evt.clientX || document.documentElement.clientHeight <= evt.clientY;
} // ideally will get replaced with external dep
// when rafrex/detect-passive-events#4 and rafrex/detect-passive-events#5 get merged in
var testPassiveEventSupport = function testPassiveEventSupport() {
    if (typeof window === 'undefined' || typeof window.addEventListener !== 'function') {
        return;
    }
    var passive = false;
    var options = Object.defineProperty({}, 'passive', {
        get: function get() {
            passive = true;
        }
    });
    var noop = function noop() { };
    window.addEventListener('testPassiveEventSupport', noop, options);
    window.removeEventListener('testPassiveEventSupport', noop, options);
    return passive;
};
function autoInc(seed) {
    if (seed === void 0) {
        seed = 0;
    }
    return function () {
        return ++seed;
    };
}
var uid = autoInc();
var passiveEventSupport;
var handlersMap = {};
var enabledInstances = {};
var touchEvents = ['touchstart', 'touchmove'];
var IGNORE_CLASS_NAME = 'ignore-react-onclickoutside';
/**
 * Options for addEventHandler and removeEventHandler
 */
function getEventHandlerOptions(instance, eventName) {
    var handlerOptions = {};
    var isTouchEvent = touchEvents.indexOf(eventName) !== -1;
    if (isTouchEvent && passiveEventSupport) {
        handlerOptions.passive = !instance.props.preventDefault;
    }
    return handlerOptions;
}
/**
 * This function generates the HOC function that you'll use
 * in order to impart onOutsideClick listening to an
 * arbitrary component. It gets called at the end of the
 * bootstrapping code to yield an instance of the
 * onClickOutsideHOC function defined inside setupHOC().
 */
function onClickOutsideHOC(WrappedComponent, config) {
    var _class, _temp;
    var componentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    return _temp = _class = /*#__PURE__*/ function (_Component) {
        _inheritsLoose(onClickOutside, _Component);
        function onClickOutside(props) {
            var _this;
            _this = _Component.call(this, props) || this;
            _this.__outsideClickHandler = function (event) {
                if (typeof _this.__clickOutsideHandlerProp === 'function') {
                    _this.__clickOutsideHandlerProp(event);
                    return;
                }
                var instance = _this.getInstance();
                if (typeof instance.props.handleClickOutside === 'function') {
                    instance.props.handleClickOutside(event);
                    return;
                }
                if (typeof instance.handleClickOutside === 'function') {
                    instance.handleClickOutside(event);
                    return;
                }
                throw new Error("WrappedComponent: " + componentName + " lacks a handleClickOutside(event) function for processing outside click events.");
            };
            _this.__getComponentNode = function () {
                var instance = _this.getInstance();
                if (config && typeof config.setClickOutsideRef === 'function') {
                    return config.setClickOutsideRef()(instance);
                }
                if (typeof instance.setClickOutsideRef === 'function') {
                    return instance.setClickOutsideRef();
                }
                return (0, react_dom_1.findDOMNode)(instance);
            };
            _this.enableOnClickOutside = function () {
                if (typeof document === 'undefined' || enabledInstances[_this._uid]) {
                    return;
                }
                if (typeof passiveEventSupport === 'undefined') {
                    passiveEventSupport = testPassiveEventSupport();
                }
                enabledInstances[_this._uid] = true;
                var events = _this.props.eventTypes;
                if (!events.forEach) {
                    events = [events];
                }
                handlersMap[_this._uid] = function (event) {
                    if (_this.componentNode === null)
                        return;
                    if (_this.props.preventDefault) {
                        event.preventDefault();
                    }
                    if (_this.props.stopPropagation) {
                        event.stopPropagation();
                    }
                    if (_this.props.excludeScrollbar && clickedScrollbar(event))
                        return;
                    var current = event.composed && event.composedPath && event.composedPath().shift() || event.target;
                    if (findHighest(current, _this.componentNode, _this.props.outsideClickIgnoreClass) !== document) {
                        return;
                    }
                    _this.__outsideClickHandler(event);
                };
                events.forEach(function (eventName) {
                    document.addEventListener(eventName, handlersMap[_this._uid], getEventHandlerOptions(_assertThisInitialized(_this), eventName));
                });
            };
            _this.disableOnClickOutside = function () {
                delete enabledInstances[_this._uid];
                var fn = handlersMap[_this._uid];
                if (fn && typeof document !== 'undefined') {
                    var events = _this.props.eventTypes;
                    if (!events.forEach) {
                        events = [events];
                    }
                    events.forEach(function (eventName) {
                        return document.removeEventListener(eventName, fn, getEventHandlerOptions(_assertThisInitialized(_this), eventName));
                    });
                    delete handlersMap[_this._uid];
                }
            };
            _this.getRef = function (ref) {
                return _this.instanceRef = ref;
            };
            _this._uid = uid();
            return _this;
        }
        /**
         * Access the WrappedComponent's instance.
         */
        var _proto = onClickOutside.prototype;
        _proto.getInstance = function getInstance() {
            if (WrappedComponent.prototype && !WrappedComponent.prototype.isReactComponent) {
                return this;
            }
            var ref = this.instanceRef;
            return ref.getInstance ? ref.getInstance() : ref;
        };
        /**
         * Add click listeners to the current document,
         * linked to this component's state.
         */
        _proto.componentDidMount = function componentDidMount() {
            // If we are in an environment without a DOM such
            // as shallow rendering or snapshots then we exit
            // early to prevent any unhandled errors being thrown.
            if (typeof document === 'undefined' || !document.createElement) {
                return;
            }
            var instance = this.getInstance();
            if (config && typeof config.handleClickOutside === 'function') {
                this.__clickOutsideHandlerProp = config.handleClickOutside(instance);
                if (typeof this.__clickOutsideHandlerProp !== 'function') {
                    throw new Error("WrappedComponent: " + componentName + " lacks a function for processing outside click events specified by the handleClickOutside config option.");
                }
            }
            this.componentNode = this.__getComponentNode(); // return early so we dont initiate onClickOutside
            if (this.props.disableOnClickOutside)
                return;
            this.enableOnClickOutside();
        };
        _proto.componentDidUpdate = function componentDidUpdate() {
            this.componentNode = this.__getComponentNode();
        };
        _proto.componentWillUnmount = function componentWillUnmount() {
            this.disableOnClickOutside();
        };
        /**
         * Pass-through render
         */
        _proto.render = function render() {
            // eslint-disable-next-line no-unused-vars
            var _this$props = this.props;
            _this$props.excludeScrollbar;
            var props = _objectWithoutPropertiesLoose$3(_this$props, ["excludeScrollbar"]);
            if (WrappedComponent.prototype && WrappedComponent.prototype.isReactComponent) {
                props.ref = this.getRef;
            }
            else {
                props.wrappedRef = this.getRef;
            }
            props.disableOnClickOutside = this.disableOnClickOutside;
            props.enableOnClickOutside = this.enableOnClickOutside;
            return (0, react_1.createElement)(WrappedComponent, props);
        };
        return onClickOutside;
    }(react_1.Component), _class.displayName = "OnClickOutside(" + componentName + ")", _class.defaultProps = {
        eventTypes: ['mousedown', 'touchstart'],
        excludeScrollbar: config && config.excludeScrollbar || false,
        outsideClickIgnoreClass: IGNORE_CLASS_NAME,
        preventDefault: false,
        stopPropagation: false
    }, _class.getClass = function () {
        return WrappedComponent.getClass ? WrappedComponent.getClass() : WrappedComponent;
    }, _temp;
}
var ManagerReferenceNodeContext = React$4.createContext();
var ManagerReferenceNodeSetterContext = React$4.createContext();
function Manager(_ref) {
    var children = _ref.children;
    var _React$useState = React$4.useState(null), referenceNode = _React$useState[0], setReferenceNode = _React$useState[1];
    var hasUnmounted = React$4.useRef(false);
    React$4.useEffect(function () {
        return function () {
            hasUnmounted.current = true;
        };
    }, []);
    var handleSetReferenceNode = React$4.useCallback(function (node) {
        if (!hasUnmounted.current) {
            setReferenceNode(node);
        }
    }, []);
    return /*#__PURE__*/ React$4.createElement(ManagerReferenceNodeContext.Provider, {
        value: referenceNode
    }, /*#__PURE__*/ React$4.createElement(ManagerReferenceNodeSetterContext.Provider, {
        value: handleSetReferenceNode
    }, children));
}
/**
 * Takes an argument and if it's an array, returns the first item in the array,
 * otherwise returns the argument. Used for Preact compatibility.
 */
var unwrapArray = function unwrapArray(arg) {
    return Array.isArray(arg) ? arg[0] : arg;
};
/**
 * Takes a maybe-undefined function and arbitrary args and invokes the function
 * only if it is defined.
 */
var safeInvoke = function safeInvoke(fn) {
    if (typeof fn === 'function') {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
        }
        return fn.apply(void 0, args);
    }
};
/**
 * Sets a ref using either a ref callback or a ref object
 */
var setRef = function setRef(ref, node) {
    // if its a function call it
    if (typeof ref === 'function') {
        return safeInvoke(ref, node);
    } // otherwise we should treat it as a ref object
    else if (ref != null) {
        ref.current = node;
    }
};
/**
 * Simple ponyfill for Object.fromEntries
 */
var fromEntries$1 = function fromEntries(entries) {
    return entries.reduce(function (acc, _ref) {
        var key = _ref[0], value = _ref[1];
        acc[key] = value;
        return acc;
    }, {});
};
/**
 * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
 */
var useIsomorphicLayoutEffect$1 = typeof window !== 'undefined' && window.document && window.document.createElement ? React$4.useLayoutEffect : React$4.useEffect;
var top$1 = 'top';
var bottom$1 = 'bottom';
var right$1 = 'right';
var left$1 = 'left';
var auto$1 = 'auto';
var basePlacements$1 = [top$1, bottom$1, right$1, left$1];
var start$1 = 'start';
var end$2 = 'end';
var clippingParents$1 = 'clippingParents';
var viewport$1 = 'viewport';
var popper$1 = 'popper';
var reference$1 = 'reference';
var variationPlacements$1 = /*#__PURE__*/ basePlacements$1.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start$1, placement + "-" + end$2]);
}, []);
var placements$1 = /*#__PURE__*/ [].concat(basePlacements$1, [auto$1]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start$1, placement + "-" + end$2]);
}, []); // modifiers that need to read the DOM
var beforeRead$1 = 'beforeRead';
var read$1 = 'read';
var afterRead$1 = 'afterRead'; // pure-logic modifiers
var beforeMain$1 = 'beforeMain';
var main$1 = 'main';
var afterMain$1 = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite$1 = 'beforeWrite';
var write$1 = 'write';
var afterWrite$1 = 'afterWrite';
var modifierPhases$1 = [beforeRead$1, read$1, afterRead$1, beforeMain$1, main$1, afterMain$1, beforeWrite$1, write$1, afterWrite$1];
function getNodeName$2(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
function getWindow$2(node) {
    if (node == null) {
        return window;
    }
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
function isElement$2(node) {
    var OwnElement = getWindow$2(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement$2(node) {
    var OwnElement = getWindow$2(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot$2(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
        return false;
    }
    var OwnElement = getWindow$2(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}
// and applies them to the HTMLElements such as popper and arrow
function applyStyles$2(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!isHTMLElement$2(element) || !getNodeName$2(element)) {
            return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
            var value = attributes[name];
            if (value === false) {
                element.removeAttribute(name);
            }
            else {
                element.setAttribute(name, value === true ? '' : value);
            }
        });
    });
}
function effect$5(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function () {
        Object.keys(state.elements).forEach(function (name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function (style, property) {
                style[property] = '';
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!isHTMLElement$2(element) || !getNodeName$2(element)) {
                return;
            }
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function (attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
var applyStyles$3 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles$2,
    effect: effect$5,
    requires: ['computeStyles']
};
function getBasePlacement$1(placement) {
    return placement.split('-')[0];
}
var max$2 = Math.max;
var min$2 = Math.min;
var round$2 = Math.round;
function getUAString$1() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function (item) {
            return item.brand + "/" + item.version;
        }).join(' ');
    }
    return navigator.userAgent;
}
function isLayoutViewport$1() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString$1());
}
function getBoundingClientRect$2(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
        includeScale = false;
    }
    if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement$2(element)) {
        scaleX = element.offsetWidth > 0 ? round$2(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round$2(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement$2(element) ? getWindow$2(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport$1() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}
// means it doesn't take into account transforms.
function getLayoutRect$1(element) {
    var clientRect = getBoundingClientRect$2(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
    }
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
function contains$1(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) {
        return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot$2(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) {
                return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        } while (next);
    } // Give up, the result is false
    return false;
}
function getComputedStyle$3(element) {
    return getWindow$2(element).getComputedStyle(element);
}
function isTableElement$1(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName$2(element)) >= 0;
}
function getDocumentElement$2(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement$2(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
        element.document) || window.document).documentElement;
}
function getParentNode$2(element) {
    if (getNodeName$2(element) === 'html') {
        return element;
    }
    return ( // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
    isShadowRoot$2(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement$2(element) // fallback
    );
}
function getTrueOffsetParent$1(element) {
    if (!isHTMLElement$2(element) || // https://github.com/popperjs/popper-core/issues/837
        getComputedStyle$3(element).position === 'fixed') {
        return null;
    }
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock$1(element) {
    var isFirefox = /firefox/i.test(getUAString$1());
    var isIE = /Trident/i.test(getUAString$1());
    if (isIE && isHTMLElement$2(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$3(element);
        if (elementCss.position === 'fixed') {
            return null;
        }
    }
    var currentNode = getParentNode$2(element);
    if (isShadowRoot$2(currentNode)) {
        currentNode = currentNode.host;
    }
    while (isHTMLElement$2(currentNode) && ['html', 'body'].indexOf(getNodeName$2(currentNode)) < 0) {
        var css = getComputedStyle$3(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
            return currentNode;
        }
        else {
            currentNode = currentNode.parentNode;
        }
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent$1(element) {
    var window = getWindow$2(element);
    var offsetParent = getTrueOffsetParent$1(element);
    while (offsetParent && isTableElement$1(offsetParent) && getComputedStyle$3(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent$1(offsetParent);
    }
    if (offsetParent && (getNodeName$2(offsetParent) === 'html' || getNodeName$2(offsetParent) === 'body' && getComputedStyle$3(offsetParent).position === 'static')) {
        return window;
    }
    return offsetParent || getContainingBlock$1(element) || window;
}
function getMainAxisFromPlacement$1(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}
function within$1(min, value, max) {
    return max$2(min, min$2(value, max));
}
function withinMaxClamp$1(min, value, max) {
    var v = within$1(min, value, max);
    return v > max ? max : v;
}
function getFreshSideObject$1() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
function mergePaddingObject$1(paddingObject) {
    return Object.assign({}, getFreshSideObject$1(), paddingObject);
}
function expandToHashMap$1(value, keys) {
    return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}
var toPaddingObject$1 = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return mergePaddingObject$1(typeof padding !== 'number' ? padding : expandToHashMap$1(padding, basePlacements$1));
};
function arrow$2(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement$1(state.placement);
    var axis = getMainAxisFromPlacement$1(basePlacement);
    var isVertical = [left$1, right$1].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) {
        return;
    }
    var paddingObject = toPaddingObject$1(options.padding, state);
    var arrowRect = getLayoutRect$1(arrowElement);
    var minProp = axis === 'y' ? top$1 : left$1;
    var maxProp = axis === 'y' ? bottom$1 : right$1;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent$1(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within$1(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect$4(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) {
        return;
    } // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
            return;
        }
    }
    if (!contains$1(state.elements.popper, arrowElement)) {
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
var arrow$3 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow$2,
    effect: effect$4,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
};
function getVariation$1(placement) {
    return placement.split('-')[1];
}
var unsetSides$1 = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR$1(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: round$2(x * dpr) / dpr || 0,
        y: round$2(y * dpr) / dpr || 0
    };
}
function mapToStyles$1(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left$1;
    var sideY = top$1;
    var win = window;
    if (adaptive) {
        var offsetParent = getOffsetParent$1(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === getWindow$2(popper)) {
            offsetParent = getDocumentElement$2(popper);
            if (getComputedStyle$3(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent = offsetParent;
        if (placement === top$1 || (placement === left$1 || placement === right$1) && variation === end$2) {
            sideY = bottom$1;
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
                offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left$1 || (placement === top$1 || placement === bottom$1) && variation === end$2) {
            sideX = right$1;
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
                offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides$1);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR$1({
        x: x,
        y: y
    }, getWindow$2(popper)) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles$2(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
        placement: getBasePlacement$1(state.placement),
        variation: getVariation$1(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles$1(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.popperOffsets,
            position: state.options.strategy,
            adaptive: adaptive,
            roundOffsets: roundOffsets
        })));
    }
    if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles$1(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.arrow,
            position: 'absolute',
            adaptive: false,
            roundOffsets: roundOffsets
        })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var computeStyles$3 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles$2,
    data: {}
};
var passive$1 = {
    passive: true
};
function effect$3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow$2(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
        scrollParents.forEach(function (scrollParent) {
            scrollParent.addEventListener('scroll', instance.update, passive$1);
        });
    }
    if (resize) {
        window.addEventListener('resize', instance.update, passive$1);
    }
    return function () {
        if (scroll) {
            scrollParents.forEach(function (scrollParent) {
                scrollParent.removeEventListener('scroll', instance.update, passive$1);
            });
        }
        if (resize) {
            window.removeEventListener('resize', instance.update, passive$1);
        }
    };
} // eslint-disable-next-line import/no-unused-modules
var eventListeners$1 = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() { },
    effect: effect$3,
    data: {}
};
var hash$4 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement$1(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$4[matched];
    });
}
var hash$3 = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement$1(placement) {
    return placement.replace(/start|end/g, function (matched) {
        return hash$3[matched];
    });
}
function getWindowScroll$1(node) {
    var win = getWindow$2(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
function getWindowScrollBarX$1(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect$2(getDocumentElement$2(element)).left + getWindowScroll$1(element).scrollLeft;
}
function getViewportRect$1(element, strategy) {
    var win = getWindow$2(element);
    var html = getDocumentElement$2(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport$1();
        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX$1(element),
        y: y
    };
}
// of the `<html>` and `<body>` rect bounds if horizontally scrollable
function getDocumentRect$1(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement$2(element);
    var winScroll = getWindowScroll$1(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max$2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max$2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX$1(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle$3(body || html).direction === 'rtl') {
        x += max$2(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
function isScrollParent$1(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$3(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent$2(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName$2(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
    }
    if (isHTMLElement$2(node) && isScrollParent$1(node)) {
        return node;
    }
    return getScrollParent$2(getParentNode$2(node));
}
/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/
function listScrollParents$1(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
        list = [];
    }
    var scrollParent = getScrollParent$2(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow$2(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent$1(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
        updatedList.concat(listScrollParents$1(getParentNode$2(target)));
}
function rectToClientRect$2(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
function getInnerBoundingClientRect$1(element, strategy) {
    var rect = getBoundingClientRect$2(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType$1(element, clippingParent, strategy) {
    return clippingParent === viewport$1 ? rectToClientRect$2(getViewportRect$1(element, strategy)) : isElement$2(clippingParent) ? getInnerBoundingClientRect$1(clippingParent, strategy) : rectToClientRect$2(getDocumentRect$1(getDocumentElement$2(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents$1(element) {
    var clippingParents = listScrollParents$1(getParentNode$2(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$3(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement$2(element) ? getOffsetParent$1(element) : element;
    if (!isElement$2(clipperElement)) {
        return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function (clippingParent) {
        return isElement$2(clippingParent) && contains$1(clippingParent, clipperElement) && getNodeName$2(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents
function getClippingRect$1(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents$1(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType$1(element, clippingParent, strategy);
        accRect.top = max$2(rect.top, accRect.top);
        accRect.right = min$2(rect.right, accRect.right);
        accRect.bottom = min$2(rect.bottom, accRect.bottom);
        accRect.left = max$2(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType$1(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
function computeOffsets$1(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement$1(placement) : null;
    var variation = placement ? getVariation$1(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
        case top$1:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case bottom$1:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case right$1:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case left$1:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement$1(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch (variation) {
            case start$1:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case end$2:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
        }
    }
    return offsets;
}
function detectOverflow$1(state, options) {
    if (options === void 0) {
        options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents$1 : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport$1 : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper$1 : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject$1(typeof padding !== 'number' ? padding : expandToHashMap$1(padding, basePlacements$1));
    var altContext = elementContext === popper$1 ? reference$1 : popper$1;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect$1(isElement$2(element) ? element : element.contextElement || getDocumentElement$2(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect$2(state.elements.reference);
    var popperOffsets = computeOffsets$1({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = rectToClientRect$2(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper$1 ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === popper$1 && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
            var multiply = [right$1, bottom$1].indexOf(key) >= 0 ? 1 : -1;
            var axis = [top$1, bottom$1].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
function computeAutoPlacement$1(state, options) {
    if (options === void 0) {
        options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements$1 : _options$allowedAutoP;
    var variation = getVariation$1(placement);
    var placements = variation ? flipVariations ? variationPlacements$1 : variationPlacements$1.filter(function (placement) {
        return getVariation$1(placement) === variation;
    }) : basePlacements$1;
    var allowedPlacements = placements.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow$1(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[getBasePlacement$1(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
    });
}
function getExpandedFallbackPlacements$1(placement) {
    if (getBasePlacement$1(placement) === auto$1) {
        return [];
    }
    var oppositePlacement = getOppositePlacement$1(placement);
    return [getOppositeVariationPlacement$1(placement), oppositePlacement, getOppositeVariationPlacement$1(oppositePlacement)];
}
function flip$2(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
        return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement$1(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement$1(preferredPlacement)] : getExpandedFallbackPlacements$1(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement$1(placement) === auto$1 ? computeAutoPlacement$1(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];
        var _basePlacement = getBasePlacement$1(placement);
        var isStartVariation = getVariation$1(placement) === start$1;
        var isVertical = [top$1, bottom$1].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow$1(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right$1 : left$1 : isStartVariation ? bottom$1 : top$1;
        if (referenceRect[len] > popperRect[len]) {
            mainVariationSide = getOppositePlacement$1(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement$1(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
            checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
            checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function (check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function (placement) {
                var checks = checksMap.get(placement);
                if (checks) {
                    return checks.slice(0, _i).every(function (check) {
                        return check;
                    });
                }
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
            var _ret = _loop(_i);
            if (_ret === "break")
                break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
var flip$3 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip$2,
    requiresIfExists: ['offset'],
    data: {
        _skip: false
    }
};
function getSideOffsets$1(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
        preventedOffsets = {
            x: 0,
            y: 0
        };
    }
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped$1(overflow) {
    return [top$1, right$1, bottom$1, left$1].some(function (side) {
        return overflow[side] >= 0;
    });
}
function hide$2(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow$1(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow$1(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets$1(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets$1(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped$1(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped$1(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
var hide$3 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide$2
};
function distanceAndSkiddingToXY$1(placement, rects, offset) {
    var basePlacement = getBasePlacement$1(placement);
    var invertDistance = [left$1, top$1].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left$1, right$1].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset$2(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements$1.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY$1(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var offset$3 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset$2
};
function popperOffsets$2(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets$1({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var popperOffsets$3 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets$2,
    data: {}
};
function getAltAxis$1(axis) {
    return axis === 'x' ? 'y' : 'x';
}
function preventOverflow$2(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow$1(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement$1(state.placement);
    var variation = getVariation$1(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement$1(basePlacement);
    var altAxis = getAltAxis$1(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) {
        return;
    }
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? top$1 : left$1;
        var altSide = mainAxis === 'y' ? bottom$1 : right$1;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start$1 ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start$1 ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect$1(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject$1();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = within$1(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent$1(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within$1(tether ? min$2(min, tetherMin) : min, offset, tether ? max$2(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? top$1 : left$1;
        var _altSide = mainAxis === 'x' ? bottom$1 : right$1;
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top$1, left$1].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp$1(_tetherMin, _offset, _tetherMax) : within$1(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var preventOverflow$3 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow$2,
    requiresIfExists: ['offset']
};
function getHTMLElementScroll$1(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
function getNodeScroll$1(node) {
    if (node === getWindow$2(node) || !isHTMLElement$2(node)) {
        return getWindowScroll$1(node);
    }
    else {
        return getHTMLElementScroll$1(node);
    }
}
function isElementScaled$1(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round$2(rect.width) / element.offsetWidth || 1;
    var scaleY = round$2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.
function getCompositeRect$1(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
        isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement$2(offsetParent);
    var offsetParentIsScaled = isHTMLElement$2(offsetParent) && isElementScaled$1(offsetParent);
    var documentElement = getDocumentElement$2(offsetParent);
    var rect = getBoundingClientRect$2(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName$2(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
            isScrollParent$1(documentElement)) {
            scroll = getNodeScroll$1(offsetParent);
        }
        if (isHTMLElement$2(offsetParent)) {
            offsets = getBoundingClientRect$2(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        }
        else if (documentElement) {
            offsets.x = getWindowScrollBarX$1(documentElement);
        }
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
function order$1(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) {
                    sort(depModifier);
                }
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
            // check for visited object
            sort(modifier);
        }
    });
    return result;
}
function orderModifiers$1(modifiers) {
    // order based on dependencies
    var orderedModifiers = order$1(modifiers); // order based on phase
    return modifierPhases$1.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
function debounce$1(fn) {
    var pending;
    return function () {
        if (!pending) {
            pending = new Promise(function (resolve) {
                Promise.resolve().then(function () {
                    pending = undefined;
                    resolve(fn());
                });
            });
        }
        return pending;
    };
}
function mergeByName$1(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function (key) {
        return merged[key];
    });
}
var DEFAULT_OPTIONS$1 = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements$1() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }
    return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator$1(generatorOptions) {
    if (generatorOptions === void 0) {
        generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) {
            options = defaultOptions;
        }
        var state = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: isElement$2(reference) ? listScrollParents$1(reference) : reference.contextElement ? listScrollParents$1(reference.contextElement) : [],
                    popper: listScrollParents$1(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = orderModifiers$1(mergeByName$1([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function (m) {
                    return m.enabled;
                });
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) {
                    return;
                }
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements$1(reference, popper)) {
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: getCompositeRect$1(reference, getOffsetParent$1(popper), state.options.strategy === 'fixed'),
                    popper: getLayoutRect$1(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function (modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                for (var index = 0; index < state.orderedModifiers.length; index++) {
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') {
                        state = fn({
                            state: state,
                            options: _options,
                            name: name,
                            instance: instance
                        }) || state;
                    }
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: debounce$1(function () {
                return new Promise(function (resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements$1(reference, popper)) {
            return instance;
        }
        instance.setOptions(options).then(function (state) {
            if (!isDestroyed && options.onFirstUpdate) {
                options.onFirstUpdate(state);
            }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function (_ref) {
                var name = _ref.name, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, effect = _ref.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() { };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function (fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var defaultModifiers$1 = [eventListeners$1, popperOffsets$3, computeStyles$3, applyStyles$3, offset$3, flip$3, preventOverflow$3, arrow$3, hide$3];
var createPopper$1 = /*#__PURE__*/ popperGenerator$1({
    defaultModifiers: defaultModifiers$1
}); // eslint-disable-next-line import/no-unused-modules
/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */
var hasElementType = typeof Element !== 'undefined';
var hasMap = typeof Map === 'function';
var hasSet = typeof Set === 'function';
var hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;
// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js
function equal(a, b) {
    // START: fast-deep-equal es6/index.js 3.1.3
    if (a === b)
        return true;
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        if (a.constructor !== b.constructor)
            return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
                return false;
            for (i = length; i-- !== 0;)
                if (!equal(a[i], b[i]))
                    return false;
            return true;
        }
        // START: Modifications:
        // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code
        //    to co-exist with es5.
        // 2. Replace `for of` with es5 compliant iteration using `for`.
        //    Basically, take:
        //
        //    ```js
        //    for (i of a.entries())
        //      if (!b.has(i[0])) return false;
        //    ```
        //
        //    ... and convert to:
        //
        //    ```js
        //    it = a.entries();
        //    while (!(i = it.next()).done)
        //      if (!b.has(i.value[0])) return false;
        //    ```
        //
        //    **Note**: `i` access switches to `i.value`.
        var it;
        if (hasMap && (a instanceof Map) && (b instanceof Map)) {
            if (a.size !== b.size)
                return false;
            it = a.entries();
            while (!(i = it.next()).done)
                if (!b.has(i.value[0]))
                    return false;
            it = a.entries();
            while (!(i = it.next()).done)
                if (!equal(i.value[1], b.get(i.value[0])))
                    return false;
            return true;
        }
        if (hasSet && (a instanceof Set) && (b instanceof Set)) {
            if (a.size !== b.size)
                return false;
            it = a.entries();
            while (!(i = it.next()).done)
                if (!b.has(i.value[0]))
                    return false;
            return true;
        }
        // END: Modifications
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length)
                return false;
            for (i = length; i-- !== 0;)
                if (a[i] !== b[i])
                    return false;
            return true;
        }
        if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
        // START: Modifications:
        // Apply guards for `Object.create(null)` handling. See:
        // - https://github.com/FormidableLabs/react-fast-compare/issues/64
        // - https://github.com/epoberezkin/fast-deep-equal/issues/49
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function')
            return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function')
            return a.toString() === b.toString();
        // END: Modifications
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
            return false;
        for (i = length; i-- !== 0;)
            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
                return false;
        // END: fast-deep-equal
        // START: react-fast-compare
        // custom handling for DOM elements
        if (hasElementType && a instanceof Element)
            return false;
        // custom handling for React/Preact
        for (i = length; i-- !== 0;) {
            if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {
                // React-specific: avoid traversing React elements' _owner
                // Preact-specific: avoid traversing Preact elements' __v and __o
                //    __v = $_original / $_vnode
                //    __o = $_owner
                // These properties contain circular references and are not needed when
                // comparing the actual elements (and not their owners)
                // .$$typeof and ._store on just reasonable markers of elements
                continue;
            }
            // all other properties should be traversed as usual
            if (!equal(a[keys[i]], b[keys[i]]))
                return false;
        }
        // END: react-fast-compare
        // START: fast-deep-equal
        return true;
    }
    return a !== a && b !== b;
}
// end fast-deep-equal
var reactFastCompare = function isEqual(a, b) {
    try {
        return equal(a, b);
    }
    catch (error) {
        if (((error.message || '').match(/stack|recursion/i))) {
            // warn on circular references, don't crash
            // browsers give this different errors name and messages:
            // chrome/safari: "RangeError", "Maximum call stack size exceeded"
            // firefox: "InternalError", too much recursion"
            // edge: "Error", "Out of stack space"
            console.warn('react-fast-compare cannot handle circular refs');
            return false;
        }
        // some other error. we should definitely know about these
        throw error;
    }
};
var EMPTY_MODIFIERS$2 = [];
var usePopper$1 = function usePopper(referenceElement, popperElement, options) {
    if (options === void 0) {
        options = {};
    }
    var prevOptions = React$4.useRef(null);
    var optionsWithDefaults = {
        onFirstUpdate: options.onFirstUpdate,
        placement: options.placement || 'bottom',
        strategy: options.strategy || 'absolute',
        modifiers: options.modifiers || EMPTY_MODIFIERS$2
    };
    var _React$useState = React$4.useState({
        styles: {
            popper: {
                position: optionsWithDefaults.strategy,
                left: '0',
                top: '0'
            },
            arrow: {
                position: 'absolute'
            }
        },
        attributes: {}
    }), state = _React$useState[0], setState = _React$useState[1];
    var updateStateModifier = React$4.useMemo(function () {
        return {
            name: 'updateState',
            enabled: true,
            phase: 'write',
            fn: function fn(_ref) {
                var state = _ref.state;
                var elements = Object.keys(state.elements);
                ReactDOM.flushSync(function () {
                    setState({
                        styles: fromEntries$1(elements.map(function (element) {
                            return [element, state.styles[element] || {}];
                        })),
                        attributes: fromEntries$1(elements.map(function (element) {
                            return [element, state.attributes[element]];
                        }))
                    });
                });
            },
            requires: ['computeStyles']
        };
    }, []);
    var popperOptions = React$4.useMemo(function () {
        var newOptions = {
            onFirstUpdate: optionsWithDefaults.onFirstUpdate,
            placement: optionsWithDefaults.placement,
            strategy: optionsWithDefaults.strategy,
            modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
                    name: 'applyStyles',
                    enabled: false
                }])
        };
        if (reactFastCompare(prevOptions.current, newOptions)) {
            return prevOptions.current || newOptions;
        }
        else {
            prevOptions.current = newOptions;
            return newOptions;
        }
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React$4.useRef();
    useIsomorphicLayoutEffect$1(function () {
        if (popperInstanceRef.current) {
            popperInstanceRef.current.setOptions(popperOptions);
        }
    }, [popperOptions]);
    useIsomorphicLayoutEffect$1(function () {
        if (referenceElement == null || popperElement == null) {
            return;
        }
        var createPopper = options.createPopper || createPopper$1;
        var popperInstance = createPopper(referenceElement, popperElement, popperOptions);
        popperInstanceRef.current = popperInstance;
        return function () {
            popperInstance.destroy();
            popperInstanceRef.current = null;
        };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
        state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
        styles: state.styles,
        attributes: state.attributes,
        update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
        forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
};
var NOOP = function NOOP() {
    return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE() {
    return Promise.resolve(null);
};
var EMPTY_MODIFIERS$1 = [];
function Popper(_ref) {
    var _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? 'bottom' : _ref$placement, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? 'absolute' : _ref$strategy, _ref$modifiers = _ref.modifiers, modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS$1 : _ref$modifiers, referenceElement = _ref.referenceElement, onFirstUpdate = _ref.onFirstUpdate, innerRef = _ref.innerRef, children = _ref.children;
    var referenceNode = React$4.useContext(ManagerReferenceNodeContext);
    var _React$useState = React$4.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
    var _React$useState2 = React$4.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
    React$4.useEffect(function () {
        setRef(innerRef, popperElement);
    }, [innerRef, popperElement]);
    var options = React$4.useMemo(function () {
        return {
            placement: placement,
            strategy: strategy,
            onFirstUpdate: onFirstUpdate,
            modifiers: [].concat(modifiers, [{
                    name: 'arrow',
                    enabled: arrowElement != null,
                    options: {
                        element: arrowElement
                    }
                }])
        };
    }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);
    var _usePopper = usePopper$1(referenceElement || referenceNode, popperElement, options), state = _usePopper.state, styles = _usePopper.styles, forceUpdate = _usePopper.forceUpdate, update = _usePopper.update;
    var childrenProps = React$4.useMemo(function () {
        return {
            ref: setPopperElement,
            style: styles.popper,
            placement: state ? state.placement : placement,
            hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
            isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
            arrowProps: {
                style: styles.arrow,
                ref: setArrowElement
            },
            forceUpdate: forceUpdate || NOOP,
            update: update || NOOP_PROMISE
        };
    }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);
    return unwrapArray(children)(childrenProps);
}
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var __DEV__ = process.env.NODE_ENV !== 'production';
var warning = function () { };
if (__DEV__) {
    var printWarning = function printWarning(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
            args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = 'Warning: ' +
            format.replace(/%s/g, function () {
                return args[argIndex++];
            });
        if (typeof console !== 'undefined') {
            console.error(message);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        }
        catch (x) { }
    };
    warning = function (condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
        }
        if (format === undefined) {
            throw new Error('`warning(condition, format, ...args)` requires a warning ' +
                'message argument');
        }
        if (!condition) {
            printWarning.apply(null, [format].concat(args));
        }
    };
}
var warning_1 = warning;
function Reference(_ref) {
    var children = _ref.children, innerRef = _ref.innerRef;
    var setReferenceNode = React$4.useContext(ManagerReferenceNodeSetterContext);
    var refHandler = React$4.useCallback(function (node) {
        setRef(innerRef, node);
        safeInvoke(setReferenceNode, node);
    }, [innerRef, setReferenceNode]); // ran on unmount
    // eslint-disable-next-line react-hooks/exhaustive-deps
    React$4.useEffect(function () {
        return function () {
            return setRef(innerRef, null);
        };
    }, []);
    React$4.useEffect(function () {
        warning_1(Boolean(setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');
    }, [setReferenceNode]);
    return unwrapArray(children)({
        ref: refHandler
    });
}
/**
 * @name set
 * @category Common Helpers
 * @summary Set date values to a given date.
 *
 * @description
 * Set date values to a given date.
 *
 * Sets time values to date from object `values`.
 * A value is not set if it is undefined or null or doesn't exist in `values`.
 *
 * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts
 * to use native `Date#setX` methods. If you use this function, you may not want to include the
 * other `setX` functions that date-fns provides if you are concerned about the bundle size.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Object} values - an object with options
 * @param {Number} [values.year] - the number of years to be set
 * @param {Number} [values.month] - the number of months to be set
 * @param {Number} [values.date] - the number of days to be set
 * @param {Number} [values.hours] - the number of hours to be set
 * @param {Number} [values.minutes] - the number of minutes to be set
 * @param {Number} [values.seconds] - the number of seconds to be set
 * @param {Number} [values.milliseconds] - the number of milliseconds to be set
 * @returns {Date} the new date with options set
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `values` must be an object
 *
 * @example
 * // Transform 1 September 2014 into 20 October 2015 in a single line:
 * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })
 * //=> Tue Oct 20 2015 00:00:00
 *
 * @example
 * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:
 * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })
 * //=> Mon Sep 01 2014 12:23:45
 */
function set(dirtyDate, values) {
    requiredArgs(2, arguments);
    if (_typeof$2(values) !== 'object' || values === null) {
        throw new RangeError('values parameter must be an object');
    }
    var date = toDate(dirtyDate);
    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
    if (isNaN(date.getTime())) {
        return new Date(NaN);
    }
    if (values.year != null) {
        date.setFullYear(values.year);
    }
    if (values.month != null) {
        date = setMonth(date, values.month);
    }
    if (values.date != null) {
        date.setDate(toInteger(values.date));
    }
    if (values.hours != null) {
        date.setHours(toInteger(values.hours));
    }
    if (values.minutes != null) {
        date.setMinutes(toInteger(values.minutes));
    }
    if (values.seconds != null) {
        date.setSeconds(toInteger(values.seconds));
    }
    if (values.milliseconds != null) {
        date.setMilliseconds(toInteger(values.milliseconds));
    }
    return date;
}
function le$2(e, t) { var r = Object.keys(e); if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter((function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable; }))), r.push.apply(r, n);
} return r; }
function de$2(e) { for (var t = 1; t < arguments.length; t++) {
    var r = null != arguments[t] ? arguments[t] : {};
    t % 2 ? le$2(Object(r), !0).forEach((function (t) { ye$2(e, t, r[t]); })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : le$2(Object(r)).forEach((function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t)); }));
} return e; }
function ue$1(e) { return ue$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e; } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }, ue$1(e); }
function he$1(e, t) { if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function"); }
function me$1(e, t) { for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, _e$1(n.key), n);
} }
function fe$1(e, t, r) { return t && me$1(e.prototype, t), r && me$1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function ye$2(e, t, r) { return (t = _e$1(t)) in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e; }
function ve$2() { return ve$2 = Object.assign ? Object.assign.bind() : function (e) { for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t];
    for (var n in r)
        Object.prototype.hasOwnProperty.call(r, n) && (e[n] = r[n]);
} return e; }, ve$2.apply(this, arguments); }
function De$2(e, t) { if ("function" != typeof t && null !== t)
    throw new TypeError("Super expression must either be null or a function"); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && ke(e, t); }
function ge$2(e) { return ge$2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (e) { return e.__proto__ || Object.getPrototypeOf(e); }, ge$2(e); }
function ke(e, t) { return ke = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, t) { return e.__proto__ = t, e; }, ke(e, t); }
function we$1(e) { if (void 0 === e)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function be$2(e) { var t = function () { if ("undefined" == typeof Reflect || !Reflect.construct)
    return !1; if (Reflect.construct.sham)
    return !1; if ("function" == typeof Proxy)
    return !0; try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0;
}
catch (e) {
    return !1;
} }(); return function () { var r, n = ge$2(e); if (t) {
    var o = ge$2(this).constructor;
    r = Reflect.construct(n, arguments, o);
}
else
    r = n.apply(this, arguments); return function (e, t) { if (t && ("object" == typeof t || "function" == typeof t))
    return t; if (void 0 !== t)
    throw new TypeError("Derived constructors may only return object or undefined"); return we$1(e); }(this, r); }; }
function Se$2(e) { return function (e) { if (Array.isArray(e))
    return Ce(e); }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"])
    return Array.from(e); }(e) || function (e, t) { if (!e)
    return; if ("string" == typeof e)
    return Ce(e, t); var r = Object.prototype.toString.call(e).slice(8, -1); "Object" === r && e.constructor && (r = e.constructor.name); if ("Map" === r || "Set" === r)
    return Array.from(e); if ("Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
    return Ce(e, t); }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }(); }
function Ce(e, t) { (null == t || t > e.length) && (t = e.length); for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r]; return n; }
function _e$1(e) { var t = function (e, t) { if ("object" != typeof e || null === e)
    return e; var r = e[Symbol.toPrimitive]; if (void 0 !== r) {
    var n = r.call(e, t || "default");
    if ("object" != typeof n)
        return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === t ? String : Number)(e); }(e, "string"); return "symbol" == typeof t ? t : String(t); }
var Me$2 = function (e, t) { switch (e) {
    case "P": return t.date({ width: "short" });
    case "PP": return t.date({ width: "medium" });
    case "PPP": return t.date({ width: "long" });
    default: return t.date({ width: "full" });
} }, Pe$2 = function (e, t) { switch (e) {
    case "p": return t.time({ width: "short" });
    case "pp": return t.time({ width: "medium" });
    case "ppp": return t.time({ width: "long" });
    default: return t.time({ width: "full" });
} }, Ee$1 = { p: Pe$2, P: function (e, t) { var r, n = e.match(/(P+)(p+)?/) || [], o = n[1], a = n[2]; if (!a)
        return Me$2(e, t); switch (o) {
        case "P":
            r = t.dateTime({ width: "short" });
            break;
        case "PP":
            r = t.dateTime({ width: "medium" });
            break;
        case "PPP":
            r = t.dateTime({ width: "long" });
            break;
        default: r = t.dateTime({ width: "full" });
    } return r.replace("{{date}}", Me$2(o, t)).replace("{{time}}", Pe$2(a, t)); } }, Ne$2 = 12, xe$2 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
function Ye$1(e) { var t = e ? "string" == typeof e || e instanceof String ? parseISO(e) : toDate(e) : new Date; return Te$1(t) ? t : null; }
function Te$1(e, t) { return t = t || new Date("1/1/1000"), isValid(e) && !isBefore(e, t); }
function Ie$2(e, t, r) { if ("en" === r)
    return format$1(e, t, { awareOfUnicodeTokens: !0 }); var n = Ge$1(r); return r && !n && console.warn('A locale object was not found for the provided string ["'.concat(r, '"].')), !n && $e$1() && Ge$1($e$1()) && (n = Ge$1($e$1())), format$1(e, t, { locale: n || null, awareOfUnicodeTokens: !0 }); }
function Oe(e, t) { var r = t.dateFormat, n = t.locale; return e && Ie$2(e, Array.isArray(r) ? r[0] : r, n) || ""; }
function Re$2(e, t) { var r = t.hour, n = void 0 === r ? 0 : r, o = t.minute, a = void 0 === o ? 0 : o, s = t.second; return setHours(setMinutes(setSeconds(e, void 0 === s ? 0 : s), a), n); }
function Le$1(e, t, r) { var n = Ge$1(t || $e$1()); return startOfWeek(e, { locale: n, weekStartsOn: r }); }
function Fe$1(e) { return startOfMonth(e); }
function Ae$1(e) { return startOfYear(e); }
function We$1(e) { return startOfQuarter(e); }
function Ke$1() { return startOfDay(Ye$1()); }
function Be$1(e, t) { return e && t ? isSameYear(e, t) : !e && !t; }
function Qe$1(e, t) { return e && t ? isSameMonth(e, t) : !e && !t; }
function He$2(e, t) { return e && t ? isSameQuarter(e, t) : !e && !t; }
function je$1(e, t) { return e && t ? isSameDay(e, t) : !e && !t; }
function Ve$1(e, t) { return e && t ? isEqual$1(e, t) : !e && !t; }
function qe$1(e, t, r) { var n, o = startOfDay(t), a = endOfDay(r); try {
    n = isWithinInterval(e, { start: o, end: a });
}
catch (e) {
    n = !1;
} return n; }
function Ue$1(e, t) { var r = "undefined" != typeof window ? window : globalThis; r.__localeData__ || (r.__localeData__ = {}), r.__localeData__[e] = t; }
function $e$1() { return ("undefined" != typeof window ? window : globalThis).__localeId__; }
function Ge$1(e) { if ("string" == typeof e) {
    var t = "undefined" != typeof window ? window : globalThis;
    return t.__localeData__ ? t.__localeData__[e] : null;
} return e; }
function Je$1(e, t) { return Ie$2(setMonth(Ye$1(), e), "LLLL", t); }
function Xe$1(e, t) { return Ie$2(setMonth(Ye$1(), e), "LLL", t); }
function Ze$1(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.maxDate, o = t.excludeDates, a = t.excludeDateIntervals, s = t.includeDates, i = t.includeDateIntervals, p = t.filterDate; return it$1(e, { minDate: r, maxDate: n }) || o && o.some((function (t) { return je$1(e, t); })) || a && a.some((function (t) { var r = t.start, n = t.end; return isWithinInterval(e, { start: r, end: n }); })) || s && !s.some((function (t) { return je$1(e, t); })) || i && !i.some((function (t) { var r = t.start, n = t.end; return isWithinInterval(e, { start: r, end: n }); })) || p && !p(Ye$1(e)) || !1; }
function et(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.excludeDates, n = t.excludeDateIntervals; return n && n.length > 0 ? n.some((function (t) { var r = t.start, n = t.end; return isWithinInterval(e, { start: r, end: n }); })) : r && r.some((function (t) { return je$1(e, t); })) || !1; }
function tt$2(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.maxDate, o = t.excludeDates, a = t.includeDates, s = t.filterDate; return it$1(e, { minDate: startOfMonth(r), maxDate: endOfMonth(n) }) || o && o.some((function (t) { return Qe$1(e, t); })) || a && !a.some((function (t) { return Qe$1(e, t); })) || s && !s(Ye$1(e)) || !1; }
function rt(e, t, r, n) { var o = getYear(e), a = getMonth(e), s = getYear(t), i = getMonth(t), p = getYear(n); return o === s && o === p ? a <= r && r <= i : o < s ? p === o && a <= r || p === s && i >= r || p < s && p > o : void 0; }
function nt(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.maxDate, o = t.excludeDates, a = t.includeDates, s = t.filterDate; return it$1(e, { minDate: r, maxDate: n }) || o && o.some((function (t) { return He$2(e, t); })) || a && !a.some((function (t) { return He$2(e, t); })) || s && !s(Ye$1(e)) || !1; }
function ot(e, t, r) { if (!isValid(t) || !isValid(r))
    return !1; var n = getYear(t), a = getYear(r); return n <= e && a >= e; }
function at(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.maxDate, o = t.excludeDates, a = t.includeDates, s = t.filterDate, i = new Date(e, 0, 1); return it$1(i, { minDate: startOfYear(r), maxDate: endOfYear(n) }) || o && o.some((function (e) { return Be$1(i, e); })) || a && !a.some((function (e) { return Be$1(i, e); })) || s && !s(Ye$1(i)) || !1; }
function st(e, t, r, n) { var o = getYear(e), a = getQuarter(e), s = getYear(t), i = getQuarter(t), p = getYear(n); return o === s && o === p ? a <= r && r <= i : o < s ? p === o && a <= r || p === s && i >= r || p < s && p > o : void 0; }
function it$1(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.maxDate; return r && differenceInCalendarDays(e, r) < 0 || n && differenceInCalendarDays(e, n) > 0; }
function pt(e, t) { return t.some((function (t) { return getHours(t) === getHours(e) && getMinutes(t) === getMinutes(e); })); }
function ct(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.excludeTimes, n = t.includeTimes, o = t.filterTime; return r && pt(e, r) || n && !pt(e, n) || o && !o(e) || !1; }
function lt(e, t) { var r = t.minTime, n = t.maxTime; if (!r || !n)
    throw new Error("Both minTime and maxTime props required"); var o, a = Ye$1(), s = setHours(setMinutes(a, getMinutes(e)), getHours(e)), i = setHours(setMinutes(a, getMinutes(r)), getHours(r)), p = setHours(setMinutes(a, getMinutes(n)), getHours(n)); try {
    o = !isWithinInterval(s, { start: i, end: p });
}
catch (e) {
    o = !1;
} return o; }
function dt(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.includeDates, o = subMonths(e, 1); return r && differenceInCalendarMonths(r, o) > 0 || n && n.every((function (e) { return differenceInCalendarMonths(e, o) > 0; })) || !1; }
function ut(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.maxDate, n = t.includeDates, o = addMonths(e, 1); return r && differenceInCalendarMonths(o, r) > 0 || n && n.every((function (e) { return differenceInCalendarMonths(o, e) > 0; })) || !1; }
function ht(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.includeDates, o = subYears(e, 1); return r && differenceInCalendarYears(r, o) > 0 || n && n.every((function (e) { return differenceInCalendarYears(e, o) > 0; })) || !1; }
function mt(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.maxDate, n = t.includeDates, o = addYears(e, 1); return r && differenceInCalendarYears(o, r) > 0 || n && n.every((function (e) { return differenceInCalendarYears(o, e) > 0; })) || !1; }
function ft(e) { var t = e.minDate, r = e.includeDates; if (r && t) {
    var n = r.filter((function (e) { return differenceInCalendarDays(e, t) >= 0; }));
    return min$3(n);
} return r ? min$3(r) : t; }
function yt(e) { var t = e.maxDate, r = e.includeDates; if (r && t) {
    var n = r.filter((function (e) { return differenceInCalendarDays(e, t) <= 0; }));
    return max$3(n);
} return r ? max$3(r) : t; }
function vt() { for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "react-datepicker__day--highlighted", r = new Map, o = 0, a = e.length; o < a; o++) {
    var s = e[o];
    if (isDate(s)) {
        var i = Ie$2(s, "MM.dd.yyyy"), p = r.get(i) || [];
        p.includes(t) || (p.push(t), r.set(i, p));
    }
    else if ("object" === ue$1(s)) {
        var c = Object.keys(s), l = c[0], d = s[c[0]];
        if ("string" == typeof l && d.constructor === Array)
            for (var u = 0, h = d.length; u < h; u++) {
                var m = Ie$2(d[u], "MM.dd.yyyy"), f = r.get(m) || [];
                f.includes(l) || (f.push(l), r.set(m, f));
            }
    }
} return r; }
function Dt() { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "react-datepicker__day--holidays", r = new Map; return e.forEach((function (e) { var o = e.date, a = e.holidayName; if (isDate(o)) {
    var s = Ie$2(o, "MM.dd.yyyy"), i = r.get(s) || {};
    if (!("className" in i) || i.className !== t || (p = i.holidayNames, c = [a], p.length !== c.length || !p.every((function (e, t) { return e === c[t]; })))) {
        var p, c;
        i.className = t;
        var l = i.holidayNames;
        i.holidayNames = l ? [].concat(Se$2(l), [a]) : [a], r.set(s, i);
    }
} })), r; }
function gt(e, t, r, n, o) { for (var a = o.length, p = [], c = 0; c < a; c++) {
    var l = addMinutes(addHours(e, getHours(o[c])), getMinutes(o[c])), d = addMinutes(e, (r + 1) * n);
    isAfter(l, t) && isBefore(l, d) && p.push(o[c]);
} return p; }
function kt(e) { return e < 10 ? "0".concat(e) : "".concat(e); }
function wt(e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Ne$2, r = Math.ceil(getYear(e) / t) * t; return { startPeriod: r - (t - 1), endPeriod: r }; }
function bt(e) { var t = e.getSeconds(), r = e.getMilliseconds(); return toDate(e.getTime() - 1e3 * t - r); }
function St(e, t, r, n) { for (var o = [], a = 0; a < 2 * t + 1; a++) {
    var s = e + t - a, i = !0;
    r && (i = getYear(r) <= s), n && i && (i = getYear(n) >= s), i && o.push(s);
} return o; }
var Ct = onClickOutsideHOC(function (n) { De$2(a, react_1.default.Component); var o = be$2(a); function a(r) { var n; he$1(this, a), ye$2(we$1(n = o.call(this, r)), "renderOptions", (function () { var t = n.props.year, r = n.state.yearsList.map((function (r) { return react_1.default.createElement("div", { className: t === r ? "react-datepicker__year-option react-datepicker__year-option--selected_year" : "react-datepicker__year-option", key: r, onClick: n.onChange.bind(we$1(n), r), "aria-selected": t === r ? "true" : void 0 }, t === r ? react_1.default.createElement("span", { className: "react-datepicker__year-option--selected" }, "✓") : "", r); })), o = n.props.minDate ? getYear(n.props.minDate) : null, a = n.props.maxDate ? getYear(n.props.maxDate) : null; return a && n.state.yearsList.find((function (e) { return e === a; })) || r.unshift(react_1.default.createElement("div", { className: "react-datepicker__year-option", key: "upcoming", onClick: n.incrementYears }, react_1.default.createElement("a", { className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-upcoming" }))), o && n.state.yearsList.find((function (e) { return e === o; })) || r.push(react_1.default.createElement("div", { className: "react-datepicker__year-option", key: "previous", onClick: n.decrementYears }, react_1.default.createElement("a", { className: "react-datepicker__navigation react-datepicker__navigation--years react-datepicker__navigation--years-previous" }))), r; })), ye$2(we$1(n), "onChange", (function (e) { n.props.onChange(e); })), ye$2(we$1(n), "handleClickOutside", (function () { n.props.onCancel(); })), ye$2(we$1(n), "shiftYears", (function (e) { var t = n.state.yearsList.map((function (t) { return t + e; })); n.setState({ yearsList: t }); })), ye$2(we$1(n), "incrementYears", (function () { return n.shiftYears(1); })), ye$2(we$1(n), "decrementYears", (function () { return n.shiftYears(-1); })); var s = r.yearDropdownItemNumber, i = r.scrollableYearDropdown, p = s || (i ? 10 : 5); return n.state = { yearsList: St(n.props.year, p, n.props.minDate, n.props.maxDate) }, n.dropdownRef = (0, react_1.createRef)(), n; } return fe$1(a, [{ key: "componentDidMount", value: function () { var e = this.dropdownRef.current; if (e) {
            var t = e.children ? Array.from(e.children) : null, r = t ? t.find((function (e) { return e.ariaSelected; })) : null;
            e.scrollTop = r ? r.offsetTop + (r.clientHeight - e.clientHeight) / 2 : (e.scrollHeight - e.clientHeight) / 2;
        } } }, { key: "render", value: function () { var t = r$4({ "react-datepicker__year-dropdown": !0, "react-datepicker__year-dropdown--scrollable": this.props.scrollableYearDropdown }); return react_1.default.createElement("div", { className: t, ref: this.dropdownRef }, this.renderOptions()); } }]), a; }()), _t$1 = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n() { var t; he$1(this, n); for (var o = arguments.length, a = new Array(o), s = 0; s < o; s++)
    a[s] = arguments[s]; return ye$2(we$1(t = r.call.apply(r, [this].concat(a))), "state", { dropdownVisible: !1 }), ye$2(we$1(t), "renderSelectOptions", (function () { for (var r = t.props.minDate ? getYear(t.props.minDate) : 1900, n = t.props.maxDate ? getYear(t.props.maxDate) : 2100, o = [], a = r; a <= n; a++)
    o.push(react_1.default.createElement("option", { key: a, value: a }, a)); return o; })), ye$2(we$1(t), "onSelectChange", (function (e) { t.onChange(e.target.value); })), ye$2(we$1(t), "renderSelectMode", (function () { return react_1.default.createElement("select", { value: t.props.year, className: "react-datepicker__year-select", onChange: t.onSelectChange }, t.renderSelectOptions()); })), ye$2(we$1(t), "renderReadView", (function (r) { return react_1.default.createElement("div", { key: "read", style: { visibility: r ? "visible" : "hidden" }, className: "react-datepicker__year-read-view", onClick: function (e) { return t.toggleDropdown(e); } }, react_1.default.createElement("span", { className: "react-datepicker__year-read-view--down-arrow" }), react_1.default.createElement("span", { className: "react-datepicker__year-read-view--selected-year" }, t.props.year)); })), ye$2(we$1(t), "renderDropdown", (function () { return react_1.default.createElement(Ct, { key: "dropdown", year: t.props.year, onChange: t.onChange, onCancel: t.toggleDropdown, minDate: t.props.minDate, maxDate: t.props.maxDate, scrollableYearDropdown: t.props.scrollableYearDropdown, yearDropdownItemNumber: t.props.yearDropdownItemNumber }); })), ye$2(we$1(t), "renderScrollMode", (function () { var e = t.state.dropdownVisible, r = [t.renderReadView(!e)]; return e && r.unshift(t.renderDropdown()), r; })), ye$2(we$1(t), "onChange", (function (e) { t.toggleDropdown(), e !== t.props.year && t.props.onChange(e); })), ye$2(we$1(t), "toggleDropdown", (function (e) { t.setState({ dropdownVisible: !t.state.dropdownVisible }, (function () { t.props.adjustDateOnChange && t.handleYearChange(t.props.date, e); })); })), ye$2(we$1(t), "handleYearChange", (function (e, r) { t.onSelect(e, r), t.setOpen(); })), ye$2(we$1(t), "onSelect", (function (e, r) { t.props.onSelect && t.props.onSelect(e, r); })), ye$2(we$1(t), "setOpen", (function () { t.props.setOpen && t.props.setOpen(!0); })), t; } return fe$1(n, [{ key: "render", value: function () { var t; switch (this.props.dropdownMode) {
            case "scroll":
                t = this.renderScrollMode();
                break;
            case "select": t = this.renderSelectMode();
        } return react_1.default.createElement("div", { className: "react-datepicker__year-dropdown-container react-datepicker__year-dropdown-container--".concat(this.props.dropdownMode) }, t); } }]), n; }(), Mt = onClickOutsideHOC(function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n() { var t; he$1(this, n); for (var o = arguments.length, a = new Array(o), s = 0; s < o; s++)
    a[s] = arguments[s]; return ye$2(we$1(t = r.call.apply(r, [this].concat(a))), "isSelectedMonth", (function (e) { return t.props.month === e; })), ye$2(we$1(t), "renderOptions", (function () { return t.props.monthNames.map((function (r, n) { return react_1.default.createElement("div", { className: t.isSelectedMonth(n) ? "react-datepicker__month-option react-datepicker__month-option--selected_month" : "react-datepicker__month-option", key: r, onClick: t.onChange.bind(we$1(t), n), "aria-selected": t.isSelectedMonth(n) ? "true" : void 0 }, t.isSelectedMonth(n) ? react_1.default.createElement("span", { className: "react-datepicker__month-option--selected" }, "✓") : "", r); })); })), ye$2(we$1(t), "onChange", (function (e) { return t.props.onChange(e); })), ye$2(we$1(t), "handleClickOutside", (function () { return t.props.onCancel(); })), t; } return fe$1(n, [{ key: "render", value: function () { return react_1.default.createElement("div", { className: "react-datepicker__month-dropdown" }, this.renderOptions()); } }]), n; }()), Pt = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n() { var t; he$1(this, n); for (var o = arguments.length, a = new Array(o), s = 0; s < o; s++)
    a[s] = arguments[s]; return ye$2(we$1(t = r.call.apply(r, [this].concat(a))), "state", { dropdownVisible: !1 }), ye$2(we$1(t), "renderSelectOptions", (function (t) { return t.map((function (t, r) { return react_1.default.createElement("option", { key: r, value: r }, t); })); })), ye$2(we$1(t), "renderSelectMode", (function (r) { return react_1.default.createElement("select", { value: t.props.month, className: "react-datepicker__month-select", onChange: function (e) { return t.onChange(e.target.value); } }, t.renderSelectOptions(r)); })), ye$2(we$1(t), "renderReadView", (function (r, n) { return react_1.default.createElement("div", { key: "read", style: { visibility: r ? "visible" : "hidden" }, className: "react-datepicker__month-read-view", onClick: t.toggleDropdown }, react_1.default.createElement("span", { className: "react-datepicker__month-read-view--down-arrow" }), react_1.default.createElement("span", { className: "react-datepicker__month-read-view--selected-month" }, n[t.props.month])); })), ye$2(we$1(t), "renderDropdown", (function (r) { return react_1.default.createElement(Mt, { key: "dropdown", month: t.props.month, monthNames: r, onChange: t.onChange, onCancel: t.toggleDropdown }); })), ye$2(we$1(t), "renderScrollMode", (function (e) { var r = t.state.dropdownVisible, n = [t.renderReadView(!r, e)]; return r && n.unshift(t.renderDropdown(e)), n; })), ye$2(we$1(t), "onChange", (function (e) { t.toggleDropdown(), e !== t.props.month && t.props.onChange(e); })), ye$2(we$1(t), "toggleDropdown", (function () { return t.setState({ dropdownVisible: !t.state.dropdownVisible }); })), t; } return fe$1(n, [{ key: "render", value: function () { var t, r = this, n = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(this.props.useShortMonthInDropdown ? function (e) { return Xe$1(e, r.props.locale); } : function (e) { return Je$1(e, r.props.locale); }); switch (this.props.dropdownMode) {
            case "scroll":
                t = this.renderScrollMode(n);
                break;
            case "select": t = this.renderSelectMode(n);
        } return react_1.default.createElement("div", { className: "react-datepicker__month-dropdown-container react-datepicker__month-dropdown-container--".concat(this.props.dropdownMode) }, t); } }]), n; }();
function Et(e, t) { for (var r = [], n = Fe$1(e), o = Fe$1(t); !isAfter(n, o);)
    r.push(Ye$1(n)), n = addMonths(n, 1); return r; }
var Nt = onClickOutsideHOC(function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o(t) { var r; return he$1(this, o), ye$2(we$1(r = n.call(this, t)), "renderOptions", (function () { return r.state.monthYearsList.map((function (t) { var n = getTime(t), o = Be$1(r.props.date, t) && Qe$1(r.props.date, t); return react_1.default.createElement("div", { className: o ? "react-datepicker__month-year-option--selected_month-year" : "react-datepicker__month-year-option", key: n, onClick: r.onChange.bind(we$1(r), n), "aria-selected": o ? "true" : void 0 }, o ? react_1.default.createElement("span", { className: "react-datepicker__month-year-option--selected" }, "✓") : "", Ie$2(t, r.props.dateFormat, r.props.locale)); })); })), ye$2(we$1(r), "onChange", (function (e) { return r.props.onChange(e); })), ye$2(we$1(r), "handleClickOutside", (function () { r.props.onCancel(); })), r.state = { monthYearsList: Et(r.props.minDate, r.props.maxDate) }, r; } return fe$1(o, [{ key: "render", value: function () { var t = r$4({ "react-datepicker__month-year-dropdown": !0, "react-datepicker__month-year-dropdown--scrollable": this.props.scrollableMonthYearDropdown }); return react_1.default.createElement("div", { className: t }, this.renderOptions()); } }]), o; }()), xt = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n() { var t; he$1(this, n); for (var o = arguments.length, a = new Array(o), s = 0; s < o; s++)
    a[s] = arguments[s]; return ye$2(we$1(t = r.call.apply(r, [this].concat(a))), "state", { dropdownVisible: !1 }), ye$2(we$1(t), "renderSelectOptions", (function () { for (var r = Fe$1(t.props.minDate), n = Fe$1(t.props.maxDate), o = []; !isAfter(r, n);) {
    var a = getTime(r);
    o.push(react_1.default.createElement("option", { key: a, value: a }, Ie$2(r, t.props.dateFormat, t.props.locale))), r = addMonths(r, 1);
} return o; })), ye$2(we$1(t), "onSelectChange", (function (e) { t.onChange(e.target.value); })), ye$2(we$1(t), "renderSelectMode", (function () { return react_1.default.createElement("select", { value: getTime(Fe$1(t.props.date)), className: "react-datepicker__month-year-select", onChange: t.onSelectChange }, t.renderSelectOptions()); })), ye$2(we$1(t), "renderReadView", (function (r) { var n = Ie$2(t.props.date, t.props.dateFormat, t.props.locale); return react_1.default.createElement("div", { key: "read", style: { visibility: r ? "visible" : "hidden" }, className: "react-datepicker__month-year-read-view", onClick: function (e) { return t.toggleDropdown(e); } }, react_1.default.createElement("span", { className: "react-datepicker__month-year-read-view--down-arrow" }), react_1.default.createElement("span", { className: "react-datepicker__month-year-read-view--selected-month-year" }, n)); })), ye$2(we$1(t), "renderDropdown", (function () { return react_1.default.createElement(Nt, { key: "dropdown", date: t.props.date, dateFormat: t.props.dateFormat, onChange: t.onChange, onCancel: t.toggleDropdown, minDate: t.props.minDate, maxDate: t.props.maxDate, scrollableMonthYearDropdown: t.props.scrollableMonthYearDropdown, locale: t.props.locale }); })), ye$2(we$1(t), "renderScrollMode", (function () { var e = t.state.dropdownVisible, r = [t.renderReadView(!e)]; return e && r.unshift(t.renderDropdown()), r; })), ye$2(we$1(t), "onChange", (function (e) { t.toggleDropdown(); var r = Ye$1(parseInt(e)); Be$1(t.props.date, r) && Qe$1(t.props.date, r) || t.props.onChange(r); })), ye$2(we$1(t), "toggleDropdown", (function () { return t.setState({ dropdownVisible: !t.state.dropdownVisible }); })), t; } return fe$1(n, [{ key: "render", value: function () { var t; switch (this.props.dropdownMode) {
            case "scroll":
                t = this.renderScrollMode();
                break;
            case "select": t = this.renderSelectMode();
        } return react_1.default.createElement("div", { className: "react-datepicker__month-year-dropdown-container react-datepicker__month-year-dropdown-container--".concat(this.props.dropdownMode) }, t); } }]), n; }(), Yt = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o() { var t; he$1(this, o); for (var a = arguments.length, s = new Array(a), i = 0; i < a; i++)
    s[i] = arguments[i]; return ye$2(we$1(t = n.call.apply(n, [this].concat(s))), "dayEl", react_1.default.createRef()), ye$2(we$1(t), "handleClick", (function (e) { !t.isDisabled() && t.props.onClick && t.props.onClick(e); })), ye$2(we$1(t), "handleMouseEnter", (function (e) { !t.isDisabled() && t.props.onMouseEnter && t.props.onMouseEnter(e); })), ye$2(we$1(t), "handleOnKeyDown", (function (e) { " " === e.key && (e.preventDefault(), e.key = "Enter"), t.props.handleOnKeyDown(e); })), ye$2(we$1(t), "isSameDay", (function (e) { return je$1(t.props.day, e); })), ye$2(we$1(t), "isKeyboardSelected", (function () { return !t.props.disabledKeyboardNavigation && !(t.isSameDay(t.props.selected) || t.isSameWeek(t.props.selected)) && (t.isSameDay(t.props.preSelection) || t.isSameWeek(t.props.preSelection)); })), ye$2(we$1(t), "isDisabled", (function () { return Ze$1(t.props.day, t.props); })), ye$2(we$1(t), "isExcluded", (function () { return et(t.props.day, t.props); })), ye$2(we$1(t), "isStartOfWeek", (function () { return je$1(t.props.day, Le$1(t.props.day, t.props.locale, t.props.calendarStartDay)); })), ye$2(we$1(t), "isSameWeek", (function (e) { return t.props.showWeekPicker && je$1(e, Le$1(t.props.day, t.props.locale, t.props.calendarStartDay)); })), ye$2(we$1(t), "getHighLightedClass", (function () { var e = t.props, r = e.day, n = e.highlightDates; if (!n)
    return !1; var o = Ie$2(r, "MM.dd.yyyy"); return n.get(o); })), ye$2(we$1(t), "getHolidaysClass", (function () { var e = t.props, r = e.day, n = e.holidays; if (!n)
    return !1; var o = Ie$2(r, "MM.dd.yyyy"); return n.has(o) ? [n.get(o).className] : void 0; })), ye$2(we$1(t), "isInRange", (function () { var e = t.props, r = e.day, n = e.startDate, o = e.endDate; return !(!n || !o) && qe$1(r, n, o); })), ye$2(we$1(t), "isInSelectingRange", (function () { var e, r = t.props, n = r.day, o = r.selectsStart, a = r.selectsEnd, s = r.selectsRange, i = r.selectsDisabledDaysInRange, p = r.startDate, c = r.endDate, l = null !== (e = t.props.selectingDate) && void 0 !== e ? e : t.props.preSelection; return !(!(o || a || s) || !l || !i && t.isDisabled()) && (o && c && (isBefore(l, c) || Ve$1(l, c)) ? qe$1(n, l, c) : (a && p && (isAfter(l, p) || Ve$1(l, p)) || !(!s || !p || c || !isAfter(l, p) && !Ve$1(l, p))) && qe$1(n, p, l)); })), ye$2(we$1(t), "isSelectingRangeStart", (function () { var e; if (!t.isInSelectingRange())
    return !1; var r = t.props, n = r.day, o = r.startDate, a = r.selectsStart, s = null !== (e = t.props.selectingDate) && void 0 !== e ? e : t.props.preSelection; return je$1(n, a ? s : o); })), ye$2(we$1(t), "isSelectingRangeEnd", (function () { var e; if (!t.isInSelectingRange())
    return !1; var r = t.props, n = r.day, o = r.endDate, a = r.selectsEnd, s = r.selectsRange, i = null !== (e = t.props.selectingDate) && void 0 !== e ? e : t.props.preSelection; return je$1(n, a || s ? i : o); })), ye$2(we$1(t), "isRangeStart", (function () { var e = t.props, r = e.day, n = e.startDate, o = e.endDate; return !(!n || !o) && je$1(n, r); })), ye$2(we$1(t), "isRangeEnd", (function () { var e = t.props, r = e.day, n = e.startDate, o = e.endDate; return !(!n || !o) && je$1(o, r); })), ye$2(we$1(t), "isWeekend", (function () { var e = getDay(t.props.day); return 0 === e || 6 === e; })), ye$2(we$1(t), "isAfterMonth", (function () { return void 0 !== t.props.month && (t.props.month + 1) % 12 === getMonth(t.props.day); })), ye$2(we$1(t), "isBeforeMonth", (function () { return void 0 !== t.props.month && (getMonth(t.props.day) + 1) % 12 === t.props.month; })), ye$2(we$1(t), "isCurrentDay", (function () { return t.isSameDay(Ye$1()); })), ye$2(we$1(t), "isSelected", (function () { return t.isSameDay(t.props.selected) || t.isSameWeek(t.props.selected); })), ye$2(we$1(t), "getClassNames", (function (e) { var n, o = t.props.dayClassName ? t.props.dayClassName(e) : void 0; return r$4("react-datepicker__day", o, "react-datepicker__day--" + Ie$2(t.props.day, "ddd", n), { "react-datepicker__day--disabled": t.isDisabled(), "react-datepicker__day--excluded": t.isExcluded(), "react-datepicker__day--selected": t.isSelected(), "react-datepicker__day--keyboard-selected": t.isKeyboardSelected(), "react-datepicker__day--range-start": t.isRangeStart(), "react-datepicker__day--range-end": t.isRangeEnd(), "react-datepicker__day--in-range": t.isInRange(), "react-datepicker__day--in-selecting-range": t.isInSelectingRange(), "react-datepicker__day--selecting-range-start": t.isSelectingRangeStart(), "react-datepicker__day--selecting-range-end": t.isSelectingRangeEnd(), "react-datepicker__day--today": t.isCurrentDay(), "react-datepicker__day--weekend": t.isWeekend(), "react-datepicker__day--outside-month": t.isAfterMonth() || t.isBeforeMonth() }, t.getHighLightedClass("react-datepicker__day--highlighted"), t.getHolidaysClass()); })), ye$2(we$1(t), "getAriaLabel", (function () { var e = t.props, r = e.day, n = e.ariaLabelPrefixWhenEnabled, o = void 0 === n ? "Choose" : n, a = e.ariaLabelPrefixWhenDisabled, s = void 0 === a ? "Not available" : a, i = t.isDisabled() || t.isExcluded() ? s : o; return "".concat(i, " ").concat(Ie$2(r, "PPPP", t.props.locale)); })), ye$2(we$1(t), "getTitle", (function () { var e = t.props, r = e.day, n = e.holidays, o = void 0 === n ? new Map : n, a = Ie$2(r, "MM.dd.yyyy"); return o.has(a) && o.get(a).holidayNames.length > 0 ? o.get(a).holidayNames.join(", ") : ""; })), ye$2(we$1(t), "getTabIndex", (function (e, r) { var n = e || t.props.selected, o = r || t.props.preSelection; return (!t.props.showWeekPicker || !t.props.showWeekNumber && t.isStartOfWeek()) && (t.isKeyboardSelected() || t.isSameDay(n) && je$1(o, n)) ? 0 : -1; })), ye$2(we$1(t), "handleFocusDay", (function () { var e, r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n = !1; 0 === t.getTabIndex() && !r.isInputFocused && t.isSameDay(t.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (n = !0), t.props.inline && !t.props.shouldFocusDayInline && (n = !1), t.props.containerRef && t.props.containerRef.current && t.props.containerRef.current.contains(document.activeElement) && document.activeElement.classList.contains("react-datepicker__day") && (n = !0), t.props.monthShowsDuplicateDaysEnd && t.isAfterMonth() && (n = !1), t.props.monthShowsDuplicateDaysStart && t.isBeforeMonth() && (n = !1)), n && (null === (e = t.dayEl.current) || void 0 === e || e.focus({ preventScroll: !0 })); })), ye$2(we$1(t), "renderDayContents", (function () { return t.props.monthShowsDuplicateDaysEnd && t.isAfterMonth() || t.props.monthShowsDuplicateDaysStart && t.isBeforeMonth() ? null : t.props.renderDayContents ? t.props.renderDayContents(getDate(t.props.day), t.props.day) : getDate(t.props.day); })), ye$2(we$1(t), "render", (function () { return react_1.default.createElement("div", { ref: t.dayEl, className: t.getClassNames(t.props.day), onKeyDown: t.handleOnKeyDown, onClick: t.handleClick, onMouseEnter: t.handleMouseEnter, tabIndex: t.getTabIndex(), "aria-label": t.getAriaLabel(), role: "option", title: t.getTitle(), "aria-disabled": t.isDisabled(), "aria-current": t.isCurrentDay() ? "date" : void 0, "aria-selected": t.isSelected() || t.isInRange() }, t.renderDayContents(), "" !== t.getTitle() && react_1.default.createElement("span", { className: "holiday-overlay" }, t.getTitle())); })), t; } return fe$1(o, [{ key: "componentDidMount", value: function () { this.handleFocusDay(); } }, { key: "componentDidUpdate", value: function (e) { this.handleFocusDay(e); } }]), o; }(), Tt = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o() { var t; he$1(this, o); for (var r = arguments.length, a = new Array(r), s = 0; s < r; s++)
    a[s] = arguments[s]; return ye$2(we$1(t = n.call.apply(n, [this].concat(a))), "weekNumberEl", react_1.default.createRef()), ye$2(we$1(t), "handleClick", (function (e) { t.props.onClick && t.props.onClick(e); })), ye$2(we$1(t), "handleOnKeyDown", (function (e) { " " === e.key && (e.preventDefault(), e.key = "Enter"), t.props.handleOnKeyDown(e); })), ye$2(we$1(t), "isKeyboardSelected", (function () { return !t.props.disabledKeyboardNavigation && !je$1(t.props.date, t.props.selected) && je$1(t.props.date, t.props.preSelection); })), ye$2(we$1(t), "getTabIndex", (function () { return t.props.showWeekPicker && t.props.showWeekNumber && (t.isKeyboardSelected() || je$1(t.props.date, t.props.selected) && je$1(t.props.preSelection, t.props.selected)) ? 0 : -1; })), ye$2(we$1(t), "handleFocusWeekNumber", (function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = !1; 0 === t.getTabIndex() && !e.isInputFocused && je$1(t.props.date, t.props.preSelection) && (document.activeElement && document.activeElement !== document.body || (r = !0), t.props.inline && !t.props.shouldFocusDayInline && (r = !1), t.props.containerRef && t.props.containerRef.current && t.props.containerRef.current.contains(document.activeElement) && document.activeElement && document.activeElement.classList.contains("react-datepicker__week-number") && (r = !0)), r && t.weekNumberEl.current && t.weekNumberEl.current.focus({ preventScroll: !0 }); })), t; } return fe$1(o, [{ key: "componentDidMount", value: function () { this.handleFocusWeekNumber(); } }, { key: "componentDidUpdate", value: function (e) { this.handleFocusWeekNumber(e); } }, { key: "render", value: function () { var t = this.props, n = t.weekNumber, o = t.ariaLabelPrefix, a = void 0 === o ? "week " : o, s = { "react-datepicker__week-number": !0, "react-datepicker__week-number--clickable": !!t.onClick, "react-datepicker__week-number--selected": je$1(this.props.date, this.props.selected), "react-datepicker__week-number--keyboard-selected": this.isKeyboardSelected() }; return react_1.default.createElement("div", { ref: this.weekNumberEl, className: r$4(s), "aria-label": "".concat(a, " ").concat(this.props.weekNumber), onClick: this.handleClick, onKeyDown: this.handleOnKeyDown, tabIndex: this.getTabIndex() }, n); } }], [{ key: "defaultProps", get: function () { return { ariaLabelPrefix: "week " }; } }]), o; }(), It = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o() { var t; he$1(this, o); for (var r = arguments.length, a = new Array(r), s = 0; s < r; s++)
    a[s] = arguments[s]; return ye$2(we$1(t = n.call.apply(n, [this].concat(a))), "handleDayClick", (function (e, r) { t.props.onDayClick && t.props.onDayClick(e, r); })), ye$2(we$1(t), "handleDayMouseEnter", (function (e) { t.props.onDayMouseEnter && t.props.onDayMouseEnter(e); })), ye$2(we$1(t), "handleWeekClick", (function (e, r, n) { if ("function" == typeof t.props.onWeekSelect && t.props.onWeekSelect(e, r, n), t.props.showWeekPicker) {
    var o = Le$1(e, t.props.locale, t.props.calendarStartDay);
    t.handleDayClick(o, n);
} t.props.shouldCloseOnSelect && t.props.setOpen(!1); })), ye$2(we$1(t), "formatWeekNumber", (function (e) { return t.props.formatWeekNumber ? t.props.formatWeekNumber(e) : function (e, t) { var r = t && Ge$1(t) || $e$1() && Ge$1($e$1()); return getISOWeek(e, r ? { locale: r } : null); }(e); })), ye$2(we$1(t), "renderDays", (function () { var r = Le$1(t.props.day, t.props.locale, t.props.calendarStartDay), n = [], o = t.formatWeekNumber(r); if (t.props.showWeekNumber) {
    var a = t.props.onWeekSelect || t.props.showWeekPicker ? t.handleWeekClick.bind(we$1(t), r, o) : void 0;
    n.push(react_1.default.createElement(Tt, { key: "W", weekNumber: o, date: r, onClick: a, selected: t.props.selected, preSelection: t.props.preSelection, ariaLabelPrefix: t.props.ariaLabelPrefix, showWeekPicker: t.props.showWeekPicker, showWeekNumber: t.props.showWeekNumber, disabledKeyboardNavigation: t.props.disabledKeyboardNavigation, handleOnKeyDown: t.props.handleOnKeyDown, isInputFocused: t.props.isInputFocused, containerRef: t.props.containerRef }));
} return n.concat([0, 1, 2, 3, 4, 5, 6].map((function (n) { var o = addDays(r, n); return react_1.default.createElement(Yt, { ariaLabelPrefixWhenEnabled: t.props.chooseDayAriaLabelPrefix, ariaLabelPrefixWhenDisabled: t.props.disabledDayAriaLabelPrefix, key: o.valueOf(), day: o, month: t.props.month, onClick: t.handleDayClick.bind(we$1(t), o), onMouseEnter: t.handleDayMouseEnter.bind(we$1(t), o), minDate: t.props.minDate, maxDate: t.props.maxDate, excludeDates: t.props.excludeDates, excludeDateIntervals: t.props.excludeDateIntervals, includeDates: t.props.includeDates, includeDateIntervals: t.props.includeDateIntervals, highlightDates: t.props.highlightDates, holidays: t.props.holidays, selectingDate: t.props.selectingDate, filterDate: t.props.filterDate, preSelection: t.props.preSelection, selected: t.props.selected, selectsStart: t.props.selectsStart, selectsEnd: t.props.selectsEnd, selectsRange: t.props.selectsRange, showWeekPicker: t.props.showWeekPicker, showWeekNumber: t.props.showWeekNumber, selectsDisabledDaysInRange: t.props.selectsDisabledDaysInRange, startDate: t.props.startDate, endDate: t.props.endDate, dayClassName: t.props.dayClassName, renderDayContents: t.props.renderDayContents, disabledKeyboardNavigation: t.props.disabledKeyboardNavigation, handleOnKeyDown: t.props.handleOnKeyDown, isInputFocused: t.props.isInputFocused, containerRef: t.props.containerRef, inline: t.props.inline, shouldFocusDayInline: t.props.shouldFocusDayInline, monthShowsDuplicateDaysEnd: t.props.monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: t.props.monthShowsDuplicateDaysStart, locale: t.props.locale }); }))); })), ye$2(we$1(t), "startOfWeek", (function () { return Le$1(t.props.day, t.props.locale, t.props.calendarStartDay); })), ye$2(we$1(t), "isKeyboardSelected", (function () { return !t.props.disabledKeyboardNavigation && !je$1(t.startOfWeek(), t.props.selected) && je$1(t.startOfWeek(), t.props.preSelection); })), t; } return fe$1(o, [{ key: "render", value: function () { var t = { "react-datepicker__week": !0, "react-datepicker__week--selected": je$1(this.startOfWeek(), this.props.selected), "react-datepicker__week--keyboard-selected": this.isKeyboardSelected() }; return react_1.default.createElement("div", { className: r$4(t) }, this.renderDays()); } }], [{ key: "defaultProps", get: function () { return { shouldCloseOnSelect: !0 }; } }]), o; }(), Ot = "two_columns", Rt = "three_columns", Lt = "four_columns", Ft = ye$2(ye$2(ye$2({}, Ot, { grid: [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]], verticalNavigationOffset: 2 }), Rt, { grid: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]], verticalNavigationOffset: 3 }), Lt, { grid: [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], verticalNavigationOffset: 4 });
function At(e, t) { return e ? Lt : t ? Ot : Rt; }
var Wt = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o() { var t; he$1(this, o); for (var a = arguments.length, s = new Array(a), i = 0; i < a; i++)
    s[i] = arguments[i]; return ye$2(we$1(t = n.call.apply(n, [this].concat(s))), "MONTH_REFS", Se$2(Array(12)).map((function () { return react_1.default.createRef(); }))), ye$2(we$1(t), "QUARTER_REFS", Se$2(Array(4)).map((function () { return react_1.default.createRef(); }))), ye$2(we$1(t), "isDisabled", (function (e) { return Ze$1(e, t.props); })), ye$2(we$1(t), "isExcluded", (function (e) { return et(e, t.props); })), ye$2(we$1(t), "handleDayClick", (function (e, r) { t.props.onDayClick && t.props.onDayClick(e, r, t.props.orderInDisplay); })), ye$2(we$1(t), "handleDayMouseEnter", (function (e) { t.props.onDayMouseEnter && t.props.onDayMouseEnter(e); })), ye$2(we$1(t), "handleMouseLeave", (function () { t.props.onMouseLeave && t.props.onMouseLeave(); })), ye$2(we$1(t), "isRangeStartMonth", (function (e) { var r = t.props, n = r.day, o = r.startDate, a = r.endDate; return !(!o || !a) && Qe$1(setMonth(n, e), o); })), ye$2(we$1(t), "isRangeStartQuarter", (function (e) { var r = t.props, n = r.day, o = r.startDate, a = r.endDate; return !(!o || !a) && He$2(setQuarter(n, e), o); })), ye$2(we$1(t), "isRangeEndMonth", (function (e) { var r = t.props, n = r.day, o = r.startDate, a = r.endDate; return !(!o || !a) && Qe$1(setMonth(n, e), a); })), ye$2(we$1(t), "isRangeEndQuarter", (function (e) { var r = t.props, n = r.day, o = r.startDate, a = r.endDate; return !(!o || !a) && He$2(setQuarter(n, e), a); })), ye$2(we$1(t), "isInSelectingRangeMonth", (function (e) { var r, n = t.props, o = n.day, a = n.selectsStart, s = n.selectsEnd, i = n.selectsRange, p = n.startDate, c = n.endDate, l = null !== (r = t.props.selectingDate) && void 0 !== r ? r : t.props.preSelection; return !(!(a || s || i) || !l) && (a && c ? rt(l, c, e, o) : (s && p || !(!i || !p || c)) && rt(p, l, e, o)); })), ye$2(we$1(t), "isSelectingMonthRangeStart", (function (e) { var r; if (!t.isInSelectingRangeMonth(e))
    return !1; var n = t.props, o = n.day, a = n.startDate, s = n.selectsStart, i = setMonth(o, e), p = null !== (r = t.props.selectingDate) && void 0 !== r ? r : t.props.preSelection; return Qe$1(i, s ? p : a); })), ye$2(we$1(t), "isSelectingMonthRangeEnd", (function (e) { var r; if (!t.isInSelectingRangeMonth(e))
    return !1; var n = t.props, o = n.day, a = n.endDate, s = n.selectsEnd, i = n.selectsRange, p = setMonth(o, e), c = null !== (r = t.props.selectingDate) && void 0 !== r ? r : t.props.preSelection; return Qe$1(p, s || i ? c : a); })), ye$2(we$1(t), "isInSelectingRangeQuarter", (function (e) { var r, n = t.props, o = n.day, a = n.selectsStart, s = n.selectsEnd, i = n.selectsRange, p = n.startDate, c = n.endDate, l = null !== (r = t.props.selectingDate) && void 0 !== r ? r : t.props.preSelection; return !(!(a || s || i) || !l) && (a && c ? st(l, c, e, o) : (s && p || !(!i || !p || c)) && st(p, l, e, o)); })), ye$2(we$1(t), "isWeekInMonth", (function (e) { var r = t.props.day, n = addDays(e, 6); return Qe$1(e, r) || Qe$1(n, r); })), ye$2(we$1(t), "isCurrentMonth", (function (e, t) { return getYear(e) === getYear(Ye$1()) && t === getMonth(Ye$1()); })), ye$2(we$1(t), "isCurrentQuarter", (function (e, t) { return getYear(e) === getYear(Ye$1()) && t === getQuarter(Ye$1()); })), ye$2(we$1(t), "isSelectedMonth", (function (e, t, r) { return getMonth(r) === t && getYear(e) === getYear(r); })), ye$2(we$1(t), "isSelectedQuarter", (function (e, t, r) { return getQuarter(e) === t && getYear(e) === getYear(r); })), ye$2(we$1(t), "renderWeeks", (function () { for (var r = [], n = t.props.fixedHeight, o = 0, a = !1, s = Le$1(Fe$1(t.props.day), t.props.locale, t.props.calendarStartDay); r.push(react_1.default.createElement(It, { ariaLabelPrefix: t.props.weekAriaLabelPrefix, chooseDayAriaLabelPrefix: t.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: t.props.disabledDayAriaLabelPrefix, key: o, day: s, month: getMonth(t.props.day), onDayClick: t.handleDayClick, onDayMouseEnter: t.handleDayMouseEnter, onWeekSelect: t.props.onWeekSelect, formatWeekNumber: t.props.formatWeekNumber, locale: t.props.locale, minDate: t.props.minDate, maxDate: t.props.maxDate, excludeDates: t.props.excludeDates, excludeDateIntervals: t.props.excludeDateIntervals, includeDates: t.props.includeDates, includeDateIntervals: t.props.includeDateIntervals, inline: t.props.inline, shouldFocusDayInline: t.props.shouldFocusDayInline, highlightDates: t.props.highlightDates, holidays: t.props.holidays, selectingDate: t.props.selectingDate, filterDate: t.props.filterDate, preSelection: t.props.preSelection, selected: t.props.selected, selectsStart: t.props.selectsStart, selectsEnd: t.props.selectsEnd, selectsRange: t.props.selectsRange, selectsDisabledDaysInRange: t.props.selectsDisabledDaysInRange, showWeekNumber: t.props.showWeekNumbers, showWeekPicker: t.props.showWeekPicker, startDate: t.props.startDate, endDate: t.props.endDate, dayClassName: t.props.dayClassName, setOpen: t.props.setOpen, shouldCloseOnSelect: t.props.shouldCloseOnSelect, disabledKeyboardNavigation: t.props.disabledKeyboardNavigation, renderDayContents: t.props.renderDayContents, handleOnKeyDown: t.props.handleOnKeyDown, isInputFocused: t.props.isInputFocused, containerRef: t.props.containerRef, calendarStartDay: t.props.calendarStartDay, monthShowsDuplicateDaysEnd: t.props.monthShowsDuplicateDaysEnd, monthShowsDuplicateDaysStart: t.props.monthShowsDuplicateDaysStart })), !a;) {
    o++, s = addWeeks(s, 1);
    var i = n && o >= 6, p = !n && !t.isWeekInMonth(s);
    if (i || p) {
        if (!t.props.peekNextMonth)
            break;
        a = !0;
    }
} return r; })), ye$2(we$1(t), "onMonthClick", (function (e, r) { t.handleDayClick(Fe$1(setMonth(t.props.day, r)), e); })), ye$2(we$1(t), "onMonthMouseEnter", (function (e) { t.handleDayMouseEnter(Fe$1(setMonth(t.props.day, e))); })), ye$2(we$1(t), "handleMonthNavigation", (function (e, r) { t.isDisabled(r) || t.isExcluded(r) || (t.props.setPreSelection(r), t.MONTH_REFS[e].current && t.MONTH_REFS[e].current.focus()); })), ye$2(we$1(t), "onMonthKeyDown", (function (e, r) { var n = t.props, o = n.selected, a = n.preSelection, s = n.disabledKeyboardNavigation, i = n.showTwoColumnMonthYearPicker, p = n.showFourColumnMonthYearPicker, c = n.setPreSelection, d = e.key; if ("Tab" !== d && e.preventDefault(), !s) {
    var u = At(p, i), h = Ft[u].verticalNavigationOffset, m = Ft[u].grid;
    switch (d) {
        case "Enter":
            t.onMonthClick(e, r), c(o);
            break;
        case "ArrowRight":
            t.handleMonthNavigation(11 === r ? 0 : r + 1, addMonths(a, 1));
            break;
        case "ArrowLeft":
            t.handleMonthNavigation(0 === r ? 11 : r - 1, subMonths(a, 1));
            break;
        case "ArrowUp":
            t.handleMonthNavigation(m[0].includes(r) ? r + 12 - h : r - h, subMonths(a, h));
            break;
        case "ArrowDown": t.handleMonthNavigation(m[m.length - 1].includes(r) ? r - 12 + h : r + h, addMonths(a, h));
    }
} })), ye$2(we$1(t), "onQuarterClick", (function (e, r) { t.handleDayClick(We$1(setQuarter(t.props.day, r)), e); })), ye$2(we$1(t), "onQuarterMouseEnter", (function (e) { t.handleDayMouseEnter(We$1(setQuarter(t.props.day, e))); })), ye$2(we$1(t), "handleQuarterNavigation", (function (e, r) { t.isDisabled(r) || t.isExcluded(r) || (t.props.setPreSelection(r), t.QUARTER_REFS[e - 1].current && t.QUARTER_REFS[e - 1].current.focus()); })), ye$2(we$1(t), "onQuarterKeyDown", (function (e, r) { var n = e.key; if (!t.props.disabledKeyboardNavigation)
    switch (n) {
        case "Enter":
            t.onQuarterClick(e, r), t.props.setPreSelection(t.props.selected);
            break;
        case "ArrowRight":
            t.handleQuarterNavigation(4 === r ? 1 : r + 1, addQuarters(t.props.preSelection, 1));
            break;
        case "ArrowLeft": t.handleQuarterNavigation(1 === r ? 4 : r - 1, subQuarters(t.props.preSelection, 1));
    } })), ye$2(we$1(t), "getMonthClassNames", (function (e) { var n = t.props, o = n.day, a = n.startDate, s = n.endDate, i = n.selected, p = n.minDate, c = n.maxDate, l = n.preSelection, d = n.monthClassName, u = n.excludeDates, h = n.includeDates, m = d ? d(setMonth(o, e)) : void 0, f = setMonth(o, e); return r$4("react-datepicker__month-text", "react-datepicker__month-".concat(e), m, { "react-datepicker__month-text--disabled": (p || c || u || h) && tt$2(f, t.props), "react-datepicker__month-text--selected": t.isSelectedMonth(o, e, i), "react-datepicker__month-text--keyboard-selected": !t.props.disabledKeyboardNavigation && getMonth(l) === e, "react-datepicker__month-text--in-selecting-range": t.isInSelectingRangeMonth(e), "react-datepicker__month-text--in-range": rt(a, s, e, o), "react-datepicker__month-text--range-start": t.isRangeStartMonth(e), "react-datepicker__month-text--range-end": t.isRangeEndMonth(e), "react-datepicker__month-text--selecting-range-start": t.isSelectingMonthRangeStart(e), "react-datepicker__month-text--selecting-range-end": t.isSelectingMonthRangeEnd(e), "react-datepicker__month-text--today": t.isCurrentMonth(o, e) }); })), ye$2(we$1(t), "getTabIndex", (function (e) { var r = getMonth(t.props.preSelection); return t.props.disabledKeyboardNavigation || e !== r ? "-1" : "0"; })), ye$2(we$1(t), "getQuarterTabIndex", (function (e) { var r = getQuarter(t.props.preSelection); return t.props.disabledKeyboardNavigation || e !== r ? "-1" : "0"; })), ye$2(we$1(t), "getAriaLabel", (function (e) { var r = t.props, n = r.chooseDayAriaLabelPrefix, o = void 0 === n ? "Choose" : n, a = r.disabledDayAriaLabelPrefix, s = void 0 === a ? "Not available" : a, i = r.day, p = setMonth(i, e), c = t.isDisabled(p) || t.isExcluded(p) ? s : o; return "".concat(c, " ").concat(Ie$2(p, "MMMM yyyy")); })), ye$2(we$1(t), "getQuarterClassNames", (function (e) { var n = t.props, o = n.day, a = n.startDate, s = n.endDate, i = n.selected, p = n.minDate, c = n.maxDate, l = n.preSelection, d = n.disabledKeyboardNavigation; return r$4("react-datepicker__quarter-text", "react-datepicker__quarter-".concat(e), { "react-datepicker__quarter-text--disabled": (p || c) && nt(setQuarter(o, e), t.props), "react-datepicker__quarter-text--selected": t.isSelectedQuarter(o, e, i), "react-datepicker__quarter-text--keyboard-selected": !d && getQuarter(l) === e, "react-datepicker__quarter-text--in-selecting-range": t.isInSelectingRangeQuarter(e), "react-datepicker__quarter-text--in-range": st(a, s, e, o), "react-datepicker__quarter-text--range-start": t.isRangeStartQuarter(e), "react-datepicker__quarter-text--range-end": t.isRangeEndQuarter(e) }); })), ye$2(we$1(t), "getMonthContent", (function (e) { var r = t.props, n = r.showFullMonthYearPicker, o = r.renderMonthContent, a = r.locale, s = Xe$1(e, a), i = Je$1(e, a); return o ? o(e, s, i) : n ? i : s; })), ye$2(we$1(t), "getQuarterContent", (function (e) { var r = t.props, n = r.renderQuarterContent, o = function (e, t) { return Ie$2(setQuarter(Ye$1(), e), "QQQ", t); }(e, r.locale); return n ? n(e, o) : o; })), ye$2(we$1(t), "renderMonths", (function () { var r = t.props, n = r.showTwoColumnMonthYearPicker, o = r.showFourColumnMonthYearPicker, a = r.day, s = r.selected; return Ft[At(o, n)].grid.map((function (r, n) { return react_1.default.createElement("div", { className: "react-datepicker__month-wrapper", key: n }, r.map((function (r, n) { return react_1.default.createElement("div", { ref: t.MONTH_REFS[r], key: n, onClick: function (e) { t.onMonthClick(e, r); }, onKeyDown: function (e) { t.onMonthKeyDown(e, r); }, onMouseEnter: function () { return t.onMonthMouseEnter(r); }, tabIndex: t.getTabIndex(r), className: t.getMonthClassNames(r), role: "option", "aria-label": t.getAriaLabel(r), "aria-current": t.isCurrentMonth(a, r) ? "date" : void 0, "aria-selected": t.isSelectedMonth(a, r, s) }, t.getMonthContent(r)); }))); })); })), ye$2(we$1(t), "renderQuarters", (function () { var r = t.props, n = r.day, o = r.selected; return react_1.default.createElement("div", { className: "react-datepicker__quarter-wrapper" }, [1, 2, 3, 4].map((function (r, a) { return react_1.default.createElement("div", { key: a, ref: t.QUARTER_REFS[a], role: "option", onClick: function (e) { t.onQuarterClick(e, r); }, onKeyDown: function (e) { t.onQuarterKeyDown(e, r); }, onMouseEnter: function () { return t.onQuarterMouseEnter(r); }, className: t.getQuarterClassNames(r), "aria-selected": t.isSelectedQuarter(n, r, o), tabIndex: t.getQuarterTabIndex(r), "aria-current": t.isCurrentQuarter(n, r) ? "date" : void 0 }, t.getQuarterContent(r)); }))); })), ye$2(we$1(t), "getClassNames", (function () { var e = t.props, n = e.selectingDate, o = e.selectsStart, a = e.selectsEnd, s = e.showMonthYearPicker, i = e.showQuarterYearPicker, p = e.showWeekPicker; return r$4("react-datepicker__month", { "react-datepicker__month--selecting-range": n && (o || a) }, { "react-datepicker__monthPicker": s }, { "react-datepicker__quarterPicker": i }, { "react-datepicker__weekPicker": p }); })), t; } return fe$1(o, [{ key: "render", value: function () { var t = this.props, r = t.showMonthYearPicker, n = t.showQuarterYearPicker, o = t.day, a = t.ariaLabelPrefix, s = void 0 === a ? "month " : a; return react_1.default.createElement("div", { className: this.getClassNames(), onMouseLeave: this.handleMouseLeave, "aria-label": "".concat(s, " ").concat(Ie$2(o, "yyyy-MM")), role: "listbox" }, r ? this.renderMonths() : n ? this.renderQuarters() : this.renderWeeks()); } }]), o; }(), Kt = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n() { var t; he$1(this, n); for (var o = arguments.length, a = new Array(o), i = 0; i < o; i++)
    a[i] = arguments[i]; return ye$2(we$1(t = r.call.apply(r, [this].concat(a))), "state", { height: null }), ye$2(we$1(t), "scrollToTheSelectedTime", (function () { requestAnimationFrame((function () { t.list && (t.list.scrollTop = t.centerLi && n.calcCenterPosition(t.props.monthRef ? t.props.monthRef.clientHeight - t.header.clientHeight : t.list.clientHeight, t.centerLi)); })); })), ye$2(we$1(t), "handleClick", (function (e) { (t.props.minTime || t.props.maxTime) && lt(e, t.props) || (t.props.excludeTimes || t.props.includeTimes || t.props.filterTime) && ct(e, t.props) || t.props.onChange(e); })), ye$2(we$1(t), "isSelectedTime", (function (e) { return t.props.selected && (r = t.props.selected, n = e, bt(r).getTime() === bt(n).getTime()); var r, n; })), ye$2(we$1(t), "isDisabledTime", (function (e) { return (t.props.minTime || t.props.maxTime) && lt(e, t.props) || (t.props.excludeTimes || t.props.includeTimes || t.props.filterTime) && ct(e, t.props); })), ye$2(we$1(t), "liClasses", (function (e) { var r = ["react-datepicker__time-list-item", t.props.timeClassName ? t.props.timeClassName(e) : void 0]; return t.isSelectedTime(e) && r.push("react-datepicker__time-list-item--selected"), t.isDisabledTime(e) && r.push("react-datepicker__time-list-item--disabled"), t.props.injectTimes && (60 * getHours(e) + getMinutes(e)) % t.props.intervals != 0 && r.push("react-datepicker__time-list-item--injected"), r.join(" "); })), ye$2(we$1(t), "handleOnKeyDown", (function (e, r) { " " === e.key && (e.preventDefault(), e.key = "Enter"), "ArrowUp" !== e.key && "ArrowLeft" !== e.key || !e.target.previousSibling || (e.preventDefault(), e.target.previousSibling.focus()), "ArrowDown" !== e.key && "ArrowRight" !== e.key || !e.target.nextSibling || (e.preventDefault(), e.target.nextSibling.focus()), "Enter" === e.key && t.handleClick(r), t.props.handleOnKeyDown(e); })), ye$2(we$1(t), "renderTimes", (function () { for (var r = [], n = t.props.format ? t.props.format : "p", o = t.props.intervals, a = t.props.selected || t.props.openToDate || Ye$1(), i = startOfDay(a), p = t.props.injectTimes && t.props.injectTimes.sort((function (e, t) { return e - t; })), c = 60 * function (e) { var t = new Date(e.getFullYear(), e.getMonth(), e.getDate()), r = new Date(e.getFullYear(), e.getMonth(), e.getDate(), 24); return Math.round((+r - +t) / 36e5); }(a), l = c / o, d = 0; d < l; d++) {
    var u = addMinutes(i, d * o);
    if (r.push(u), p) {
        var h = gt(i, u, d, o, p);
        r = r.concat(h);
    }
} var m = r.reduce((function (e, t) { return t.getTime() <= a.getTime() ? t : e; }), r[0]); return r.map((function (r, o) { return react_1.default.createElement("li", { key: o, onClick: t.handleClick.bind(we$1(t), r), className: t.liClasses(r), ref: function (e) { r === m && (t.centerLi = e); }, onKeyDown: function (e) { t.handleOnKeyDown(e, r); }, tabIndex: r === m ? 0 : -1, role: "option", "aria-selected": t.isSelectedTime(r) ? "true" : void 0, "aria-disabled": t.isDisabledTime(r) ? "true" : void 0 }, Ie$2(r, n, t.props.locale)); })); })), t; } return fe$1(n, [{ key: "componentDidMount", value: function () { this.scrollToTheSelectedTime(), this.props.monthRef && this.header && this.setState({ height: this.props.monthRef.clientHeight - this.header.clientHeight }); } }, { key: "render", value: function () { var t = this, r = this.state.height; return react_1.default.createElement("div", { className: "react-datepicker__time-container ".concat(this.props.todayButton ? "react-datepicker__time-container--with-today-button" : "") }, react_1.default.createElement("div", { className: "react-datepicker__header react-datepicker__header--time ".concat(this.props.showTimeSelectOnly ? "react-datepicker__header--time--only" : ""), ref: function (e) { t.header = e; } }, react_1.default.createElement("div", { className: "react-datepicker-time__header" }, this.props.timeCaption)), react_1.default.createElement("div", { className: "react-datepicker__time" }, react_1.default.createElement("div", { className: "react-datepicker__time-box" }, react_1.default.createElement("ul", { className: "react-datepicker__time-list", ref: function (e) { t.list = e; }, style: r ? { height: r } : {}, role: "listbox", "aria-label": this.props.timeCaption }, this.renderTimes())))); } }], [{ key: "defaultProps", get: function () { return { intervals: 30, onTimeChange: function () { }, todayButton: null, timeCaption: "Time" }; } }]), n; }();
ye$2(Kt, "calcCenterPosition", (function (e, t) { return t.offsetTop - (e / 2 - t.clientHeight / 2); }));
var Bt = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o(t) { var a; return he$1(this, o), ye$2(we$1(a = n.call(this, t)), "YEAR_REFS", Se$2(Array(a.props.yearItemNumber)).map((function () { return react_1.default.createRef(); }))), ye$2(we$1(a), "isDisabled", (function (e) { return Ze$1(e, a.props); })), ye$2(we$1(a), "isExcluded", (function (e) { return et(e, a.props); })), ye$2(we$1(a), "selectingDate", (function () { var e; return null !== (e = a.props.selectingDate) && void 0 !== e ? e : a.props.preSelection; })), ye$2(we$1(a), "updateFocusOnPaginate", (function (e) { var t = function () { this.YEAR_REFS[e].current.focus(); }.bind(we$1(a)); window.requestAnimationFrame(t); })), ye$2(we$1(a), "handleYearClick", (function (e, t) { a.props.onDayClick && a.props.onDayClick(e, t); })), ye$2(we$1(a), "handleYearNavigation", (function (e, t) { var r = a.props, n = r.date, o = r.yearItemNumber, s = wt(n, o).startPeriod; a.isDisabled(t) || a.isExcluded(t) || (a.props.setPreSelection(t), e - s == -1 ? a.updateFocusOnPaginate(o - 1) : e - s === o ? a.updateFocusOnPaginate(0) : a.YEAR_REFS[e - s].current.focus()); })), ye$2(we$1(a), "isSameDay", (function (e, t) { return je$1(e, t); })), ye$2(we$1(a), "isCurrentYear", (function (e) { return e === getYear(Ye$1()); })), ye$2(we$1(a), "isRangeStart", (function (e) { return a.props.startDate && a.props.endDate && Be$1(setYear(Ye$1(), e), a.props.startDate); })), ye$2(we$1(a), "isRangeEnd", (function (e) { return a.props.startDate && a.props.endDate && Be$1(setYear(Ye$1(), e), a.props.endDate); })), ye$2(we$1(a), "isInRange", (function (e) { return ot(e, a.props.startDate, a.props.endDate); })), ye$2(we$1(a), "isInSelectingRange", (function (e) { var t = a.props, r = t.selectsStart, n = t.selectsEnd, o = t.selectsRange, s = t.startDate, i = t.endDate; return !(!(r || n || o) || !a.selectingDate()) && (r && i ? ot(e, a.selectingDate(), i) : (n && s || !(!o || !s || i)) && ot(e, s, a.selectingDate())); })), ye$2(we$1(a), "isSelectingRangeStart", (function (e) { if (!a.isInSelectingRange(e))
    return !1; var t = a.props, r = t.startDate, n = t.selectsStart, o = setYear(Ye$1(), e); return Be$1(o, n ? a.selectingDate() : r); })), ye$2(we$1(a), "isSelectingRangeEnd", (function (e) { if (!a.isInSelectingRange(e))
    return !1; var t = a.props, r = t.endDate, n = t.selectsEnd, o = t.selectsRange, s = setYear(Ye$1(), e); return Be$1(s, n || o ? a.selectingDate() : r); })), ye$2(we$1(a), "isKeyboardSelected", (function (e) { var t = Ae$1(setYear(a.props.date, e)); return !a.props.disabledKeyboardNavigation && !a.props.inline && !je$1(t, Ae$1(a.props.selected)) && je$1(t, Ae$1(a.props.preSelection)); })), ye$2(we$1(a), "onYearClick", (function (e, t) { var r = a.props.date; a.handleYearClick(Ae$1(setYear(r, t)), e); })), ye$2(we$1(a), "onYearKeyDown", (function (e, t) { var r = e.key; if (!a.props.disabledKeyboardNavigation)
    switch (r) {
        case "Enter":
            a.onYearClick(e, t), a.props.setPreSelection(a.props.selected);
            break;
        case "ArrowRight":
            a.handleYearNavigation(t + 1, addYears(a.props.preSelection, 1));
            break;
        case "ArrowLeft": a.handleYearNavigation(t - 1, subYears(a.props.preSelection, 1));
    } })), ye$2(we$1(a), "getYearClassNames", (function (e) { var t = a.props, n = t.minDate, o = t.maxDate, s = t.selected, i = t.excludeDates, p = t.includeDates, c = t.filterDate; return r$4("react-datepicker__year-text", { "react-datepicker__year-text--selected": e === getYear(s), "react-datepicker__year-text--disabled": (n || o || i || p || c) && at(e, a.props), "react-datepicker__year-text--keyboard-selected": a.isKeyboardSelected(e), "react-datepicker__year-text--range-start": a.isRangeStart(e), "react-datepicker__year-text--range-end": a.isRangeEnd(e), "react-datepicker__year-text--in-range": a.isInRange(e), "react-datepicker__year-text--in-selecting-range": a.isInSelectingRange(e), "react-datepicker__year-text--selecting-range-start": a.isSelectingRangeStart(e), "react-datepicker__year-text--selecting-range-end": a.isSelectingRangeEnd(e), "react-datepicker__year-text--today": a.isCurrentYear(e) }); })), ye$2(we$1(a), "getYearTabIndex", (function (e) { return a.props.disabledKeyboardNavigation ? "-1" : e === getYear(a.props.preSelection) ? "0" : "-1"; })), ye$2(we$1(a), "getYearContainerClassNames", (function () { var e = a.props, t = e.selectingDate, n = e.selectsStart, o = e.selectsEnd, s = e.selectsRange; return r$4("react-datepicker__year", { "react-datepicker__year--selecting-range": t && (n || o || s) }); })), ye$2(we$1(a), "getYearContent", (function (e) { return a.props.renderYearContent ? a.props.renderYearContent(e) : e; })), a; } return fe$1(o, [{ key: "render", value: function () { for (var t = this, r = [], n = this.props, o = n.date, a = n.yearItemNumber, s = n.onYearMouseEnter, i = n.onYearMouseLeave, p = wt(o, a), c = p.startPeriod, l = p.endPeriod, d = function (n) { r.push(react_1.default.createElement("div", { ref: t.YEAR_REFS[n - c], onClick: function (e) { t.onYearClick(e, n); }, onKeyDown: function (e) { t.onYearKeyDown(e, n); }, tabIndex: t.getYearTabIndex(n), className: t.getYearClassNames(n), onMouseEnter: function (e) { return s(e, n); }, onMouseLeave: function (e) { return i(e, n); }, key: n, "aria-current": t.isCurrentYear(n) ? "date" : void 0 }, t.getYearContent(n))); }, u = c; u <= l; u++)
            d(u); return react_1.default.createElement("div", { className: this.getYearContainerClassNames() }, react_1.default.createElement("div", { className: "react-datepicker__year-wrapper", onMouseLeave: this.props.clearSelectingDate }, r)); } }]), o; }(), Qt = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n(t) { var o; return he$1(this, n), ye$2(we$1(o = r.call(this, t)), "onTimeChange", (function (e) { o.setState({ time: e }); var t = o.props.date, r = t instanceof Date && !isNaN(t) ? t : new Date; r.setHours(e.split(":")[0]), r.setMinutes(e.split(":")[1]), o.props.onChange(r); })), ye$2(we$1(o), "renderTimeInput", (function () { var t = o.state.time, r = o.props, n = r.date, a = r.timeString, s = r.customTimeInput; return s ? react_1.default.cloneElement(s, { date: n, value: t, onChange: o.onTimeChange }) : react_1.default.createElement("input", { type: "time", className: "react-datepicker-time__input", placeholder: "Time", name: "time-input", required: !0, value: t, onChange: function (e) { o.onTimeChange(e.target.value || a); } }); })), o.state = { time: o.props.timeString }, o; } return fe$1(n, [{ key: "render", value: function () { return react_1.default.createElement("div", { className: "react-datepicker__input-time-container" }, react_1.default.createElement("div", { className: "react-datepicker-time__caption" }, this.props.timeInputLabel), react_1.default.createElement("div", { className: "react-datepicker-time__input-container" }, react_1.default.createElement("div", { className: "react-datepicker-time__input" }, this.renderTimeInput()))); } }], [{ key: "getDerivedStateFromProps", value: function (e, t) { return e.timeString !== t.time ? { time: e.timeString } : null; } }]), n; }();
function Ht(t) { var r = t.className, n = t.children, o = t.showPopperArrow, a = t.arrowProps, s = void 0 === a ? {} : a; return react_1.default.createElement("div", { className: r }, o && react_1.default.createElement("div", ve$2({ className: "react-datepicker__triangle" }, s)), n); }
var jt = ["react-datepicker__year-select", "react-datepicker__month-select", "react-datepicker__month-year-select"], Vt = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o(t) { var a; return he$1(this, o), ye$2(we$1(a = n.call(this, t)), "handleClickOutside", (function (e) { a.props.onClickOutside(e); })), ye$2(we$1(a), "setClickOutsideRef", (function () { return a.containerRef.current; })), ye$2(we$1(a), "handleDropdownFocus", (function (e) { (function () { var e = ((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).className || "").split(/\s+/); return jt.some((function (t) { return e.indexOf(t) >= 0; })); })(e.target) && a.props.onDropdownFocus(); })), ye$2(we$1(a), "getDateInView", (function () { var e = a.props, t = e.preSelection, r = e.selected, n = e.openToDate, o = ft(a.props), s = yt(a.props), i = Ye$1(), p = n || r || t; return p || (o && isBefore(i, o) ? o : s && isAfter(i, s) ? s : i); })), ye$2(we$1(a), "increaseMonth", (function () { a.setState((function (e) { var t = e.date; return { date: addMonths(t, 1) }; }), (function () { return a.handleMonthChange(a.state.date); })); })), ye$2(we$1(a), "decreaseMonth", (function () { a.setState((function (e) { var t = e.date; return { date: subMonths(t, 1) }; }), (function () { return a.handleMonthChange(a.state.date); })); })), ye$2(we$1(a), "handleDayClick", (function (e, t, r) { a.props.onSelect(e, t, r), a.props.setPreSelection && a.props.setPreSelection(e); })), ye$2(we$1(a), "handleDayMouseEnter", (function (e) { a.setState({ selectingDate: e }), a.props.onDayMouseEnter && a.props.onDayMouseEnter(e); })), ye$2(we$1(a), "handleMonthMouseLeave", (function () { a.setState({ selectingDate: null }), a.props.onMonthMouseLeave && a.props.onMonthMouseLeave(); })), ye$2(we$1(a), "handleYearMouseEnter", (function (e, t) { a.setState({ selectingDate: setYear(Ye$1(), t) }), a.props.onYearMouseEnter && a.props.onYearMouseEnter(e, t); })), ye$2(we$1(a), "handleYearMouseLeave", (function (e, t) { a.props.onYearMouseLeave && a.props.onYearMouseLeave(e, t); })), ye$2(we$1(a), "handleYearChange", (function (e) { a.props.onYearChange && (a.props.onYearChange(e), a.setState({ isRenderAriaLiveMessage: !0 })), a.props.adjustDateOnChange && (a.props.onSelect && a.props.onSelect(e), a.props.setOpen && a.props.setOpen(!0)), a.props.setPreSelection && a.props.setPreSelection(e); })), ye$2(we$1(a), "handleMonthChange", (function (e) { a.handleCustomMonthChange(e), a.props.adjustDateOnChange && (a.props.onSelect && a.props.onSelect(e), a.props.setOpen && a.props.setOpen(!0)), a.props.setPreSelection && a.props.setPreSelection(e); })), ye$2(we$1(a), "handleCustomMonthChange", (function (e) { a.props.onMonthChange && (a.props.onMonthChange(e), a.setState({ isRenderAriaLiveMessage: !0 })); })), ye$2(we$1(a), "handleMonthYearChange", (function (e) { a.handleYearChange(e), a.handleMonthChange(e); })), ye$2(we$1(a), "changeYear", (function (e) { a.setState((function (t) { var r = t.date; return { date: setYear(r, e) }; }), (function () { return a.handleYearChange(a.state.date); })); })), ye$2(we$1(a), "changeMonth", (function (e) { a.setState((function (t) { var r = t.date; return { date: setMonth(r, e) }; }), (function () { return a.handleMonthChange(a.state.date); })); })), ye$2(we$1(a), "changeMonthYear", (function (e) { a.setState((function (t) { var r = t.date; return { date: setYear(setMonth(r, getMonth(e)), getYear(e)) }; }), (function () { return a.handleMonthYearChange(a.state.date); })); })), ye$2(we$1(a), "header", (function () { var t = Le$1(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a.state.date, a.props.locale, a.props.calendarStartDay), n = []; return a.props.showWeekNumbers && n.push(react_1.default.createElement("div", { key: "W", className: "react-datepicker__day-name" }, a.props.weekLabel || "#")), n.concat([0, 1, 2, 3, 4, 5, 6].map((function (n) { var o = addDays(t, n), s = a.formatWeekday(o, a.props.locale), i = a.props.weekDayClassName ? a.props.weekDayClassName(o) : void 0; return react_1.default.createElement("div", { key: n, className: r$4("react-datepicker__day-name", i) }, s); }))); })), ye$2(we$1(a), "formatWeekday", (function (e, t) { return a.props.formatWeekDay ? function (e, t, r) { return t(Ie$2(e, "EEEE", r)); }(e, a.props.formatWeekDay, t) : a.props.useWeekdaysShort ? function (e, t) { return Ie$2(e, "EEE", t); }(e, t) : function (e, t) { return Ie$2(e, "EEEEEE", t); }(e, t); })), ye$2(we$1(a), "decreaseYear", (function () { a.setState((function (e) { var t = e.date; return { date: subYears(t, a.props.showYearPicker ? a.props.yearItemNumber : 1) }; }), (function () { return a.handleYearChange(a.state.date); })); })), ye$2(we$1(a), "clearSelectingDate", (function () { a.setState({ selectingDate: null }); })), ye$2(we$1(a), "renderPreviousButton", (function () { if (!a.props.renderCustomHeader) {
    var t;
    switch (!0) {
        case a.props.showMonthYearPicker:
            t = ht(a.state.date, a.props);
            break;
        case a.props.showYearPicker:
            t = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.minDate, n = t.yearItemNumber, o = void 0 === n ? Ne$2 : n, a = wt(Ae$1(subYears(e, o)), o).endPeriod, s = r && getYear(r); return s && s > a || !1; }(a.state.date, a.props);
            break;
        default: t = dt(a.state.date, a.props);
    }
    if ((a.props.forceShowMonthNavigation || a.props.showDisabledMonthNavigation || !t) && !a.props.showTimeSelectOnly) {
        var r = ["react-datepicker__navigation", "react-datepicker__navigation--previous"], n = a.decreaseMonth;
        (a.props.showMonthYearPicker || a.props.showQuarterYearPicker || a.props.showYearPicker) && (n = a.decreaseYear), t && a.props.showDisabledMonthNavigation && (r.push("react-datepicker__navigation--previous--disabled"), n = null);
        var o = a.props.showMonthYearPicker || a.props.showQuarterYearPicker || a.props.showYearPicker, s = a.props, i = s.previousMonthButtonLabel, p = s.previousYearButtonLabel, c = a.props, l = c.previousMonthAriaLabel, d = void 0 === l ? "string" == typeof i ? i : "Previous Month" : l, u = c.previousYearAriaLabel, h = void 0 === u ? "string" == typeof p ? p : "Previous Year" : u;
        return react_1.default.createElement("button", { type: "button", className: r.join(" "), onClick: n, onKeyDown: a.props.handleOnKeyDown, "aria-label": o ? h : d }, react_1.default.createElement("span", { className: ["react-datepicker__navigation-icon", "react-datepicker__navigation-icon--previous"].join(" ") }, o ? a.props.previousYearButtonLabel : a.props.previousMonthButtonLabel));
    }
} })), ye$2(we$1(a), "increaseYear", (function () { a.setState((function (e) { var t = e.date; return { date: addYears(t, a.props.showYearPicker ? a.props.yearItemNumber : 1) }; }), (function () { return a.handleYearChange(a.state.date); })); })), ye$2(we$1(a), "renderNextButton", (function () { if (!a.props.renderCustomHeader) {
    var t;
    switch (!0) {
        case a.props.showMonthYearPicker:
            t = mt(a.state.date, a.props);
            break;
        case a.props.showYearPicker:
            t = function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r = t.maxDate, n = t.yearItemNumber, o = void 0 === n ? Ne$2 : n, a = wt(addYears(e, o), o).startPeriod, s = r && getYear(r); return s && s < a || !1; }(a.state.date, a.props);
            break;
        default: t = ut(a.state.date, a.props);
    }
    if ((a.props.forceShowMonthNavigation || a.props.showDisabledMonthNavigation || !t) && !a.props.showTimeSelectOnly) {
        var r = ["react-datepicker__navigation", "react-datepicker__navigation--next"];
        a.props.showTimeSelect && r.push("react-datepicker__navigation--next--with-time"), a.props.todayButton && r.push("react-datepicker__navigation--next--with-today-button");
        var n = a.increaseMonth;
        (a.props.showMonthYearPicker || a.props.showQuarterYearPicker || a.props.showYearPicker) && (n = a.increaseYear), t && a.props.showDisabledMonthNavigation && (r.push("react-datepicker__navigation--next--disabled"), n = null);
        var o = a.props.showMonthYearPicker || a.props.showQuarterYearPicker || a.props.showYearPicker, s = a.props, i = s.nextMonthButtonLabel, p = s.nextYearButtonLabel, c = a.props, l = c.nextMonthAriaLabel, d = void 0 === l ? "string" == typeof i ? i : "Next Month" : l, h = c.nextYearAriaLabel, m = void 0 === h ? "string" == typeof p ? p : "Next Year" : h;
        return react_1.default.createElement("button", { type: "button", className: r.join(" "), onClick: n, onKeyDown: a.props.handleOnKeyDown, "aria-label": o ? m : d }, react_1.default.createElement("span", { className: ["react-datepicker__navigation-icon", "react-datepicker__navigation-icon--next"].join(" ") }, o ? a.props.nextYearButtonLabel : a.props.nextMonthButtonLabel));
    }
} })), ye$2(we$1(a), "renderCurrentMonth", (function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a.state.date, r = ["react-datepicker__current-month"]; return a.props.showYearDropdown && r.push("react-datepicker__current-month--hasYearDropdown"), a.props.showMonthDropdown && r.push("react-datepicker__current-month--hasMonthDropdown"), a.props.showMonthYearDropdown && r.push("react-datepicker__current-month--hasMonthYearDropdown"), react_1.default.createElement("div", { className: r.join(" ") }, Ie$2(t, a.props.dateFormat, a.props.locale)); })), ye$2(we$1(a), "renderYearDropdown", (function () { var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; if (a.props.showYearDropdown && !t)
    return react_1.default.createElement(_t$1, { adjustDateOnChange: a.props.adjustDateOnChange, date: a.state.date, onSelect: a.props.onSelect, setOpen: a.props.setOpen, dropdownMode: a.props.dropdownMode, onChange: a.changeYear, minDate: a.props.minDate, maxDate: a.props.maxDate, year: getYear(a.state.date), scrollableYearDropdown: a.props.scrollableYearDropdown, yearDropdownItemNumber: a.props.yearDropdownItemNumber }); })), ye$2(we$1(a), "renderMonthDropdown", (function () { var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; if (a.props.showMonthDropdown && !t)
    return react_1.default.createElement(Pt, { dropdownMode: a.props.dropdownMode, locale: a.props.locale, onChange: a.changeMonth, month: getMonth(a.state.date), useShortMonthInDropdown: a.props.useShortMonthInDropdown }); })), ye$2(we$1(a), "renderMonthYearDropdown", (function () { var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; if (a.props.showMonthYearDropdown && !t)
    return react_1.default.createElement(xt, { dropdownMode: a.props.dropdownMode, locale: a.props.locale, dateFormat: a.props.dateFormat, onChange: a.changeMonthYear, minDate: a.props.minDate, maxDate: a.props.maxDate, date: a.state.date, scrollableMonthYearDropdown: a.props.scrollableMonthYearDropdown }); })), ye$2(we$1(a), "handleTodayButtonClick", (function (e) { a.props.onSelect(Ke$1(), e), a.props.setPreSelection && a.props.setPreSelection(Ke$1()); })), ye$2(we$1(a), "renderTodayButton", (function () { if (a.props.todayButton && !a.props.showTimeSelectOnly)
    return react_1.default.createElement("div", { className: "react-datepicker__today-button", onClick: function (e) { return a.handleTodayButtonClick(e); } }, a.props.todayButton); })), ye$2(we$1(a), "renderDefaultHeader", (function (t) { var r = t.monthDate, n = t.i; return react_1.default.createElement("div", { className: "react-datepicker__header ".concat(a.props.showTimeSelect ? "react-datepicker__header--has-time-select" : "") }, a.renderCurrentMonth(r), react_1.default.createElement("div", { className: "react-datepicker__header__dropdown react-datepicker__header__dropdown--".concat(a.props.dropdownMode), onFocus: a.handleDropdownFocus }, a.renderMonthDropdown(0 !== n), a.renderMonthYearDropdown(0 !== n), a.renderYearDropdown(0 !== n)), react_1.default.createElement("div", { className: "react-datepicker__day-names" }, a.header(r))); })), ye$2(we$1(a), "renderCustomHeader", (function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r = t.monthDate, n = t.i; if (a.props.showTimeSelect && !a.state.monthContainer || a.props.showTimeSelectOnly)
    return null; var o = dt(a.state.date, a.props), s = ut(a.state.date, a.props), i = ht(a.state.date, a.props), p = mt(a.state.date, a.props), c = !a.props.showMonthYearPicker && !a.props.showQuarterYearPicker && !a.props.showYearPicker; return react_1.default.createElement("div", { className: "react-datepicker__header react-datepicker__header--custom", onFocus: a.props.onDropdownFocus }, a.props.renderCustomHeader(de$2(de$2({}, a.state), {}, { customHeaderCount: n, monthDate: r, changeMonth: a.changeMonth, changeYear: a.changeYear, decreaseMonth: a.decreaseMonth, increaseMonth: a.increaseMonth, decreaseYear: a.decreaseYear, increaseYear: a.increaseYear, prevMonthButtonDisabled: o, nextMonthButtonDisabled: s, prevYearButtonDisabled: i, nextYearButtonDisabled: p })), c && react_1.default.createElement("div", { className: "react-datepicker__day-names" }, a.header(r))); })), ye$2(we$1(a), "renderYearHeader", (function () { var t = a.state.date, r = a.props, n = r.showYearPicker, o = wt(t, r.yearItemNumber), s = o.startPeriod, i = o.endPeriod; return react_1.default.createElement("div", { className: "react-datepicker__header react-datepicker-year-header" }, n ? "".concat(s, " - ").concat(i) : getYear(t)); })), ye$2(we$1(a), "renderHeader", (function (e) { switch (!0) {
    case void 0 !== a.props.renderCustomHeader: return a.renderCustomHeader(e);
    case a.props.showMonthYearPicker || a.props.showQuarterYearPicker || a.props.showYearPicker: return a.renderYearHeader(e);
    default: return a.renderDefaultHeader(e);
} })), ye$2(we$1(a), "renderMonths", (function () { var t; if (!a.props.showTimeSelectOnly && !a.props.showYearPicker) {
    for (var r = [], n = a.props.showPreviousMonths ? a.props.monthsShown - 1 : 0, o = subMonths(a.state.date, n), s = null !== (t = a.props.monthSelectedIn) && void 0 !== t ? t : n, i = 0; i < a.props.monthsShown; ++i) {
        var p = addMonths(o, i - s + n), c = "month-".concat(i), d = i < a.props.monthsShown - 1, u = i > 0;
        r.push(react_1.default.createElement("div", { key: c, ref: function (e) { a.monthContainer = e; }, className: "react-datepicker__month-container" }, a.renderHeader({ monthDate: p, i: i }), react_1.default.createElement(Wt, { chooseDayAriaLabelPrefix: a.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: a.props.disabledDayAriaLabelPrefix, weekAriaLabelPrefix: a.props.weekAriaLabelPrefix, ariaLabelPrefix: a.props.monthAriaLabelPrefix, onChange: a.changeMonthYear, day: p, dayClassName: a.props.dayClassName, calendarStartDay: a.props.calendarStartDay, monthClassName: a.props.monthClassName, onDayClick: a.handleDayClick, handleOnKeyDown: a.props.handleOnDayKeyDown, onDayMouseEnter: a.handleDayMouseEnter, onMouseLeave: a.handleMonthMouseLeave, onWeekSelect: a.props.onWeekSelect, orderInDisplay: i, formatWeekNumber: a.props.formatWeekNumber, locale: a.props.locale, minDate: a.props.minDate, maxDate: a.props.maxDate, excludeDates: a.props.excludeDates, excludeDateIntervals: a.props.excludeDateIntervals, highlightDates: a.props.highlightDates, holidays: a.props.holidays, selectingDate: a.state.selectingDate, includeDates: a.props.includeDates, includeDateIntervals: a.props.includeDateIntervals, inline: a.props.inline, shouldFocusDayInline: a.props.shouldFocusDayInline, fixedHeight: a.props.fixedHeight, filterDate: a.props.filterDate, preSelection: a.props.preSelection, setPreSelection: a.props.setPreSelection, selected: a.props.selected, selectsStart: a.props.selectsStart, selectsEnd: a.props.selectsEnd, selectsRange: a.props.selectsRange, selectsDisabledDaysInRange: a.props.selectsDisabledDaysInRange, showWeekNumbers: a.props.showWeekNumbers, startDate: a.props.startDate, endDate: a.props.endDate, peekNextMonth: a.props.peekNextMonth, setOpen: a.props.setOpen, shouldCloseOnSelect: a.props.shouldCloseOnSelect, renderDayContents: a.props.renderDayContents, renderMonthContent: a.props.renderMonthContent, renderQuarterContent: a.props.renderQuarterContent, renderYearContent: a.props.renderYearContent, disabledKeyboardNavigation: a.props.disabledKeyboardNavigation, showMonthYearPicker: a.props.showMonthYearPicker, showFullMonthYearPicker: a.props.showFullMonthYearPicker, showTwoColumnMonthYearPicker: a.props.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker: a.props.showFourColumnMonthYearPicker, showYearPicker: a.props.showYearPicker, showQuarterYearPicker: a.props.showQuarterYearPicker, showWeekPicker: a.props.showWeekPicker, isInputFocused: a.props.isInputFocused, containerRef: a.containerRef, monthShowsDuplicateDaysEnd: d, monthShowsDuplicateDaysStart: u })));
    }
    return r;
} })), ye$2(we$1(a), "renderYears", (function () { if (!a.props.showTimeSelectOnly)
    return a.props.showYearPicker ? react_1.default.createElement("div", { className: "react-datepicker__year--container" }, a.renderHeader(), react_1.default.createElement(Bt, ve$2({ onDayClick: a.handleDayClick, selectingDate: a.state.selectingDate, clearSelectingDate: a.clearSelectingDate, date: a.state.date }, a.props, { onYearMouseEnter: a.handleYearMouseEnter, onYearMouseLeave: a.handleYearMouseLeave }))) : void 0; })), ye$2(we$1(a), "renderTimeSection", (function () { if (a.props.showTimeSelect && (a.state.monthContainer || a.props.showTimeSelectOnly))
    return react_1.default.createElement(Kt, { selected: a.props.selected, openToDate: a.props.openToDate, onChange: a.props.onTimeChange, timeClassName: a.props.timeClassName, format: a.props.timeFormat, includeTimes: a.props.includeTimes, intervals: a.props.timeIntervals, minTime: a.props.minTime, maxTime: a.props.maxTime, excludeTimes: a.props.excludeTimes, filterTime: a.props.filterTime, timeCaption: a.props.timeCaption, todayButton: a.props.todayButton, showMonthDropdown: a.props.showMonthDropdown, showMonthYearDropdown: a.props.showMonthYearDropdown, showYearDropdown: a.props.showYearDropdown, withPortal: a.props.withPortal, monthRef: a.state.monthContainer, injectTimes: a.props.injectTimes, locale: a.props.locale, handleOnKeyDown: a.props.handleOnKeyDown, showTimeSelectOnly: a.props.showTimeSelectOnly }); })), ye$2(we$1(a), "renderInputTimeSection", (function () { var t = new Date(a.props.selected), r = Te$1(t) && Boolean(a.props.selected) ? "".concat(kt(t.getHours()), ":").concat(kt(t.getMinutes())) : ""; if (a.props.showTimeInput)
    return react_1.default.createElement(Qt, { date: t, timeString: r, timeInputLabel: a.props.timeInputLabel, onChange: a.props.onTimeChange, customTimeInput: a.props.customTimeInput }); })), ye$2(we$1(a), "renderAriaLiveRegion", (function () { var t, r = wt(a.state.date, a.props.yearItemNumber), n = r.startPeriod, o = r.endPeriod; return t = a.props.showYearPicker ? "".concat(n, " - ").concat(o) : a.props.showMonthYearPicker || a.props.showQuarterYearPicker ? getYear(a.state.date) : "".concat(Je$1(getMonth(a.state.date), a.props.locale), " ").concat(getYear(a.state.date)), react_1.default.createElement("span", { role: "alert", "aria-live": "polite", className: "react-datepicker__aria-live" }, a.state.isRenderAriaLiveMessage && t); })), ye$2(we$1(a), "renderChildren", (function () { if (a.props.children)
    return react_1.default.createElement("div", { className: "react-datepicker__children-container" }, a.props.children); })), a.containerRef = react_1.default.createRef(), a.state = { date: a.getDateInView(), selectingDate: null, monthContainer: null, isRenderAriaLiveMessage: !1 }, a; } return fe$1(o, [{ key: "componentDidMount", value: function () { var e = this; this.props.showTimeSelect && (this.assignMonthContainer = void e.setState({ monthContainer: e.monthContainer })); } }, { key: "componentDidUpdate", value: function (e) { var t = this; if (!this.props.preSelection || je$1(this.props.preSelection, e.preSelection) && this.props.monthSelectedIn === e.monthSelectedIn)
            this.props.openToDate && !je$1(this.props.openToDate, e.openToDate) && this.setState({ date: this.props.openToDate });
        else {
            var r = !Qe$1(this.state.date, this.props.preSelection);
            this.setState({ date: this.props.preSelection }, (function () { return r && t.handleCustomMonthChange(t.state.date); }));
        } } }, { key: "render", value: function () { var t = this.props.container || Ht; return react_1.default.createElement("div", { ref: this.containerRef }, react_1.default.createElement(t, { className: r$4("react-datepicker", this.props.className, { "react-datepicker--time-only": this.props.showTimeSelectOnly }), showPopperArrow: this.props.showPopperArrow, arrowProps: this.props.arrowProps }, this.renderAriaLiveRegion(), this.renderPreviousButton(), this.renderNextButton(), this.renderMonths(), this.renderYears(), this.renderTodayButton(), this.renderTimeSection(), this.renderInputTimeSection(), this.renderChildren())); } }], [{ key: "defaultProps", get: function () { return { onDropdownFocus: function () { }, monthsShown: 1, forceShowMonthNavigation: !1, timeCaption: "Time", previousYearButtonLabel: "Previous Year", nextYearButtonLabel: "Next Year", previousMonthButtonLabel: "Previous Month", nextMonthButtonLabel: "Next Month", customTimeInput: null, yearItemNumber: Ne$2 }; } }]), o; }(), qt = function (t) { var r = t.icon, n = t.className, o = void 0 === n ? "" : n, a = "react-datepicker__calendar-icon"; return react_1.default.isValidElement(r) ? react_1.default.cloneElement(r, { className: "".concat(r.props.className || "", " ").concat(a, " ").concat(o) }) : "string" == typeof r ? react_1.default.createElement("i", { className: "".concat(a, " ").concat(r, " ").concat(o), "aria-hidden": "true" }) : react_1.default.createElement("svg", { className: "".concat(a, " ").concat(o), xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 448 512" }, react_1.default.createElement("path", { d: "M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z" })); }, Ut = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n(e) { var t; return he$1(this, n), (t = r.call(this, e)).el = document.createElement("div"), t; } return fe$1(n, [{ key: "componentDidMount", value: function () { this.portalRoot = (this.props.portalHost || document).getElementById(this.props.portalId), this.portalRoot || (this.portalRoot = document.createElement("div"), this.portalRoot.setAttribute("id", this.props.portalId), (this.props.portalHost || document.body).appendChild(this.portalRoot)), this.portalRoot.appendChild(this.el); } }, { key: "componentWillUnmount", value: function () { this.portalRoot.removeChild(this.el); } }, { key: "render", value: function () { return react_dom_1.default.createPortal(this.props.children, this.el); } }]), n; }(), zt = function (e) { return !e.disabled && -1 !== e.tabIndex; }, $t = function (t) { De$2(n, react_1.default.Component); var r = be$2(n); function n(t) { var o; return he$1(this, n), ye$2(we$1(o = r.call(this, t)), "getTabChildren", (function () { return Array.prototype.slice.call(o.tabLoopRef.current.querySelectorAll("[tabindex], a, button, input, select, textarea"), 1, -1).filter(zt); })), ye$2(we$1(o), "handleFocusStart", (function () { var e = o.getTabChildren(); e && e.length > 1 && e[e.length - 1].focus(); })), ye$2(we$1(o), "handleFocusEnd", (function () { var e = o.getTabChildren(); e && e.length > 1 && e[0].focus(); })), o.tabLoopRef = react_1.default.createRef(), o; } return fe$1(n, [{ key: "render", value: function () { return this.props.enableTabLoop ? react_1.default.createElement("div", { className: "react-datepicker__tab-loop", ref: this.tabLoopRef }, react_1.default.createElement("div", { className: "react-datepicker__tab-loop__start", tabIndex: "0", onFocus: this.handleFocusStart }), this.props.children, react_1.default.createElement("div", { className: "react-datepicker__tab-loop__end", tabIndex: "0", onFocus: this.handleFocusEnd })) : this.props.children; } }], [{ key: "defaultProps", get: function () { return { enableTabLoop: !0 }; } }]), n; }(), Gt = function (t) { De$2(o, react_1.default.Component); var n = be$2(o); function o() { return he$1(this, o), n.apply(this, arguments); } return fe$1(o, [{ key: "render", value: function () { var t, n = this.props, o = n.className, a = n.wrapperClassName, s = n.hidePopper, i = n.popperComponent, p = n.popperModifiers, c = n.popperPlacement, l = n.popperProps, d = n.targetComponent, u = n.enableTabLoop, h = n.popperOnKeyDown, m = n.portalId, f = n.portalHost; if (!s) {
            var y = r$4("react-datepicker-popper", o);
            t = react_1.default.createElement(Popper, ve$2({ modifiers: p, placement: c }, l), (function (t) { var r = t.ref, n = t.style, o = t.placement, a = t.arrowProps; return react_1.default.createElement($t, { enableTabLoop: u }, react_1.default.createElement("div", { ref: r, style: n, className: y, "data-placement": o, onKeyDown: h }, react_1.default.cloneElement(i, { arrowProps: a }))); }));
        } this.props.popperContainer && (t = react_1.default.createElement(this.props.popperContainer, {}, t)), m && !s && (t = react_1.default.createElement(Ut, { portalId: m, portalHost: f }, t)); var v = r$4("react-datepicker-wrapper", a); return react_1.default.createElement(Manager, { className: "react-datepicker-manager" }, react_1.default.createElement(Reference, null, (function (t) { var r = t.ref; return react_1.default.createElement("div", { ref: r, className: v }, d); })), t); } }], [{ key: "defaultProps", get: function () { return { hidePopper: !0, popperModifiers: [], popperProps: {}, popperPlacement: "bottom-start" }; } }]), o; }(), Jt = "react-datepicker-ignore-onclickoutside", Xt = onClickOutsideHOC(Vt);
var Zt = "Date input not valid.", er = function (t) { De$2(s, react_1.default.Component); var a = be$2(s); function s(t) { var i; return he$1(this, s), ye$2(we$1(i = a.call(this, t)), "getPreSelection", (function () { return i.props.openToDate ? i.props.openToDate : i.props.selectsEnd && i.props.startDate ? i.props.startDate : i.props.selectsStart && i.props.endDate ? i.props.endDate : Ye$1(); })), ye$2(we$1(i), "calcInitialState", (function () { var e, t, r = null === (e = i.props.holidays) || void 0 === e ? void 0 : e.reduce((function (e, t) { var r = new Date(t.date); return isValid(r) ? [].concat(Se$2(e), [de$2(de$2({}, t), {}, { date: r })]) : e; }), []), n = i.getPreSelection(), a = ft(i.props), s = yt(i.props), p = a && isBefore(n, startOfDay(a)) ? a : s && isAfter(n, endOfDay(s)) ? s : n; return { open: i.props.startOpen || !1, preventFocus: !1, preSelection: null !== (t = i.props.selectsRange ? i.props.startDate : i.props.selected) && void 0 !== t ? t : p, highlightDates: vt(i.props.highlightDates), holidays: Dt(r), focused: !1, shouldFocusDayInline: !1, isRenderAriaLiveMessage: !1 }; })), ye$2(we$1(i), "clearPreventFocusTimeout", (function () { i.preventFocusTimeout && clearTimeout(i.preventFocusTimeout); })), ye$2(we$1(i), "setFocus", (function () { i.input && i.input.focus && i.input.focus({ preventScroll: !0 }); })), ye$2(we$1(i), "setBlur", (function () { i.input && i.input.blur && i.input.blur(), i.cancelFocusInput(); })), ye$2(we$1(i), "setOpen", (function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; i.setState({ open: e, preSelection: e && i.state.open ? i.state.preSelection : i.calcInitialState().preSelection, lastPreSelectChange: rr }, (function () { e || i.setState((function (e) { return { focused: !!t && e.focused }; }), (function () { !t && i.setBlur(), i.setState({ inputValue: null }); })); })); })), ye$2(we$1(i), "inputOk", (function () { return isDate(i.state.preSelection); })), ye$2(we$1(i), "isCalendarOpen", (function () { return void 0 === i.props.open ? i.state.open && !i.props.disabled && !i.props.readOnly : i.props.open; })), ye$2(we$1(i), "handleFocus", (function (e) { i.state.preventFocus || (i.props.onFocus(e), i.props.preventOpenOnFocus || i.props.readOnly || i.setOpen(!0)), i.setState({ focused: !0 }); })), ye$2(we$1(i), "sendFocusBackToInput", (function () { i.preventFocusTimeout && i.clearPreventFocusTimeout(), i.setState({ preventFocus: !0 }, (function () { i.preventFocusTimeout = setTimeout((function () { i.setFocus(), i.setState({ preventFocus: !1 }); })); })); })), ye$2(we$1(i), "cancelFocusInput", (function () { clearTimeout(i.inputFocusTimeout), i.inputFocusTimeout = null; })), ye$2(we$1(i), "deferFocusInput", (function () { i.cancelFocusInput(), i.inputFocusTimeout = setTimeout((function () { return i.setFocus(); }), 1); })), ye$2(we$1(i), "handleDropdownFocus", (function () { i.cancelFocusInput(); })), ye$2(we$1(i), "handleBlur", (function (e) { (!i.state.open || i.props.withPortal || i.props.showTimeInput) && i.props.onBlur(e), i.setState({ focused: !1 }); })), ye$2(we$1(i), "handleCalendarClickOutside", (function (e) { i.props.inline || i.setOpen(!1), i.props.onClickOutside(e), i.props.withPortal && e.preventDefault(); })), ye$2(we$1(i), "handleChange", (function () { for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r]; var n = t[0]; if (!i.props.onChangeRaw || (i.props.onChangeRaw.apply(we$1(i), t), "function" == typeof n.isDefaultPrevented && !n.isDefaultPrevented())) {
    i.setState({ inputValue: n.target.value, lastPreSelectChange: tr });
    var o, a, s, p, c, l, d, u, h = (o = n.target.value, a = i.props.dateFormat, s = i.props.locale, p = i.props.strictParsing, c = i.props.minDate, l = null, d = Ge$1(s) || Ge$1($e$1()), u = !0, Array.isArray(a) ? (a.forEach((function (e) { var t = parse$3(o, e, new Date, { locale: d }); p && (u = Te$1(t, c) && o === Ie$2(t, e, s)), Te$1(t, c) && u && (l = t); })), l) : (l = parse$3(o, a, new Date, { locale: d }), p ? u = Te$1(l) && o === Ie$2(l, a, s) : Te$1(l) || (a = a.match(xe$2).map((function (e) { var t = e[0]; return "p" === t || "P" === t ? d ? (0, Ee$1[t])(e, d.formatLong) : t : e; })).join(""), o.length > 0 && (l = parse$3(o, a.slice(0, o.length), new Date)), Te$1(l) || (l = new Date(o))), Te$1(l) && u ? l : null));
    i.props.showTimeSelectOnly && i.props.selected && h && !je$1(h, i.props.selected) && (h = set(i.props.selected, { hours: getHours(h), minutes: getMinutes(h), seconds: getSeconds(h) })), !h && n.target.value || (i.props.showWeekPicker && (h = Le$1(h, i.props.locale, i.props.calendarStartDay)), i.setSelected(h, n, !0));
} })), ye$2(we$1(i), "handleSelect", (function (e, t, r) { if (i.props.shouldCloseOnSelect && !i.props.showTimeSelect && i.sendFocusBackToInput(), i.props.onChangeRaw && i.props.onChangeRaw(t), i.props.showWeekPicker && (e = Le$1(e, i.props.locale, i.props.calendarStartDay)), i.setSelected(e, t, !1, r), i.props.showDateSelect && i.setState({ isRenderAriaLiveMessage: !0 }), !i.props.shouldCloseOnSelect || i.props.showTimeSelect)
    i.setPreSelection(e);
else if (!i.props.inline) {
    i.props.selectsRange || i.setOpen(!1);
    var n = i.props, o = n.startDate, a = n.endDate;
    !o || a || isBefore(e, o) || i.setOpen(!1);
} })), ye$2(we$1(i), "setSelected", (function (e, t, r, n) { var o = e; if (i.props.showYearPicker) {
    if (null !== o && at(getYear(o), i.props))
        return;
}
else if (i.props.showMonthYearPicker) {
    if (null !== o && tt$2(o, i.props))
        return;
}
else if (null !== o && Ze$1(o, i.props))
    return; var a = i.props, s = a.onChange, p = a.selectsRange, c = a.startDate, l = a.endDate; if (!Ve$1(i.props.selected, o) || i.props.allowSameDay || p)
    if (null !== o && (!i.props.selected || r && (i.props.showTimeSelect || i.props.showTimeSelectOnly || i.props.showTimeInput) || (o = Re$2(o, { hour: getHours(i.props.selected), minute: getMinutes(i.props.selected), second: getSeconds(i.props.selected) })), i.props.inline || i.setState({ preSelection: o }), i.props.focusSelectedMonth || i.setState({ monthSelectedIn: n })), p) {
        var d = c && !l, u = c && l;
        !c && !l ? s([o, null], t) : d && (isBefore(o, c) ? s([o, null], t) : s([c, o], t)), u && s([o, null], t);
    }
    else
        s(o, t); r || (i.props.onSelect(o, t), i.setState({ inputValue: null })); })), ye$2(we$1(i), "setPreSelection", (function (e) { var t = void 0 !== i.props.minDate, r = void 0 !== i.props.maxDate, n = !0; if (e) {
    i.props.showWeekPicker && (e = Le$1(e, i.props.locale, i.props.calendarStartDay));
    var o = startOfDay(e);
    if (t && r)
        n = qe$1(e, i.props.minDate, i.props.maxDate);
    else if (t) {
        var a = startOfDay(i.props.minDate);
        n = isAfter(e, a) || Ve$1(o, a);
    }
    else if (r) {
        var s = endOfDay(i.props.maxDate);
        n = isBefore(e, s) || Ve$1(o, s);
    }
} n && i.setState({ preSelection: e }); })), ye$2(we$1(i), "handleTimeChange", (function (e) { var t = i.props.selected ? i.props.selected : i.getPreSelection(), r = i.props.selected ? e : Re$2(t, { hour: getHours(e), minute: getMinutes(e) }); i.setState({ preSelection: r }), i.props.onChange(r), i.props.shouldCloseOnSelect && (i.sendFocusBackToInput(), i.setOpen(!1)), i.props.showTimeInput && i.setOpen(!0), (i.props.showTimeSelectOnly || i.props.showTimeSelect) && i.setState({ isRenderAriaLiveMessage: !0 }), i.setState({ inputValue: null }); })), ye$2(we$1(i), "onInputClick", (function () { i.props.disabled || i.props.readOnly || i.setOpen(!0), i.props.onInputClick(); })), ye$2(we$1(i), "onInputKeyDown", (function (e) { i.props.onKeyDown(e); var t = e.key; if (i.state.open || i.props.inline || i.props.preventOpenOnFocus) {
    if (i.state.open) {
        if ("ArrowDown" === t || "ArrowUp" === t) {
            e.preventDefault();
            var r = i.props.showWeekPicker && i.props.showWeekNumbers ? '.react-datepicker__week-number[tabindex="0"]' : '.react-datepicker__day[tabindex="0"]', n = i.calendar.componentNode && i.calendar.componentNode.querySelector(r);
            return void (n && n.focus({ preventScroll: !0 }));
        }
        var o = Ye$1(i.state.preSelection);
        "Enter" === t ? (e.preventDefault(), i.inputOk() && i.state.lastPreSelectChange === rr ? (i.handleSelect(o, e), !i.props.shouldCloseOnSelect && i.setPreSelection(o)) : i.setOpen(!1)) : "Escape" === t ? (e.preventDefault(), i.sendFocusBackToInput(), i.setOpen(!1)) : "Tab" === t && i.setOpen(!1), i.inputOk() || i.props.onInputError({ code: 1, msg: Zt });
    }
}
else
    "ArrowDown" !== t && "ArrowUp" !== t && "Enter" !== t || i.onInputClick(); })), ye$2(we$1(i), "onPortalKeyDown", (function (e) { "Escape" === e.key && (e.preventDefault(), i.setState({ preventFocus: !0 }, (function () { i.setOpen(!1), setTimeout((function () { i.setFocus(), i.setState({ preventFocus: !1 }); })); }))); })), ye$2(we$1(i), "onDayKeyDown", (function (e) { i.props.onKeyDown(e); var t = e.key, r = Ye$1(i.state.preSelection); if ("Enter" === t)
    e.preventDefault(), i.handleSelect(r, e), !i.props.shouldCloseOnSelect && i.setPreSelection(r);
else if ("Escape" === t)
    e.preventDefault(), i.setOpen(!1), i.inputOk() || i.props.onInputError({ code: 1, msg: Zt });
else if (!i.props.disabledKeyboardNavigation) {
    var n;
    switch (t) {
        case "ArrowLeft":
            n = i.props.showWeekPicker ? subWeeks(r, 1) : subDays(r, 1);
            break;
        case "ArrowRight":
            n = i.props.showWeekPicker ? addWeeks(r, 1) : addDays(r, 1);
            break;
        case "ArrowUp":
            n = subWeeks(r, 1);
            break;
        case "ArrowDown":
            n = addWeeks(r, 1);
            break;
        case "PageUp":
            n = subMonths(r, 1);
            break;
        case "PageDown":
            n = addMonths(r, 1);
            break;
        case "Home":
            n = subYears(r, 1);
            break;
        case "End":
            n = addYears(r, 1);
            break;
        default: n = null;
    }
    if (!n)
        return void (i.props.onInputError && i.props.onInputError({ code: 1, msg: Zt }));
    if (e.preventDefault(), i.setState({ lastPreSelectChange: rr }), i.props.adjustDateOnChange && i.setSelected(n), i.setPreSelection(n), i.props.inline) {
        var o = getMonth(r), a = getMonth(n), s = getYear(r), d = getYear(n);
        o !== a || s !== d ? i.setState({ shouldFocusDayInline: !0 }) : i.setState({ shouldFocusDayInline: !1 });
    }
} })), ye$2(we$1(i), "onPopperKeyDown", (function (e) { "Escape" === e.key && (e.preventDefault(), i.sendFocusBackToInput()); })), ye$2(we$1(i), "onClearClick", (function (e) { e && e.preventDefault && e.preventDefault(), i.sendFocusBackToInput(), i.props.selectsRange ? i.props.onChange([null, null], e) : i.props.onChange(null, e), i.setState({ inputValue: null }); })), ye$2(we$1(i), "clear", (function () { i.onClearClick(); })), ye$2(we$1(i), "onScroll", (function (e) { "boolean" == typeof i.props.closeOnScroll && i.props.closeOnScroll ? e.target !== document && e.target !== document.documentElement && e.target !== document.body || i.setOpen(!1) : "function" == typeof i.props.closeOnScroll && i.props.closeOnScroll(e) && i.setOpen(!1); })), ye$2(we$1(i), "renderCalendar", (function () { return i.props.inline || i.isCalendarOpen() ? react_1.default.createElement(Xt, { ref: function (e) { i.calendar = e; }, locale: i.props.locale, calendarStartDay: i.props.calendarStartDay, chooseDayAriaLabelPrefix: i.props.chooseDayAriaLabelPrefix, disabledDayAriaLabelPrefix: i.props.disabledDayAriaLabelPrefix, weekAriaLabelPrefix: i.props.weekAriaLabelPrefix, monthAriaLabelPrefix: i.props.monthAriaLabelPrefix, adjustDateOnChange: i.props.adjustDateOnChange, setOpen: i.setOpen, shouldCloseOnSelect: i.props.shouldCloseOnSelect, dateFormat: i.props.dateFormatCalendar, useWeekdaysShort: i.props.useWeekdaysShort, formatWeekDay: i.props.formatWeekDay, dropdownMode: i.props.dropdownMode, selected: i.props.selected, preSelection: i.state.preSelection, onSelect: i.handleSelect, onWeekSelect: i.props.onWeekSelect, openToDate: i.props.openToDate, minDate: i.props.minDate, maxDate: i.props.maxDate, selectsStart: i.props.selectsStart, selectsEnd: i.props.selectsEnd, selectsRange: i.props.selectsRange, startDate: i.props.startDate, endDate: i.props.endDate, excludeDates: i.props.excludeDates, excludeDateIntervals: i.props.excludeDateIntervals, filterDate: i.props.filterDate, onClickOutside: i.handleCalendarClickOutside, formatWeekNumber: i.props.formatWeekNumber, highlightDates: i.state.highlightDates, holidays: i.state.holidays, includeDates: i.props.includeDates, includeDateIntervals: i.props.includeDateIntervals, includeTimes: i.props.includeTimes, injectTimes: i.props.injectTimes, inline: i.props.inline, shouldFocusDayInline: i.state.shouldFocusDayInline, peekNextMonth: i.props.peekNextMonth, showMonthDropdown: i.props.showMonthDropdown, showPreviousMonths: i.props.showPreviousMonths, useShortMonthInDropdown: i.props.useShortMonthInDropdown, showMonthYearDropdown: i.props.showMonthYearDropdown, showWeekNumbers: i.props.showWeekNumbers, showYearDropdown: i.props.showYearDropdown, withPortal: i.props.withPortal, forceShowMonthNavigation: i.props.forceShowMonthNavigation, showDisabledMonthNavigation: i.props.showDisabledMonthNavigation, scrollableYearDropdown: i.props.scrollableYearDropdown, scrollableMonthYearDropdown: i.props.scrollableMonthYearDropdown, todayButton: i.props.todayButton, weekLabel: i.props.weekLabel, outsideClickIgnoreClass: Jt, fixedHeight: i.props.fixedHeight, monthsShown: i.props.monthsShown, monthSelectedIn: i.state.monthSelectedIn, onDropdownFocus: i.handleDropdownFocus, onMonthChange: i.props.onMonthChange, onYearChange: i.props.onYearChange, dayClassName: i.props.dayClassName, weekDayClassName: i.props.weekDayClassName, monthClassName: i.props.monthClassName, timeClassName: i.props.timeClassName, showDateSelect: i.props.showDateSelect, showTimeSelect: i.props.showTimeSelect, showTimeSelectOnly: i.props.showTimeSelectOnly, onTimeChange: i.handleTimeChange, timeFormat: i.props.timeFormat, timeIntervals: i.props.timeIntervals, minTime: i.props.minTime, maxTime: i.props.maxTime, excludeTimes: i.props.excludeTimes, filterTime: i.props.filterTime, timeCaption: i.props.timeCaption, className: i.props.calendarClassName, container: i.props.calendarContainer, yearItemNumber: i.props.yearItemNumber, yearDropdownItemNumber: i.props.yearDropdownItemNumber, previousMonthAriaLabel: i.props.previousMonthAriaLabel, previousMonthButtonLabel: i.props.previousMonthButtonLabel, nextMonthAriaLabel: i.props.nextMonthAriaLabel, nextMonthButtonLabel: i.props.nextMonthButtonLabel, previousYearAriaLabel: i.props.previousYearAriaLabel, previousYearButtonLabel: i.props.previousYearButtonLabel, nextYearAriaLabel: i.props.nextYearAriaLabel, nextYearButtonLabel: i.props.nextYearButtonLabel, timeInputLabel: i.props.timeInputLabel, disabledKeyboardNavigation: i.props.disabledKeyboardNavigation, renderCustomHeader: i.props.renderCustomHeader, popperProps: i.props.popperProps, renderDayContents: i.props.renderDayContents, renderMonthContent: i.props.renderMonthContent, renderQuarterContent: i.props.renderQuarterContent, renderYearContent: i.props.renderYearContent, onDayMouseEnter: i.props.onDayMouseEnter, onMonthMouseLeave: i.props.onMonthMouseLeave, onYearMouseEnter: i.props.onYearMouseEnter, onYearMouseLeave: i.props.onYearMouseLeave, selectsDisabledDaysInRange: i.props.selectsDisabledDaysInRange, showTimeInput: i.props.showTimeInput, showMonthYearPicker: i.props.showMonthYearPicker, showFullMonthYearPicker: i.props.showFullMonthYearPicker, showTwoColumnMonthYearPicker: i.props.showTwoColumnMonthYearPicker, showFourColumnMonthYearPicker: i.props.showFourColumnMonthYearPicker, showYearPicker: i.props.showYearPicker, showQuarterYearPicker: i.props.showQuarterYearPicker, showWeekPicker: i.props.showWeekPicker, showPopperArrow: i.props.showPopperArrow, excludeScrollbar: i.props.excludeScrollbar, handleOnKeyDown: i.props.onKeyDown, handleOnDayKeyDown: i.onDayKeyDown, isInputFocused: i.state.focused, customTimeInput: i.props.customTimeInput, setPreSelection: i.setPreSelection }, i.props.children) : null; })), ye$2(we$1(i), "renderAriaLiveRegion", (function () { var t, r = i.props, n = r.dateFormat, o = r.locale, a = i.props.showTimeInput || i.props.showTimeSelect ? "PPPPp" : "PPPP"; return t = i.props.selectsRange ? "Selected start date: ".concat(Oe(i.props.startDate, { dateFormat: a, locale: o }), ". ").concat(i.props.endDate ? "End date: " + Oe(i.props.endDate, { dateFormat: a, locale: o }) : "") : i.props.showTimeSelectOnly ? "Selected time: ".concat(Oe(i.props.selected, { dateFormat: n, locale: o })) : i.props.showYearPicker ? "Selected year: ".concat(Oe(i.props.selected, { dateFormat: "yyyy", locale: o })) : i.props.showMonthYearPicker ? "Selected month: ".concat(Oe(i.props.selected, { dateFormat: "MMMM yyyy", locale: o })) : i.props.showQuarterYearPicker ? "Selected quarter: ".concat(Oe(i.props.selected, { dateFormat: "yyyy, QQQ", locale: o })) : "Selected date: ".concat(Oe(i.props.selected, { dateFormat: a, locale: o })), react_1.default.createElement("span", { role: "alert", "aria-live": "polite", className: "react-datepicker__aria-live" }, t); })), ye$2(we$1(i), "renderDateInput", (function () { var t, n = r$4(i.props.className, ye$2({}, Jt, i.state.open)), o = i.props.customInput || react_1.default.createElement("input", { type: "text" }), a = i.props.customInputRef || "ref", s = "string" == typeof i.props.value ? i.props.value : "string" == typeof i.state.inputValue ? i.state.inputValue : i.props.selectsRange ? function (e, t, r) { if (!e)
    return ""; var n = Oe(e, r), o = t ? Oe(t, r) : ""; return "".concat(n, " - ").concat(o); }(i.props.startDate, i.props.endDate, i.props) : Oe(i.props.selected, i.props); return react_1.default.cloneElement(o, (ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(t = {}, a, (function (e) { i.input = e; })), "value", s), "onBlur", i.handleBlur), "onChange", i.handleChange), "onClick", i.onInputClick), "onFocus", i.handleFocus), "onKeyDown", i.onInputKeyDown), "id", i.props.id), "name", i.props.name), "form", i.props.form), ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(ye$2(t, "autoFocus", i.props.autoFocus), "placeholder", i.props.placeholderText), "disabled", i.props.disabled), "autoComplete", i.props.autoComplete), "className", r$4(o.props.className, n)), "title", i.props.title), "readOnly", i.props.readOnly), "required", i.props.required), "tabIndex", i.props.tabIndex), "aria-describedby", i.props.ariaDescribedBy), ye$2(ye$2(ye$2(t, "aria-invalid", i.props.ariaInvalid), "aria-labelledby", i.props.ariaLabelledBy), "aria-required", i.props.ariaRequired))); })), ye$2(we$1(i), "renderClearButton", (function () { var t = i.props, r = t.isClearable, n = t.selected, o = t.startDate, a = t.endDate, s = t.clearButtonTitle, p = t.clearButtonClassName, c = void 0 === p ? "" : p, l = t.ariaLabelClose, d = void 0 === l ? "Close" : l; return !r || null == n && null == o && null == a ? null : react_1.default.createElement("button", { type: "button", className: "react-datepicker__close-icon ".concat(c).trim(), "aria-label": d, onClick: i.onClearClick, title: s, tabIndex: -1 }); })), i.state = i.calcInitialState(), i.preventFocusTimeout = null, i; } return fe$1(s, [{ key: "componentDidMount", value: function () { window.addEventListener("scroll", this.onScroll, !0); } }, { key: "componentDidUpdate", value: function (e, t) { var r, n; e.inline && (r = e.selected, n = this.props.selected, r && n ? getMonth(r) !== getMonth(n) || getYear(r) !== getYear(n) : r !== n) && this.setPreSelection(this.props.selected), void 0 !== this.state.monthSelectedIn && e.monthsShown !== this.props.monthsShown && this.setState({ monthSelectedIn: 0 }), e.highlightDates !== this.props.highlightDates && this.setState({ highlightDates: vt(this.props.highlightDates) }), t.focused || Ve$1(e.selected, this.props.selected) || this.setState({ inputValue: null }), t.open !== this.state.open && (!1 === t.open && !0 === this.state.open && this.props.onCalendarOpen(), !0 === t.open && !1 === this.state.open && this.props.onCalendarClose()); } }, { key: "componentWillUnmount", value: function () { this.clearPreventFocusTimeout(), window.removeEventListener("scroll", this.onScroll, !0); } }, { key: "renderInputContainer", value: function () { var t = this.props, r = t.showIcon, n = t.icon, o = t.calendarIconClassname; return react_1.default.createElement("div", { className: "react-datepicker__input-container".concat(r ? " react-datepicker__view-calendar-icon" : "") }, r && react_1.default.createElement(qt, { icon: n, className: o }), this.state.isRenderAriaLiveMessage && this.renderAriaLiveRegion(), this.renderDateInput(), this.renderClearButton()); } }, { key: "render", value: function () { var t = this.renderCalendar(); if (this.props.inline)
            return t; if (this.props.withPortal) {
            var r = this.state.open ? react_1.default.createElement($t, { enableTabLoop: this.props.enableTabLoop }, react_1.default.createElement("div", { className: "react-datepicker__portal", tabIndex: -1, onKeyDown: this.onPortalKeyDown }, t)) : null;
            return this.state.open && this.props.portalId && (r = react_1.default.createElement(Ut, { portalId: this.props.portalId, portalHost: this.props.portalHost }, r)), react_1.default.createElement("div", null, this.renderInputContainer(), r);
        } return react_1.default.createElement(Gt, { className: this.props.popperClassName, wrapperClassName: this.props.wrapperClassName, hidePopper: !this.isCalendarOpen(), portalId: this.props.portalId, portalHost: this.props.portalHost, popperModifiers: this.props.popperModifiers, targetComponent: this.renderInputContainer(), popperContainer: this.props.popperContainer, popperComponent: t, popperPlacement: this.props.popperPlacement, popperProps: this.props.popperProps, popperOnKeyDown: this.onPopperKeyDown, enableTabLoop: this.props.enableTabLoop }); } }], [{ key: "defaultProps", get: function () { return { allowSameDay: !1, dateFormat: "MM/dd/yyyy", dateFormatCalendar: "LLLL yyyy", onChange: function () { }, disabled: !1, disabledKeyboardNavigation: !1, dropdownMode: "scroll", onFocus: function () { }, onBlur: function () { }, onKeyDown: function () { }, onInputClick: function () { }, onSelect: function () { }, onClickOutside: function () { }, onMonthChange: function () { }, onCalendarOpen: function () { }, onCalendarClose: function () { }, preventOpenOnFocus: !1, onYearChange: function () { }, onInputError: function () { }, monthsShown: 1, readOnly: !1, withPortal: !1, selectsDisabledDaysInRange: !1, shouldCloseOnSelect: !0, showTimeSelect: !1, showTimeInput: !1, showPreviousMonths: !1, showMonthYearPicker: !1, showFullMonthYearPicker: !1, showTwoColumnMonthYearPicker: !1, showFourColumnMonthYearPicker: !1, showYearPicker: !1, showQuarterYearPicker: !1, showWeekPicker: !1, strictParsing: !1, timeIntervals: 30, timeCaption: "Time", previousMonthAriaLabel: "Previous Month", previousMonthButtonLabel: "Previous Month", nextMonthAriaLabel: "Next Month", nextMonthButtonLabel: "Next Month", previousYearAriaLabel: "Previous Year", previousYearButtonLabel: "Previous Year", nextYearAriaLabel: "Next Year", nextYearButtonLabel: "Next Year", timeInputLabel: "Time", enableTabLoop: !0, yearItemNumber: Ne$2, focusSelectedMonth: !1, showPopperArrow: !0, excludeScrollbar: !0, customTimeInput: null, calendarStartDay: void 0 }; } }]), s; }(), tr = "input", rr = "navigate";
/**
 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
 *
 * Specifically:
 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
 *
 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
 */
function twJoin() {
    var index = 0;
    var argument;
    var resolvedValue;
    var string = '';
    while (index < arguments.length) {
        if (argument = arguments[index++]) {
            if (resolvedValue = toValue(argument)) {
                string && (string += ' ');
                string += resolvedValue;
            }
        }
    }
    return string;
}
function toValue(mix) {
    if (typeof mix === 'string') {
        return mix;
    }
    var resolvedValue;
    var string = '';
    for (var k = 0; k < mix.length; k++) {
        if (mix[k]) {
            if (resolvedValue = toValue(mix[k])) {
                string && (string += ' ');
                string += resolvedValue;
            }
        }
    }
    return string;
}
var CLASS_PART_SEPARATOR = '-';
function createClassUtils(config) {
    var classMap = createClassMap(config);
    var conflictingClassGroups = config.conflictingClassGroups, _config$conflictingCl = config.conflictingClassGroupModifiers, conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
    function getClassGroupId(className) {
        var classParts = className.split(CLASS_PART_SEPARATOR);
        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
        if (classParts[0] === '' && classParts.length !== 1) {
            classParts.shift();
        }
        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    }
    function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
        var conflicts = conflictingClassGroups[classGroupId] || [];
        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
            return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
        }
        return conflicts;
    }
    return {
        getClassGroupId: getClassGroupId,
        getConflictingClassGroupIds: getConflictingClassGroupIds
    };
}
function getGroupRecursive(classParts, classPartObject) {
    var _m;
    if (classParts.length === 0) {
        return classPartObject.classGroupId;
    }
    var currentClassPart = classParts[0];
    var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;
    if (classGroupFromNextClassPart) {
        return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
        return undefined;
    }
    var classRest = classParts.join(CLASS_PART_SEPARATOR);
    return (_m = classPartObject.validators.find(function (_ref) {
        var validator = _ref.validator;
        return validator(classRest);
    })) === null || _m === void 0 ? void 0 : _m.classGroupId;
}
var arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
    if (arbitraryPropertyRegex.test(className)) {
        var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
        var property = arbitraryPropertyClassName === null || arbitraryPropertyClassName === void 0 ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(':'));
        if (property) {
            // I use two dots here because one dot is used as prefix for class groups in plugins
            return 'arbitrary..' + property;
        }
    }
}
/**
 * Exported for testing only
 */
function createClassMap(config) {
    var theme = config.theme, prefix = config.prefix;
    var classMap = {
        nextPart: new Map(),
        validators: []
    };
    var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
    prefixedClassGroupEntries.forEach(function (_ref2) {
        var classGroupId = _ref2[0], classGroup = _ref2[1];
        processClassesRecursively(classGroup, classMap, classGroupId, theme);
    });
    return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
    classGroup.forEach(function (classDefinition) {
        if (typeof classDefinition === 'string') {
            var classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
            classPartObjectToEdit.classGroupId = classGroupId;
            return;
        }
        if (typeof classDefinition === 'function') {
            if (isThemeGetter(classDefinition)) {
                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
                return;
            }
            classPartObject.validators.push({
                validator: classDefinition,
                classGroupId: classGroupId
            });
            return;
        }
        Object.entries(classDefinition).forEach(function (_ref3) {
            var key = _ref3[0], classGroup = _ref3[1];
            processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
        });
    });
}
function getPart(classPartObject, path) {
    var currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach(function (pathPart) {
        if (!currentClassPartObject.nextPart.has(pathPart)) {
            currentClassPartObject.nextPart.set(pathPart, {
                nextPart: new Map(),
                validators: []
            });
        }
        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
}
function isThemeGetter(func) {
    return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
    if (!prefix) {
        return classGroupEntries;
    }
    return classGroupEntries.map(function (_ref4) {
        var classGroupId = _ref4[0], classGroup = _ref4[1];
        var prefixedClassGroup = classGroup.map(function (classDefinition) {
            if (typeof classDefinition === 'string') {
                return prefix + classDefinition;
            }
            if (typeof classDefinition === 'object') {
                return Object.fromEntries(Object.entries(classDefinition).map(function (_ref5) {
                    var key = _ref5[0], value = _ref5[1];
                    return [prefix + key, value];
                }));
            }
            return classDefinition;
        });
        return [classGroupId, prefixedClassGroup];
    });
}
// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
function createLruCache(maxCacheSize) {
    if (maxCacheSize < 1) {
        return {
            get: function get() {
                return undefined;
            },
            set: function set() { }
        };
    }
    var cacheSize = 0;
    var cache = new Map();
    var previousCache = new Map();
    function update(key, value) {
        cache.set(key, value);
        cacheSize++;
        if (cacheSize > maxCacheSize) {
            cacheSize = 0;
            previousCache = cache;
            cache = new Map();
        }
    }
    return {
        get: function get(key) {
            var value = cache.get(key);
            if (value !== undefined) {
                return value;
            }
            if ((value = previousCache.get(key)) !== undefined) {
                update(key, value);
                return value;
            }
        },
        set: function set(key, value) {
            if (cache.has(key)) {
                cache.set(key, value);
            }
            else {
                update(key, value);
            }
        }
    };
}
var IMPORTANT_MODIFIER = '!';
function createSplitModifiers(config) {
    var separator = config.separator || ':';
    var isSeparatorSingleCharacter = separator.length === 1;
    var firstSeparatorCharacter = separator[0];
    var separatorLength = separator.length;
    // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
    return function splitModifiers(className) {
        var modifiers = [];
        var bracketDepth = 0;
        var modifierStart = 0;
        var postfixModifierPosition;
        for (var index = 0; index < className.length; index++) {
            var currentCharacter = className[index];
            if (bracketDepth === 0) {
                if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
                    modifiers.push(className.slice(modifierStart, index));
                    modifierStart = index + separatorLength;
                    continue;
                }
                if (currentCharacter === '/') {
                    postfixModifierPosition = index;
                    continue;
                }
            }
            if (currentCharacter === '[') {
                bracketDepth++;
            }
            else if (currentCharacter === ']') {
                bracketDepth--;
            }
        }
        var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
        var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
        var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
        var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
        return {
            modifiers: modifiers,
            hasImportantModifier: hasImportantModifier,
            baseClassName: baseClassName,
            maybePostfixModifierPosition: maybePostfixModifierPosition
        };
    };
}
/**
 * Sorts modifiers according to following schema:
 * - Predefined modifiers are sorted alphabetically
 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
 */
function sortModifiers(modifiers) {
    if (modifiers.length <= 1) {
        return modifiers;
    }
    var sortedModifiers = [];
    var unsortedModifiers = [];
    modifiers.forEach(function (modifier) {
        var isArbitraryVariant = modifier[0] === '[';
        if (isArbitraryVariant) {
            sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
            unsortedModifiers = [];
        }
        else {
            unsortedModifiers.push(modifier);
        }
    });
    sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
    return sortedModifiers;
}
function createConfigUtils(config) {
    return Object.assign({ cache: createLruCache(config.cacheSize), splitModifiers: createSplitModifiers(config) }, createClassUtils(config));
}
var SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
    var splitModifiers = configUtils.splitModifiers, getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
    /**
     * Set of classGroupIds in following format:
     * `{importantModifier}{variantModifiers}{classGroupId}`
     * @example 'float'
     * @example 'hover:focus:bg-color'
     * @example 'md:!pr'
     */
    var classGroupsInConflict = new Set();
    return classList.trim().split(SPLIT_CLASSES_REGEX).map(function (originalClassName) {
        var _splitModifiers = splitModifiers(originalClassName), modifiers = _splitModifiers.modifiers, hasImportantModifier = _splitModifiers.hasImportantModifier, baseClassName = _splitModifiers.baseClassName, maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
        var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
        var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
        if (!classGroupId) {
            if (!maybePostfixModifierPosition) {
                return {
                    isTailwindClass: false,
                    originalClassName: originalClassName
                };
            }
            classGroupId = getClassGroupId(baseClassName);
            if (!classGroupId) {
                return {
                    isTailwindClass: false,
                    originalClassName: originalClassName
                };
            }
            hasPostfixModifier = false;
        }
        var variantModifier = sortModifiers(modifiers).join(':');
        var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
        return {
            isTailwindClass: true,
            modifierId: modifierId,
            classGroupId: classGroupId,
            originalClassName: originalClassName,
            hasPostfixModifier: hasPostfixModifier
        };
    }).reverse()
        // Last class in conflict wins, so we need to filter conflicting classes in reverse order.
        .filter(function (parsed) {
        if (!parsed.isTailwindClass) {
            return true;
        }
        var modifierId = parsed.modifierId, classGroupId = parsed.classGroupId, hasPostfixModifier = parsed.hasPostfixModifier;
        var classId = modifierId + classGroupId;
        if (classGroupsInConflict.has(classId)) {
            return false;
        }
        classGroupsInConflict.add(classId);
        getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function (group) {
            return classGroupsInConflict.add(modifierId + group);
        });
        return true;
    }).reverse().map(function (parsed) {
        return parsed.originalClassName;
    }).join(' ');
}
function createTailwindMerge() {
    for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
        createConfig[_key] = arguments[_key];
    }
    var configUtils;
    var cacheGet;
    var cacheSet;
    var functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
        var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1);
        var config = restCreateConfig.reduce(function (previousConfig, createConfigCurrent) {
            return createConfigCurrent(previousConfig);
        }, firstCreateConfig());
        configUtils = createConfigUtils(config);
        cacheGet = configUtils.cache.get;
        cacheSet = configUtils.cache.set;
        functionToCall = tailwindMerge;
        return tailwindMerge(classList);
    }
    function tailwindMerge(classList) {
        var cachedResult = cacheGet(classList);
        if (cachedResult) {
            return cachedResult;
        }
        var result = mergeClassList(classList, configUtils);
        cacheSet(classList, result);
        return result;
    }
    return function callTailwindMerge() {
        return functionToCall(twJoin.apply(null, arguments));
    };
}
function fromTheme(key) {
    var themeGetter = function themeGetter(theme) {
        return theme[key] || [];
    };
    themeGetter.isThemeGetter = true;
    return themeGetter;
}
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /*#__PURE__*/ new Set(['px', 'full', 'screen']);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
// Shadow always begins with x and y offset separated by underscore
var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
function isLength(value) {
    return isNumber$2(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);
}
function isArbitraryLength(value) {
    return getIsArbitraryValue(value, 'length', isLengthOnly);
}
function isArbitrarySize(value) {
    return getIsArbitraryValue(value, 'size', isNever);
}
function isArbitraryPosition(value) {
    return getIsArbitraryValue(value, 'position', isNever);
}
function isArbitraryUrl(value) {
    return getIsArbitraryValue(value, 'url', isUrl);
}
function isArbitraryNumber(value) {
    return getIsArbitraryValue(value, 'number', isNumber$2);
}
function isNumber$2(value) {
    return !Number.isNaN(Number(value));
}
function isPercent(value) {
    return value.endsWith('%') && isNumber$2(value.slice(0, -1));
}
function isInteger(value) {
    return isIntegerOnly(value) || getIsArbitraryValue(value, 'number', isIntegerOnly);
}
function isArbitraryValue(value) {
    return arbitraryValueRegex.test(value);
}
function isAny() {
    return true;
}
function isTshirtSize(value) {
    return tshirtUnitRegex.test(value);
}
function isArbitraryShadow(value) {
    return getIsArbitraryValue(value, '', isShadow);
}
function getIsArbitraryValue(value, label, testValue) {
    var result = arbitraryValueRegex.exec(value);
    if (result) {
        if (result[1]) {
            return result[1] === label;
        }
        return testValue(result[2]);
    }
    return false;
}
function isLengthOnly(value) {
    return lengthUnitRegex.test(value);
}
function isNever() {
    return false;
}
function isUrl(value) {
    return value.startsWith('url(');
}
function isIntegerOnly(value) {
    return Number.isInteger(Number(value));
}
function isShadow(value) {
    return shadowRegex.test(value);
}
function getDefaultConfig() {
    var colors = fromTheme('colors');
    var spacing = fromTheme('spacing');
    var blur = fromTheme('blur');
    var brightness = fromTheme('brightness');
    var borderColor = fromTheme('borderColor');
    var borderRadius = fromTheme('borderRadius');
    var borderSpacing = fromTheme('borderSpacing');
    var borderWidth = fromTheme('borderWidth');
    var contrast = fromTheme('contrast');
    var grayscale = fromTheme('grayscale');
    var hueRotate = fromTheme('hueRotate');
    var invert = fromTheme('invert');
    var gap = fromTheme('gap');
    var gradientColorStops = fromTheme('gradientColorStops');
    var gradientColorStopPositions = fromTheme('gradientColorStopPositions');
    var inset = fromTheme('inset');
    var margin = fromTheme('margin');
    var opacity = fromTheme('opacity');
    var padding = fromTheme('padding');
    var saturate = fromTheme('saturate');
    var scale = fromTheme('scale');
    var sepia = fromTheme('sepia');
    var skew = fromTheme('skew');
    var space = fromTheme('space');
    var translate = fromTheme('translate');
    var getOverscroll = function getOverscroll() {
        return ['auto', 'contain', 'none'];
    };
    var getOverflow = function getOverflow() {
        return ['auto', 'hidden', 'clip', 'visible', 'scroll'];
    };
    var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary() {
        return ['auto', isArbitraryValue, spacing];
    };
    var getSpacingWithArbitrary = function getSpacingWithArbitrary() {
        return [isArbitraryValue, spacing];
    };
    var getLengthWithEmpty = function getLengthWithEmpty() {
        return ['', isLength];
    };
    var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary() {
        return ['auto', isNumber$2, isArbitraryValue];
    };
    var getPositions = function getPositions() {
        return ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];
    };
    var getLineStyles = function getLineStyles() {
        return ['solid', 'dashed', 'dotted', 'double', 'none'];
    };
    var getBlendModes = function getBlendModes() {
        return ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'plus-lighter'];
    };
    var getAlign = function getAlign() {
        return ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];
    };
    var getZeroAndEmpty = function getZeroAndEmpty() {
        return ['', '0', isArbitraryValue];
    };
    var getBreaks = function getBreaks() {
        return ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];
    };
    var getNumber = function getNumber() {
        return [isNumber$2, isArbitraryNumber];
    };
    var getNumberAndArbitrary = function getNumberAndArbitrary() {
        return [isNumber$2, isArbitraryValue];
    };
    return {
        cacheSize: 500,
        theme: {
            colors: [isAny],
            spacing: [isLength],
            blur: ['none', '', isTshirtSize, isArbitraryValue],
            brightness: getNumber(),
            borderColor: [colors],
            borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],
            borderSpacing: getSpacingWithArbitrary(),
            borderWidth: getLengthWithEmpty(),
            contrast: getNumber(),
            grayscale: getZeroAndEmpty(),
            hueRotate: getNumberAndArbitrary(),
            invert: getZeroAndEmpty(),
            gap: getSpacingWithArbitrary(),
            gradientColorStops: [colors],
            gradientColorStopPositions: [isPercent, isArbitraryLength],
            inset: getSpacingWithAutoAndArbitrary(),
            margin: getSpacingWithAutoAndArbitrary(),
            opacity: getNumber(),
            padding: getSpacingWithArbitrary(),
            saturate: getNumber(),
            scale: getNumber(),
            sepia: getZeroAndEmpty(),
            skew: getNumberAndArbitrary(),
            space: getSpacingWithArbitrary(),
            translate: getSpacingWithArbitrary()
        },
        classGroups: {
            // Layout
            /**
             * Aspect Ratio
             * @see https://tailwindcss.com/docs/aspect-ratio
             */
            aspect: [{
                    aspect: ['auto', 'square', 'video', isArbitraryValue]
                }],
            /**
             * Container
             * @see https://tailwindcss.com/docs/container
             */
            container: ['container'],
            /**
             * Columns
             * @see https://tailwindcss.com/docs/columns
             */
            columns: [{
                    columns: [isTshirtSize]
                }],
            /**
             * Break After
             * @see https://tailwindcss.com/docs/break-after
             */
            'break-after': [{
                    'break-after': getBreaks()
                }],
            /**
             * Break Before
             * @see https://tailwindcss.com/docs/break-before
             */
            'break-before': [{
                    'break-before': getBreaks()
                }],
            /**
             * Break Inside
             * @see https://tailwindcss.com/docs/break-inside
             */
            'break-inside': [{
                    'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']
                }],
            /**
             * Box Decoration Break
             * @see https://tailwindcss.com/docs/box-decoration-break
             */
            'box-decoration': [{
                    'box-decoration': ['slice', 'clone']
                }],
            /**
             * Box Sizing
             * @see https://tailwindcss.com/docs/box-sizing
             */
            box: [{
                    box: ['border', 'content']
                }],
            /**
             * Display
             * @see https://tailwindcss.com/docs/display
             */
            display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],
            /**
             * Floats
             * @see https://tailwindcss.com/docs/float
             */
            "float": [{
                    "float": ['right', 'left', 'none']
                }],
            /**
             * Clear
             * @see https://tailwindcss.com/docs/clear
             */
            clear: [{
                    clear: ['left', 'right', 'both', 'none']
                }],
            /**
             * Isolation
             * @see https://tailwindcss.com/docs/isolation
             */
            isolation: ['isolate', 'isolation-auto'],
            /**
             * Object Fit
             * @see https://tailwindcss.com/docs/object-fit
             */
            'object-fit': [{
                    object: ['contain', 'cover', 'fill', 'none', 'scale-down']
                }],
            /**
             * Object Position
             * @see https://tailwindcss.com/docs/object-position
             */
            'object-position': [{
                    object: [].concat(getPositions(), [isArbitraryValue])
                }],
            /**
             * Overflow
             * @see https://tailwindcss.com/docs/overflow
             */
            overflow: [{
                    overflow: getOverflow()
                }],
            /**
             * Overflow X
             * @see https://tailwindcss.com/docs/overflow
             */
            'overflow-x': [{
                    'overflow-x': getOverflow()
                }],
            /**
             * Overflow Y
             * @see https://tailwindcss.com/docs/overflow
             */
            'overflow-y': [{
                    'overflow-y': getOverflow()
                }],
            /**
             * Overscroll Behavior
             * @see https://tailwindcss.com/docs/overscroll-behavior
             */
            overscroll: [{
                    overscroll: getOverscroll()
                }],
            /**
             * Overscroll Behavior X
             * @see https://tailwindcss.com/docs/overscroll-behavior
             */
            'overscroll-x': [{
                    'overscroll-x': getOverscroll()
                }],
            /**
             * Overscroll Behavior Y
             * @see https://tailwindcss.com/docs/overscroll-behavior
             */
            'overscroll-y': [{
                    'overscroll-y': getOverscroll()
                }],
            /**
             * Position
             * @see https://tailwindcss.com/docs/position
             */
            position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],
            /**
             * Top / Right / Bottom / Left
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            inset: [{
                    inset: [inset]
                }],
            /**
             * Right / Left
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            'inset-x': [{
                    'inset-x': [inset]
                }],
            /**
             * Top / Bottom
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            'inset-y': [{
                    'inset-y': [inset]
                }],
            /**
             * Start
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            start: [{
                    start: [inset]
                }],
            /**
             * End
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            end: [{
                    end: [inset]
                }],
            /**
             * Top
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            top: [{
                    top: [inset]
                }],
            /**
             * Right
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            right: [{
                    right: [inset]
                }],
            /**
             * Bottom
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            bottom: [{
                    bottom: [inset]
                }],
            /**
             * Left
             * @see https://tailwindcss.com/docs/top-right-bottom-left
             */
            left: [{
                    left: [inset]
                }],
            /**
             * Visibility
             * @see https://tailwindcss.com/docs/visibility
             */
            visibility: ['visible', 'invisible', 'collapse'],
            /**
             * Z-Index
             * @see https://tailwindcss.com/docs/z-index
             */
            z: [{
                    z: ['auto', isInteger]
                }],
            // Flexbox and Grid
            /**
             * Flex Basis
             * @see https://tailwindcss.com/docs/flex-basis
             */
            basis: [{
                    basis: getSpacingWithAutoAndArbitrary()
                }],
            /**
             * Flex Direction
             * @see https://tailwindcss.com/docs/flex-direction
             */
            'flex-direction': [{
                    flex: ['row', 'row-reverse', 'col', 'col-reverse']
                }],
            /**
             * Flex Wrap
             * @see https://tailwindcss.com/docs/flex-wrap
             */
            'flex-wrap': [{
                    flex: ['wrap', 'wrap-reverse', 'nowrap']
                }],
            /**
             * Flex
             * @see https://tailwindcss.com/docs/flex
             */
            flex: [{
                    flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]
                }],
            /**
             * Flex Grow
             * @see https://tailwindcss.com/docs/flex-grow
             */
            grow: [{
                    grow: getZeroAndEmpty()
                }],
            /**
             * Flex Shrink
             * @see https://tailwindcss.com/docs/flex-shrink
             */
            shrink: [{
                    shrink: getZeroAndEmpty()
                }],
            /**
             * Order
             * @see https://tailwindcss.com/docs/order
             */
            order: [{
                    order: ['first', 'last', 'none', isInteger]
                }],
            /**
             * Grid Template Columns
             * @see https://tailwindcss.com/docs/grid-template-columns
             */
            'grid-cols': [{
                    'grid-cols': [isAny]
                }],
            /**
             * Grid Column Start / End
             * @see https://tailwindcss.com/docs/grid-column
             */
            'col-start-end': [{
                    col: ['auto', {
                            span: ['full', isInteger]
                        }, isArbitraryValue]
                }],
            /**
             * Grid Column Start
             * @see https://tailwindcss.com/docs/grid-column
             */
            'col-start': [{
                    'col-start': getNumberWithAutoAndArbitrary()
                }],
            /**
             * Grid Column End
             * @see https://tailwindcss.com/docs/grid-column
             */
            'col-end': [{
                    'col-end': getNumberWithAutoAndArbitrary()
                }],
            /**
             * Grid Template Rows
             * @see https://tailwindcss.com/docs/grid-template-rows
             */
            'grid-rows': [{
                    'grid-rows': [isAny]
                }],
            /**
             * Grid Row Start / End
             * @see https://tailwindcss.com/docs/grid-row
             */
            'row-start-end': [{
                    row: ['auto', {
                            span: [isInteger]
                        }, isArbitraryValue]
                }],
            /**
             * Grid Row Start
             * @see https://tailwindcss.com/docs/grid-row
             */
            'row-start': [{
                    'row-start': getNumberWithAutoAndArbitrary()
                }],
            /**
             * Grid Row End
             * @see https://tailwindcss.com/docs/grid-row
             */
            'row-end': [{
                    'row-end': getNumberWithAutoAndArbitrary()
                }],
            /**
             * Grid Auto Flow
             * @see https://tailwindcss.com/docs/grid-auto-flow
             */
            'grid-flow': [{
                    'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']
                }],
            /**
             * Grid Auto Columns
             * @see https://tailwindcss.com/docs/grid-auto-columns
             */
            'auto-cols': [{
                    'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]
                }],
            /**
             * Grid Auto Rows
             * @see https://tailwindcss.com/docs/grid-auto-rows
             */
            'auto-rows': [{
                    'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]
                }],
            /**
             * Gap
             * @see https://tailwindcss.com/docs/gap
             */
            gap: [{
                    gap: [gap]
                }],
            /**
             * Gap X
             * @see https://tailwindcss.com/docs/gap
             */
            'gap-x': [{
                    'gap-x': [gap]
                }],
            /**
             * Gap Y
             * @see https://tailwindcss.com/docs/gap
             */
            'gap-y': [{
                    'gap-y': [gap]
                }],
            /**
             * Justify Content
             * @see https://tailwindcss.com/docs/justify-content
             */
            'justify-content': [{
                    justify: ['normal'].concat(getAlign())
                }],
            /**
             * Justify Items
             * @see https://tailwindcss.com/docs/justify-items
             */
            'justify-items': [{
                    'justify-items': ['start', 'end', 'center', 'stretch']
                }],
            /**
             * Justify Self
             * @see https://tailwindcss.com/docs/justify-self
             */
            'justify-self': [{
                    'justify-self': ['auto', 'start', 'end', 'center', 'stretch']
                }],
            /**
             * Align Content
             * @see https://tailwindcss.com/docs/align-content
             */
            'align-content': [{
                    content: ['normal'].concat(getAlign(), ['baseline'])
                }],
            /**
             * Align Items
             * @see https://tailwindcss.com/docs/align-items
             */
            'align-items': [{
                    items: ['start', 'end', 'center', 'baseline', 'stretch']
                }],
            /**
             * Align Self
             * @see https://tailwindcss.com/docs/align-self
             */
            'align-self': [{
                    self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']
                }],
            /**
             * Place Content
             * @see https://tailwindcss.com/docs/place-content
             */
            'place-content': [{
                    'place-content': [].concat(getAlign(), ['baseline'])
                }],
            /**
             * Place Items
             * @see https://tailwindcss.com/docs/place-items
             */
            'place-items': [{
                    'place-items': ['start', 'end', 'center', 'baseline', 'stretch']
                }],
            /**
             * Place Self
             * @see https://tailwindcss.com/docs/place-self
             */
            'place-self': [{
                    'place-self': ['auto', 'start', 'end', 'center', 'stretch']
                }],
            // Spacing
            /**
             * Padding
             * @see https://tailwindcss.com/docs/padding
             */
            p: [{
                    p: [padding]
                }],
            /**
             * Padding X
             * @see https://tailwindcss.com/docs/padding
             */
            px: [{
                    px: [padding]
                }],
            /**
             * Padding Y
             * @see https://tailwindcss.com/docs/padding
             */
            py: [{
                    py: [padding]
                }],
            /**
             * Padding Start
             * @see https://tailwindcss.com/docs/padding
             */
            ps: [{
                    ps: [padding]
                }],
            /**
             * Padding End
             * @see https://tailwindcss.com/docs/padding
             */
            pe: [{
                    pe: [padding]
                }],
            /**
             * Padding Top
             * @see https://tailwindcss.com/docs/padding
             */
            pt: [{
                    pt: [padding]
                }],
            /**
             * Padding Right
             * @see https://tailwindcss.com/docs/padding
             */
            pr: [{
                    pr: [padding]
                }],
            /**
             * Padding Bottom
             * @see https://tailwindcss.com/docs/padding
             */
            pb: [{
                    pb: [padding]
                }],
            /**
             * Padding Left
             * @see https://tailwindcss.com/docs/padding
             */
            pl: [{
                    pl: [padding]
                }],
            /**
             * Margin
             * @see https://tailwindcss.com/docs/margin
             */
            m: [{
                    m: [margin]
                }],
            /**
             * Margin X
             * @see https://tailwindcss.com/docs/margin
             */
            mx: [{
                    mx: [margin]
                }],
            /**
             * Margin Y
             * @see https://tailwindcss.com/docs/margin
             */
            my: [{
                    my: [margin]
                }],
            /**
             * Margin Start
             * @see https://tailwindcss.com/docs/margin
             */
            ms: [{
                    ms: [margin]
                }],
            /**
             * Margin End
             * @see https://tailwindcss.com/docs/margin
             */
            me: [{
                    me: [margin]
                }],
            /**
             * Margin Top
             * @see https://tailwindcss.com/docs/margin
             */
            mt: [{
                    mt: [margin]
                }],
            /**
             * Margin Right
             * @see https://tailwindcss.com/docs/margin
             */
            mr: [{
                    mr: [margin]
                }],
            /**
             * Margin Bottom
             * @see https://tailwindcss.com/docs/margin
             */
            mb: [{
                    mb: [margin]
                }],
            /**
             * Margin Left
             * @see https://tailwindcss.com/docs/margin
             */
            ml: [{
                    ml: [margin]
                }],
            /**
             * Space Between X
             * @see https://tailwindcss.com/docs/space
             */
            'space-x': [{
                    'space-x': [space]
                }],
            /**
             * Space Between X Reverse
             * @see https://tailwindcss.com/docs/space
             */
            'space-x-reverse': ['space-x-reverse'],
            /**
             * Space Between Y
             * @see https://tailwindcss.com/docs/space
             */
            'space-y': [{
                    'space-y': [space]
                }],
            /**
             * Space Between Y Reverse
             * @see https://tailwindcss.com/docs/space
             */
            'space-y-reverse': ['space-y-reverse'],
            // Sizing
            /**
             * Width
             * @see https://tailwindcss.com/docs/width
             */
            w: [{
                    w: ['auto', 'min', 'max', 'fit', isArbitraryValue, spacing]
                }],
            /**
             * Min-Width
             * @see https://tailwindcss.com/docs/min-width
             */
            'min-w': [{
                    'min-w': ['min', 'max', 'fit', isArbitraryValue, isLength]
                }],
            /**
             * Max-Width
             * @see https://tailwindcss.com/docs/max-width
             */
            'max-w': [{
                    'max-w': ['0', 'none', 'full', 'min', 'max', 'fit', 'prose', {
                            screen: [isTshirtSize]
                        }, isTshirtSize, isArbitraryValue]
                }],
            /**
             * Height
             * @see https://tailwindcss.com/docs/height
             */
            h: [{
                    h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']
                }],
            /**
             * Min-Height
             * @see https://tailwindcss.com/docs/min-height
             */
            'min-h': [{
                    'min-h': ['min', 'max', 'fit', isArbitraryValue, isLength]
                }],
            /**
             * Max-Height
             * @see https://tailwindcss.com/docs/max-height
             */
            'max-h': [{
                    'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit']
                }],
            // Typography
            /**
             * Font Size
             * @see https://tailwindcss.com/docs/font-size
             */
            'font-size': [{
                    text: ['base', isTshirtSize, isArbitraryLength]
                }],
            /**
             * Font Smoothing
             * @see https://tailwindcss.com/docs/font-smoothing
             */
            'font-smoothing': ['antialiased', 'subpixel-antialiased'],
            /**
             * Font Style
             * @see https://tailwindcss.com/docs/font-style
             */
            'font-style': ['italic', 'not-italic'],
            /**
             * Font Weight
             * @see https://tailwindcss.com/docs/font-weight
             */
            'font-weight': [{
                    font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]
                }],
            /**
             * Font Family
             * @see https://tailwindcss.com/docs/font-family
             */
            'font-family': [{
                    font: [isAny]
                }],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            'fvn-normal': ['normal-nums'],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            'fvn-ordinal': ['ordinal'],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            'fvn-slashed-zero': ['slashed-zero'],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            'fvn-figure': ['lining-nums', 'oldstyle-nums'],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            'fvn-spacing': ['proportional-nums', 'tabular-nums'],
            /**
             * Font Variant Numeric
             * @see https://tailwindcss.com/docs/font-variant-numeric
             */
            'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],
            /**
             * Letter Spacing
             * @see https://tailwindcss.com/docs/letter-spacing
             */
            tracking: [{
                    tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]
                }],
            /**
             * Line Clamp
             * @see https://tailwindcss.com/docs/line-clamp
             */
            'line-clamp': [{
                    'line-clamp': ['none', isNumber$2, isArbitraryNumber]
                }],
            /**
             * Line Height
             * @see https://tailwindcss.com/docs/line-height
             */
            leading: [{
                    leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isArbitraryValue, isLength]
                }],
            /**
             * List Style Image
             * @see https://tailwindcss.com/docs/list-style-image
             */
            'list-image': [{
                    'list-image': ['none', isArbitraryValue]
                }],
            /**
             * List Style Type
             * @see https://tailwindcss.com/docs/list-style-type
             */
            'list-style-type': [{
                    list: ['none', 'disc', 'decimal', isArbitraryValue]
                }],
            /**
             * List Style Position
             * @see https://tailwindcss.com/docs/list-style-position
             */
            'list-style-position': [{
                    list: ['inside', 'outside']
                }],
            /**
             * Placeholder Color
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/placeholder-color
             */
            'placeholder-color': [{
                    placeholder: [colors]
                }],
            /**
             * Placeholder Opacity
             * @see https://tailwindcss.com/docs/placeholder-opacity
             */
            'placeholder-opacity': [{
                    'placeholder-opacity': [opacity]
                }],
            /**
             * Text Alignment
             * @see https://tailwindcss.com/docs/text-align
             */
            'text-alignment': [{
                    text: ['left', 'center', 'right', 'justify', 'start', 'end']
                }],
            /**
             * Text Color
             * @see https://tailwindcss.com/docs/text-color
             */
            'text-color': [{
                    text: [colors]
                }],
            /**
             * Text Opacity
             * @see https://tailwindcss.com/docs/text-opacity
             */
            'text-opacity': [{
                    'text-opacity': [opacity]
                }],
            /**
             * Text Decoration
             * @see https://tailwindcss.com/docs/text-decoration
             */
            'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],
            /**
             * Text Decoration Style
             * @see https://tailwindcss.com/docs/text-decoration-style
             */
            'text-decoration-style': [{
                    decoration: [].concat(getLineStyles(), ['wavy'])
                }],
            /**
             * Text Decoration Thickness
             * @see https://tailwindcss.com/docs/text-decoration-thickness
             */
            'text-decoration-thickness': [{
                    decoration: ['auto', 'from-font', isLength]
                }],
            /**
             * Text Underline Offset
             * @see https://tailwindcss.com/docs/text-underline-offset
             */
            'underline-offset': [{
                    'underline-offset': ['auto', isArbitraryValue, isLength]
                }],
            /**
             * Text Decoration Color
             * @see https://tailwindcss.com/docs/text-decoration-color
             */
            'text-decoration-color': [{
                    decoration: [colors]
                }],
            /**
             * Text Transform
             * @see https://tailwindcss.com/docs/text-transform
             */
            'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],
            /**
             * Text Overflow
             * @see https://tailwindcss.com/docs/text-overflow
             */
            'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],
            /**
             * Text Indent
             * @see https://tailwindcss.com/docs/text-indent
             */
            indent: [{
                    indent: getSpacingWithArbitrary()
                }],
            /**
             * Vertical Alignment
             * @see https://tailwindcss.com/docs/vertical-align
             */
            'vertical-align': [{
                    align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]
                }],
            /**
             * Whitespace
             * @see https://tailwindcss.com/docs/whitespace
             */
            whitespace: [{
                    whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']
                }],
            /**
             * Word Break
             * @see https://tailwindcss.com/docs/word-break
             */
            "break": [{
                    "break": ['normal', 'words', 'all', 'keep']
                }],
            /**
             * Hyphens
             * @see https://tailwindcss.com/docs/hyphens
             */
            hyphens: [{
                    hyphens: ['none', 'manual', 'auto']
                }],
            /**
             * Content
             * @see https://tailwindcss.com/docs/content
             */
            content: [{
                    content: ['none', isArbitraryValue]
                }],
            // Backgrounds
            /**
             * Background Attachment
             * @see https://tailwindcss.com/docs/background-attachment
             */
            'bg-attachment': [{
                    bg: ['fixed', 'local', 'scroll']
                }],
            /**
             * Background Clip
             * @see https://tailwindcss.com/docs/background-clip
             */
            'bg-clip': [{
                    'bg-clip': ['border', 'padding', 'content', 'text']
                }],
            /**
             * Background Opacity
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/background-opacity
             */
            'bg-opacity': [{
                    'bg-opacity': [opacity]
                }],
            /**
             * Background Origin
             * @see https://tailwindcss.com/docs/background-origin
             */
            'bg-origin': [{
                    'bg-origin': ['border', 'padding', 'content']
                }],
            /**
             * Background Position
             * @see https://tailwindcss.com/docs/background-position
             */
            'bg-position': [{
                    bg: [].concat(getPositions(), [isArbitraryPosition])
                }],
            /**
             * Background Repeat
             * @see https://tailwindcss.com/docs/background-repeat
             */
            'bg-repeat': [{
                    bg: ['no-repeat', {
                            repeat: ['', 'x', 'y', 'round', 'space']
                        }]
                }],
            /**
             * Background Size
             * @see https://tailwindcss.com/docs/background-size
             */
            'bg-size': [{
                    bg: ['auto', 'cover', 'contain', isArbitrarySize]
                }],
            /**
             * Background Image
             * @see https://tailwindcss.com/docs/background-image
             */
            'bg-image': [{
                    bg: ['none', {
                            'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']
                        }, isArbitraryUrl]
                }],
            /**
             * Background Color
             * @see https://tailwindcss.com/docs/background-color
             */
            'bg-color': [{
                    bg: [colors]
                }],
            /**
             * Gradient Color Stops From Position
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            'gradient-from-pos': [{
                    from: [gradientColorStopPositions]
                }],
            /**
             * Gradient Color Stops Via Position
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            'gradient-via-pos': [{
                    via: [gradientColorStopPositions]
                }],
            /**
             * Gradient Color Stops To Position
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            'gradient-to-pos': [{
                    to: [gradientColorStopPositions]
                }],
            /**
             * Gradient Color Stops From
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            'gradient-from': [{
                    from: [gradientColorStops]
                }],
            /**
             * Gradient Color Stops Via
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            'gradient-via': [{
                    via: [gradientColorStops]
                }],
            /**
             * Gradient Color Stops To
             * @see https://tailwindcss.com/docs/gradient-color-stops
             */
            'gradient-to': [{
                    to: [gradientColorStops]
                }],
            // Borders
            /**
             * Border Radius
             * @see https://tailwindcss.com/docs/border-radius
             */
            rounded: [{
                    rounded: [borderRadius]
                }],
            /**
             * Border Radius Start
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-s': [{
                    'rounded-s': [borderRadius]
                }],
            /**
             * Border Radius End
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-e': [{
                    'rounded-e': [borderRadius]
                }],
            /**
             * Border Radius Top
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-t': [{
                    'rounded-t': [borderRadius]
                }],
            /**
             * Border Radius Right
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-r': [{
                    'rounded-r': [borderRadius]
                }],
            /**
             * Border Radius Bottom
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-b': [{
                    'rounded-b': [borderRadius]
                }],
            /**
             * Border Radius Left
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-l': [{
                    'rounded-l': [borderRadius]
                }],
            /**
             * Border Radius Start Start
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-ss': [{
                    'rounded-ss': [borderRadius]
                }],
            /**
             * Border Radius Start End
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-se': [{
                    'rounded-se': [borderRadius]
                }],
            /**
             * Border Radius End End
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-ee': [{
                    'rounded-ee': [borderRadius]
                }],
            /**
             * Border Radius End Start
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-es': [{
                    'rounded-es': [borderRadius]
                }],
            /**
             * Border Radius Top Left
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-tl': [{
                    'rounded-tl': [borderRadius]
                }],
            /**
             * Border Radius Top Right
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-tr': [{
                    'rounded-tr': [borderRadius]
                }],
            /**
             * Border Radius Bottom Right
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-br': [{
                    'rounded-br': [borderRadius]
                }],
            /**
             * Border Radius Bottom Left
             * @see https://tailwindcss.com/docs/border-radius
             */
            'rounded-bl': [{
                    'rounded-bl': [borderRadius]
                }],
            /**
             * Border Width
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w': [{
                    border: [borderWidth]
                }],
            /**
             * Border Width X
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-x': [{
                    'border-x': [borderWidth]
                }],
            /**
             * Border Width Y
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-y': [{
                    'border-y': [borderWidth]
                }],
            /**
             * Border Width Start
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-s': [{
                    'border-s': [borderWidth]
                }],
            /**
             * Border Width End
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-e': [{
                    'border-e': [borderWidth]
                }],
            /**
             * Border Width Top
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-t': [{
                    'border-t': [borderWidth]
                }],
            /**
             * Border Width Right
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-r': [{
                    'border-r': [borderWidth]
                }],
            /**
             * Border Width Bottom
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-b': [{
                    'border-b': [borderWidth]
                }],
            /**
             * Border Width Left
             * @see https://tailwindcss.com/docs/border-width
             */
            'border-w-l': [{
                    'border-l': [borderWidth]
                }],
            /**
             * Border Opacity
             * @see https://tailwindcss.com/docs/border-opacity
             */
            'border-opacity': [{
                    'border-opacity': [opacity]
                }],
            /**
             * Border Style
             * @see https://tailwindcss.com/docs/border-style
             */
            'border-style': [{
                    border: [].concat(getLineStyles(), ['hidden'])
                }],
            /**
             * Divide Width X
             * @see https://tailwindcss.com/docs/divide-width
             */
            'divide-x': [{
                    'divide-x': [borderWidth]
                }],
            /**
             * Divide Width X Reverse
             * @see https://tailwindcss.com/docs/divide-width
             */
            'divide-x-reverse': ['divide-x-reverse'],
            /**
             * Divide Width Y
             * @see https://tailwindcss.com/docs/divide-width
             */
            'divide-y': [{
                    'divide-y': [borderWidth]
                }],
            /**
             * Divide Width Y Reverse
             * @see https://tailwindcss.com/docs/divide-width
             */
            'divide-y-reverse': ['divide-y-reverse'],
            /**
             * Divide Opacity
             * @see https://tailwindcss.com/docs/divide-opacity
             */
            'divide-opacity': [{
                    'divide-opacity': [opacity]
                }],
            /**
             * Divide Style
             * @see https://tailwindcss.com/docs/divide-style
             */
            'divide-style': [{
                    divide: getLineStyles()
                }],
            /**
             * Border Color
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color': [{
                    border: [borderColor]
                }],
            /**
             * Border Color X
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color-x': [{
                    'border-x': [borderColor]
                }],
            /**
             * Border Color Y
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color-y': [{
                    'border-y': [borderColor]
                }],
            /**
             * Border Color Top
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color-t': [{
                    'border-t': [borderColor]
                }],
            /**
             * Border Color Right
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color-r': [{
                    'border-r': [borderColor]
                }],
            /**
             * Border Color Bottom
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color-b': [{
                    'border-b': [borderColor]
                }],
            /**
             * Border Color Left
             * @see https://tailwindcss.com/docs/border-color
             */
            'border-color-l': [{
                    'border-l': [borderColor]
                }],
            /**
             * Divide Color
             * @see https://tailwindcss.com/docs/divide-color
             */
            'divide-color': [{
                    divide: [borderColor]
                }],
            /**
             * Outline Style
             * @see https://tailwindcss.com/docs/outline-style
             */
            'outline-style': [{
                    outline: [''].concat(getLineStyles())
                }],
            /**
             * Outline Offset
             * @see https://tailwindcss.com/docs/outline-offset
             */
            'outline-offset': [{
                    'outline-offset': [isArbitraryValue, isLength]
                }],
            /**
             * Outline Width
             * @see https://tailwindcss.com/docs/outline-width
             */
            'outline-w': [{
                    outline: [isLength]
                }],
            /**
             * Outline Color
             * @see https://tailwindcss.com/docs/outline-color
             */
            'outline-color': [{
                    outline: [colors]
                }],
            /**
             * Ring Width
             * @see https://tailwindcss.com/docs/ring-width
             */
            'ring-w': [{
                    ring: getLengthWithEmpty()
                }],
            /**
             * Ring Width Inset
             * @see https://tailwindcss.com/docs/ring-width
             */
            'ring-w-inset': ['ring-inset'],
            /**
             * Ring Color
             * @see https://tailwindcss.com/docs/ring-color
             */
            'ring-color': [{
                    ring: [colors]
                }],
            /**
             * Ring Opacity
             * @see https://tailwindcss.com/docs/ring-opacity
             */
            'ring-opacity': [{
                    'ring-opacity': [opacity]
                }],
            /**
             * Ring Offset Width
             * @see https://tailwindcss.com/docs/ring-offset-width
             */
            'ring-offset-w': [{
                    'ring-offset': [isLength]
                }],
            /**
             * Ring Offset Color
             * @see https://tailwindcss.com/docs/ring-offset-color
             */
            'ring-offset-color': [{
                    'ring-offset': [colors]
                }],
            // Effects
            /**
             * Box Shadow
             * @see https://tailwindcss.com/docs/box-shadow
             */
            shadow: [{
                    shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]
                }],
            /**
             * Box Shadow Color
             * @see https://tailwindcss.com/docs/box-shadow-color
             */
            'shadow-color': [{
                    shadow: [isAny]
                }],
            /**
             * Opacity
             * @see https://tailwindcss.com/docs/opacity
             */
            opacity: [{
                    opacity: [opacity]
                }],
            /**
             * Mix Blend Mode
             * @see https://tailwindcss.com/docs/mix-blend-mode
             */
            'mix-blend': [{
                    'mix-blend': getBlendModes()
                }],
            /**
             * Background Blend Mode
             * @see https://tailwindcss.com/docs/background-blend-mode
             */
            'bg-blend': [{
                    'bg-blend': getBlendModes()
                }],
            // Filters
            /**
             * Filter
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/filter
             */
            filter: [{
                    filter: ['', 'none']
                }],
            /**
             * Blur
             * @see https://tailwindcss.com/docs/blur
             */
            blur: [{
                    blur: [blur]
                }],
            /**
             * Brightness
             * @see https://tailwindcss.com/docs/brightness
             */
            brightness: [{
                    brightness: [brightness]
                }],
            /**
             * Contrast
             * @see https://tailwindcss.com/docs/contrast
             */
            contrast: [{
                    contrast: [contrast]
                }],
            /**
             * Drop Shadow
             * @see https://tailwindcss.com/docs/drop-shadow
             */
            'drop-shadow': [{
                    'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]
                }],
            /**
             * Grayscale
             * @see https://tailwindcss.com/docs/grayscale
             */
            grayscale: [{
                    grayscale: [grayscale]
                }],
            /**
             * Hue Rotate
             * @see https://tailwindcss.com/docs/hue-rotate
             */
            'hue-rotate': [{
                    'hue-rotate': [hueRotate]
                }],
            /**
             * Invert
             * @see https://tailwindcss.com/docs/invert
             */
            invert: [{
                    invert: [invert]
                }],
            /**
             * Saturate
             * @see https://tailwindcss.com/docs/saturate
             */
            saturate: [{
                    saturate: [saturate]
                }],
            /**
             * Sepia
             * @see https://tailwindcss.com/docs/sepia
             */
            sepia: [{
                    sepia: [sepia]
                }],
            /**
             * Backdrop Filter
             * @deprecated since Tailwind CSS v3.0.0
             * @see https://tailwindcss.com/docs/backdrop-filter
             */
            'backdrop-filter': [{
                    'backdrop-filter': ['', 'none']
                }],
            /**
             * Backdrop Blur
             * @see https://tailwindcss.com/docs/backdrop-blur
             */
            'backdrop-blur': [{
                    'backdrop-blur': [blur]
                }],
            /**
             * Backdrop Brightness
             * @see https://tailwindcss.com/docs/backdrop-brightness
             */
            'backdrop-brightness': [{
                    'backdrop-brightness': [brightness]
                }],
            /**
             * Backdrop Contrast
             * @see https://tailwindcss.com/docs/backdrop-contrast
             */
            'backdrop-contrast': [{
                    'backdrop-contrast': [contrast]
                }],
            /**
             * Backdrop Grayscale
             * @see https://tailwindcss.com/docs/backdrop-grayscale
             */
            'backdrop-grayscale': [{
                    'backdrop-grayscale': [grayscale]
                }],
            /**
             * Backdrop Hue Rotate
             * @see https://tailwindcss.com/docs/backdrop-hue-rotate
             */
            'backdrop-hue-rotate': [{
                    'backdrop-hue-rotate': [hueRotate]
                }],
            /**
             * Backdrop Invert
             * @see https://tailwindcss.com/docs/backdrop-invert
             */
            'backdrop-invert': [{
                    'backdrop-invert': [invert]
                }],
            /**
             * Backdrop Opacity
             * @see https://tailwindcss.com/docs/backdrop-opacity
             */
            'backdrop-opacity': [{
                    'backdrop-opacity': [opacity]
                }],
            /**
             * Backdrop Saturate
             * @see https://tailwindcss.com/docs/backdrop-saturate
             */
            'backdrop-saturate': [{
                    'backdrop-saturate': [saturate]
                }],
            /**
             * Backdrop Sepia
             * @see https://tailwindcss.com/docs/backdrop-sepia
             */
            'backdrop-sepia': [{
                    'backdrop-sepia': [sepia]
                }],
            // Tables
            /**
             * Border Collapse
             * @see https://tailwindcss.com/docs/border-collapse
             */
            'border-collapse': [{
                    border: ['collapse', 'separate']
                }],
            /**
             * Border Spacing
             * @see https://tailwindcss.com/docs/border-spacing
             */
            'border-spacing': [{
                    'border-spacing': [borderSpacing]
                }],
            /**
             * Border Spacing X
             * @see https://tailwindcss.com/docs/border-spacing
             */
            'border-spacing-x': [{
                    'border-spacing-x': [borderSpacing]
                }],
            /**
             * Border Spacing Y
             * @see https://tailwindcss.com/docs/border-spacing
             */
            'border-spacing-y': [{
                    'border-spacing-y': [borderSpacing]
                }],
            /**
             * Table Layout
             * @see https://tailwindcss.com/docs/table-layout
             */
            'table-layout': [{
                    table: ['auto', 'fixed']
                }],
            /**
             * Caption Side
             * @see https://tailwindcss.com/docs/caption-side
             */
            caption: [{
                    caption: ['top', 'bottom']
                }],
            // Transitions and Animation
            /**
             * Tranisition Property
             * @see https://tailwindcss.com/docs/transition-property
             */
            transition: [{
                    transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]
                }],
            /**
             * Transition Duration
             * @see https://tailwindcss.com/docs/transition-duration
             */
            duration: [{
                    duration: getNumberAndArbitrary()
                }],
            /**
             * Transition Timing Function
             * @see https://tailwindcss.com/docs/transition-timing-function
             */
            ease: [{
                    ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]
                }],
            /**
             * Transition Delay
             * @see https://tailwindcss.com/docs/transition-delay
             */
            delay: [{
                    delay: getNumberAndArbitrary()
                }],
            /**
             * Animation
             * @see https://tailwindcss.com/docs/animation
             */
            animate: [{
                    animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]
                }],
            // Transforms
            /**
             * Transform
             * @see https://tailwindcss.com/docs/transform
             */
            transform: [{
                    transform: ['', 'gpu', 'none']
                }],
            /**
             * Scale
             * @see https://tailwindcss.com/docs/scale
             */
            scale: [{
                    scale: [scale]
                }],
            /**
             * Scale X
             * @see https://tailwindcss.com/docs/scale
             */
            'scale-x': [{
                    'scale-x': [scale]
                }],
            /**
             * Scale Y
             * @see https://tailwindcss.com/docs/scale
             */
            'scale-y': [{
                    'scale-y': [scale]
                }],
            /**
             * Rotate
             * @see https://tailwindcss.com/docs/rotate
             */
            rotate: [{
                    rotate: [isInteger, isArbitraryValue]
                }],
            /**
             * Translate X
             * @see https://tailwindcss.com/docs/translate
             */
            'translate-x': [{
                    'translate-x': [translate]
                }],
            /**
             * Translate Y
             * @see https://tailwindcss.com/docs/translate
             */
            'translate-y': [{
                    'translate-y': [translate]
                }],
            /**
             * Skew X
             * @see https://tailwindcss.com/docs/skew
             */
            'skew-x': [{
                    'skew-x': [skew]
                }],
            /**
             * Skew Y
             * @see https://tailwindcss.com/docs/skew
             */
            'skew-y': [{
                    'skew-y': [skew]
                }],
            /**
             * Transform Origin
             * @see https://tailwindcss.com/docs/transform-origin
             */
            'transform-origin': [{
                    origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]
                }],
            // Interactivity
            /**
             * Accent Color
             * @see https://tailwindcss.com/docs/accent-color
             */
            accent: [{
                    accent: ['auto', colors]
                }],
            /**
             * Appearance
             * @see https://tailwindcss.com/docs/appearance
             */
            appearance: ['appearance-none'],
            /**
             * Cursor
             * @see https://tailwindcss.com/docs/cursor
             */
            cursor: [{
                    cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]
                }],
            /**
             * Caret Color
             * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
             */
            'caret-color': [{
                    caret: [colors]
                }],
            /**
             * Pointer Events
             * @see https://tailwindcss.com/docs/pointer-events
             */
            'pointer-events': [{
                    'pointer-events': ['none', 'auto']
                }],
            /**
             * Resize
             * @see https://tailwindcss.com/docs/resize
             */
            resize: [{
                    resize: ['none', 'y', 'x', '']
                }],
            /**
             * Scroll Behavior
             * @see https://tailwindcss.com/docs/scroll-behavior
             */
            'scroll-behavior': [{
                    scroll: ['auto', 'smooth']
                }],
            /**
             * Scroll Margin
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-m': [{
                    'scroll-m': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin X
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-mx': [{
                    'scroll-mx': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin Y
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-my': [{
                    'scroll-my': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin Start
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-ms': [{
                    'scroll-ms': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin End
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-me': [{
                    'scroll-me': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin Top
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-mt': [{
                    'scroll-mt': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin Right
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-mr': [{
                    'scroll-mr': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin Bottom
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-mb': [{
                    'scroll-mb': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Margin Left
             * @see https://tailwindcss.com/docs/scroll-margin
             */
            'scroll-ml': [{
                    'scroll-ml': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-p': [{
                    'scroll-p': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding X
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-px': [{
                    'scroll-px': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding Y
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-py': [{
                    'scroll-py': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding Start
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-ps': [{
                    'scroll-ps': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding End
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-pe': [{
                    'scroll-pe': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding Top
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-pt': [{
                    'scroll-pt': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding Right
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-pr': [{
                    'scroll-pr': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding Bottom
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-pb': [{
                    'scroll-pb': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Padding Left
             * @see https://tailwindcss.com/docs/scroll-padding
             */
            'scroll-pl': [{
                    'scroll-pl': getSpacingWithArbitrary()
                }],
            /**
             * Scroll Snap Align
             * @see https://tailwindcss.com/docs/scroll-snap-align
             */
            'snap-align': [{
                    snap: ['start', 'end', 'center', 'align-none']
                }],
            /**
             * Scroll Snap Stop
             * @see https://tailwindcss.com/docs/scroll-snap-stop
             */
            'snap-stop': [{
                    snap: ['normal', 'always']
                }],
            /**
             * Scroll Snap Type
             * @see https://tailwindcss.com/docs/scroll-snap-type
             */
            'snap-type': [{
                    snap: ['none', 'x', 'y', 'both']
                }],
            /**
             * Scroll Snap Type Strictness
             * @see https://tailwindcss.com/docs/scroll-snap-type
             */
            'snap-strictness': [{
                    snap: ['mandatory', 'proximity']
                }],
            /**
             * Touch Action
             * @see https://tailwindcss.com/docs/touch-action
             */
            touch: [{
                    touch: ['auto', 'none', 'pinch-zoom', 'manipulation', {
                            pan: ['x', 'left', 'right', 'y', 'up', 'down']
                        }]
                }],
            /**
             * User Select
             * @see https://tailwindcss.com/docs/user-select
             */
            select: [{
                    select: ['none', 'text', 'all', 'auto']
                }],
            /**
             * Will Change
             * @see https://tailwindcss.com/docs/will-change
             */
            'will-change': [{
                    'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]
                }],
            // SVG
            /**
             * Fill
             * @see https://tailwindcss.com/docs/fill
             */
            fill: [{
                    fill: [colors, 'none']
                }],
            /**
             * Stroke Width
             * @see https://tailwindcss.com/docs/stroke-width
             */
            'stroke-w': [{
                    stroke: [isLength, isArbitraryNumber]
                }],
            /**
             * Stroke
             * @see https://tailwindcss.com/docs/stroke
             */
            stroke: [{
                    stroke: [colors, 'none']
                }],
            // Accessibility
            /**
             * Screen Readers
             * @see https://tailwindcss.com/docs/screen-readers
             */
            sr: ['sr-only', 'not-sr-only']
        },
        conflictingClassGroups: {
            overflow: ['overflow-x', 'overflow-y'],
            overscroll: ['overscroll-x', 'overscroll-y'],
            inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],
            'inset-x': ['right', 'left'],
            'inset-y': ['top', 'bottom'],
            flex: ['basis', 'grow', 'shrink'],
            gap: ['gap-x', 'gap-y'],
            p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],
            px: ['pr', 'pl'],
            py: ['pt', 'pb'],
            m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],
            mx: ['mr', 'ml'],
            my: ['mt', 'mb'],
            'font-size': ['leading'],
            'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],
            'fvn-ordinal': ['fvn-normal'],
            'fvn-slashed-zero': ['fvn-normal'],
            'fvn-figure': ['fvn-normal'],
            'fvn-spacing': ['fvn-normal'],
            'fvn-fraction': ['fvn-normal'],
            rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],
            'rounded-s': ['rounded-ss', 'rounded-es'],
            'rounded-e': ['rounded-se', 'rounded-ee'],
            'rounded-t': ['rounded-tl', 'rounded-tr'],
            'rounded-r': ['rounded-tr', 'rounded-br'],
            'rounded-b': ['rounded-br', 'rounded-bl'],
            'rounded-l': ['rounded-tl', 'rounded-bl'],
            'border-spacing': ['border-spacing-x', 'border-spacing-y'],
            'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],
            'border-w-x': ['border-w-r', 'border-w-l'],
            'border-w-y': ['border-w-t', 'border-w-b'],
            'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],
            'border-color-x': ['border-color-r', 'border-color-l'],
            'border-color-y': ['border-color-t', 'border-color-b'],
            'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],
            'scroll-mx': ['scroll-mr', 'scroll-ml'],
            'scroll-my': ['scroll-mt', 'scroll-mb'],
            'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],
            'scroll-px': ['scroll-pr', 'scroll-pl'],
            'scroll-py': ['scroll-pt', 'scroll-pb']
        },
        conflictingClassGroupModifiers: {
            'font-size': ['leading']
        }
    };
}
var twMerge = /*#__PURE__*/ createTailwindMerge(getDefaultConfig);
var g$3 = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"], y$4 = g$3;
var P$2 = Symbol("isTwElement?"), b$4 = (e, n) => e.reduce((r, o, t) => r.concat(o || [], n[t] || []), []), S$7 = (e, n = "") => { let r = e.join(" ").trim().replace(/\n/g, " ").replace(/\s{2,}/g, " ").split(" ").filter(t => t !== ","), o = n ? n.split(" ") : []; return twMerge(...r.concat(o).filter(t => t !== " ")); }, O$2 = ([e]) => e.charAt(0) !== "$", c$8 = e => e[P$2] === !0, C$1 = e => (n, ...r) => { let o = (t = []) => { let i = react_1.default.forwardRef((a, u) => { let { $as: p = e, style: x = {} } = a, s = __rest(a, ["$as", "style"]), m = c$8(e) ? e : p, w = t ? t.reduce((l, d) => Object.assign(l, typeof d == "function" ? d(a) : d), {}) : {}, f = c$8(m) ? s : Object.fromEntries(Object.entries(s).filter(O$2)); return react_1.default.createElement(m, Object.assign(Object.assign(Object.assign({}, f), { style: Object.assign(Object.assign({}, w), x), ref: u, className: S$7(b$4(n, r.map(l => l(Object.assign(Object.assign({}, s), { $as: p })))), s.className) }), c$8(e) ? { $as: p } : {})); }); return i[P$2] = !0, typeof e != "string" ? i.displayName = e.displayName || e.name || "tw.Component" : i.displayName = "tw." + e, i.withStyle = a => o(t.concat(a)), i; }; return o(); }, A = y$4.reduce((e, n) => (Object.assign(Object.assign({}, e), { [n]: C$1(n) })), {}), h$6 = Object.assign(C$1, A), F$3 = h$6;
var TwElementContainer = F$3.div(templateObject_1$i || (templateObject_1$i = __makeTemplateObject(["flex mt-1 mb-2 relative"], ["flex mt-1 mb-2 relative"])));
F$3.label(templateObject_2$d || (templateObject_2$d = __makeTemplateObject(["font-medium px-4 py-2 inline-block"], ["font-medium px-4 py-2 inline-block"])));
var TwLabelNormal = F$3.label(templateObject_3$a || (templateObject_3$a = __makeTemplateObject(["font-normal px-0 py-2 inline-block"], ["font-normal px-0 py-2 inline-block"])));
var TwLabelLarge = F$3.label(templateObject_4$7 || (templateObject_4$7 = __makeTemplateObject(["text-gray-800 block text-left items-center pr-2 text-md mt-4 mb-4 uppercase text-bold tracking-wide font-semibold"], ["text-gray-800 block text-left items-center pr-2 text-md mt-4 mb-4 uppercase text-bold tracking-wide font-semibold"])));
var TwLabelSmall = F$3.label(templateObject_5$6 || (templateObject_5$6 = __makeTemplateObject(["text-sm inline-block"], ["text-sm inline-block"])));
var TwElementButtonContainer = F$3.div(templateObject_6$4 || (templateObject_6$4 = __makeTemplateObject(["mb-2 mt-4 text-right"], ["mb-2 mt-4 text-right"])));
var TwElementContainerGrid_1_3 = F$3.div(templateObject_7$2 || (templateObject_7$2 = __makeTemplateObject(["md:w-1/4 relative"], ["md:w-1/4 relative"])));
var TwElementContainerGrid_2_3 = F$3.div(templateObject_8$2 || (templateObject_8$2 = __makeTemplateObject(["md:w-3/4 relative"], ["md:w-3/4 relative"])));
var TwInputFieldLabel = F$3.label(templateObject_9$2 || (templateObject_9$2 = __makeTemplateObject(["text-gray-800 inline-flex text-left items-center mt-0 font-bold mb-2 pr-2 text-sm"], ["text-gray-800 inline-flex text-left items-center mt-0 font-bold mb-2 pr-2 text-sm"])));
var TwGroupLabel = F$3.label(templateObject_10$2 || (templateObject_10$2 = __makeTemplateObject(["text-gray-700 inline-flex text-left items-center my-2 font-bold text-sm"], ["text-gray-700 inline-flex text-left items-center my-2 font-bold text-sm"])));
var TwInputField = F$3.input(templateObject_11$1 || (templateObject_11$1 = __makeTemplateObject(["form-control \nw-full bg-white\nappearance-none\nborder border-grey-light hover:border-gray-400\np-2 text-gray-700\nleading-tight\nfocus:outline-none focus:bg-white\nfocus:text-gray-900 focus:bg-white\nfocus:border-gray-400 focus:outline-none"], ["form-control \nw-full bg-white\nappearance-none\nborder border-grey-light hover:border-gray-400\np-2 text-gray-700\nleading-tight\nfocus:outline-none focus:bg-white\nfocus:text-gray-900 focus:bg-white\nfocus:border-gray-400 focus:outline-none"])));
var TwPasswordField = F$3.input(templateObject_12$1 || (templateObject_12$1 = __makeTemplateObject(["form-control flex-shrink flex-grow flex-auto \nleading-normal p-2 w-px flex-1 text-gray-700 leading-tight border border-grey-light\nhover:border-gray-400 focus:outline-none focus:bg-white focus:text-gray-900\nfocus:bg-white focus:border-gray-400 focus:outline-none relative"], ["form-control flex-shrink flex-grow flex-auto \nleading-normal p-2 w-px flex-1 text-gray-700 leading-tight border border-grey-light\nhover:border-gray-400 focus:outline-none focus:bg-white focus:text-gray-900\nfocus:bg-white focus:border-gray-400 focus:outline-none relative"])));
var TwInputFieldWithAddonContainer = F$3.div(templateObject_13$1 || (templateObject_13$1 = __makeTemplateObject(["flex flex-wrap items-stretch w-full relative"], ["flex flex-wrap items-stretch w-full relative"])));
F$3.input(templateObject_14$1 || (templateObject_14$1 = __makeTemplateObject(["form-control flex-shrink flex-grow flex-auto leading-normal p-2 w-px flex-1 text-gray-700\nleading-tight\nborder border-grey-light hover:border-gray-400\nfocus:outline-none focus:bg-white\nfocus:text-gray-900 focus:bg-white\nfocus:border-gray-400 focus:outline-none relative"], ["form-control flex-shrink flex-grow flex-auto leading-normal p-2 w-px flex-1 text-gray-700\nleading-tight\nborder border-grey-light hover:border-gray-400\nfocus:outline-none focus:bg-white\nfocus:text-gray-900 focus:bg-white\nfocus:border-gray-400 focus:outline-none relative"])));
var TwInputFieldAddonContainer = F$3.span(templateObject_15$1 || (templateObject_15$1 = __makeTemplateObject(["flex -mr-px"], ["flex -mr-px"])));
var TwInputFieldAddon = F$3.span(templateObject_16 || (templateObject_16 = __makeTemplateObject(["flex items-center leading-normal bg-gray-200 border border-l-0 border-grey-light px-3 whitespace-no-wrap text-grey-dark text-sm"], ["flex items-center leading-normal bg-gray-200 border border-l-0 border-grey-light px-3 whitespace-no-wrap text-grey-dark text-sm"])));
var TwInputCheckbox = F$3.input(templateObject_17 || (templateObject_17 = __makeTemplateObject(["form-checkbox h-5 w-5 mr-2 m-0.5 leading-tight"], ["form-checkbox h-5 w-5 mr-2 m-0.5 leading-tight"])));
var TwInputCheckboxInlineLabel = F$3.label(templateObject_18 || (templateObject_18 = __makeTemplateObject(["text-sm"], ["text-sm"])));
var TwRadioButton = F$3.input(templateObject_19 || (templateObject_19 = __makeTemplateObject(["form-control mr-2 leading-tight form-radio text-ibb-dark"], ["form-control mr-2 leading-tight form-radio text-ibb-dark"])));
var TwRadioButtonInlineLabel = F$3.span(templateObject_20 || (templateObject_20 = __makeTemplateObject(["text-sm inline-flex items-center"], ["text-sm inline-flex items-center"])));
F$3.select(templateObject_21 || (templateObject_21 = __makeTemplateObject(["form-control w-full text-left border border-grey-light relative shadow-sm px-4 py-2 bg-white font-medium text-gray-900 hover:bg-gray-100 focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none"], ["form-control w-full text-left border border-grey-light relative shadow-sm px-4 py-2 bg-white font-medium text-gray-900 hover:bg-gray-100 focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none"])));
F$3.button(templateObject_22 || (templateObject_22 = __makeTemplateObject(["form-control w-full text-left border border-grey-light relative shadow-sm px-4 py-2 bg-white font-medium text-gray-900 hover:bg-gray-100 focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none"], ["form-control w-full text-left border border-grey-light relative shadow-sm px-4 py-2 bg-white font-medium text-gray-900 hover:bg-gray-100 focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none"])));
F$3.div(templateObject_23 || (templateObject_23 = __makeTemplateObject(["mt-2 w-56 shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 focus:outline-none absolute z-10"], ["mt-2 w-56 shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 focus:outline-none absolute z-10"])));
F$3.div(templateObject_24 || (templateObject_24 = __makeTemplateObject(["py-1"], ["py-1"])));
var TwTextArea = F$3.textarea(templateObject_25 || (templateObject_25 = __makeTemplateObject(["form-control\n        block\n        w-full \n        resize\n        p-2\n        font-normal\n        text-gray-700\n        hover:border-gray-400\n        bg-white bg-clip-padding\n        border border-solid border-grey-light\n        transition\n        ease-in-out\n        m-0\n        focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none"], ["form-control\n        block\n        w-full \n        resize\n        p-2\n        font-normal\n        text-gray-700\n        hover:border-gray-400\n        bg-white bg-clip-padding\n        border border-solid border-grey-light\n        transition\n        ease-in-out\n        m-0\n        focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none"])));
var TwTablePaginationContainer = F$3.div(templateObject_26 || (templateObject_26 = __makeTemplateObject(["py-3 flex items-center justify-between"], ["py-3 flex items-center justify-between"])));
var TwTablePaginationButtonsContainer = F$3.div(templateObject_27 || (templateObject_27 = __makeTemplateObject(["flex-1 flex justify-between sm:hidden"], ["flex-1 flex justify-between sm:hidden"])));
var TwTablePagerContainer = F$3.div(templateObject_28 || (templateObject_28 = __makeTemplateObject(["hidden sm:flex-1 sm:flex sm:items-center sm:justify-between"], ["hidden sm:flex-1 sm:flex sm:items-center sm:justify-between"])));
var TwTablePager = F$3.div(templateObject_29 || (templateObject_29 = __makeTemplateObject(["flex gap-x-2 items-baseline"], ["flex gap-x-2 items-baseline"])));
var TwTablePageSelector = F$3.select(templateObject_30 || (templateObject_30 = __makeTemplateObject(["mt-1 ml-3 block w-full border border-grey-light hover:bg-gray-200 max-w-lg bg-gray-100 w-full p-2 text-gray-700 focus:outline-none focus:bg-white focus:border-ibb-dark"], ["mt-1 ml-3 block w-full border border-grey-light hover:bg-gray-200 max-w-lg bg-gray-100 w-full p-2 text-gray-700 focus:outline-none focus:bg-white focus:border-ibb-dark"])));
var TwTablePageNavigation = F$3.nav(templateObject_31 || (templateObject_31 = __makeTemplateObject(["relative z-0 inline-flex -space-x-px"], ["relative z-0 inline-flex -space-x-px"])));
var TwTable$3 = F$3.table(templateObject_32 || (templateObject_32 = __makeTemplateObject(["min-w-full max-w-full mb-4"], ["min-w-full max-w-full mb-4"])));
var TwTableHead$2 = F$3.thead(templateObject_33 || (templateObject_33 = __makeTemplateObject(["bg-gray-200 hover:bg-gray-200 text-gray-900 border-b-1 border-gray-400 divide-y divide-gray-300"], ["bg-gray-200 hover:bg-gray-200 text-gray-900 border-b-1 border-gray-400 divide-y divide-gray-300"])));
var TwTableHeader$3 = F$3.th(templateObject_34 || (templateObject_34 = __makeTemplateObject(["text-left text-sm text-gray-900 font-semibold tracking-wider align-top"], ["text-left text-sm text-gray-900 font-semibold tracking-wider align-top"])));
var TwTableBody$3 = F$3.tbody(templateObject_35 || (templateObject_35 = __makeTemplateObject(["bg-gray-100 divide-y divide-gray-200"], ["bg-gray-100 divide-y divide-gray-200"])));
var TwTableBodyRow$2 = F$3.tr(templateObject_36 || (templateObject_36 = __makeTemplateObject(["bg-gray-100 hover:bg-gray-200 text-gray-900 border-b align-top"], ["bg-gray-100 hover:bg-gray-200 text-gray-900 border-b align-top"])));
var TwTableBodyCell$2 = F$3.td(templateObject_37 || (templateObject_37 = __makeTemplateObject(["whitespace-nowrap"], ["whitespace-nowrap"])));
var TwTableBodyCellContent$2 = F$3.div(templateObject_38 || (templateObject_38 = __makeTemplateObject([""], [""])));
var templateObject_1$i, templateObject_2$d, templateObject_3$a, templateObject_4$7, templateObject_5$6, templateObject_6$4, templateObject_7$2, templateObject_8$2, templateObject_9$2, templateObject_10$2, templateObject_11$1, templateObject_12$1, templateObject_13$1, templateObject_14$1, templateObject_15$1, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31, templateObject_32, templateObject_33, templateObject_34, templateObject_35, templateObject_36, templateObject_37, templateObject_38;
var formatDistanceLocale = {
    lessThanXSeconds: {
        standalone: {
            one: 'weniger als 1 Sekunde',
            other: 'weniger als {{count}} Sekunden'
        },
        withPreposition: {
            one: 'weniger als 1 Sekunde',
            other: 'weniger als {{count}} Sekunden'
        }
    },
    xSeconds: {
        standalone: {
            one: '1 Sekunde',
            other: '{{count}} Sekunden'
        },
        withPreposition: {
            one: '1 Sekunde',
            other: '{{count}} Sekunden'
        }
    },
    halfAMinute: {
        standalone: 'halbe Minute',
        withPreposition: 'halben Minute'
    },
    lessThanXMinutes: {
        standalone: {
            one: 'weniger als 1 Minute',
            other: 'weniger als {{count}} Minuten'
        },
        withPreposition: {
            one: 'weniger als 1 Minute',
            other: 'weniger als {{count}} Minuten'
        }
    },
    xMinutes: {
        standalone: {
            one: '1 Minute',
            other: '{{count}} Minuten'
        },
        withPreposition: {
            one: '1 Minute',
            other: '{{count}} Minuten'
        }
    },
    aboutXHours: {
        standalone: {
            one: 'etwa 1 Stunde',
            other: 'etwa {{count}} Stunden'
        },
        withPreposition: {
            one: 'etwa 1 Stunde',
            other: 'etwa {{count}} Stunden'
        }
    },
    xHours: {
        standalone: {
            one: '1 Stunde',
            other: '{{count}} Stunden'
        },
        withPreposition: {
            one: '1 Stunde',
            other: '{{count}} Stunden'
        }
    },
    xDays: {
        standalone: {
            one: '1 Tag',
            other: '{{count}} Tage'
        },
        withPreposition: {
            one: '1 Tag',
            other: '{{count}} Tagen'
        }
    },
    aboutXWeeks: {
        standalone: {
            one: 'etwa 1 Woche',
            other: 'etwa {{count}} Wochen'
        },
        withPreposition: {
            one: 'etwa 1 Woche',
            other: 'etwa {{count}} Wochen'
        }
    },
    xWeeks: {
        standalone: {
            one: '1 Woche',
            other: '{{count}} Wochen'
        },
        withPreposition: {
            one: '1 Woche',
            other: '{{count}} Wochen'
        }
    },
    aboutXMonths: {
        standalone: {
            one: 'etwa 1 Monat',
            other: 'etwa {{count}} Monate'
        },
        withPreposition: {
            one: 'etwa 1 Monat',
            other: 'etwa {{count}} Monaten'
        }
    },
    xMonths: {
        standalone: {
            one: '1 Monat',
            other: '{{count}} Monate'
        },
        withPreposition: {
            one: '1 Monat',
            other: '{{count}} Monaten'
        }
    },
    aboutXYears: {
        standalone: {
            one: 'etwa 1 Jahr',
            other: 'etwa {{count}} Jahre'
        },
        withPreposition: {
            one: 'etwa 1 Jahr',
            other: 'etwa {{count}} Jahren'
        }
    },
    xYears: {
        standalone: {
            one: '1 Jahr',
            other: '{{count}} Jahre'
        },
        withPreposition: {
            one: '1 Jahr',
            other: '{{count}} Jahren'
        }
    },
    overXYears: {
        standalone: {
            one: 'mehr als 1 Jahr',
            other: 'mehr als {{count}} Jahre'
        },
        withPreposition: {
            one: 'mehr als 1 Jahr',
            other: 'mehr als {{count}} Jahren'
        }
    },
    almostXYears: {
        standalone: {
            one: 'fast 1 Jahr',
            other: 'fast {{count}} Jahre'
        },
        withPreposition: {
            one: 'fast 1 Jahr',
            other: 'fast {{count}} Jahren'
        }
    }
};
var formatDistance = function formatDistance(token, count, options) {
    var result;
    var tokenValue = options !== null && options !== void 0 && options.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
    if (typeof tokenValue === 'string') {
        result = tokenValue;
    }
    else if (count === 1) {
        result = tokenValue.one;
    }
    else {
        result = tokenValue.other.replace('{{count}}', String(count));
    }
    if (options !== null && options !== void 0 && options.addSuffix) {
        if (options.comparison && options.comparison > 0) {
            return 'in ' + result;
        }
        else {
            return 'vor ' + result;
        }
    }
    return result;
};
var formatDistance$1 = formatDistance;
// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
var dateFormats = {
    full: 'EEEE, do MMMM y',
    // Montag, 7. Januar 2018
    long: 'do MMMM y',
    // 7. Januar 2018
    medium: 'do MMM y',
    // 7. Jan. 2018
    short: 'dd.MM.y' // 07.01.2018
};
var timeFormats = {
    full: 'HH:mm:ss zzzz',
    long: 'HH:mm:ss z',
    medium: 'HH:mm:ss',
    short: 'HH:mm'
};
var dateTimeFormats = {
    full: "{{date}} 'um' {{time}}",
    long: "{{date}} 'um' {{time}}",
    medium: '{{date}} {{time}}',
    short: '{{date}} {{time}}'
};
var formatLong = {
    date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
    }),
    time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
    }),
    dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
    })
};
var formatLong$1 = formatLong;
var formatRelativeLocale = {
    lastWeek: "'letzten' eeee 'um' p",
    yesterday: "'gestern um' p",
    today: "'heute um' p",
    tomorrow: "'morgen um' p",
    nextWeek: "eeee 'um' p",
    other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
    return formatRelativeLocale[token];
};
var formatRelative$1 = formatRelative;
var eraValues = {
    narrow: ['v.Chr.', 'n.Chr.'],
    abbreviated: ['v.Chr.', 'n.Chr.'],
    wide: ['vor Christus', 'nach Christus']
};
var quarterValues = {
    narrow: ['1', '2', '3', '4'],
    abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
    wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal']
};
// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues = {
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
    abbreviated: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
    wide: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};
// https://st.unicode.org/cldr-apps/v#/de/Gregorian/
var formattingMonthValues = {
    narrow: monthValues.narrow,
    abbreviated: ['Jan.', 'Feb.', 'März', 'Apr.', 'Mai', 'Juni', 'Juli', 'Aug.', 'Sep.', 'Okt.', 'Nov.', 'Dez.'],
    wide: monthValues.wide
};
var dayValues = {
    narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
    short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
    abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
    wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag']
};
// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
var dayPeriodValues = {
    narrow: {
        am: 'vm.',
        pm: 'nm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'Morgen',
        afternoon: 'Nachm.',
        evening: 'Abend',
        night: 'Nacht'
    },
    abbreviated: {
        am: 'vorm.',
        pm: 'nachm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'Morgen',
        afternoon: 'Nachmittag',
        evening: 'Abend',
        night: 'Nacht'
    },
    wide: {
        am: 'vormittags',
        pm: 'nachmittags',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'Morgen',
        afternoon: 'Nachmittag',
        evening: 'Abend',
        night: 'Nacht'
    }
};
var formattingDayPeriodValues = {
    narrow: {
        am: 'vm.',
        pm: 'nm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'morgens',
        afternoon: 'nachm.',
        evening: 'abends',
        night: 'nachts'
    },
    abbreviated: {
        am: 'vorm.',
        pm: 'nachm.',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'morgens',
        afternoon: 'nachmittags',
        evening: 'abends',
        night: 'nachts'
    },
    wide: {
        am: 'vormittags',
        pm: 'nachmittags',
        midnight: 'Mitternacht',
        noon: 'Mittag',
        morning: 'morgens',
        afternoon: 'nachmittags',
        evening: 'abends',
        night: 'nachts'
    }
};
var ordinalNumber = function ordinalNumber(dirtyNumber) {
    var number = Number(dirtyNumber);
    return number + '.';
};
var localize = {
    ordinalNumber: ordinalNumber,
    era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
    }),
    quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function argumentCallback(quarter) {
            return quarter - 1;
        }
    }),
    month: buildLocalizeFn({
        values: monthValues,
        formattingValues: formattingMonthValues,
        defaultWidth: 'wide'
    }),
    day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
    }),
    dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
    })
};
var localize$1 = localize;
var matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
    narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
    abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
    wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
};
var parseEraPatterns = {
    any: [/^v/i, /^n/i]
};
var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](\.)? Quartal/i
};
var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(j[aä]n|feb|mär[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
    wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
};
var parseMonthPatterns = {
    narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
    any: [/^j[aä]/i, /^f/i, /^mär/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
    narrow: /^[smdmf]/i,
    short: /^(so|mo|di|mi|do|fr|sa)/i,
    abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
    wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
};
var parseDayPatterns = {
    any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
    narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
    abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
    wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
};
var parseDayPeriodPatterns = {
    any: {
        am: /^v/i,
        pm: /^n/i,
        midnight: /^Mitte/i,
        noon: /^Mitta/i,
        morning: /morgens/i,
        afternoon: /nachmittags/i,
        // will never be matched. Afternoon is matched by `pm`
        evening: /abends/i,
        night: /nachts/i // will never be matched. Night is matched by `pm`
    }
};
var match$1 = {
    ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function valueCallback(value) {
            return parseInt(value);
        }
    }),
    era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
    }),
    quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function valueCallback(index) {
            return index + 1;
        }
    }),
    month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
    }),
    day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
    }),
    dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
    })
};
var match$2 = match$1;
/**
 * @type {Locale}
 * @category Locales
 * @summary German locale.
 * @language German
 * @iso-639-2 deu
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Asia [@asia-t]{@link https://github.com/asia-t}
 * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
 * @author RomanErnst [@pex]{@link https://github.com/pex}
 * @author Philipp Keck [@Philipp91]{@link https://github.com/Philipp91}
 */
var locale = {
    code: 'de',
    formatDistance: formatDistance$1,
    formatLong: formatLong$1,
    formatRelative: formatRelative$1,
    localize: localize$1,
    match: match$2,
    options: {
        weekStartsOn: 1 /* Monday */,
        firstWeekContainsDate: 4
    }
};
var de$1 = locale;
(function (module, exports) {
    (function (global, factory) {
        typeof commonjsRequire === 'function' ? factory(moment$1.exports) :
            factory(global.moment);
    }(commonjsGlobal, (function (moment) {
        //! moment.js locale configuration
        function processRelativeTime(number, withoutSuffix, key, isFuture) {
            var format = {
                m: ['eine Minute', 'einer Minute'],
                h: ['eine Stunde', 'einer Stunde'],
                d: ['ein Tag', 'einem Tag'],
                dd: [number + ' Tage', number + ' Tagen'],
                w: ['eine Woche', 'einer Woche'],
                M: ['ein Monat', 'einem Monat'],
                MM: [number + ' Monate', number + ' Monaten'],
                y: ['ein Jahr', 'einem Jahr'],
                yy: [number + ' Jahre', number + ' Jahren'],
            };
            return withoutSuffix ? format[key][0] : format[key][1];
        }
        var de = moment.defineLocale('de', {
            months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
            monthsShort: 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
            monthsParseExact: true,
            weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
            weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
            weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
            weekdaysParseExact: true,
            longDateFormat: {
                LT: 'HH:mm',
                LTS: 'HH:mm:ss',
                L: 'DD.MM.YYYY',
                LL: 'D. MMMM YYYY',
                LLL: 'D. MMMM YYYY HH:mm',
                LLLL: 'dddd, D. MMMM YYYY HH:mm',
            },
            calendar: {
                sameDay: '[heute um] LT [Uhr]',
                sameElse: 'L',
                nextDay: '[morgen um] LT [Uhr]',
                nextWeek: 'dddd [um] LT [Uhr]',
                lastDay: '[gestern um] LT [Uhr]',
                lastWeek: '[letzten] dddd [um] LT [Uhr]',
            },
            relativeTime: {
                future: 'in %s',
                past: 'vor %s',
                s: 'ein paar Sekunden',
                ss: '%d Sekunden',
                m: processRelativeTime,
                mm: '%d Minuten',
                h: processRelativeTime,
                hh: '%d Stunden',
                d: processRelativeTime,
                dd: processRelativeTime,
                w: processRelativeTime,
                ww: '%d Wochen',
                M: processRelativeTime,
                MM: processRelativeTime,
                y: processRelativeTime,
                yy: processRelativeTime,
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: '%d.',
            week: {
                dow: 1, // Monday is the first day of the week.
                doy: 4, // The week that contains Jan 4th is the first week of the year.
            },
        });
        return de;
    })));
}());
var sortSet = function (set) {
    var sortedItems = Array.from(set).sort();
    return new Set(sortedItems);
};
function classNames$1() {
    var classes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        classes[_i] = arguments[_i];
    }
    return classes.filter(Boolean).join(" ");
}
var decimalCount = function (num) {
    var numStr = String(num);
    if (numStr.includes(".")) {
        return numStr.split(".")[1].length;
    }
    return 0;
};
var formatNumberValue = function (originalValue, decimalsLimit) {
    var value = originalValue !== null && originalValue !== undefined ? originalValue : "";
    if (decimalsLimit != null && decimalsLimit != undefined && decimalCount(value) > decimalsLimit) {
        //value = parseFloat(value).toFixed(decimalsLimit);
        //value = toFixedNoRounding(parseFloat(value), decimalsLimit);
        value = roundedValue(value, decimalsLimit);
    }
    else if (value.toString().endsWith("."))
        value = value.replace(".", ",");
    return value;
};
var unformatNumberValue = function (value, groupSeparator, decimalSeparator) {
    return value ? value.replaceAll(groupSeparator, "").replace(decimalSeparator, ".").replace(decimalSeparator, "") : "";
};
var getKeyByValue = function (object, value) {
    return Object.keys(object).find(function (key) { return object[key] === value; });
};
var getValueByKey = function (object, key) {
    return object[key];
};
var isEmpty$1 = function (value) {
    return value === null || value === undefined || value === "" || value == "null" || value == "undefined";
};
var cleanedString = function (str) {
    return str.replace(/\s/g, "").replace(/[^0-9A-Za-zÀ-ž\u0370-\u03FF\u0400-\u04FF]/g, ""); //replace(/\s/g, "") -> replace blank
};
var fieldPrecision = function (field) {
    return field && field.field_options && field.field_options.precision ? field.field_options.precision : 2;
};
var roundedValue = function (value, precision) {
    return value ? (Math.round(value * 100) / 100).toFixed(precision) : "0";
};
var getNestedObject = function (theObject, propertyName, property) {
    var result = null;
    if (theObject instanceof Array) {
        for (var i = 0; i < theObject.length; i++) {
            result = getNestedObject(theObject[i], propertyName, property);
            if (result) {
                break;
            }
        }
    }
    else {
        for (var prop in theObject) {
            if (prop == propertyName && theObject[prop] == property) {
                return theObject;
            }
            if (theObject[prop] instanceof Object || theObject[prop] instanceof Array) {
                result = getNestedObject(theObject[prop], propertyName, property);
                if (result) {
                    break;
                }
            }
        }
    }
    return result;
};
var getElementValue = function (element, id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit) {
    var newValue;
    switch (element.field_type) {
        case ElementTypes.table:
        case ElementTypes.accordion:
        case ElementTypes.elementGroup:
            var field = getNestedObject(element.field_value, "field_id", id);
            if (field)
                field.field_value = getElementValue(field, id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit);
            newValue = element.field_value;
            break;
        case ElementTypes.checkbox:
            newValue = event.target.checked;
            break;
        case ElementTypes.inputNumeric:
        case ElementTypes.inputCurrency:
            var pattern = allowNegative ? /[^-?[0-9]\d.,]/g : /[^\d.,]/g;
            newValue = unformatNumberValue(event.target.value.replace(pattern, ""), groupSeparator, decimalSeparator);
            if (decimalsLimit == 0)
                newValue = newValue.replace(".", "").replace(",", "");
            break;
        case ElementTypes.dropdown:
            newValue = event ? event.value : -1;
            break;
        default:
            newValue = event.target.value;
    }
    return newValue;
};
moment.locale("de");
var DATE_FORMAT = "DD.MM.YYYY";
var validateField = function (fieldValue, fieldName, validationRules, required) {
    if (!validationRules)
        return "";
    var validationMessages = [];
    if (validationRules.minValue || validationRules.maxValue || validationRules.equalsValue) {
        var message = validateValue(fieldValue, validationRules);
        message && validationMessages.push(message);
    }
    if (validationRules.minValueDate || validationRules.maxValueDate) {
        var message = validateDateValue(fieldValue, validationRules);
        message && validationMessages.push(message);
    }
    if (validationRules.regex) {
        var message = validateRegex(fieldValue, validationRules, required);
        message && validationMessages.push(message);
    }
    if (validationRules.complex) {
        var message = validateFormula(fieldValue, fieldName, validationRules);
        message && validationMessages.push(message);
    }
    return validationMessages.length > 0 ? validationMessages.join("\n") : "";
};
var formattedDate = function (date) {
    return moment(date).format(DATE_FORMAT);
};
var validateFormula = function (fieldValue, fieldName, validationRules) {
    var momentInstance = moment;
    var formula = validationRules.complex.value;
    var message = validationRules.complex.message;
    var isDate = formula && formula.indexOf("moment") > -1 ? true : false;
    if (isDate)
        formula = formula.replace(/moment/g, "momentInstance");
    var isNumber = formula && (formula.indexOf("<") > -1 || formula.indexOf(">") > -1 || formula.indexOf("=") > -1) ? true : false;
    var terms = extractFormula$1(formula);
    if (terms && terms.length > 0) {
        var separator_1 = isDate ? "'" : "";
        terms.forEach(function (term) {
            var value = term !== fieldName ? document.getElementsByName(term)[0]["value"] : fieldValue;
            if (isDate) {
                value = momentInstance(value, DATE_FORMAT);
            }
            if (isNumber) {
                if (value && value.toString().indexOf(",") > -1)
                    value = unformatNumberValue(value.toString(), ".", ",");
                var parsedValue = parseFloat(value);
                value = !isNaN(parsedValue) ? parsedValue : 0;
            }
            formula = formula.replace(term, value).replace("[", separator_1).replace("]", separator_1);
        });
    }
    try {
        var isValid = eval(formula);
        if (!isValid) {
            return message && message != "" ? message : "Bitte überprüfen Sie Ihre Eingaben!";
        }
        else {
            return null;
        }
    }
    catch (ex) {
        console.log(ex);
        return null;
    }
};
function extractFormula$1(formula) {
    var terms = [];
    for (var i = 0; i < formula.length; i++) {
        if (formula.charAt(i) === "[") {
            var stopIndex = formula.indexOf("]", i);
            if (stopIndex !== -1)
                terms.push(formula.substring(i + 1, stopIndex));
        }
    }
    return terms;
}
var validateValue = function (fieldValue, validationRules) {
    var _a, _b, _c;
    try {
        var value = parseFloat(fieldValue);
        var minValue = validationRules.minValue ? parseFloat((_a = validationRules.minValue.value) === null || _a === void 0 ? void 0 : _a.replace(/,/, '.')) : null;
        var maxValue = validationRules.maxValue ? parseFloat((_b = validationRules.maxValue.value) === null || _b === void 0 ? void 0 : _b.replace(/,/, '.')) : null;
        var equalsValue = validationRules.equalsValue ? parseFloat((_c = validationRules.equalsValue.value) === null || _c === void 0 ? void 0 : _c.replace(/,/, '.')) : null;
        var minValueMessage = function (minValue) {
            return validationRules.minValue
                ? validationRules.minValue.message
                    ? validationRules.minValue.message
                    : "Der Wert darf nicht kleiner als ".concat(minValue, " sein")
                : "";
        };
        var maxValueMessage = function (maxValue) {
            return validationRules.maxValue
                ? validationRules.maxValue.message
                    ? validationRules.maxValue.message
                    : "Der Wert darf nicht gr\u00F6\u00DFer als ".concat(maxValue, " sein")
                : "";
        };
        var equalsValueMessage = function (equalsValue) {
            return validationRules.equalsValue
                ? validationRules.equalsValue.message
                    ? validationRules.equalsValue.message
                    : "Der Wert muss genau ".concat(equalsValue, " betragen")
                : "";
        };
        if (minValue && maxValue) {
            if (value < minValue || value > maxValue)
                return "".concat(minValueMessage(minValue), " | ").concat(maxValueMessage(maxValue));
        }
        else if (maxValue) {
            if (value > maxValue)
                return maxValueMessage(maxValue);
        }
        else if (minValue) {
            if (value < minValue)
                return minValueMessage(minValue);
        }
        else if (equalsValue) {
            if (value !== equalsValue)
                return equalsValueMessage(equalsValue);
        }
    }
    catch (ex) {
        console.log(ex);
        return null;
    }
};
var validateDateValue = function (fieldValue, validationRules) {
    var value = moment(fieldValue, DATE_FORMAT);
    var minDate = validationRules.minValueDate ? moment(validationRules.minValueDate.value, DATE_FORMAT) : null;
    var maxDate = validationRules.maxValueDate ? moment(validationRules.maxValueDate.value, DATE_FORMAT) : null;
    var minDateMessage = function (minDate) {
        var _a;
        return validationRules.minValueDate
            ? (_a = validationRules.minValueDate.message) !== null && _a !== void 0 ? _a : "Das Datum darf nicht kleiner als ".concat(formattedDate(minDate), " sein")
            : "";
    };
    var maxDateMessage = function (maxDate) {
        var _a;
        return validationRules.maxValueDate
            ? (_a = validationRules.maxValueDate.message) !== null && _a !== void 0 ? _a : "Das Datum darf nicht gr\u00F6\u00DFer als ".concat(formattedDate(maxDate), "  sein")
            : "";
    };
    if (minDate && maxDate) {
        if (value.isBefore(minDate) || value.isAfter(maxDate))
            return "Das Datum muss zwischen ".concat(formattedDate(minDate), " und ").concat(formattedDate(maxDate), " liegen");
    }
    else if (maxDate) {
        if (value.isAfter(maxDate))
            return "".concat(maxDateMessage(maxDate));
    }
    else if (minDate) {
        if (value.isBefore(minDate))
            return "".concat(minDateMessage(minDate));
    }
};
var validateRegex = function (fieldValue, validationRules, required) {
    if (!fieldValue && !required)
        return null;
    var regex = new RegExp(validationRules.regex.value);
    var message = validationRules.regex.message ? validationRules.regex.message : "Der eingebene Wert ist ung\u00FCltig";
    var isValid = regex.test(fieldValue);
    if (!isValid)
        return message;
};
var IbbValidationMessage = function (_a) {
    var validationMessage = _a.validationMessage;
    return validationMessage ? react_1.default.createElement(TwMessageContainer, { dangerouslySetInnerHTML: { __html: validationMessage } }) : null;
};
var TwMessageContainer = F$3.div(templateObject_1$h || (templateObject_1$h = __makeTemplateObject(["text-xs whitespace-pre-wrap text-red-700"], ["text-xs whitespace-pre-wrap text-red-700"])));
var templateObject_1$h;
var getInputStyle = function () {
    return ("form-control flex-shrink flex-grow flex-auto leading-normal p-2 w-px flex-1 text-gray-700 " +
        "leading-tight border border-grey-light hover:border-gray-400 focus:outline-none focus:bg-white " +
        "focus:text-gray-900 focus:bg-white focus:border-gray-400 focus:outline-none relative");
};
var getInvalidStyle = function (additionalClass) {
    return "border focus:border-red-700 hover:border-red-700 border-red-700 ".concat(additionalClass ? additionalClass : "");
};
var getDatetimeInputStyle = function () {
    return ("form-control flex-shrink flex-grow flex-auto leading-normal p-2 w-px flex-1 text-gray-700 " +
        "leading-tight border border-grey-light hover:border-gray-400 focus:outline-none focus:bg-white " +
        "focus:text-gray-900 focus:border-gray-400 focus:outline-none relative w-full");
};
var IbbFormDatetimepicker = function (props) {
    var field_id = props.field_id, field_value = props.field_value, field_name = props.field_name, field_validation_error = props.field_validation_error, readonly = props.readonly, validationRules = props.validationRules, focusKey = props.focusKey, handleChangeInput = props.handleChangeInput;
    var _a = __read((0, react_1.useState)(field_value), 2), fieldValue = _a[0], setFieldValue = _a[1];
    var _b = __read((0, react_1.useState)(field_validation_error), 2), validationError = _b[0], setValidationError = _b[1];
    var _c = __read((0, react_1.useState)(field_value ? moment(field_value, DATE_FORMAT).toDate() : new Date()), 2), startDate = _c[0], setStartDate = _c[1];
    var _d = __read((0, react_1.useState)(field_value ? new Date(field_value).setMonth(startDate.getMonth() + 1) : new Date().setMonth(startDate.getMonth() + 1)), 2), endDate = _d[0];
    _d[1];
    var _e = __read((0, react_1.useState)(false), 2), calendarIsOpen = _e[0], setCalendarIsOpen = _e[1];
    react_1.default.useRef(null);
    (0, react_1.useEffect)(function () {
        if (validationRules) {
            var validationMessage = validateField(field_value, field_name, validationRules);
            if (validationMessage) {
                validationMessage += field_validation_error ? "\n | ".concat(field_validation_error) : "";
                setValidationError(validationMessage);
            }
        }
    }, []);
    (0, react_1.useEffect)(function () {
        if (field_validation_error) {
            setValidationError(field_validation_error);
        }
    }, [field_validation_error]);
    (0, react_1.useEffect)(function () {
        setFieldValue(field_value);
    }, [field_value]);
    var handleChange = function (field_id, event, date) {
        setCalendarIsOpen(false);
        date && setStartDate(date);
        if (date && !event.target.value)
            event.target.value = moment(date).format(DATE_FORMAT);
        if (handleChangeInput)
            handleChangeInput(field_id, event);
        else {
            setFieldValue(event.target.value);
        }
        if (validationRules) {
            var value = event.target.value;
            var name_1 = field_name;
            var validationMessage = validateField(value, name_1, validationRules);
            setValidationError(validationMessage);
        }
    };
    var handleBlur = function (event) {
        setCalendarIsOpen(false);
        var value = event.target.value;
        var name = field_name;
        if (validationRules) {
            var validationMessage = validateField(value, name, validationRules);
            setValidationError(validationMessage);
        }
    };
    var handleFocus = function (event) {
        setCalendarIsOpen(true);
        setValidationError("");
    };
    Ue$1("de", de$1);
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement("div", null, react_1.default.createElement(TwInputFieldWithAddonContainer, null, react_1.default.createElement(er, { className: [getDatetimeInputStyle(), validationError && getInvalidStyle()].join(" "), selected: fieldValue && moment(fieldValue, DATE_FORMAT, true).isValid() ? moment(fieldValue, DATE_FORMAT).toDate() : null, onChange: function (value, e) { return handleChange(field_id, e, value); }, onFocus: function (e) {
            handleFocus();
        }, onBlur: function (e) { return handleBlur(e); }, selectsStart: true, dateFormat: "dd.MM.yyyy", startDate: fieldValue ? fieldValue : startDate, endDate: endDate, key: field_id, id: field_id, name: field_name,
        //customInput={<CustomInput {...props} ref={inputRef} />}
        nextMonthButtonLabel: ">", previousMonthButtonLabel: "<", popperClassName: "react-datepicker-left", wrapperClassName: "block flex-shrink flex-grow", locale: "de", readOnly: readonly, open: !readonly ? calendarIsOpen : null, shouldCloseOnSelect: true, calendarStartDay: 1, isClearable: !readonly, closeOnScroll: true, autoFocus: focusKey && focusKey == field_id }), react_1.default.createElement(TwInputFieldAddonContainer, { onClick: function () { return (!readonly ? setCalendarIsOpen(!calendarIsOpen) : null); } }, react_1.default.createElement(TwInputFieldAddon, { className: validationError && getInvalidStyle() }, react_1.default.createElement(CalendarIcon$1, { width: "16", className: "text-gray-700 cursor-pointer" })))), react_1.default.createElement(IbbValidationMessage, { validationMessage: validationError }))));
};
exports.IbbFormDatetimepicker = IbbFormDatetimepicker;
var IbbFormRadiobutton = function (_a) {
    _a.field_label;
    var field_id = _a.field_id, field_value = _a.field_value, field_name = _a.field_name, selections = _a.selections, handleChangeInput = _a.handleChangeInput, readonly = _a.readonly;
    _a.required;
    _a.options;
    var handleChange = function (field_id, event) {
        if (handleChangeInput)
            handleChangeInput(field_id, event);
        else {
            console.debug("Change Input Event not handled..");
        }
    };
    return (react_1.default.createElement(react_1.default.Fragment, null, selections.map(function (item, index) {
        return (react_1.default.createElement(TwRadioButtonInlineLabel, { key: index }, react_1.default.createElement(TwRadioButton, { type: "radio", name: field_name, checked: field_value == item.id, readOnly: readonly, onChange: function (event) { return handleChange(field_id, event); } }), react_1.default.createElement(TwInputFieldLabel, null, item.name)));
    })));
};
exports.IbbFormRadiobutton = IbbFormRadiobutton;
var IbbSidebarMenuItem = function (item) {
    return (react_1.default.createElement(TwItemContainer$1, { href: item.link, title: item.text }, item.icon && react_1.default.createElement(TwItemIcon, null, item.icon), react_1.default.createElement("span", null, item.text)));
};
var TwItemContainer$1 = F$3.a(templateObject_1$g || (templateObject_1$g = __makeTemplateObject(["flex items-center px-6 py-4 text-gray-500 hover:text-orange-600 group"], ["flex items-center px-6 py-4 text-gray-500 hover:text-orange-600 group"])));
var TwItemIcon = F$3.span(templateObject_2$c || (templateObject_2$c = __makeTemplateObject(["h-5 w-5 text-gray-400 mr-2 group-hover:text-orange-500"], ["h-5 w-5 text-gray-400 mr-2 group-hover:text-orange-500"])));
var templateObject_1$g, templateObject_2$c;
var IbbLeftSidebar = function (props) {
    var _a = __read((0, react_1.useState)(true), 2), isMenuOpen = _a[0], setIsMenuOpen = _a[1];
    var containerWidth = isMenuOpen ? "w-64" : "w-6";
    var containerTitle = isMenuOpen ? "Menü zuklappen" : "Menü aufklappen";
    var toggleMenu = function () {
        setIsMenuOpen(!isMenuOpen);
    };
    return (react_1.default.createElement(TwContainer$2, { className: containerWidth }, react_1.default.createElement(TwToggleIconContainer, { onClick: function () { return toggleMenu(); }, title: containerTitle }, isMenuOpen ? (react_1.default.createElement(ChevronDoubleLeftIcon$3, { width: "16", style: { marginLeft: "auto", marginRight: "5px" } })) : (react_1.default.createElement(ChevronDoubleRightIcon$3, { width: "16", style: { marginLeft: "auto", marginRight: "5px" } }))), react_1.default.createElement("div", { className: "sidemenu-content ".concat(!isMenuOpen ? "closed" : "") }, props.treeMenu && react_1.default.createElement(TwMenuItemsContainer$1, null, props.treeMenu), props.primaryMenu && (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwDivider$1, null), react_1.default.createElement(TwMenuItemsContainer$1, null, isMenuOpen && react_1.default.createElement(TwMenuTitle, null, props.primaryMenu.title), props.primaryMenu.items.map(function (item, i) {
        return react_1.default.createElement(IbbSidebarMenuItem, __assign$1({}, item, { key: i }));
    })))), props.secondaryMenu && (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwDivider$1, null), react_1.default.createElement(TwMenuItemsContainer$1, null, isMenuOpen && react_1.default.createElement(TwMenuTitle, null, props.secondaryMenu.title), props.secondaryMenu.items.map(function (item, i) {
        return react_1.default.createElement(IbbSidebarMenuItem, __assign$1({}, item, { key: i }));
    })))), props.bottomText && (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwBottom, null, props.bottomText))))));
};
exports.IbbLeftSidebar = IbbLeftSidebar;
var TwContainer$2 = F$3.div(templateObject_1$f || (templateObject_1$f = __makeTemplateObject(["bg-gray-50 border-r border-gray-200 z-10 max-h-screen overflow-y-auto relative"], ["bg-gray-50 border-r border-gray-200 z-10 max-h-screen overflow-y-auto relative"])));
var TwToggleIconContainer = F$3.div(templateObject_2$b || (templateObject_2$b = __makeTemplateObject(["py-2 text-right cursor-pointer"], ["py-2 text-right cursor-pointer"])));
var TwMenuItemsContainer$1 = F$3.div(templateObject_3$9 || (templateObject_3$9 = __makeTemplateObject(["mb-10"], ["mb-10"])));
var TwMenuTitle = F$3.h3(templateObject_4$6 || (templateObject_4$6 = __makeTemplateObject(["mx-4 mb-2 text-xs text-gray-400 uppercase tracking-wide"], ["mx-4 mb-2 text-xs text-gray-400 uppercase tracking-wide"])));
var TwDivider$1 = F$3.hr(templateObject_5$5 || (templateObject_5$5 = __makeTemplateObject(["m-2"], ["m-2"])));
var TwBottom = F$3.div(templateObject_6$3 || (templateObject_6$3 = __makeTemplateObject(["w-full text-xs text-gray-400 text-ellipsis"], ["w-full text-xs text-gray-400 text-ellipsis"])));
var templateObject_1$f, templateObject_2$b, templateObject_3$9, templateObject_4$6, templateObject_5$5, templateObject_6$3;
var i$4 = Object.defineProperty;
var d$5 = (t, e, n) => e in t ? i$4(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;
var r$3 = (t, e, n) => (d$5(t, typeof e != "symbol" ? e + "" : e, n), n);
class o$5 {
    constructor() { r$3(this, "current", this.detect()); r$3(this, "handoffState", "pending"); r$3(this, "currentId", 0); }
    set(e) { this.current !== e && (this.handoffState = "pending", this.currentId = 0, this.current = e); }
    reset() { this.set(this.detect()); }
    nextId() { return ++this.currentId; }
    get isServer() { return this.current === "server"; }
    get isClient() { return this.current === "client"; }
    detect() { return typeof window == "undefined" || typeof document == "undefined" ? "server" : "client"; }
    handoff() { this.handoffState === "pending" && (this.handoffState = "complete"); }
    get isHandoffComplete() { return this.handoffState === "complete"; }
}
let s$8 = new o$5;
let l$4 = (e, f) => { s$8.isServer ? (0, react_1.useEffect)(e, f) : (0, react_1.useLayoutEffect)(e, f); };
function s$7(e) { let r = (0, react_1.useRef)(e); return l$4(() => { r.current = e; }, [e]), r; }
function t$7(e) { typeof queueMicrotask == "function" ? queueMicrotask(e) : Promise.resolve().then(e).catch(o => setTimeout(() => { throw o; })); }
function o$4() { let n = [], r = { addEventListener(e, t, s, a) { return e.addEventListener(t, s, a), r.add(() => e.removeEventListener(t, s, a)); }, requestAnimationFrame(...e) { let t = requestAnimationFrame(...e); return r.add(() => cancelAnimationFrame(t)); }, nextFrame(...e) { return r.requestAnimationFrame(() => r.requestAnimationFrame(...e)); }, setTimeout(...e) { let t = setTimeout(...e); return r.add(() => clearTimeout(t)); }, microTask(...e) { let t = { current: !0 }; return t$7(() => { t.current && e[0](); }), r.add(() => { t.current = !1; }); }, style(e, t, s) { let a = e.style.getPropertyValue(t); return Object.assign(e.style, { [t]: s }), this.add(() => { Object.assign(e.style, { [t]: a }); }); }, group(e) { let t = o$4(); return e(t), this.add(() => t.dispose()); }, add(e) { return n.push(e), () => { let t = n.indexOf(e); if (t >= 0)
        for (let s of n.splice(t, 1))
            s(); }; }, dispose() { for (let e of n.splice(0))
        e(); } }; return r; }
function p$4() { let [e] = (0, react_1.useState)(o$4); return (0, react_1.useEffect)(() => () => e.dispose(), [e]), e; }
let o$3 = function (t) { let e = s$7(t); return react_1.default.useCallback((...r) => e.current(...r), [e]); };
function s$6() { let r = typeof document == "undefined"; return "useSyncExternalStore" in React$4 ? (o => o.useSyncExternalStore)(React$4)(() => () => { }, () => !1, () => !r) : !1; }
function l$3() { let r = s$6(), [e, n] = React$4.useState(s$8.isHandoffComplete); return e && s$8.isHandoffComplete === !1 && n(!1), React$4.useEffect(() => { e !== !0 && n(!0); }, [e]), React$4.useEffect(() => s$8.handoff(), []), r ? !1 : e; }
var o$2;
let I$3 = (o$2 = react_1.default.useId) != null ? o$2 : function () { let n = l$3(), [e, u] = react_1.default.useState(n ? () => s$8.nextId() : null); return l$4(() => { e === null && u(s$8.nextId()); }, [e]), e != null ? "" + e : void 0; };
function u$4(r, n, ...a) { if (r in n) {
    let e = n[r];
    return typeof e == "function" ? e(...a) : e;
} let t = new Error(`Tried to handle "${r}" but there is no handler defined. Only defined handlers are: ${Object.keys(n).map(e => `"${e}"`).join(", ")}.`); throw Error.captureStackTrace && Error.captureStackTrace(t, u$4), t; }
function e$1(r) { return s$8.isServer ? null : r instanceof Node ? r.ownerDocument : r != null && r.hasOwnProperty("current") && r.current instanceof Node ? r.current.ownerDocument : document; }
let c$7 = ["[contentEditable=true]", "[tabindex]", "a[href]", "area[href]", "button:not([disabled])", "iframe", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])"].map(e => `${e}:not([tabindex='-1'])`).join(",");
var M$5 = (n => (n[n.First = 1] = "First", n[n.Previous = 2] = "Previous", n[n.Next = 4] = "Next", n[n.Last = 8] = "Last", n[n.WrapAround = 16] = "WrapAround", n[n.NoScroll = 32] = "NoScroll", n))(M$5 || {}), N$2 = (o => (o[o.Error = 0] = "Error", o[o.Overflow = 1] = "Overflow", o[o.Success = 2] = "Success", o[o.Underflow = 3] = "Underflow", o))(N$2 || {}), F$2 = (t => (t[t.Previous = -1] = "Previous", t[t.Next = 1] = "Next", t))(F$2 || {});
function f$5(e = document.body) { return e == null ? [] : Array.from(e.querySelectorAll(c$7)).sort((r, t) => Math.sign((r.tabIndex || Number.MAX_SAFE_INTEGER) - (t.tabIndex || Number.MAX_SAFE_INTEGER))); }
var T$2 = (t => (t[t.Strict = 0] = "Strict", t[t.Loose = 1] = "Loose", t))(T$2 || {});
function h$5(e, r = 0) { var t; return e === ((t = e$1(e)) == null ? void 0 : t.body) ? !1 : u$4(r, { [0]() { return e.matches(c$7); }, [1]() { let l = e; for (; l !== null;) {
        if (l.matches(c$7))
            return !0;
        l = l.parentElement;
    } return !1; } }); }
function D$2(e) { let r = e$1(e); o$4().nextFrame(() => { r && !h$5(r.activeElement, 0) && y$3(e); }); }
var w$5 = (t => (t[t.Keyboard = 0] = "Keyboard", t[t.Mouse = 1] = "Mouse", t))(w$5 || {});
typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("keydown", e => { e.metaKey || e.altKey || e.ctrlKey || (document.documentElement.dataset.headlessuiFocusVisible = ""); }, !0), document.addEventListener("click", e => { e.detail === 1 ? delete document.documentElement.dataset.headlessuiFocusVisible : e.detail === 0 && (document.documentElement.dataset.headlessuiFocusVisible = ""); }, !0));
function y$3(e) { e == null || e.focus({ preventScroll: !0 }); }
let S$6 = ["textarea", "input"].join(",");
function H$1(e) { var r, t; return (t = (r = e == null ? void 0 : e.matches) == null ? void 0 : r.call(e, S$6)) != null ? t : !1; }
function I$2(e, r = t => t) { return e.slice().sort((t, l) => { let o = r(t), i = r(l); if (o === null || i === null)
    return 0; let n = o.compareDocumentPosition(i); return n & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : n & Node.DOCUMENT_POSITION_PRECEDING ? 1 : 0; }); }
function _$2(e, r) { return O$1(f$5(), r, { relativeTo: e }); }
function O$1(e, r, { sorted: t = !0, relativeTo: l = null, skipElements: o = [] } = {}) { let i = Array.isArray(e) ? e.length > 0 ? e[0].ownerDocument : document : e.ownerDocument, n = Array.isArray(e) ? t ? I$2(e) : e : f$5(e); o.length > 0 && n.length > 1 && (n = n.filter(s => !o.includes(s))), l = l != null ? l : i.activeElement; let E = (() => { if (r & 5)
    return 1; if (r & 10)
    return -1; throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last"); })(), x = (() => { if (r & 1)
    return 0; if (r & 2)
    return Math.max(0, n.indexOf(l)) - 1; if (r & 4)
    return Math.max(0, n.indexOf(l)) + 1; if (r & 8)
    return n.length - 1; throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last"); })(), p = r & 32 ? { preventScroll: !0 } : {}, d = 0, a = n.length, u; do {
    if (d >= a || d + a <= 0)
        return 0;
    let s = x + d;
    if (r & 16)
        s = (s + a) % a;
    else {
        if (s < 0)
            return 3;
        if (s >= a)
            return 1;
    }
    u = n[s], u == null || u.focus(p), d += E;
} while (u !== i.activeElement); return r & 6 && H$1(u) && u.select(), 2; }
function d$4(e, r, n) { let o = s$7(r); (0, react_1.useEffect)(() => { function t(u) { o.current(u); } return document.addEventListener(e, t, n), () => document.removeEventListener(e, t, n); }, [e, n]); }
function s$5(e, r, n) { let o = s$7(r); (0, react_1.useEffect)(() => { function t(i) { o.current(i); } return window.addEventListener(e, t, n), () => window.removeEventListener(e, t, n); }, [e, n]); }
function h$4(s, m, a = !0) { let i = (0, react_1.useRef)(!1); (0, react_1.useEffect)(() => { requestAnimationFrame(() => { i.current = a; }); }, [a]); function c(e, r) { if (!i.current || e.defaultPrevented)
    return; let t = r(e); if (t === null || !t.getRootNode().contains(t) || !t.isConnected)
    return; let E = function u(n) { return typeof n == "function" ? u(n()) : Array.isArray(n) || n instanceof Set ? n : [n]; }(s); for (let u of E) {
    if (u === null)
        continue;
    let n = u instanceof HTMLElement ? u : u.current;
    if (n != null && n.contains(t) || e.composed && e.composedPath().includes(n))
        return;
} return !h$5(t, T$2.Loose) && t.tabIndex !== -1 && e.preventDefault(), m(e, t); } let o = (0, react_1.useRef)(null); d$4("pointerdown", e => { var r, t; i.current && (o.current = ((t = (r = e.composedPath) == null ? void 0 : r.call(e)) == null ? void 0 : t[0]) || e.target); }, !0), d$4("mousedown", e => { var r, t; i.current && (o.current = ((t = (r = e.composedPath) == null ? void 0 : r.call(e)) == null ? void 0 : t[0]) || e.target); }, !0), d$4("click", e => { o.current && (c(e, () => o.current), o.current = null); }, !0), d$4("touchend", e => c(e, () => e.target instanceof HTMLElement ? e.target : null), !0), s$5("blur", e => c(e, () => window.document.activeElement instanceof HTMLIFrameElement ? window.document.activeElement : null), !0); }
function i$3(t) { var n; if (t.type)
    return t.type; let e = (n = t.as) != null ? n : "button"; if (typeof e == "string" && e.toLowerCase() === "button")
    return "button"; }
function s$4(t, e) { let [n, u] = (0, react_1.useState)(() => i$3(t)); return l$4(() => { u(i$3(t)); }, [t.type, t.as]), l$4(() => { n || e.current && e.current instanceof HTMLButtonElement && !e.current.hasAttribute("type") && u("button"); }, [n, e]), n; }
let u$3 = Symbol();
function T$1(t, n = !0) { return Object.assign(t, { [u$3]: n }); }
function y$2(...t) { let n = (0, react_1.useRef)(t); (0, react_1.useEffect)(() => { n.current = t; }, [t]); let c = o$3(e => { for (let o of n.current)
    o != null && (typeof o == "function" ? o(e) : o.current = e); }); return t.every(e => e == null || (e == null ? void 0 : e[u$3])) ? void 0 : c; }
function F$1({ container: e, accept: t, walk: r, enabled: c = !0 }) { let o = (0, react_1.useRef)(t), l = (0, react_1.useRef)(r); (0, react_1.useEffect)(() => { o.current = t, l.current = r; }, [t, r]), l$4(() => { if (!e || !c)
    return; let n = e$1(e); if (!n)
    return; let f = o.current, p = l.current, d = Object.assign(i => f(i), { acceptNode: f }), u = n.createTreeWalker(e, NodeFilter.SHOW_ELEMENT, d, !1); for (; u.nextNode();)
    p(u.currentNode); }, [e, c, o, l]); }
function f$4(r) { throw new Error("Unexpected object: " + r); }
var a$8 = (e => (e[e.First = 0] = "First", e[e.Previous = 1] = "Previous", e[e.Next = 2] = "Next", e[e.Last = 3] = "Last", e[e.Specific = 4] = "Specific", e[e.Nothing = 5] = "Nothing", e))(a$8 || {});
function x$1(r, n) { let t = n.resolveItems(); if (t.length <= 0)
    return null; let l = n.resolveActiveIndex(), s = l != null ? l : -1, d = (() => { switch (r.focus) {
    case 0: return t.findIndex(e => !n.resolveDisabled(e));
    case 1: {
        let e = t.slice().reverse().findIndex((i, c, u) => s !== -1 && u.length - c - 1 >= s ? !1 : !n.resolveDisabled(i));
        return e === -1 ? e : t.length - 1 - e;
    }
    case 2: return t.findIndex((e, i) => i <= s ? !1 : !n.resolveDisabled(e));
    case 3: {
        let e = t.slice().reverse().findIndex(i => !n.resolveDisabled(i));
        return e === -1 ? e : t.length - 1 - e;
    }
    case 4: return t.findIndex(e => n.resolveId(e) === r.id);
    case 5: return null;
    default: f$4(r);
} })(); return d === -1 ? l : d; }
function t$6(...r) { return Array.from(new Set(r.flatMap(n => typeof n == "string" ? n.split(" ") : []))).filter(Boolean).join(" "); }
var S$5 = (a => (a[a.None = 0] = "None", a[a.RenderStrategy = 1] = "RenderStrategy", a[a.Static = 2] = "Static", a))(S$5 || {}), j$3 = (e => (e[e.Unmount = 0] = "Unmount", e[e.Hidden = 1] = "Hidden", e))(j$3 || {});
function X$1({ ourProps: r, theirProps: t, slot: e, defaultTag: a, features: s, visible: n = !0, name: f }) { let o = N$1(t, r); if (n)
    return c$6(o, e, a, f); let u = s != null ? s : 0; if (u & 2) {
    let { static: l = !1 } = o, p = __rest(o, ["static"]);
    if (l)
        return c$6(p, e, a, f);
} if (u & 1) {
    let { unmount: l = !0 } = o, p = __rest(o, ["unmount"]);
    return u$4(l ? 0 : 1, { [0]() { return null; }, [1]() { return c$6(Object.assign(Object.assign({}, p), { hidden: !0, style: { display: "none" } }), e, a, f); } });
} return c$6(o, e, a, f); }
function c$6(r, t = {}, e, a) {
    let _m = g$2(r, ["unmount", "static"]), { as: s = e, children: n, refName: f = "ref" } = _m, o = __rest(_m, ["as", "children", "refName"]), u = r.ref !== void 0 ? { [f]: r.ref } : {}, l = typeof n == "function" ? n(t) : n;
    "className" in o && o.className && typeof o.className == "function" && (o.className = o.className(t));
    let p = {};
    if (t) {
        let i = !1, m = [];
        for (let [y, d] of Object.entries(t))
            typeof d == "boolean" && (i = !0), d === !0 && m.push(y);
        i && (p["data-headlessui-state"] = m.join(" "));
    }
    if (s === react_1.Fragment && Object.keys(R(o)).length > 0) {
        if (!(0, react_1.isValidElement)(l) || Array.isArray(l) && l.length > 1)
            throw new Error(['Passing props on "Fragment"!', "", `The current component <${a} /> is rendering a "Fragment".`, "However we need to passthrough the following props:", Object.keys(o).map(d => `  - ${d}`).join(`
`), "", "You can apply a few solutions:", ['Add an `as="..."` prop, to ensure that we render an actual element instead of a "Fragment".', "Render a single element as the child so that we can forward the props onto that element."].map(d => `  - ${d}`).join(`
`)].join(`
`));
        let i = l.props, m = typeof (i == null ? void 0 : i.className) == "function" ? (...d) => t$6(i == null ? void 0 : i.className(...d), o.className) : t$6(i == null ? void 0 : i.className, o.className), y = m ? { className: m } : {};
        return (0, react_1.cloneElement)(l, Object.assign({}, N$1(l.props, R(g$2(o, ["ref"]))), p, u, w$4(l.ref, u.ref), y));
    }
    return (0, react_1.createElement)(s, Object.assign({}, g$2(o, ["ref"]), s !== react_1.Fragment && u, s !== react_1.Fragment && p), l);
}
function w$4(...r) { return { ref: r.every(t => t == null) ? void 0 : t => { for (let e of r)
        e != null && (typeof e == "function" ? e(t) : e.current = t); } }; }
function N$1(...r) { if (r.length === 0)
    return {}; if (r.length === 1)
    return r[0]; let t = {}, e = {}; for (let s of r)
    for (let n in s)
        n.startsWith("on") && typeof s[n] == "function" ? ((e[n]) != null || (e[n] = []), e[n].push(s[n])) : t[n] = s[n]; if (t.disabled || t["aria-disabled"])
    return Object.assign(t, Object.fromEntries(Object.keys(e).map(s => [s, void 0]))); for (let s in e)
    Object.assign(t, { [s](n, ...f) { let o = e[s]; for (let u of o) {
            if ((n instanceof Event || (n == null ? void 0 : n.nativeEvent) instanceof Event) && n.defaultPrevented)
                return;
            u(n, ...f);
        } } }); return t; }
function D$1(r) { var t; return Object.assign((0, react_1.forwardRef)(r), { displayName: (t = r.displayName) != null ? t : r.name }); }
function R(r) { let t = Object.assign({}, r); for (let e in t)
    t[e] === void 0 && delete t[e]; return t; }
function g$2(r, t = []) { let e = Object.assign({}, r); for (let a of t)
    a in e && delete e[a]; return e; }
function r$2(n) { let e = n.parentElement, l = null; for (; e && !(e instanceof HTMLFieldSetElement);)
    e instanceof HTMLLegendElement && (l = e), e = e.parentElement; let t = (e == null ? void 0 : e.getAttribute("disabled")) === ""; return t && i$2(l) ? !1 : t; }
function i$2(n) { if (!n)
    return !1; let e = n.previousElementSibling; for (; e !== null;) {
    if (e instanceof HTMLLegendElement)
        return !1;
    e = e.previousElementSibling;
} return !0; }
let a$7 = "div";
var p$3 = (e => (e[e.None = 1] = "None", e[e.Focusable = 2] = "Focusable", e[e.Hidden = 4] = "Hidden", e))(p$3 || {});
function s$3(t, o) { let { features: n = 1 } = t, e = __rest(t, ["features"]), d = { ref: o, "aria-hidden": (n & 2) === 2 ? !0 : void 0, style: Object.assign({ position: "fixed", top: 1, left: 1, width: 1, height: 0, padding: 0, margin: -1, overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0" }, (n & 4) === 4 && (n & 2) !== 2 && { display: "none" }) }; return X$1({ ourProps: d, theirProps: e, slot: {}, defaultTag: a$7, name: "Hidden" }); }
let c$5 = D$1(s$3);
let n$2 = (0, react_1.createContext)(null);
n$2.displayName = "OpenClosedContext";
var d$3 = (e => (e[e.Open = 1] = "Open", e[e.Closed = 2] = "Closed", e[e.Closing = 4] = "Closing", e[e.Opening = 8] = "Opening", e))(d$3 || {});
function C() { return (0, react_1.useContext)(n$2); }
function c$4({ value: o, children: r }) { return react_1.default.createElement(n$2.Provider, { value: o }, r); }
var o$1 = (r => (r.Space = " ", r.Enter = "Enter", r.Escape = "Escape", r.Backspace = "Backspace", r.Delete = "Delete", r.ArrowLeft = "ArrowLeft", r.ArrowUp = "ArrowUp", r.ArrowRight = "ArrowRight", r.ArrowDown = "ArrowDown", r.Home = "Home", r.End = "End", r.PageUp = "PageUp", r.PageDown = "PageDown", r.Tab = "Tab", r))(o$1 || {});
function m$1(u, t) { let e = (0, react_1.useRef)([]), r = o$3(u); (0, react_1.useEffect)(() => { let o = [...e.current]; for (let [n, a] of t.entries())
    if (e.current[n] !== a) {
        let l = r(t, o);
        return e.current = t, l;
    } }, [r, ...t]); }
function t$5(e) { return [e.screenX, e.screenY]; }
function u$2() { let e = (0, react_1.useRef)([-1, -1]); return { wasMoved(r) { let n = t$5(r); return e.current[0] === n[0] && e.current[1] === n[1] ? !1 : (e.current = n, !0); }, update(r) { e.current = t$5(r); } }; }
function t$4() { return /iPhone/gi.test(window.navigator.platform) || /Mac/gi.test(window.navigator.platform) && window.navigator.maxTouchPoints > 0; }
function n$1(...e) { return (0, react_1.useMemo)(() => e$1(...e), [...e]); }
var s$2 = (r => (r[r.Forwards = 0] = "Forwards", r[r.Backwards = 1] = "Backwards", r))(s$2 || {});
function n() { let e = (0, react_1.useRef)(0); return s$5("keydown", o => { o.key === "Tab" && (e.current = o.shiftKey ? 1 : 0); }, !0), e; }
function f$3() { let e = (0, react_1.useRef)(!1); return l$4(() => (e.current = !0, () => { e.current = !1; }), []), e; }
function E$1(n, e, a, t) { let i = s$7(a); (0, react_1.useEffect)(() => { n = n != null ? n : window; function r(o) { i.current(o); } return n.addEventListener(e, r, t), () => n.removeEventListener(e, r, t); }, [n, e, t]); }
function t$3(n) { function e() { document.readyState !== "loading" && (n(), document.removeEventListener("DOMContentLoaded", e)); } typeof window != "undefined" && typeof document != "undefined" && (document.addEventListener("DOMContentLoaded", e), e()); }
function c$3(t) { let r = o$3(t), e = (0, react_1.useRef)(!1); (0, react_1.useEffect)(() => (e.current = !1, () => { e.current = !0, t$7(() => { e.current && r(); }); }), [r]); }
function P$1(t) { if (!t)
    return new Set; if (typeof t == "function")
    return new Set(t()); let r = new Set; for (let e of t.current)
    e.current instanceof HTMLElement && r.add(e.current); return r; }
let J = "div";
var h$3 = (n => (n[n.None = 1] = "None", n[n.InitialFocus = 2] = "InitialFocus", n[n.TabLock = 4] = "TabLock", n[n.FocusLock = 8] = "FocusLock", n[n.RestoreFocus = 16] = "RestoreFocus", n[n.All = 30] = "All", n))(h$3 || {});
function X(t, r) { let e = (0, react_1.useRef)(null), o = y$2(e, r), { initialFocus: u, containers: i, features: n$2 = 30 } = t, l = __rest(t, ["initialFocus", "containers", "features"]); l$3() || (n$2 = 1); let m = n$1(e); Y$1({ ownerDocument: m }, Boolean(n$2 & 16)); let c = Z$1({ ownerDocument: m, container: e, initialFocus: u }, Boolean(n$2 & 2)); $({ ownerDocument: m, container: e, containers: i, previousActiveElement: c }, Boolean(n$2 & 8)); let v = n(), y = o$3(s => { let T = e.current; if (!T)
    return; (B => B())(() => { u$4(v.current, { [s$2.Forwards]: () => { O$1(T, M$5.First, { skipElements: [s.relatedTarget] }); }, [s$2.Backwards]: () => { O$1(T, M$5.Last, { skipElements: [s.relatedTarget] }); } }); }); }), _ = p$4(), b = (0, react_1.useRef)(!1), j = { ref: o, onKeyDown(s) { s.key == "Tab" && (b.current = !0, _.requestAnimationFrame(() => { b.current = !1; })); }, onBlur(s) { let T = P$1(i); e.current instanceof HTMLElement && T.add(e.current); let d = s.relatedTarget; d instanceof HTMLElement && d.dataset.headlessuiFocusGuard !== "true" && (S$4(T, d) || (b.current ? O$1(e.current, u$4(v.current, { [s$2.Forwards]: () => M$5.Next, [s$2.Backwards]: () => M$5.Previous }) | M$5.WrapAround, { relativeTo: s.target }) : s.target instanceof HTMLElement && y$3(s.target))); } }; return react_1.default.createElement(react_1.default.Fragment, null, Boolean(n$2 & 4) && react_1.default.createElement(c$5, { as: "button", type: "button", "data-headlessui-focus-guard": !0, onFocus: y, features: p$3.Focusable }), X$1({ ourProps: j, theirProps: l, defaultTag: J, name: "FocusTrap" }), Boolean(n$2 & 4) && react_1.default.createElement(c$5, { as: "button", type: "button", "data-headlessui-focus-guard": !0, onFocus: y, features: p$3.Focusable })); }
let z$1 = D$1(X), ge$1 = Object.assign(z$1, { features: h$3 }), a$6 = [];
t$3(() => { function t(r) { r.target instanceof HTMLElement && r.target !== document.body && a$6[0] !== r.target && (a$6.unshift(r.target), a$6 = a$6.filter(e => e != null && e.isConnected), a$6.splice(10)); } window.addEventListener("click", t, { capture: !0 }), window.addEventListener("mousedown", t, { capture: !0 }), window.addEventListener("focus", t, { capture: !0 }), document.body.addEventListener("click", t, { capture: !0 }), document.body.addEventListener("mousedown", t, { capture: !0 }), document.body.addEventListener("focus", t, { capture: !0 }); });
function Q$1(t = !0) { let r = (0, react_1.useRef)(a$6.slice()); return m$1(([e], [o]) => { o === !0 && e === !1 && t$7(() => { r.current.splice(0); }), o === !1 && e === !0 && (r.current = a$6.slice()); }, [t, a$6, r]), o$3(() => { var e; return (e = r.current.find(o => o != null && o.isConnected)) != null ? e : null; }); }
function Y$1({ ownerDocument: t }, r) { let e = Q$1(r); m$1(() => { r || (t == null ? void 0 : t.activeElement) === (t == null ? void 0 : t.body) && y$3(e()); }, [r]), c$3(() => { r && y$3(e()); }); }
function Z$1({ ownerDocument: t, container: r, initialFocus: e }, o) { let u = (0, react_1.useRef)(null), i = f$3(); return m$1(() => { if (!o)
    return; let n = r.current; n && t$7(() => { if (!i.current)
    return; let l = t == null ? void 0 : t.activeElement; if (e != null && e.current) {
    if ((e == null ? void 0 : e.current) === l) {
        u.current = l;
        return;
    }
}
else if (n.contains(l)) {
    u.current = l;
    return;
} e != null && e.current ? y$3(e.current) : O$1(n, M$5.First) === N$2.Error && console.warn("There are no focusable elements inside the <FocusTrap />"), u.current = t == null ? void 0 : t.activeElement; }); }, [o]), u; }
function $({ ownerDocument: t, container: r, containers: e, previousActiveElement: o }, u) { let i = f$3(); E$1(t == null ? void 0 : t.defaultView, "focus", n => { if (!u || !i.current)
    return; let l = P$1(e); r.current instanceof HTMLElement && l.add(r.current); let m = o.current; if (!m)
    return; let c = n.target; c && c instanceof HTMLElement ? S$4(l, c) ? (o.current = c, y$3(c)) : (n.preventDefault(), n.stopPropagation(), y$3(m)) : y$3(o.current); }, !0); }
function S$4(t, r) { for (let e of t)
    if (e.contains(r))
        return !0; return !1; }
let e = (0, react_1.createContext)(!1);
function l$2() { return (0, react_1.useContext)(e); }
function P(o) { return react_1.default.createElement(e.Provider, { value: o.force }, o.children); }
function F(p) { let l = l$2(), n = (0, react_1.useContext)(v$2), e = n$1(p), [a, o] = (0, react_1.useState)(() => { if (!l && n !== null || s$8.isServer)
    return null; let t = e == null ? void 0 : e.getElementById("headlessui-portal-root"); if (t)
    return t; if (e === null)
    return null; let r = e.createElement("div"); return r.setAttribute("id", "headlessui-portal-root"), e.body.appendChild(r); }); return (0, react_1.useEffect)(() => { a !== null && (e != null && e.body.contains(a) || e == null || e.body.appendChild(a)); }, [a, e]), (0, react_1.useEffect)(() => { l || n !== null && o(n.current); }, [n, o, l]), a; }
let U$2 = react_1.Fragment;
function N(p, l) { let n = p, e = (0, react_1.useRef)(null), a = y$2(T$1(u => { e.current = u; }), l), o = n$1(e), t = F(e), [r] = (0, react_1.useState)(() => { var u; return s$8.isServer ? null : (u = o == null ? void 0 : o.createElement("div")) != null ? u : null; }), i = (0, react_1.useContext)(f$2), C = l$3(); return l$4(() => { !t || !r || t.contains(r) || (r.setAttribute("data-headlessui-portal", ""), t.appendChild(r)); }, [t, r]), l$4(() => { if (r && i)
    return i.register(r); }, [i, r]), c$3(() => { var u; !t || !r || (r instanceof Node && t.contains(r) && t.removeChild(r), t.childNodes.length <= 0 && ((u = t.parentElement) == null || u.removeChild(t))); }), C ? !t || !r ? null : (0, react_dom_1.createPortal)(X$1({ ourProps: { ref: a }, theirProps: n, defaultTag: U$2, name: "Portal" }), r) : null; }
let S$3 = react_1.Fragment, v$2 = (0, react_1.createContext)(null);
function j$2(p, l) { let { target: n } = p, e = __rest(p, ["target"]), o = { ref: y$2(l) }; return react_1.default.createElement(v$2.Provider, { value: n }, X$1({ ourProps: o, theirProps: e, defaultTag: S$3, name: "Popover.Group" })); }
let f$2 = (0, react_1.createContext)(null);
function ae$1() { let p = (0, react_1.useContext)(f$2), l = (0, react_1.useRef)([]), n = o$3(o => (l.current.push(o), p && p.register(o), () => e(o))), e = o$3(o => { let t = l.current.indexOf(o); t !== -1 && l.current.splice(t, 1), p && p.unregister(o); }), a = (0, react_1.useMemo)(() => ({ register: n, unregister: e, portals: l }), [n, e, l]); return [l, (0, react_1.useMemo)(() => function ({ children: t }) { return react_1.default.createElement(f$2.Provider, { value: a }, t); }, [a])]; }
let D = D$1(N), I$1 = D$1(j$2), pe = Object.assign(D, { Group: I$1 });
let d$2 = (0, react_1.createContext)(null);
function f$1() { let r = (0, react_1.useContext)(d$2); if (r === null) {
    let t = new Error("You used a <Description /> component, but it is not inside a relevant parent.");
    throw Error.captureStackTrace && Error.captureStackTrace(t, f$1), t;
} return r; }
function M$4() { let [r, t] = (0, react_1.useState)([]); return [r.length > 0 ? r.join(" ") : void 0, (0, react_1.useMemo)(() => function (e) { let i = o$3(s => (t(o => [...o, s]), () => t(o => { let p = o.slice(), c = p.indexOf(s); return c !== -1 && p.splice(c, 1), p; }))), n = (0, react_1.useMemo)(() => ({ register: i, slot: e.slot, name: e.name, props: e.props }), [i, e.slot, e.name, e.props]); return react_1.default.createElement(d$2.Provider, { value: n }, e.children); }, [t])]; }
let S$2 = "p";
function h$2(r, t) { let a = I$3(), { id: e = `headlessui-description-${a}` } = r, i = __rest(r, ["id"]), n = f$1(), s = y$2(t); l$4(() => n.register(e), [e, n.register]); let o = Object.assign(Object.assign({ ref: s }, n.props), { id: e }); return X$1({ ourProps: o, theirProps: i, slot: n.slot || {}, defaultTag: S$2, name: n.name || "Description" }); }
let y$1 = D$1(h$2), b$3 = Object.assign(y$1, {});
let a$5 = (0, react_1.createContext)(() => { });
a$5.displayName = "StackContext";
var s$1 = (e => (e[e.Add = 0] = "Add", e[e.Remove = 1] = "Remove", e))(s$1 || {});
function x() { return (0, react_1.useContext)(a$5); }
function M$3({ children: i, onUpdate: r, type: e, element: n, enabled: u }) { let l = x(), o = o$3((...t) => { r == null || r(...t), l(...t); }); return l$4(() => { let t = u === void 0 || u === !0; return t && o(0, e, n), () => { t && o(1, e, n); }; }, [o, e, n, u]), react_1.default.createElement(a$5.Provider, { value: o }, i); }
function i$1(e, t) { return e === t && (e !== 0 || 1 / e === 1 / t) || e !== e && t !== t; }
const d$1 = typeof Object.is == "function" ? Object.is : i$1, { useState: u$1, useEffect: h$1, useLayoutEffect: f, useDebugValue: p$2 } = React$4;
function y(e, t, c) { const a = t(), [{ inst: n }, o] = u$1({ inst: { value: a, getSnapshot: t } }); return f(() => { n.value = a, n.getSnapshot = t, r$1(n) && o({ inst: n }); }, [e, a, t]), h$1(() => (r$1(n) && o({ inst: n }), e(() => { r$1(n) && o({ inst: n }); })), [e]), p$2(a), a; }
function r$1(e) { const t = e.getSnapshot, c = e.value; try {
    const a = t();
    return !d$1(c, a);
}
catch (_m) {
    return !0;
} }
function t$2(r, e, n) { return e(); }
const r = typeof window != "undefined" && typeof window.document != "undefined" && typeof window.document.createElement != "undefined", s = !r, c$2 = s ? t$2 : y, a$4 = "useSyncExternalStore" in React$4 ? (n => n.useSyncExternalStore)(React$4) : c$2;
function S$1(t) { return a$4(t.subscribe, t.getSnapshot, t.getSnapshot); }
function a$3(o, r) { let t = o(), n = new Set; return { getSnapshot() { return t; }, subscribe(e) { return n.add(e), () => n.delete(e); }, dispatch(e, ...s) { let i = r[e].call(t, ...s); i && (t = i, n.forEach(c => c())); } }; }
function c$1() { let o; return { before({ doc: e }) { var l; let n = e.documentElement; o = ((l = e.defaultView) != null ? l : window).innerWidth - n.clientWidth; }, after({ doc: e, d: n }) { let t = e.documentElement, l = t.clientWidth - t.offsetWidth, r = o - l; n.style(t, "paddingRight", `${r}px`); } }; }
function T() { if (!t$4())
    return {}; let l; return { before() { l = window.pageYOffset; }, after({ doc: o, d: t, meta: s }) { function i(n) { return s.containers.flatMap(e => e()).some(e => e.contains(n)); } t.microTask(() => { if (window.getComputedStyle(o.documentElement).scrollBehavior !== "auto") {
        let e = o$4();
        e.style(o.documentElement, "scroll-behavior", "auto"), t.add(() => t.microTask(() => e.dispose()));
    } t.style(o.body, "marginTop", `-${l}px`), window.scrollTo(0, 0); let n = null; t.addEventListener(o, "click", e => { if (e.target instanceof HTMLElement)
        try {
            let r = e.target.closest("a");
            if (!r)
                return;
            let { hash: c } = new URL(r.href), a = o.querySelector(c);
            a && !i(a) && (n = a);
        }
        catch (_m) { } }, !0), t.addEventListener(o, "touchmove", e => { e.target instanceof HTMLElement && !i(e.target) && e.preventDefault(); }, { passive: !1 }), t.add(() => { window.scrollTo(0, window.pageYOffset + l), n && n.isConnected && (n.scrollIntoView({ block: "nearest" }), n = null); }); }); } }; }
function l$1() { return { before({ doc: e, d: o }) { o.style(e.documentElement, "overflow", "hidden"); } }; }
function m(e) { let n = {}; for (let t of e)
    Object.assign(n, t(n)); return n; }
let a$2 = a$3(() => new Map, { PUSH(e, n) { var o; let t = (o = this.get(e)) != null ? o : { doc: e, count: 0, d: o$4(), meta: new Set }; return t.count++, t.meta.add(n), this.set(e, t), this; }, POP(e, n) { let t = this.get(e); return t && (t.count--, t.meta.delete(n)), this; }, SCROLL_PREVENT({ doc: e, d: n, meta: t }) { let o = { doc: e, d: n, meta: m(t) }, c = [T(), c$1(), l$1()]; c.forEach(({ before: r }) => r == null ? void 0 : r(o)), c.forEach(({ after: r }) => r == null ? void 0 : r(o)); }, SCROLL_ALLOW({ d: e }) { e.dispose(); }, TEARDOWN({ doc: e }) { this.delete(e); } });
a$2.subscribe(() => { let e = a$2.getSnapshot(), n = new Map; for (let [t] of e)
    n.set(t, t.documentElement.style.overflow); for (let t of e.values()) {
    let o = n.get(t.doc) === "hidden", c = t.count !== 0;
    (c && !o || !c && o) && a$2.dispatch(t.count > 0 ? "SCROLL_PREVENT" : "SCROLL_ALLOW", t), t.count === 0 && a$2.dispatch("TEARDOWN", t);
} });
function p$1(e, r, n) { let f = S$1(a$2), o = e ? f.get(e) : void 0, i = o ? o.count > 0 : !1; return l$4(() => { if (!(!e || !r))
    return a$2.dispatch("PUSH", e, n), () => a$2.dispatch("POP", e, n); }, [r, e]), i; }
let u = new Map, t$1 = new Map;
function h(r, l = !0) { l$4(() => { var o; if (!l)
    return; let e = typeof r == "function" ? r() : r.current; if (!e)
    return; function a() { var d; if (!e)
    return; let i = (d = t$1.get(e)) != null ? d : 1; if (i === 1 ? t$1.delete(e) : t$1.set(e, i - 1), i !== 1)
    return; let n = u.get(e); n && (n["aria-hidden"] === null ? e.removeAttribute("aria-hidden") : e.setAttribute("aria-hidden", n["aria-hidden"]), e.inert = n.inert, u.delete(e)); } let f = (o = t$1.get(e)) != null ? o : 0; return t$1.set(e, f + 1), f !== 0 || (u.set(e, { "aria-hidden": e.getAttribute("aria-hidden"), inert: e.inert }), e.setAttribute("aria-hidden", "true"), e.inert = !0), a; }, [r, l]); }
function j$1({ defaultContainers: t = [], portals: r, mainTreeNodeRef: u } = {}) { var c; let o = (0, react_1.useRef)((c = u == null ? void 0 : u.current) != null ? c : null), l = n$1(o), f = o$3(() => { var i; let n = []; for (let e of t)
    e !== null && (e instanceof HTMLElement ? n.push(e) : "current" in e && e.current instanceof HTMLElement && n.push(e.current)); if (r != null && r.current)
    for (let e of r.current)
        n.push(e); for (let e of (i = l == null ? void 0 : l.querySelectorAll("html > *, body > *")) != null ? i : [])
    e !== document.body && e !== document.head && e instanceof HTMLElement && e.id !== "headlessui-portal-root" && (e.contains(o.current) || n.some(T => e.contains(T)) || n.push(e)); return n; }); return { resolveContainers: f, contains: o$3(n => f().some(i => i.contains(n))), mainTreeNodeRef: o, MainTreeNode: (0, react_1.useMemo)(() => function () { return u != null ? null : react_1.default.createElement(c$5, { features: p$3.Hidden, ref: o }); }, [o, u]) }; }
var _e = (o => (o[o.Open = 0] = "Open", o[o.Closed = 1] = "Closed", o))(_e || {}), Ie$1 = (e => (e[e.SetTitleId = 0] = "SetTitleId", e))(Ie$1 || {});
let Me$1 = { [0](t, e) { return t.titleId === e.id ? t : Object.assign(Object.assign({}, t), { titleId: e.id }); } }, I = (0, react_1.createContext)(null);
I.displayName = "DialogContext";
function b$2(t) { let e = (0, react_1.useContext)(I); if (e === null) {
    let o = new Error(`<${t} /> is missing a parent <Dialog /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(o, b$2), o;
} return e; }
function we(t, e, o = () => [document.body]) { p$1(t, e, i => { var n; return { containers: [...(n = i.containers) != null ? n : [], o] }; }); }
function Be(t, e) { return u$4(e.type, Me$1, t, e); }
let He$1 = "div", Ge = S$5.RenderStrategy | S$5.Static;
function Ne$1(t, e) { var X; let o = I$3(), { id: i = `headlessui-dialog-${o}`, open: n, onClose: l, initialFocus: s, __demoMode: g = !1 } = t, T = __rest(t, ["id", "open", "onClose", "initialFocus", "__demoMode"]), [m, h$1] = (0, react_1.useState)(0), a = C(); n === void 0 && a !== null && (n = (a & d$3.Open) === d$3.Open); let D = (0, react_1.useRef)(null), Q = y$2(D, e), f = n$1(D), N = t.hasOwnProperty("open") || a !== null, U = t.hasOwnProperty("onClose"); if (!N && !U)
    throw new Error("You have to provide an `open` and an `onClose` prop to the `Dialog` component."); if (!N)
    throw new Error("You provided an `onClose` prop to the `Dialog`, but forgot an `open` prop."); if (!U)
    throw new Error("You provided an `open` prop to the `Dialog`, but forgot an `onClose` prop."); if (typeof n != "boolean")
    throw new Error(`You provided an \`open\` prop to the \`Dialog\`, but the value is not a boolean. Received: ${n}`); if (typeof l != "function")
    throw new Error(`You provided an \`onClose\` prop to the \`Dialog\`, but the value is not a function. Received: ${l}`); let p = n ? 0 : 1, [S, Z] = (0, react_1.useReducer)(Be, { titleId: null, descriptionId: null, panelRef: (0, react_1.createRef)() }), P$1 = o$3(() => l(!1)), W = o$3(r => Z({ type: 0, id: r })), L = l$3() ? g ? !1 : p === 0 : !1, F = m > 1, Y = (0, react_1.useContext)(I) !== null, [ee, te] = ae$1(), { resolveContainers: M, mainTreeNodeRef: k, MainTreeNode: oe } = j$1({ portals: ee, defaultContainers: [(X = S.panelRef.current) != null ? X : D.current] }), re = F ? "parent" : "leaf", $ = a !== null ? (a & d$3.Closing) === d$3.Closing : !1, ne = (() => Y || $ ? !1 : L)(), le = (0, react_1.useCallback)(() => { var r, c; return (c = Array.from((r = f == null ? void 0 : f.querySelectorAll("body > *")) != null ? r : []).find(d => d.id === "headlessui-portal-root" ? !1 : d.contains(k.current) && d instanceof HTMLElement)) != null ? c : null; }, [k]); h(le, ne); let ae = (() => F ? !0 : L)(), ie = (0, react_1.useCallback)(() => { var r, c; return (c = Array.from((r = f == null ? void 0 : f.querySelectorAll("[data-headlessui-portal]")) != null ? r : []).find(d => d.contains(k.current) && d instanceof HTMLElement)) != null ? c : null; }, [k]); h(ie, ae); let se = (() => !(!L || F))(); h$4(M, P$1, se); let pe$1 = (() => !(F || p !== 0))(); E$1(f == null ? void 0 : f.defaultView, "keydown", r => { pe$1 && (r.defaultPrevented || r.key === o$1.Escape && (r.preventDefault(), r.stopPropagation(), P$1())); }); let de = (() => !($ || p !== 0 || Y))(); we(f, de, M), (0, react_1.useEffect)(() => { if (p !== 0 || !D.current)
    return; let r = new ResizeObserver(c => { for (let d of c) {
    let x = d.target.getBoundingClientRect();
    x.x === 0 && x.y === 0 && x.width === 0 && x.height === 0 && P$1();
} }); return r.observe(D.current), () => r.disconnect(); }, [p, D, P$1]); let [ue, fe] = M$4(), ge = (0, react_1.useMemo)(() => [{ dialogState: p, close: P$1, setTitleId: W }, S], [p, S, P$1, W]), J = (0, react_1.useMemo)(() => ({ open: p === 0 }), [p]), Te = { ref: Q, id: i, role: "dialog", "aria-modal": p === 0 ? !0 : void 0, "aria-labelledby": S.titleId, "aria-describedby": ue }; return react_1.default.createElement(M$3, { type: "Dialog", enabled: p === 0, element: D, onUpdate: o$3((r, c) => { c === "Dialog" && u$4(r, { [s$1.Add]: () => h$1(d => d + 1), [s$1.Remove]: () => h$1(d => d - 1) }); }) }, react_1.default.createElement(P, { force: !0 }, react_1.default.createElement(pe, null, react_1.default.createElement(I.Provider, { value: ge }, react_1.default.createElement(pe.Group, { target: D }, react_1.default.createElement(P, { force: !1 }, react_1.default.createElement(fe, { slot: J, name: "Dialog.Description" }, react_1.default.createElement(ge$1, { initialFocus: s, containers: M, features: L ? u$4(re, { parent: ge$1.features.RestoreFocus, leaf: ge$1.features.All & ~ge$1.features.FocusLock }) : ge$1.features.None }, react_1.default.createElement(te, null, X$1({ ourProps: Te, theirProps: T, slot: J, defaultTag: He$1, features: Ge, visible: p === 0, name: "Dialog" }))))))))), react_1.default.createElement(oe, null)); }
let Ue = "div";
function We(t, e) { let o = I$3(), { id: i = `headlessui-dialog-overlay-${o}` } = t, n = __rest(t, ["id"]), [{ dialogState: l, close: s }] = b$2("Dialog.Overlay"), g = y$2(e), T = o$3(a => { if (a.target === a.currentTarget) {
    if (r$2(a.currentTarget))
        return a.preventDefault();
    a.preventDefault(), a.stopPropagation(), s();
} }), m = (0, react_1.useMemo)(() => ({ open: l === 0 }), [l]); return X$1({ ourProps: { ref: g, id: i, "aria-hidden": !0, onClick: T }, theirProps: n, slot: m, defaultTag: Ue, name: "Dialog.Overlay" }); }
let Ye = "div";
function $e(t, e) { let o = I$3(), { id: i = `headlessui-dialog-backdrop-${o}` } = t, n = __rest(t, ["id"]), [{ dialogState: l }, s] = b$2("Dialog.Backdrop"), g = y$2(e); (0, react_1.useEffect)(() => { if (s.panelRef.current === null)
    throw new Error("A <Dialog.Backdrop /> component is being used, but a <Dialog.Panel /> component is missing."); }, [s.panelRef]); let T = (0, react_1.useMemo)(() => ({ open: l === 0 }), [l]); return react_1.default.createElement(P, { force: !0 }, react_1.default.createElement(pe, null, X$1({ ourProps: { ref: g, id: i, "aria-hidden": !0 }, theirProps: n, slot: T, defaultTag: Ye, name: "Dialog.Backdrop" }))); }
let Je = "div";
function Xe(t, e) { let o = I$3(), { id: i = `headlessui-dialog-panel-${o}` } = t, n = __rest(t, ["id"]), [{ dialogState: l }, s] = b$2("Dialog.Panel"), g = y$2(e, s.panelRef), T = (0, react_1.useMemo)(() => ({ open: l === 0 }), [l]), m = o$3(a => { a.stopPropagation(); }); return X$1({ ourProps: { ref: g, id: i, onClick: m }, theirProps: n, slot: T, defaultTag: Je, name: "Dialog.Panel" }); }
let je = "h2";
function Ke(t, e) { let o = I$3(), { id: i = `headlessui-dialog-title-${o}` } = t, n = __rest(t, ["id"]), [{ dialogState: l, setTitleId: s }] = b$2("Dialog.Title"), g = y$2(e); (0, react_1.useEffect)(() => (s(i), () => s(null)), [i, s]); let T = (0, react_1.useMemo)(() => ({ open: l === 0 }), [l]); return X$1({ ourProps: { ref: g, id: i }, theirProps: n, slot: T, defaultTag: je, name: "Dialog.Title" }); }
let Ve = D$1(Ne$1), qe = D$1($e), ze = D$1(Xe), Qe = D$1(We), Ze = D$1(Ke), _t = Object.assign(Ve, { Backdrop: qe, Panel: ze, Overlay: Qe, Title: Ze, Description: b$3 });
var t;
let a$1 = (t = react_1.default.startTransition) != null ? t : function (i) { i(); };
var q = (o => (o[o.Open = 0] = "Open", o[o.Closed = 1] = "Closed", o))(q || {}), z = (t => (t[t.ToggleDisclosure = 0] = "ToggleDisclosure", t[t.CloseDisclosure = 1] = "CloseDisclosure", t[t.SetButtonId = 2] = "SetButtonId", t[t.SetPanelId = 3] = "SetPanelId", t[t.LinkPanel = 4] = "LinkPanel", t[t.UnlinkPanel = 5] = "UnlinkPanel", t))(z || {});
let Q = { [0]: e => (Object.assign(Object.assign({}, e), { disclosureState: u$4(e.disclosureState, { [0]: 1, [1]: 0 }) })), [1]: e => e.disclosureState === 1 ? e : Object.assign(Object.assign({}, e), { disclosureState: 1 }), [4](e) { return e.linkedPanel === !0 ? e : Object.assign(Object.assign({}, e), { linkedPanel: !0 }); }, [5](e) { return e.linkedPanel === !1 ? e : Object.assign(Object.assign({}, e), { linkedPanel: !1 }); }, [2](e, n) { return e.buttonId === n.buttonId ? e : Object.assign(Object.assign({}, e), { buttonId: n.buttonId }); }, [3](e, n) { return e.panelId === n.panelId ? e : Object.assign(Object.assign({}, e), { panelId: n.panelId }); } }, k = (0, react_1.createContext)(null);
k.displayName = "DisclosureContext";
function M$2(e) { let n = (0, react_1.useContext)(k); if (n === null) {
    let o = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(o, M$2), o;
} return n; }
let v$1 = (0, react_1.createContext)(null);
v$1.displayName = "DisclosureAPIContext";
function w$3(e) { let n = (0, react_1.useContext)(v$1); if (n === null) {
    let o = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(o, w$3), o;
} return n; }
let H = (0, react_1.createContext)(null);
H.displayName = "DisclosurePanelContext";
function V() { return (0, react_1.useContext)(H); }
function Y(e, n) { return u$4(n.type, Q, e, n); }
let Z = react_1.Fragment;
function ee(e, n) { let { defaultOpen: o = !1 } = e, u = __rest(e, ["defaultOpen"]), T = (0, react_1.useRef)(null), l = y$2(n, T$1(a => { T.current = a; }, e.as === void 0 || e.as === react_1.Fragment)), t = (0, react_1.useRef)(null), f = (0, react_1.useRef)(null), s = (0, react_1.useReducer)(Y, { disclosureState: o ? 0 : 1, linkedPanel: !1, buttonRef: f, panelRef: t, buttonId: null, panelId: null }), [{ disclosureState: i, buttonId: c }, D] = s, d = o$3(a => { D({ type: 1 }); let r = e$1(T); if (!r || !c)
    return; let p = (() => a ? a instanceof HTMLElement ? a : a.current instanceof HTMLElement ? a.current : r.getElementById(c) : r.getElementById(c))(); p == null || p.focus(); }), P = (0, react_1.useMemo)(() => ({ close: d }), [d]), b = (0, react_1.useMemo)(() => ({ open: i === 0, close: d }), [i, d]), y = { ref: l }; return react_1.default.createElement(k.Provider, { value: s }, react_1.default.createElement(v$1.Provider, { value: P }, react_1.default.createElement(c$4, { value: u$4(i, { [0]: d$3.Open, [1]: d$3.Closed }) }, X$1({ ourProps: y, theirProps: u, slot: b, defaultTag: Z, name: "Disclosure" })))); }
let te = "button";
function ne(e, n) { let o = I$3(), { id: u = `headlessui-disclosure-button-${o}` } = e, T = __rest(e, ["id"]), [l, t] = M$2("Disclosure.Button"), f = V(), s = f === null ? !1 : f === l.panelId, i = (0, react_1.useRef)(null), c = y$2(i, n, s ? null : l.buttonRef); (0, react_1.useEffect)(() => { if (!s)
    return t({ type: 2, buttonId: u }), () => { t({ type: 2, buttonId: null }); }; }, [u, t, s]); let D = o$3(r => { var p; if (s) {
    if (l.disclosureState === 1)
        return;
    switch (r.key) {
        case o$1.Space:
        case o$1.Enter:
            r.preventDefault(), r.stopPropagation(), t({ type: 0 }), (p = l.buttonRef.current) == null || p.focus();
            break;
    }
}
else
    switch (r.key) {
        case o$1.Space:
        case o$1.Enter:
            r.preventDefault(), r.stopPropagation(), t({ type: 0 });
            break;
    } }), d = o$3(r => { switch (r.key) {
    case o$1.Space:
        r.preventDefault();
        break;
} }), P = o$3(r => { var p; r$2(r.currentTarget) || e.disabled || (s ? (t({ type: 0 }), (p = l.buttonRef.current) == null || p.focus()) : t({ type: 0 })); }), b = (0, react_1.useMemo)(() => ({ open: l.disclosureState === 0 }), [l]), y = s$4(e, i), a = s ? { ref: c, type: y, onKeyDown: D, onClick: P } : { ref: c, id: u, type: y, "aria-expanded": l.disclosureState === 0, "aria-controls": l.linkedPanel ? l.panelId : void 0, onKeyDown: D, onKeyUp: d, onClick: P }; return X$1({ ourProps: a, theirProps: T, slot: b, defaultTag: te, name: "Disclosure.Button" }); }
let le$1 = "div", oe$1 = S$5.RenderStrategy | S$5.Static;
function re(e, n) { let o = I$3(), { id: u = `headlessui-disclosure-panel-${o}` } = e, T = __rest(e, ["id"]), [l, t] = M$2("Disclosure.Panel"), { close: f } = w$3("Disclosure.Panel"), s = y$2(n, l.panelRef, P => { a$1(() => t({ type: P ? 4 : 5 })); }); (0, react_1.useEffect)(() => (t({ type: 3, panelId: u }), () => { t({ type: 3, panelId: null }); }), [u, t]); let i = C(), c = (() => i !== null ? (i & d$3.Open) === d$3.Open : l.disclosureState === 0)(), D = (0, react_1.useMemo)(() => ({ open: l.disclosureState === 0, close: f }), [l, f]), d = { ref: s, id: u }; return react_1.default.createElement(H.Provider, { value: l.panelId }, X$1({ ourProps: d, theirProps: T, slot: D, defaultTag: le$1, features: oe$1, visible: c, name: "Disclosure.Panel" })); }
let se$1 = D$1(ee), ue = D$1(ne), ie = D$1(re), ve$1 = Object.assign(se$1, { Button: ue, Panel: ie });
let a = /([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g;
function o(e) { var r, i; let n = (r = e.innerText) != null ? r : "", t = e.cloneNode(!0); if (!(t instanceof HTMLElement))
    return n; let u = !1; for (let f of t.querySelectorAll('[hidden],[aria-hidden],[role="img"]'))
    f.remove(), u = !0; let l = u ? (i = t.innerText) != null ? i : "" : n; return a.test(l) && (l = l.replace(a, "")), l; }
function g$1(e) { let n = e.getAttribute("aria-label"); if (typeof n == "string")
    return n.trim(); let t = e.getAttribute("aria-labelledby"); if (t) {
    let u = t.split(" ").map(l => { let r = document.getElementById(l); if (r) {
        let i = r.getAttribute("aria-label");
        return typeof i == "string" ? i.trim() : o(r).trim();
    } return null; }).filter(Boolean);
    if (u.length > 0)
        return u.join(", ");
} return o(e).trim(); }
function b$1(c) { let t = (0, react_1.useRef)(""), r = (0, react_1.useRef)(""); return o$3(() => { let e = c.current; if (!e)
    return ""; let u = e.innerText; if (t.current === u)
    return r.current; let n = g$1(e).trim().toLowerCase(); return t.current = u, r.current = n, n; }); }
var me = (r => (r[r.Open = 0] = "Open", r[r.Closed = 1] = "Closed", r))(me || {}), de = (r => (r[r.Pointer = 0] = "Pointer", r[r.Other = 1] = "Other", r))(de || {}), fe = (a => (a[a.OpenMenu = 0] = "OpenMenu", a[a.CloseMenu = 1] = "CloseMenu", a[a.GoToItem = 2] = "GoToItem", a[a.Search = 3] = "Search", a[a.ClearSearch = 4] = "ClearSearch", a[a.RegisterItem = 5] = "RegisterItem", a[a.UnregisterItem = 6] = "UnregisterItem", a))(fe || {});
function w$2(e, u = r => r) { let r = e.activeItemIndex !== null ? e.items[e.activeItemIndex] : null, i = I$2(u(e.items.slice()), t => t.dataRef.current.domRef.current), s = r ? i.indexOf(r) : null; return s === -1 && (s = null), { items: i, activeItemIndex: s }; }
let Te = { [1](e) { return e.menuState === 1 ? e : Object.assign(Object.assign({}, e), { activeItemIndex: null, menuState: 1 }); }, [0](e) { return e.menuState === 0 ? e : Object.assign(Object.assign({}, e), { __demoMode: !1, menuState: 0 }); }, [2]: (e, u) => { var s; let r = w$2(e), i = x$1(u, { resolveItems: () => r.items, resolveActiveIndex: () => r.activeItemIndex, resolveId: t => t.id, resolveDisabled: t => t.dataRef.current.disabled }); return Object.assign(Object.assign(Object.assign({}, e), r), { searchQuery: "", activeItemIndex: i, activationTrigger: (s = u.trigger) != null ? s : 1 }); }, [3]: (e, u) => { let i = e.searchQuery !== "" ? 0 : 1, s = e.searchQuery + u.value.toLowerCase(), o = (e.activeItemIndex !== null ? e.items.slice(e.activeItemIndex + i).concat(e.items.slice(0, e.activeItemIndex + i)) : e.items).find(l => { var m; return ((m = l.dataRef.current.textValue) == null ? void 0 : m.startsWith(s)) && !l.dataRef.current.disabled; }), a = o ? e.items.indexOf(o) : -1; return a === -1 || a === e.activeItemIndex ? Object.assign(Object.assign({}, e), { searchQuery: s }) : Object.assign(Object.assign({}, e), { searchQuery: s, activeItemIndex: a, activationTrigger: 1 }); }, [4](e) { return e.searchQuery === "" ? e : Object.assign(Object.assign({}, e), { searchQuery: "", searchActiveItemIndex: null }); }, [5]: (e, u) => { let r = w$2(e, i => [...i, { id: u.id, dataRef: u.dataRef }]); return Object.assign(Object.assign({}, e), r); }, [6]: (e, u) => { let r = w$2(e, i => { let s = i.findIndex(t => t.id === u.id); return s !== -1 && i.splice(s, 1), i; }); return Object.assign(Object.assign(Object.assign({}, e), r), { activationTrigger: 1 }); } }, U$1 = (0, react_1.createContext)(null);
U$1.displayName = "MenuContext";
function O(e) { let u = (0, react_1.useContext)(U$1); if (u === null) {
    let r = new Error(`<${e} /> is missing a parent <Menu /> component.`);
    throw Error.captureStackTrace && Error.captureStackTrace(r, O), r;
} return u; }
function ye$1(e, u) { return u$4(u.type, Te, e, u); }
let Ie = react_1.Fragment;
function Me(e, u) { let { __demoMode: r = !1 } = e, i = __rest(e, ["__demoMode"]), s = (0, react_1.useReducer)(ye$1, { __demoMode: r, menuState: r ? 0 : 1, buttonRef: (0, react_1.createRef)(), itemsRef: (0, react_1.createRef)(), items: [], searchQuery: "", activeItemIndex: null, activationTrigger: 1 }), [{ menuState: t, itemsRef: o, buttonRef: a }, l] = s, m = y$2(u); h$4([a, o], (g, R) => { var p; l({ type: 1 }), h$5(R, T$2.Loose) || (g.preventDefault(), (p = a.current) == null || p.focus()); }, t === 0); let I = o$3(() => { l({ type: 1 }); }), A = (0, react_1.useMemo)(() => ({ open: t === 0, close: I }), [t, I]), f = { ref: m }; return react_1.default.createElement(U$1.Provider, { value: s }, react_1.default.createElement(c$4, { value: u$4(t, { [0]: d$3.Open, [1]: d$3.Closed }) }, X$1({ ourProps: f, theirProps: i, slot: A, defaultTag: Ie, name: "Menu" }))); }
let ge = "button";
function Re$1(e, u) { var R; let r = I$3(), { id: i = `headlessui-menu-button-${r}` } = e, s = __rest(e, ["id"]), [t, o] = O("Menu.Button"), a = y$2(t.buttonRef, u), l = p$4(), m = o$3(p => { switch (p.key) {
    case o$1.Space:
    case o$1.Enter:
    case o$1.ArrowDown:
        p.preventDefault(), p.stopPropagation(), o({ type: 0 }), l.nextFrame(() => o({ type: 2, focus: a$8.First }));
        break;
    case o$1.ArrowUp:
        p.preventDefault(), p.stopPropagation(), o({ type: 0 }), l.nextFrame(() => o({ type: 2, focus: a$8.Last }));
        break;
} }), I = o$3(p => { switch (p.key) {
    case o$1.Space:
        p.preventDefault();
        break;
} }), A = o$3(p => { if (r$2(p.currentTarget))
    return p.preventDefault(); e.disabled || (t.menuState === 0 ? (o({ type: 1 }), l.nextFrame(() => { var M; return (M = t.buttonRef.current) == null ? void 0 : M.focus({ preventScroll: !0 }); })) : (p.preventDefault(), o({ type: 0 }))); }), f = (0, react_1.useMemo)(() => ({ open: t.menuState === 0 }), [t]), g = { ref: a, id: i, type: s$4(e, t.buttonRef), "aria-haspopup": "menu", "aria-controls": (R = t.itemsRef.current) == null ? void 0 : R.id, "aria-expanded": t.menuState === 0, onKeyDown: m, onKeyUp: I, onClick: A }; return X$1({ ourProps: g, theirProps: s, slot: f, defaultTag: ge, name: "Menu.Button" }); }
let Ae = "div", be$1 = S$5.RenderStrategy | S$5.Static;
function Ee(e, u) { var M, b; let r = I$3(), { id: i = `headlessui-menu-items-${r}` } = e, s = __rest(e, ["id"]), [t, o] = O("Menu.Items"), a = y$2(t.itemsRef, u), l = n$1(t.itemsRef), m = p$4(), I = C(), A = (() => I !== null ? (I & d$3.Open) === d$3.Open : t.menuState === 0)(); (0, react_1.useEffect)(() => { let n = t.itemsRef.current; n && t.menuState === 0 && n !== (l == null ? void 0 : l.activeElement) && n.focus({ preventScroll: !0 }); }, [t.menuState, t.itemsRef, l]), F$1({ container: t.itemsRef.current, enabled: t.menuState === 0, accept(n) { return n.getAttribute("role") === "menuitem" ? NodeFilter.FILTER_REJECT : n.hasAttribute("role") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT; }, walk(n) { n.setAttribute("role", "none"); } }); let f = o$3(n => { var E, P; switch (m.dispose(), n.key) {
    case o$1.Space: if (t.searchQuery !== "")
        return n.preventDefault(), n.stopPropagation(), o({ type: 3, value: n.key });
    case o$1.Enter:
        if (n.preventDefault(), n.stopPropagation(), o({ type: 1 }), t.activeItemIndex !== null) {
            let { dataRef: S } = t.items[t.activeItemIndex];
            (P = (E = S.current) == null ? void 0 : E.domRef.current) == null || P.click();
        }
        D$2(t.buttonRef.current);
        break;
    case o$1.ArrowDown: return n.preventDefault(), n.stopPropagation(), o({ type: 2, focus: a$8.Next });
    case o$1.ArrowUp: return n.preventDefault(), n.stopPropagation(), o({ type: 2, focus: a$8.Previous });
    case o$1.Home:
    case o$1.PageUp: return n.preventDefault(), n.stopPropagation(), o({ type: 2, focus: a$8.First });
    case o$1.End:
    case o$1.PageDown: return n.preventDefault(), n.stopPropagation(), o({ type: 2, focus: a$8.Last });
    case o$1.Escape:
        n.preventDefault(), n.stopPropagation(), o({ type: 1 }), o$4().nextFrame(() => { var S; return (S = t.buttonRef.current) == null ? void 0 : S.focus({ preventScroll: !0 }); });
        break;
    case o$1.Tab:
        n.preventDefault(), n.stopPropagation(), o({ type: 1 }), o$4().nextFrame(() => { _$2(t.buttonRef.current, n.shiftKey ? M$5.Previous : M$5.Next); });
        break;
    default:
        n.key.length === 1 && (o({ type: 3, value: n.key }), m.setTimeout(() => o({ type: 4 }), 350));
        break;
} }), g = o$3(n => { switch (n.key) {
    case o$1.Space:
        n.preventDefault();
        break;
} }), R = (0, react_1.useMemo)(() => ({ open: t.menuState === 0 }), [t]), p = { "aria-activedescendant": t.activeItemIndex === null || (M = t.items[t.activeItemIndex]) == null ? void 0 : M.id, "aria-labelledby": (b = t.buttonRef.current) == null ? void 0 : b.id, id: i, onKeyDown: f, onKeyUp: g, role: "menu", tabIndex: 0, ref: a }; return X$1({ ourProps: p, theirProps: s, slot: R, defaultTag: Ae, features: be$1, visible: A, name: "Menu.Items" }); }
let Se$1 = react_1.Fragment;
function Pe$1(e, u) { let r = I$3(), { id: i = `headlessui-menu-item-${r}`, disabled: s = !1 } = e, t = __rest(e, ["id", "disabled"]), [o, a] = O("Menu.Item"), l = o.activeItemIndex !== null ? o.items[o.activeItemIndex].id === i : !1, m = (0, react_1.useRef)(null), I = y$2(u, m); l$4(() => { if (o.__demoMode || o.menuState !== 0 || !l || o.activationTrigger === 0)
    return; let T = o$4(); return T.requestAnimationFrame(() => { var v, B; (B = (v = m.current) == null ? void 0 : v.scrollIntoView) == null || B.call(v, { block: "nearest" }); }), T.dispose; }, [o.__demoMode, m, l, o.menuState, o.activationTrigger, o.activeItemIndex]); let A = b$1(m), f = (0, react_1.useRef)({ disabled: s, domRef: m, get textValue() { return A(); } }); l$4(() => { f.current.disabled = s; }, [f, s]), l$4(() => (a({ type: 5, id: i, dataRef: f }), () => a({ type: 6, id: i })), [f, i]); let g = o$3(() => { a({ type: 1 }); }), R = o$3(T => { if (s)
    return T.preventDefault(); a({ type: 1 }), D$2(o.buttonRef.current); }), p = o$3(() => { if (s)
    return a({ type: 2, focus: a$8.Nothing }); a({ type: 2, focus: a$8.Specific, id: i }); }), M = u$2(), b = o$3(T => M.update(T)), n = o$3(T => { M.wasMoved(T) && (s || l || a({ type: 2, focus: a$8.Specific, id: i, trigger: 0 })); }), E = o$3(T => { M.wasMoved(T) && (s || l && a({ type: 2, focus: a$8.Nothing })); }), P = (0, react_1.useMemo)(() => ({ active: l, disabled: s, close: g }), [l, s, g]); return X$1({ ourProps: { id: i, ref: I, role: "menuitem", tabIndex: s === !0 ? void 0 : -1, "aria-disabled": s === !0 ? !0 : void 0, disabled: void 0, onClick: R, onFocus: p, onPointerEnter: b, onMouseEnter: b, onPointerMove: n, onMouseMove: n, onPointerLeave: E, onMouseLeave: E }, theirProps: t, slot: P, defaultTag: Se$1, name: "Menu.Item" }); }
let ve = D$1(Me), xe$1 = D$1(Re$1), he = D$1(Ee), De$1 = D$1(Pe$1), it = Object.assign(ve, { Button: xe$1, Items: he, Item: De$1 });
function c(a = 0) { let [l, r] = (0, react_1.useState)(a), t = f$3(), o = (0, react_1.useCallback)(e => { t.current && r(u => u | e); }, [l, t]), m = (0, react_1.useCallback)(e => Boolean(l & e), [l]), s = (0, react_1.useCallback)(e => { t.current && r(u => u & ~e); }, [r, t]), g = (0, react_1.useCallback)(e => { t.current && r(u => u ^ e); }, [r]); return { flags: l, addFlag: o, hasFlag: m, removeFlag: s, toggleFlag: g }; }
function l(r) { let e = { called: !1 }; return (...t) => { if (!e.called)
    return e.called = !0, r(...t); }; }
function g(t, ...e) { t && e.length > 0 && t.classList.add(...e); }
function v(t, ...e) { t && e.length > 0 && t.classList.remove(...e); }
function b(t, e) { let n = o$4(); if (!t)
    return n.dispose; let { transitionDuration: m, transitionDelay: a } = getComputedStyle(t), [u, p] = [m, a].map(l => { let [r = 0] = l.split(",").filter(Boolean).map(i => i.includes("ms") ? parseFloat(i) : parseFloat(i) * 1e3).sort((i, T) => T - i); return r; }), o = u + p; if (o !== 0) {
    n.group(r => { r.setTimeout(() => { e(), r.dispose(); }, o), r.addEventListener(t, "transitionrun", i => { i.target === i.currentTarget && r.dispose(); }); });
    let l = n.addEventListener(t, "transitionend", r => { r.target === r.currentTarget && (e(), l()); });
}
else
    e(); return n.add(() => e()), n.dispose; }
function M$1(t, e, n, m) { let a = n ? "enter" : "leave", u = o$4(), p = m !== void 0 ? l(m) : () => { }; a === "enter" && (t.removeAttribute("hidden"), t.style.display = ""); let o = u$4(a, { enter: () => e.enter, leave: () => e.leave }), l$1 = u$4(a, { enter: () => e.enterTo, leave: () => e.leaveTo }), r = u$4(a, { enter: () => e.enterFrom, leave: () => e.leaveFrom }); return v(t, ...e.base, ...e.enter, ...e.enterTo, ...e.enterFrom, ...e.leave, ...e.leaveFrom, ...e.leaveTo, ...e.entered), g(t, ...e.base, ...o, ...r), u.nextFrame(() => { v(t, ...e.base, ...o, ...r), g(t, ...e.base, ...o, ...l$1), b(t, () => (v(t, ...e.base, ...o), g(t, ...e.base, ...e.entered), p())); }), u.dispose; }
function E({ immediate: t, container: s, direction: n, classes: u, onStart: a, onStop: c }) { let l = f$3(), d = p$4(), e = s$7(n); l$4(() => { t && (e.current = "enter"); }, [t]), l$4(() => { let r = o$4(); d.add(r.dispose); let i = s.current; if (i && e.current !== "idle" && l.current)
    return r.dispose(), a.current(e.current), r.add(M$1(i, u.current, e.current === "enter", () => { r.dispose(), c.current(e.current); })), r.dispose; }, [n]); }
function S(t = "") { return t.split(" ").filter(n => n.trim().length > 1); }
let _$1 = (0, react_1.createContext)(null);
_$1.displayName = "TransitionContext";
var be = (r => (r.Visible = "visible", r.Hidden = "hidden", r))(be || {});
function Se() { let t = (0, react_1.useContext)(_$1); if (t === null)
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />."); return t; }
function Ne() { let t = (0, react_1.useContext)(M); if (t === null)
    throw new Error("A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />."); return t; }
let M = (0, react_1.createContext)(null);
M.displayName = "NestingContext";
function U(t) { return "children" in t ? U(t.children) : t.current.filter(({ el: n }) => n.current !== null).filter(({ state: n }) => n === "visible").length > 0; }
function oe(t, n) { let r = s$7(t), s = (0, react_1.useRef)([]), y = f$3(), D = p$4(), c = o$3((i, e = j$3.Hidden) => { let a = s.current.findIndex(({ el: o }) => o === i); a !== -1 && (u$4(e, { [j$3.Unmount]() { s.current.splice(a, 1); }, [j$3.Hidden]() { s.current[a].state = "hidden"; } }), D.microTask(() => { var o; !U(s) && y.current && ((o = r.current) == null || o.call(r)); })); }), x = o$3(i => { let e = s.current.find(({ el: a }) => a === i); return e ? e.state !== "visible" && (e.state = "visible") : s.current.push({ el: i, state: "visible" }), () => c(i, j$3.Unmount); }), p = (0, react_1.useRef)([]), h = (0, react_1.useRef)(Promise.resolve()), u = (0, react_1.useRef)({ enter: [], leave: [], idle: [] }), v = o$3((i, e, a) => { p.current.splice(0), n && (n.chains.current[e] = n.chains.current[e].filter(([o]) => o !== i)), n == null || n.chains.current[e].push([i, new Promise(o => { p.current.push(o); })]), n == null || n.chains.current[e].push([i, new Promise(o => { Promise.all(u.current[e].map(([f, P]) => P)).then(() => o()); })]), e === "enter" ? h.current = h.current.then(() => n == null ? void 0 : n.wait.current).then(() => a(e)) : a(e); }), d = o$3((i, e, a) => { Promise.all(u.current[e].splice(0).map(([o, f]) => f)).then(() => { var o; (o = p.current.shift()) == null || o(); }).then(() => a(e)); }); return (0, react_1.useMemo)(() => ({ children: s, register: x, unregister: c, onStart: v, onStop: d, wait: h, chains: u }), [x, c, s, v, d, u, h]); }
function xe() { }
let Pe = ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave"];
function se(t) { var r; let n = {}; for (let s of Pe)
    n[s] = (r = t[s]) != null ? r : xe; return n; }
function Re(t) { let n = (0, react_1.useRef)(se(t)); return (0, react_1.useEffect)(() => { n.current = se(t); }, [t]), n; }
let ye = "div", ae = S$5.RenderStrategy;
function De(t, n) { var K, Q; let { beforeEnter: r, afterEnter: s, beforeLeave: y, afterLeave: D, enter: c$1, enterFrom: x, enterTo: p, entered: h, leave: u, leaveFrom: v, leaveTo: d } = t, i = __rest(t, ["beforeEnter", "afterEnter", "beforeLeave", "afterLeave", "enter", "enterFrom", "enterTo", "entered", "leave", "leaveFrom", "leaveTo"]), e = (0, react_1.useRef)(null), a = y$2(e, n), o = (K = i.unmount) == null || K ? j$3.Unmount : j$3.Hidden, { show: f, appear: P, initial: T } = Se(), [l, j] = (0, react_1.useState)(f ? "visible" : "hidden"), q = Ne(), { register: O, unregister: V } = q; (0, react_1.useEffect)(() => O(e), [O, e]), (0, react_1.useEffect)(() => { if (o === j$3.Hidden && e.current) {
    if (f && l !== "visible") {
        j("visible");
        return;
    }
    return u$4(l, { ["hidden"]: () => V(e), ["visible"]: () => O(e) });
} }, [l, e, O, V, f, o]); let k = s$7({ base: S(i.className), enter: S(c$1), enterFrom: S(x), enterTo: S(p), entered: S(h), leave: S(u), leaveFrom: S(v), leaveTo: S(d) }), w = Re({ beforeEnter: r, afterEnter: s, beforeLeave: y, afterLeave: D }), G = l$3(); (0, react_1.useEffect)(() => { if (G && l === "visible" && e.current === null)
    throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?"); }, [e, l, G]); let ue = T && !P, z = P && f && T, Te = (() => !G || ue ? "idle" : f ? "enter" : "leave")(), H = c(0), de = o$3(g => u$4(g, { enter: () => { H.addFlag(d$3.Opening), w.current.beforeEnter(); }, leave: () => { H.addFlag(d$3.Closing), w.current.beforeLeave(); }, idle: () => { } })), fe = o$3(g => u$4(g, { enter: () => { H.removeFlag(d$3.Opening), w.current.afterEnter(); }, leave: () => { H.removeFlag(d$3.Closing), w.current.afterLeave(); }, idle: () => { } })), A = oe(() => { j("hidden"), V(e); }, q); E({ immediate: z, container: e, classes: k, direction: Te, onStart: s$7(g => { A.onStart(e, g, de); }), onStop: s$7(g => { A.onStop(e, g, fe), g === "leave" && !U(A) && (j("hidden"), V(e)); }) }); let R = i, me = { ref: a }; return z ? R = Object.assign(Object.assign({}, R), { className: t$6(i.className, ...k.current.enter, ...k.current.enterFrom) }) : (R.className = t$6(i.className, (Q = e.current) == null ? void 0 : Q.className), R.className === "" && delete R.className), react_1.default.createElement(M.Provider, { value: A }, react_1.default.createElement(c$4, { value: u$4(l, { ["visible"]: d$3.Open, ["hidden"]: d$3.Closed }) | H.flags }, X$1({ ourProps: me, theirProps: R, defaultTag: ye, features: ae, visible: l === "visible", name: "Transition.Child" }))); }
function He(t, n) { let { show: r, appear: s = !1, unmount: y = !0 } = t, D = __rest(t, ["show", "appear", "unmount"]), c = (0, react_1.useRef)(null), x = y$2(c, n); l$3(); let p = C(); if (r === void 0 && p !== null && (r = (p & d$3.Open) === d$3.Open), ![!0, !1].includes(r))
    throw new Error("A <Transition /> is used but it is missing a `show={true | false}` prop."); let [h, u] = (0, react_1.useState)(r ? "visible" : "hidden"), v = oe(() => { u("hidden"); }), [d, i] = (0, react_1.useState)(!0), e = (0, react_1.useRef)([r]); l$4(() => { d !== !1 && e.current[e.current.length - 1] !== r && (e.current.push(r), i(!1)); }, [e, r]); let a = (0, react_1.useMemo)(() => ({ show: r, appear: s, initial: d }), [r, s, d]); (0, react_1.useEffect)(() => { if (r)
    u("visible");
else if (!U(v))
    u("hidden");
else {
    let T = c.current;
    if (!T)
        return;
    let l = T.getBoundingClientRect();
    l.x === 0 && l.y === 0 && l.width === 0 && l.height === 0 && u("hidden");
} }, [r, v]); let o = { unmount: y }, f = o$3(() => { var T; d && i(!1), (T = t.beforeEnter) == null || T.call(t); }), P = o$3(() => { var T; d && i(!1), (T = t.beforeLeave) == null || T.call(t); }); return react_1.default.createElement(M.Provider, { value: v }, react_1.default.createElement(_$1.Provider, { value: a }, X$1({ ourProps: Object.assign(Object.assign({}, o), { as: react_1.Fragment, children: react_1.default.createElement(le, Object.assign(Object.assign(Object.assign({ ref: x }, o), D), { beforeEnter: f, beforeLeave: P })) }), theirProps: {}, defaultTag: react_1.Fragment, features: ae, visible: h === "visible", name: "Transition" }))); }
function Fe(t, n) { let r = (0, react_1.useContext)(_$1) !== null, s = C() !== null; return react_1.default.createElement(react_1.default.Fragment, null, !r && s ? react_1.default.createElement(W, Object.assign({ ref: n }, t)) : react_1.default.createElement(le, Object.assign({ ref: n }, t))); }
let W = D$1(He), le = D$1(De), Le = D$1(Fe), tt$1 = Object.assign(W, { Child: Le, Root: W });
var IbbNavbar = function (props) {
    return (react_1.default.createElement(ve$1, { as: "nav", className: "bg-gray-50 border-b border-gray-200", style: props.backgroundColor && { backgroundColor: props.backgroundColor } }, react_1.default.createElement(TwContainer$1, null, props.logo && react_1.default.createElement(TwLogoContainer, null, props.logo), props.title && (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwDivider, null), react_1.default.createElement(TwTitle, null, props.title))), react_1.default.createElement(TwMenuItemsContainer, null, props.items && (react_1.default.createElement(TwItemContainer, null, props.items.map(function (item, i) {
        return react_1.default.createElement(TwItem, { key: i }, item);
    }))), props.burgerMenu && (react_1.default.createElement(it, null, function (_a) {
        var open = _a.open;
        return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement("div", null, react_1.default.createElement(it.Button, null, open ? (react_1.default.createElement(XIcon$1, { className: "block h-6 w-6", "aria-hidden": "true" })) : (react_1.default.createElement(MenuIcon$1, { className: "block h-6 w-6", "aria-hidden": "true" })))), react_1.default.createElement(tt$1, { as: react_1.Fragment, enter: "transition ease-out duration-100", enterFrom: "transform opacity-0 scale-95", enterTo: "transform opacity-100 scale-100", leave: "transition ease-in duration-75", leaveFrom: "transform opacity-100 scale-100", leaveTo: "transform opacity-0 scale-95" }, react_1.default.createElement(it.Items, null, props.burgerMenu.map(function (item, i) {
            return (react_1.default.createElement(it.Item, null, function (_a) {
                var active = _a.active;
                return (react_1.default.createElement("a", { key: i, href: item.link, className: classNames$1(active ? "bg-gray-100" : "", "block px-4 py-2 text-gray-700") }, item.text));
            }));
        })))));
    }))))));
};
exports.IbbNavbar = IbbNavbar;
var TwLogoContainer = F$3.div(templateObject_1$e || (templateObject_1$e = __makeTemplateObject(["h-full py-1 px-6 w-64"], ["h-full py-1 px-6 w-64"])));
var TwTitle = F$3.h3(templateObject_2$a || (templateObject_2$a = __makeTemplateObject(["px-4 text-gray-800 uppercase text-bold tracking-wide font-semibold h-5/6 flex items-center"], ["px-4 text-gray-800 uppercase text-bold tracking-wide font-semibold h-5/6 flex items-center"])));
var TwDivider = F$3.div(templateObject_3$8 || (templateObject_3$8 = __makeTemplateObject(["border-solid border-l border-gray-200 h-10"], ["border-solid border-l border-gray-200 h-10"])));
var TwContainer$1 = F$3.div(templateObject_4$5 || (templateObject_4$5 = __makeTemplateObject(["relative flex items-center h-16"], ["relative flex items-center h-16"])));
var TwMenuItemsContainer = F$3.div(templateObject_5$4 || (templateObject_5$4 = __makeTemplateObject(["absolute inset-y-0 right-0 flex items-center pr-2 sm:ml-6 sm:pr-0\""], ["absolute inset-y-0 right-0 flex items-center pr-2 sm:ml-6 sm:pr-0\""])));
var TwItemContainer = F$3.span(templateObject_6$2 || (templateObject_6$2 = __makeTemplateObject(["flex space-x-2"], ["flex space-x-2"])));
var TwItem = F$3.span(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject(["inline-flex items-center font-medium leading-5 text-primary-100"], ["inline-flex items-center font-medium leading-5 text-primary-100"])));
F$3.div(templateObject_8$1 || (templateObject_8$1 = __makeTemplateObject(["ml-3 relative\""], ["ml-3 relative\""])));
F$3.div(templateObject_9$1 || (templateObject_9$1 = __makeTemplateObject(["origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"], ["origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"])));
F$3.button(templateObject_10$1 || (templateObject_10$1 = __makeTemplateObject(["bg-gray-100 flex rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"], ["bg-gray-100 flex rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"])));
var templateObject_1$e, templateObject_2$a, templateObject_3$8, templateObject_4$5, templateObject_5$4, templateObject_6$2, templateObject_7$1, templateObject_8$1, templateObject_9$1, templateObject_10$1;
var IbbTableDefaultRow = function (props) {
    var rowData = props.rowData;
    return (react_1.default.createElement("tr", null, Object.keys(rowData).map(function (key, i) {
        return react_1.default.createElement(TwTableData, { key: i }, rowData[key]);
    })));
};
var TwTableData = F$3.td(templateObject_1$d || (templateObject_1$d = __makeTemplateObject(["p-2"], ["p-2"])));
var templateObject_1$d;
var IbbTable = function (props) {
    return (react_1.default.createElement(TwTable$2, null, props.header && props.header.length > 0 && (react_1.default.createElement(TwTableHeader$2, null, react_1.default.createElement("tr", null, props.header.map(function (item, i) { return (react_1.default.createElement(TwTableHead$1, { key: i, style: { width: "".concat(100 / props.header.length, "%") } }, item)); })))), react_1.default.createElement(TwTableBody$2, null, props.data.map(function (rowData, i) {
        return props.itemComponent ? props.itemComponent(rowData) : react_1.default.createElement(IbbTableDefaultRow, { key: i, rowData: rowData });
    }), props.showColumnSums && react_1.default.createElement("div", null, "column sums"))));
};
exports.IbbTable = IbbTable;
var TwTable$2 = F$3.table(templateObject_1$c || (templateObject_1$c = __makeTemplateObject(["min-w-full divide-y divide-gray-200"], ["min-w-full divide-y divide-gray-200"])));
var TwTableHeader$2 = F$3.thead(templateObject_2$9 || (templateObject_2$9 = __makeTemplateObject(["bg-gray-50"], ["bg-gray-50"])));
var TwTableHead$1 = F$3.th(templateObject_3$7 || (templateObject_3$7 = __makeTemplateObject(["text-left text-sm text-gray-900 font-semibold tracking-wider align-top p-2"], ["text-left text-sm text-gray-900 font-semibold tracking-wider align-top p-2"])));
var TwTableBody$2 = F$3.tbody(templateObject_4$4 || (templateObject_4$4 = __makeTemplateObject(["bg-white divide-y divide-gray-200"], ["bg-white divide-y divide-gray-200"])));
F$3.tr(templateObject_5$3 || (templateObject_5$3 = __makeTemplateObject([""], [""])));
var templateObject_1$c, templateObject_2$9, templateObject_3$7, templateObject_4$4, templateObject_5$3;
var reactTable = { exports: {} };
var reactTable_production_min = { exports: {} };
(function (module, exports) {
    !function (e, t) { t(exports, react_1.default); }(commonjsGlobal, (function (e, t) { function n(e, t, n, o, r, i, u) { try {
        var l = e[i](u), s = l.value;
    }
    catch (e) {
        return void n(e);
    } l.done ? t(s) : Promise.resolve(s).then(o, r); } function o(e) { return function () { var t = this, o = arguments; return new Promise((function (r, i) { var u = e.apply(t, o); function l(e) { n(u, r, i, l, s, "next", e); } function s(e) { n(u, r, i, l, s, "throw", e); } l(void 0); })); }; } function r() { return (r = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var o in n)
            Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);
    } return e; }).apply(this, arguments); } function i(e, t) { if (null == e)
        return {}; var n, o, r = {}, i = Object.keys(e); for (o = 0; o < i.length; o++)
        n = i[o], t.indexOf(n) >= 0 || (r[n] = e[n]); return r; } function u(e) { var t = function (e, t) { if ("object" != typeof e || null === e)
        return e; var n = e[Symbol.toPrimitive]; if (void 0 !== n) {
        var o = n.call(e, t || "default");
        if ("object" != typeof o)
            return o;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    } return ("string" === t ? String : Number)(e); }(e, "string"); return "symbol" == typeof t ? t : String(t); } t = t && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t; var l = { init: "init" }, s = function (e) { var t = e.value; return void 0 === t ? "" : t; }, a = function () { return t.createElement(t.Fragment, null, " "); }, c = { Cell: s, width: 150, minWidth: 0, maxWidth: Number.MAX_SAFE_INTEGER }; function d() { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
        t[n] = arguments[n]; return t.reduce((function (e, t) { var n = t.style, o = t.className; return e = r({}, e, {}, i(t, ["style", "className"])), n && (e.style = e.style ? r({}, e.style || {}, {}, n || {}) : n), o && (e.className = e.className ? e.className + " " + o : o), "" === e.className && delete e.className, e; }), {}); } var f = function (e, t) { return void 0 === t && (t = {}), function (n) { return void 0 === n && (n = {}), [].concat(e, [n]).reduce((function (e, o) { return function e(t, n, o) { return "function" == typeof n ? e({}, n(t, o)) : Array.isArray(n) ? d.apply(void 0, [t].concat(n)) : d(t, n); }(e, o, r({}, t, { userProps: n })); }), {}); }; }, p = function (e, t, n, o) { return void 0 === n && (n = {}), e.reduce((function (e, t) { return t(e, n); }), t); }, g = function (e, t, n) { return void 0 === n && (n = {}), e.forEach((function (e) { e(t, n); })); }; function v(e, t, n, o) { e.findIndex((function (e) { return e.pluginName === n; })); t.forEach((function (t) { e.findIndex((function (e) { return e.pluginName === t; })); })); } function m(e, t) { return "function" == typeof e ? e(t) : e; } function h(e) { var n = t.useRef(); return n.current = e, t.useCallback((function () { return n.current; }), []); } var y = "undefined" != typeof document ? t.useLayoutEffect : t.useEffect; function w(e, n) { var o = t.useRef(!1); y((function () { o.current && e(), o.current = !0; }), n); } function R(e, t, n) { return void 0 === n && (n = {}), function (o, i) { void 0 === i && (i = {}); var u = "string" == typeof o ? t[o] : o; if (void 0 === u)
        throw console.info(t), new Error("Renderer Error ☝️"); return b(u, r({}, e, { column: t }, n, {}, i)); }; } function b(e, n) { return function (e) { return "function" == typeof e && ((t = Object.getPrototypeOf(e)).prototype && t.prototype.isReactComponent); var t; }(o = e) || "function" == typeof o || function (e) { return "object" == typeof e && "symbol" == typeof e.$$typeof && ["react.memo", "react.forward_ref"].includes(e.$$typeof.description); }(o) ? t.createElement(e, n) : e; var o; } function S(e, t, n) { return void 0 === n && (n = 0), e.map((function (e) { return x(e = r({}, e, { parent: t, depth: n })), e.columns && (e.columns = S(e.columns, e, n + 1)), e; })); } function C(e) { return G(e, "columns"); } function x(e) { var t = e.id, n = e.accessor, o = e.Header; if ("string" == typeof n) {
        t = t || n;
        var r = n.split(".");
        n = function (e) { return function (e, t, n) { if (!t)
            return e; var o, r = "function" == typeof t ? t : JSON.stringify(t), i = E.get(r) || function () { var e = function (e) { return function e(t, n) { void 0 === n && (n = []); if (Array.isArray(t))
            for (var o = 0; o < t.length; o += 1)
                e(t[o], n);
        else
            n.push(t); return n; }(e).map((function (e) { return String(e).replace(".", "_"); })).join(".").replace(T, ".").replace(O, "").split("."); }(t); return E.set(r, e), e; }(); try {
            o = i.reduce((function (e, t) { return e[t]; }), e);
        }
        catch (e) { } return void 0 !== o ? o : n; }(e, r); };
    } if (!t && "string" == typeof o && o && (t = o), !t && e.columns)
        throw console.error(e), new Error('A column ID (or unique "Header" value) is required!'); if (!t)
        throw console.error(e), new Error("A column ID (or string accessor) is required!"); return Object.assign(e, { id: t, accessor: n }), e; } function P(e, t) { if (!t)
        throw new Error; return Object.assign(e, r({ Header: a, Footer: a }, c, {}, t, {}, e)), Object.assign(e, { originalWidth: e.width }), e; } function B(e, t, n) { void 0 === n && (n = function () { return {}; }); for (var o = [], i = e, u = 0, l = function () { return u++; }, s = function () { var e = { headers: [] }, u = [], s = i.some((function (e) { return e.parent; })); i.forEach((function (o) { var i, a = [].concat(u).reverse()[0]; if (s) {
        if (o.parent)
            i = r({}, o.parent, { originalId: o.parent.id, id: o.parent.id + "_" + l(), headers: [o] }, n(o));
        else
            i = P(r({ originalId: o.id + "_placeholder", id: o.id + "_placeholder_" + l(), placeholderOf: o, headers: [o] }, n(o)), t);
        a && a.originalId === i.originalId ? a.headers.push(o) : u.push(i);
    } e.headers.push(o); })), o.push(e), i = u; }; i.length;)
        s(); return o.reverse(); } var E = new Map; function I() { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
        t[n] = arguments[n]; for (var o = 0; o < t.length; o += 1)
        if (void 0 !== t[o])
            return t[o]; } function F(e) { if ("function" == typeof e)
        return e; } function G(e, t) { var n = []; return function e(o) { o.forEach((function (o) { o[t] ? e(o[t]) : n.push(o); })); }(e), n; } function A(e, t) { var n = t.manualExpandedKey, o = t.expanded, r = t.expandSubRows, i = void 0 === r || r, u = []; return e.forEach((function (e) { return function e(t, r) { void 0 === r && (r = !0), t.isExpanded = t.original && t.original[n] || o[t.id], t.canExpand = t.subRows && !!t.subRows.length, r && u.push(t), t.subRows && t.subRows.length && t.isExpanded && t.subRows.forEach((function (t) { return e(t, i); })); }(e); })), u; } function k(e, t, n) { return F(e) || t[e] || n[e] || n.text; } function H(e, t, n) { return e ? e(t, n) : void 0 === t; } function W() { throw new Error("React-Table: You have not called prepareRow(row) one or more rows you are attempting to render."); } var z = null; var T = /\[/g, O = /\]/g; var M = function (e) { return r({ role: "table" }, e); }, j = function (e) { return r({ role: "rowgroup" }, e); }, L = function (e, t) { var n = t.column; return r({ key: "header_" + n.id, colSpan: n.totalVisibleHeaderCount, role: "columnheader" }, e); }, N = function (e, t) { var n = t.column; return r({ key: "footer_" + n.id, colSpan: n.totalVisibleHeaderCount }, e); }, D = function (e, t) { return r({ key: "headerGroup_" + t.index, role: "row" }, e); }, V = function (e, t) { return r({ key: "footerGroup_" + t.index }, e); }, _ = function (e, t) { return r({ key: "row_" + t.row.id, role: "row" }, e); }, X = function (e, t) { var n = t.cell; return r({ key: "cell_" + n.row.id + "_" + n.column.id, role: "cell" }, e); }; function q() { return { useOptions: [], stateReducers: [], useControlledState: [], columns: [], columnsDeps: [], allColumns: [], allColumnsDeps: [], accessValue: [], materializedColumns: [], materializedColumnsDeps: [], useInstanceAfterData: [], visibleColumns: [], visibleColumnsDeps: [], headerGroups: [], headerGroupsDeps: [], useInstanceBeforeDimensions: [], useInstance: [], prepareRow: [], getTableProps: [M], getTableBodyProps: [j], getHeaderGroupProps: [D], getFooterGroupProps: [V], getHeaderProps: [L], getFooterProps: [N], getRowProps: [_], getCellProps: [X], useFinalInstance: [] }; } l.resetHiddenColumns = "resetHiddenColumns", l.toggleHideColumn = "toggleHideColumn", l.setHiddenColumns = "setHiddenColumns", l.toggleHideAllColumns = "toggleHideAllColumns"; var K = function (e) { e.getToggleHiddenProps = [U], e.getToggleHideAllColumnsProps = [$], e.stateReducers.push(J), e.useInstanceBeforeDimensions.push(Y), e.headerGroupsDeps.push((function (e, t) { var n = t.instance; return [].concat(e, [n.state.hiddenColumns]); })), e.useInstance.push(Q); }; K.pluginName = "useColumnVisibility"; var U = function (e, t) { var n = t.column; return [e, { onChange: function (e) { n.toggleHidden(!e.target.checked); }, style: { cursor: "pointer" }, checked: n.isVisible, title: "Toggle Column Visible" }]; }, $ = function (e, t) { var n = t.instance; return [e, { onChange: function (e) { n.toggleHideAllColumns(!e.target.checked); }, style: { cursor: "pointer" }, checked: !n.allColumnsHidden && !n.state.hiddenColumns.length, title: "Toggle All Columns Hidden", indeterminate: !n.allColumnsHidden && n.state.hiddenColumns.length }]; }; function J(e, t, n, o) { if (t.type === l.init)
        return r({ hiddenColumns: [] }, e); if (t.type === l.resetHiddenColumns)
        return r({}, e, { hiddenColumns: o.initialState.hiddenColumns || [] }); if (t.type === l.toggleHideColumn) {
        var i = (void 0 !== t.value ? t.value : !e.hiddenColumns.includes(t.columnId)) ? [].concat(e.hiddenColumns, [t.columnId]) : e.hiddenColumns.filter((function (e) { return e !== t.columnId; }));
        return r({}, e, { hiddenColumns: i });
    } return t.type === l.setHiddenColumns ? r({}, e, { hiddenColumns: m(t.value, e.hiddenColumns) }) : t.type === l.toggleHideAllColumns ? r({}, e, { hiddenColumns: (void 0 !== t.value ? t.value : !e.hiddenColumns.length) ? o.allColumns.map((function (e) { return e.id; })) : [] }) : void 0; } function Y(e) { var n = e.headers, o = e.state.hiddenColumns; t.useRef(!1).current; var r = 0; n.forEach((function (e) { return r += function e(t, n) { t.isVisible = n && !o.includes(t.id); var r = 0; return t.headers && t.headers.length ? t.headers.forEach((function (n) { return r += e(n, t.isVisible); })) : r = t.isVisible ? 1 : 0, t.totalVisibleHeaderCount = r, r; }(e, !0); })); } function Q(e) { var n = e.columns, o = e.flatHeaders, r = e.dispatch, i = e.allColumns, u = e.getHooks, s = e.state.hiddenColumns, a = e.autoResetHiddenColumns, c = void 0 === a || a, d = h(e), p = i.length === s.length, g = t.useCallback((function (e, t) { return r({ type: l.toggleHideColumn, columnId: e, value: t }); }), [r]), v = t.useCallback((function (e) { return r({ type: l.setHiddenColumns, value: e }); }), [r]), m = t.useCallback((function (e) { return r({ type: l.toggleHideAllColumns, value: e }); }), [r]), y = f(u().getToggleHideAllColumnsProps, { instance: d() }); o.forEach((function (e) { e.toggleHidden = function (t) { r({ type: l.toggleHideColumn, columnId: e.id, value: t }); }, e.getToggleHiddenProps = f(u().getToggleHiddenProps, { instance: d(), column: e }); })); var R = h(c); w((function () { R() && r({ type: l.resetHiddenColumns }); }), [r, n]), Object.assign(e, { allColumnsHidden: p, toggleHideColumn: g, setHiddenColumns: v, toggleHideAllColumns: m, getToggleHideAllColumnsProps: y }); } var Z = {}, ee = {}, te = function (e, t, n) { return e; }, ne = function (e, t) { return e.subRows || []; }, oe = function (e, t, n) { return "" + (n ? [n.id, t].join(".") : t); }, re = function (e) { return e; }; function ie(e) { var t = e.initialState, n = void 0 === t ? Z : t, o = e.defaultColumn, u = void 0 === o ? ee : o, l = e.getSubRows, s = void 0 === l ? ne : l, a = e.getRowId, c = void 0 === a ? oe : a, d = e.stateReducer, f = void 0 === d ? te : d, p = e.useControlledState, g = void 0 === p ? re : p; return r({}, i(e, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]), { initialState: n, defaultColumn: u, getSubRows: s, getRowId: c, stateReducer: f, useControlledState: g }); } function ue(e, t) { void 0 === t && (t = 0); var n = 0, o = 0, r = 0, i = 0; return e.forEach((function (e) { var u = e.headers; if (e.totalLeft = t, u && u.length) {
        var l = ue(u, t), s = l[0], a = l[1], c = l[2], d = l[3];
        e.totalMinWidth = s, e.totalWidth = a, e.totalMaxWidth = c, e.totalFlexWidth = d;
    }
    else
        e.totalMinWidth = e.minWidth, e.totalWidth = Math.min(Math.max(e.minWidth, e.width), e.maxWidth), e.totalMaxWidth = e.maxWidth, e.totalFlexWidth = e.canResize ? e.totalWidth : 0; e.isVisible && (t += e.totalWidth, n += e.totalMinWidth, o += e.totalWidth, r += e.totalMaxWidth, i += e.totalFlexWidth); })), [n, o, r, i]; } function le(e) { var t = e.data, n = e.rows, o = e.flatRows, r = e.rowsById, i = e.column, u = e.getRowId, l = e.getSubRows, s = e.accessValueHooks, a = e.getInstance; t.forEach((function (e, c) { return function e(n, c, d, f, g) { void 0 === d && (d = 0); var v = n, m = u(n, c, f), h = r[m]; if (h)
        h.subRows && h.originalSubRows.forEach((function (t, n) { return e(t, n, d + 1, h); }));
    else if ((h = { id: m, original: v, index: c, depth: d, cells: [{}] }).cells.map = W, h.cells.filter = W, h.cells.forEach = W, h.cells[0].getCellProps = W, h.values = {}, g.push(h), o.push(h), r[m] = h, h.originalSubRows = l(n, c), h.originalSubRows) {
        var y = [];
        h.originalSubRows.forEach((function (t, n) { return e(t, n, d + 1, h, y); })), h.subRows = y;
    } i.accessor && (h.values[i.id] = i.accessor(n, c, h, g, t)), h.values[i.id] = p(s, h.values[i.id], { row: h, column: i, instance: a() }); }(e, c, 0, void 0, n); })); } l.resetExpanded = "resetExpanded", l.toggleRowExpanded = "toggleRowExpanded", l.toggleAllRowsExpanded = "toggleAllRowsExpanded"; var se = function (e) { e.getToggleAllRowsExpandedProps = [ae], e.getToggleRowExpandedProps = [ce], e.stateReducers.push(de), e.useInstance.push(fe), e.prepareRow.push(pe); }; se.pluginName = "useExpanded"; var ae = function (e, t) { var n = t.instance; return [e, { onClick: function (e) { n.toggleAllRowsExpanded(); }, style: { cursor: "pointer" }, title: "Toggle All Rows Expanded" }]; }, ce = function (e, t) { var n = t.row; return [e, { onClick: function () { n.toggleRowExpanded(); }, style: { cursor: "pointer" }, title: "Toggle Row Expanded" }]; }; function de(e, t, n, o) { if (t.type === l.init)
        return r({ expanded: {} }, e); if (t.type === l.resetExpanded)
        return r({}, e, { expanded: o.initialState.expanded || {} }); if (t.type === l.toggleAllRowsExpanded) {
        var s = t.value, a = o.rowsById, c = Object.keys(a).length === Object.keys(e.expanded).length;
        if (void 0 !== s ? s : !c) {
            var d = {};
            return Object.keys(a).forEach((function (e) { d[e] = !0; })), r({}, e, { expanded: d });
        }
        return r({}, e, { expanded: {} });
    } if (t.type === l.toggleRowExpanded) {
        var f, p = t.id, g = t.value, v = e.expanded[p], m = void 0 !== g ? g : !v;
        if (!v && m)
            return r({}, e, { expanded: r({}, e.expanded, (f = {}, f[p] = !0, f)) });
        if (v && !m) {
            var h = e.expanded;
            h[p];
            return r({}, e, { expanded: i(h, [p].map(u)) });
        }
        return e;
    } } function fe(e) { var n = e.data, o = e.rows, r = e.rowsById, i = e.manualExpandedKey, u = void 0 === i ? "expanded" : i, s = e.paginateExpandedRows, a = void 0 === s || s, c = e.expandSubRows, d = void 0 === c || c, p = e.autoResetExpanded, g = void 0 === p || p, m = e.getHooks, y = e.plugins, R = e.state.expanded, b = e.dispatch; v(y, ["useSortBy", "useGroupBy", "usePivotColumns", "useGlobalFilter"], "useExpanded"); var S = h(g), C = Boolean(Object.keys(r).length && Object.keys(R).length); C && Object.keys(r).some((function (e) { return !R[e]; })) && (C = !1), w((function () { S() && b({ type: l.resetExpanded }); }), [b, n]); var x = t.useCallback((function (e, t) { b({ type: l.toggleRowExpanded, id: e, value: t }); }), [b]), P = t.useCallback((function (e) { return b({ type: l.toggleAllRowsExpanded, value: e }); }), [b]), B = t.useMemo((function () { return a ? A(o, { manualExpandedKey: u, expanded: R, expandSubRows: d }) : o; }), [a, o, u, R, d]), E = t.useMemo((function () { return function (e) { var t = 0; return Object.keys(e).forEach((function (e) { var n = e.split("."); t = Math.max(t, n.length); })), t; }(R); }), [R]), I = h(e), F = f(m().getToggleAllRowsExpandedProps, { instance: I() }); Object.assign(e, { preExpandedRows: o, expandedRows: B, rows: B, expandedDepth: E, isAllRowsExpanded: C, toggleRowExpanded: x, toggleAllRowsExpanded: P, getToggleAllRowsExpandedProps: F }); } function pe(e, t) { var n = t.instance.getHooks, o = t.instance; e.toggleRowExpanded = function (t) { return o.toggleRowExpanded(e.id, t); }, e.getToggleRowExpandedProps = f(n().getToggleRowExpandedProps, { instance: o, row: e }); } var ge = function (e, t, n) { return e = e.filter((function (e) { return t.some((function (t) { var o = e.values[t]; return String(o).toLowerCase().includes(String(n).toLowerCase()); })); })); }; ge.autoRemove = function (e) { return !e; }; var ve = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { var o = e.values[t]; return void 0 === o || String(o).toLowerCase() === String(n).toLowerCase(); })); })); }; ve.autoRemove = function (e) { return !e; }; var me = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { var o = e.values[t]; return void 0 === o || String(o) === String(n); })); })); }; me.autoRemove = function (e) { return !e; }; var he = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { return e.values[t].includes(n); })); })); }; he.autoRemove = function (e) { return !e || !e.length; }; var ye = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { var o = e.values[t]; return o && o.length && n.every((function (e) { return o.includes(e); })); })); })); }; ye.autoRemove = function (e) { return !e || !e.length; }; var we = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { var o = e.values[t]; return o && o.length && n.some((function (e) { return o.includes(e); })); })); })); }; we.autoRemove = function (e) { return !e || !e.length; }; var Re = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { var o = e.values[t]; return n.includes(o); })); })); }; Re.autoRemove = function (e) { return !e || !e.length; }; var be = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { return e.values[t] === n; })); })); }; be.autoRemove = function (e) { return void 0 === e; }; var Se = function (e, t, n) { return e.filter((function (e) { return t.some((function (t) { return e.values[t] == n; })); })); }; Se.autoRemove = function (e) { return null == e; }; var Ce = function (e, t, n) { var o = n || [], r = o[0], i = o[1]; if ((r = "number" == typeof r ? r : -1 / 0) > (i = "number" == typeof i ? i : 1 / 0)) {
        var u = r;
        r = i, i = u;
    } return e.filter((function (e) { return t.some((function (t) { var n = e.values[t]; return n >= r && n <= i; })); })); }; Ce.autoRemove = function (e) { return !e || "number" != typeof e[0] && "number" != typeof e[1]; }; var xe = Object.freeze({ __proto__: null, text: ge, exactText: ve, exactTextCase: me, includes: he, includesAll: ye, includesSome: we, includesValue: Re, exact: be, equals: Se, between: Ce }); l.resetFilters = "resetFilters", l.setFilter = "setFilter", l.setAllFilters = "setAllFilters"; var Pe = function (e) { e.stateReducers.push(Be), e.useInstance.push(Ee); }; function Be(e, t, n, o) { if (t.type === l.init)
        return r({ filters: [] }, e); if (t.type === l.resetFilters)
        return r({}, e, { filters: o.initialState.filters || [] }); if (t.type === l.setFilter) {
        var i = t.columnId, u = t.filterValue, s = o.allColumns, a = o.filterTypes, c = s.find((function (e) { return e.id === i; }));
        if (!c)
            throw new Error("React-Table: Could not find a column with id: " + i);
        var d = k(c.filter, a || {}, xe), f = e.filters.find((function (e) { return e.id === i; })), p = m(u, f && f.value);
        return H(d.autoRemove, p, c) ? r({}, e, { filters: e.filters.filter((function (e) { return e.id !== i; })) }) : r({}, e, f ? { filters: e.filters.map((function (e) { return e.id === i ? { id: i, value: p } : e; })) } : { filters: [].concat(e.filters, [{ id: i, value: p }]) });
    } if (t.type === l.setAllFilters) {
        var g = t.filters, v = o.allColumns, h = o.filterTypes;
        return r({}, e, { filters: m(g, e.filters).filter((function (e) { var t = v.find((function (t) { return t.id === e.id; })); return !H(k(t.filter, h || {}, xe).autoRemove, e.value, t); })) });
    } } function Ee(e) { var n = e.data, o = e.rows, r = e.flatRows, i = e.rowsById, u = e.allColumns, s = e.filterTypes, a = e.manualFilters, c = e.defaultCanFilter, d = void 0 !== c && c, f = e.disableFilters, p = e.state.filters, g = e.dispatch, v = e.autoResetFilters, m = void 0 === v || v, y = t.useCallback((function (e, t) { g({ type: l.setFilter, columnId: e, filterValue: t }); }), [g]), R = t.useCallback((function (e) { g({ type: l.setAllFilters, filters: e }); }), [g]); u.forEach((function (e) { var t = e.id, n = e.accessor, o = e.defaultCanFilter, r = e.disableFilters; e.canFilter = n ? I(!0 !== r && void 0, !0 !== f && void 0, !0) : I(o, d, !1), e.setFilter = function (t) { return y(e.id, t); }; var i = p.find((function (e) { return e.id === t; })); e.filterValue = i && i.value; })); var b = t.useMemo((function () { if (a || !p.length)
        return [o, r, i]; var e = [], t = {}; return [function n(o, r) { void 0 === r && (r = 0); var i = o; return (i = p.reduce((function (e, t) { var n = t.id, o = t.value, i = u.find((function (e) { return e.id === n; })); if (!i)
            return e; 0 === r && (i.preFilteredRows = e); var l = k(i.filter, s || {}, xe); return l ? (i.filteredRows = l(e, [n], o), i.filteredRows) : (console.warn("Could not find a valid 'column.filter' for column with the ID: " + i.id + "."), e); }), o)).forEach((function (o) { e.push(o), t[o.id] = o, o.subRows && (o.subRows = o.subRows && o.subRows.length > 0 ? n(o.subRows, r + 1) : o.subRows); })), i; }(o), e, t]; }), [a, p, o, r, i, u, s]), S = b[0], C = b[1], x = b[2]; t.useMemo((function () { u.filter((function (e) { return !p.find((function (t) { return t.id === e.id; })); })).forEach((function (e) { e.preFilteredRows = S, e.filteredRows = S; })); }), [S, p, u]); var P = h(m); w((function () { P() && g({ type: l.resetFilters }); }), [g, a ? null : n]), Object.assign(e, { preFilteredRows: o, preFilteredFlatRows: r, preFilteredRowsById: i, filteredRows: S, filteredFlatRows: C, filteredRowsById: x, rows: S, flatRows: C, rowsById: x, setFilter: y, setAllFilters: R }); } Pe.pluginName = "useFilters", l.resetGlobalFilter = "resetGlobalFilter", l.setGlobalFilter = "setGlobalFilter"; var Ie = function (e) { e.stateReducers.push(Fe), e.useInstance.push(Ge); }; function Fe(e, t, n, o) { if (t.type === l.resetGlobalFilter)
        return r({}, e, { globalFilter: o.initialState.globalFilter || void 0 }); if (t.type === l.setGlobalFilter) {
        var u = t.filterValue, s = o.userFilterTypes, a = k(o.globalFilter, s || {}, xe), c = m(u, e.globalFilter);
        if (H(a.autoRemove, c)) {
            e.globalFilter;
            return i(e, ["globalFilter"]);
        }
        return r({}, e, { globalFilter: c });
    } } function Ge(e) { var n = e.data, o = e.rows, r = e.flatRows, i = e.rowsById, u = e.allColumns, s = e.filterTypes, a = e.globalFilter, c = e.manualGlobalFilter, d = e.state.globalFilter, f = e.dispatch, p = e.autoResetGlobalFilter, g = void 0 === p || p, v = e.disableGlobalFilter, m = t.useCallback((function (e) { f({ type: l.setGlobalFilter, filterValue: e }); }), [f]), y = t.useMemo((function () { if (c || void 0 === d)
        return [o, r, i]; var e = [], t = {}, n = k(a, s || {}, xe); if (!n)
        return console.warn("Could not find a valid 'globalFilter' option."), o; u.forEach((function (e) { var t = e.disableGlobalFilter; e.canFilter = I(!0 !== t && void 0, !0 !== v && void 0, !0); })); var l = u.filter((function (e) { return !0 === e.canFilter; })); return [function o(r) { return (r = n(r, l.map((function (e) { return e.id; })), d)).forEach((function (n) { e.push(n), t[n.id] = n, n.subRows = n.subRows && n.subRows.length ? o(n.subRows) : n.subRows; })), r; }(o), e, t]; }), [c, d, a, s, u, o, r, i, v]), R = y[0], b = y[1], S = y[2], C = h(g); w((function () { C() && f({ type: l.resetGlobalFilter }); }), [f, c ? null : n]), Object.assign(e, { preGlobalFilteredRows: o, preGlobalFilteredFlatRows: r, preGlobalFilteredRowsById: i, globalFilteredRows: R, globalFilteredFlatRows: b, globalFilteredRowsById: S, rows: R, flatRows: b, rowsById: S, setGlobalFilter: m, disableGlobalFilter: v }); } function Ae(e, t) { return t.reduce((function (e, t) { return e + ("number" == typeof t ? t : 0); }), 0); } Ie.pluginName = "useGlobalFilter"; var ke = Object.freeze({ __proto__: null, sum: Ae, min: function (e) { var t = e[0] || 0; return e.forEach((function (e) { "number" == typeof e && (t = Math.min(t, e)); })), t; }, max: function (e) { var t = e[0] || 0; return e.forEach((function (e) { "number" == typeof e && (t = Math.max(t, e)); })), t; }, minMax: function (e) { var t = e[0] || 0, n = e[0] || 0; return e.forEach((function (e) { "number" == typeof e && (t = Math.min(t, e), n = Math.max(n, e)); })), t + ".." + n; }, average: function (e) { return Ae(0, e) / e.length; }, median: function (e) { if (!e.length)
            return null; var t = Math.floor(e.length / 2), n = [].concat(e).sort((function (e, t) { return e - t; })); return e.length % 2 != 0 ? n[t] : (n[t - 1] + n[t]) / 2; }, unique: function (e) { return Array.from(new Set(e).values()); }, uniqueCount: function (e) { return new Set(e).size; }, count: function (e) { return e.length; } }), He = [], We = {}; l.resetGroupBy = "resetGroupBy", l.setGroupBy = "setGroupBy", l.toggleGroupBy = "toggleGroupBy"; var ze = function (e) { e.getGroupByToggleProps = [Te], e.stateReducers.push(Oe), e.visibleColumnsDeps.push((function (e, t) { var n = t.instance; return [].concat(e, [n.state.groupBy]); })), e.visibleColumns.push(Me), e.useInstance.push(Le), e.prepareRow.push(Ne); }; ze.pluginName = "useGroupBy"; var Te = function (e, t) { var n = t.header; return [e, { onClick: n.canGroupBy ? function (e) { e.persist(), n.toggleGroupBy(); } : void 0, style: { cursor: n.canGroupBy ? "pointer" : void 0 }, title: "Toggle GroupBy" }]; }; function Oe(e, t, n, o) { if (t.type === l.init)
        return r({ groupBy: [] }, e); if (t.type === l.resetGroupBy)
        return r({}, e, { groupBy: o.initialState.groupBy || [] }); if (t.type === l.setGroupBy)
        return r({}, e, { groupBy: t.value }); if (t.type === l.toggleGroupBy) {
        var i = t.columnId, u = t.value, s = void 0 !== u ? u : !e.groupBy.includes(i);
        return r({}, e, s ? { groupBy: [].concat(e.groupBy, [i]) } : { groupBy: e.groupBy.filter((function (e) { return e !== i; })) });
    } } function Me(e, t) { var n = t.instance.state.groupBy, o = n.map((function (t) { return e.find((function (e) { return e.id === t; })); })).filter(Boolean), r = e.filter((function (e) { return !n.includes(e.id); })); return (e = [].concat(o, r)).forEach((function (e) { e.isGrouped = n.includes(e.id), e.groupedIndex = n.indexOf(e.id); })), e; } var je = {}; function Le(e) { var n = e.data, o = e.rows, i = e.flatRows, u = e.rowsById, s = e.allColumns, a = e.flatHeaders, c = e.groupByFn, d = void 0 === c ? De : c, p = e.manualGroupBy, g = e.aggregations, m = void 0 === g ? je : g, y = e.plugins, R = e.state.groupBy, b = e.dispatch, S = e.autoResetGroupBy, C = void 0 === S || S, x = e.disableGroupBy, P = e.defaultCanGroupBy, B = e.getHooks; v(y, ["useColumnOrder", "useFilters"], "useGroupBy"); var E = h(e); s.forEach((function (t) { var n = t.accessor, o = t.defaultGroupBy, r = t.disableGroupBy; t.canGroupBy = n ? I(t.canGroupBy, !0 !== r && void 0, !0 !== x && void 0, !0) : I(t.canGroupBy, o, P, !1), t.canGroupBy && (t.toggleGroupBy = function () { return e.toggleGroupBy(t.id); }), t.Aggregated = t.Aggregated || t.Cell; })); var F = t.useCallback((function (e, t) { b({ type: l.toggleGroupBy, columnId: e, value: t }); }), [b]), A = t.useCallback((function (e) { b({ type: l.setGroupBy, value: e }); }), [b]); a.forEach((function (e) { e.getGroupByToggleProps = f(B().getGroupByToggleProps, { instance: E(), header: e }); })); var k = t.useMemo((function () { if (p || !R.length)
        return [o, i, u, He, We, i, u]; var e = R.filter((function (e) { return s.find((function (t) { return t.id === e; })); })), t = [], n = {}, l = [], a = {}, c = [], f = {}, g = function o(i, u, p) { if (void 0 === u && (u = 0), u === e.length)
        return i.map((function (e) { return r({}, e, { depth: u }); })); var g = e[u], v = d(i, g); return Object.entries(v).map((function (r, i) { var d = r[0], v = r[1], h = g + ":" + d, y = o(v, u + 1, h = p ? p + ">" + h : h), w = u ? G(v, "leafRows") : v, R = function (t, n, o) { var r = {}; return s.forEach((function (i) { if (e.includes(i.id))
        r[i.id] = n[0] ? n[0].values[i.id] : null;
    else {
        var u = "function" == typeof i.aggregate ? i.aggregate : m[i.aggregate] || ke[i.aggregate];
        if (u) {
            var l = n.map((function (e) { return e.values[i.id]; })), s = t.map((function (e) { var t = e.values[i.id]; if (!o && i.aggregateValue) {
                var n = "function" == typeof i.aggregateValue ? i.aggregateValue : m[i.aggregateValue] || ke[i.aggregateValue];
                if (!n)
                    throw console.info({ column: i }), new Error("React Table: Invalid column.aggregateValue option for column listed above");
                t = n(t, e, i);
            } return t; }));
            r[i.id] = u(s, l);
        }
        else {
            if (i.aggregate)
                throw console.info({ column: i }), new Error("React Table: Invalid column.aggregate option for column listed above");
            r[i.id] = null;
        }
    } })), r; }(w, v, u), b = { id: h, isGrouped: !0, groupByID: g, groupByVal: d, values: R, subRows: y, leafRows: w, depth: u, index: i }; return y.forEach((function (e) { t.push(e), n[e.id] = e, e.isGrouped ? (l.push(e), a[e.id] = e) : (c.push(e), f[e.id] = e); })), b; })); }(o); return g.forEach((function (e) { t.push(e), n[e.id] = e, e.isGrouped ? (l.push(e), a[e.id] = e) : (c.push(e), f[e.id] = e); })), [g, t, n, l, a, c, f]; }), [p, R, o, i, u, s, m, d]), H = k[0], W = k[1], z = k[2], T = k[3], O = k[4], M = k[5], j = k[6], L = h(C); w((function () { L() && b({ type: l.resetGroupBy }); }), [b, p ? null : n]), Object.assign(e, { preGroupedRows: o, preGroupedFlatRow: i, preGroupedRowsById: u, groupedRows: H, groupedFlatRows: W, groupedRowsById: z, onlyGroupedFlatRows: T, onlyGroupedRowsById: O, nonGroupedFlatRows: M, nonGroupedRowsById: j, rows: H, flatRows: W, rowsById: z, toggleGroupBy: F, setGroupBy: A }); } function Ne(e) { e.allCells.forEach((function (t) { var n; t.isGrouped = t.column.isGrouped && t.column.id === e.groupByID, t.isPlaceholder = !t.isGrouped && t.column.isGrouped, t.isAggregated = !t.isGrouped && !t.isPlaceholder && (null == (n = e.subRows) ? void 0 : n.length); })); } function De(e, t) { return e.reduce((function (e, n, o) { var r = "" + n.values[t]; return e[r] = Array.isArray(e[r]) ? e[r] : [], e[r].push(n), e; }), {}); } var Ve = /([0-9]+)/gm; function _e(e, t) { return e === t ? 0 : e > t ? 1 : -1; } function Xe(e, t, n) { return [e.values[n], t.values[n]]; } function qe(e) { return "number" == typeof e ? isNaN(e) || e === 1 / 0 || e === -1 / 0 ? "" : String(e) : "string" == typeof e ? e : ""; } var Ke = Object.freeze({ __proto__: null, alphanumeric: function (e, t, n) { var o = Xe(e, t, n), r = o[0], i = o[1]; for (r = qe(r), i = qe(i), r = r.split(Ve).filter(Boolean), i = i.split(Ve).filter(Boolean); r.length && i.length;) {
            var u = r.shift(), l = i.shift(), s = parseInt(u, 10), a = parseInt(l, 10), c = [s, a].sort();
            if (isNaN(c[0])) {
                if (u > l)
                    return 1;
                if (l > u)
                    return -1;
            }
            else {
                if (isNaN(c[1]))
                    return isNaN(s) ? -1 : 1;
                if (s > a)
                    return 1;
                if (a > s)
                    return -1;
            }
        } return r.length - i.length; }, datetime: function (e, t, n) { var o = Xe(e, t, n), r = o[0], i = o[1]; return _e(r = r.getTime(), i = i.getTime()); }, basic: function (e, t, n) { var o = Xe(e, t, n); return _e(o[0], o[1]); }, string: function (e, t, n) { var o = Xe(e, t, n), r = o[0], i = o[1]; for (r = r.split("").filter(Boolean), i = i.split("").filter(Boolean); r.length && i.length;) {
            var u = r.shift(), l = i.shift(), s = u.toLowerCase(), a = l.toLowerCase();
            if (s > a)
                return 1;
            if (a > s)
                return -1;
            if (u > l)
                return 1;
            if (l > u)
                return -1;
        } return r.length - i.length; }, number: function (e, t, n) { var o = Xe(e, t, n), r = o[0], i = o[1], u = /[^0-9.]/gi; return _e(r = Number(String(r).replace(u, "")), i = Number(String(i).replace(u, ""))); } }); l.resetSortBy = "resetSortBy", l.setSortBy = "setSortBy", l.toggleSortBy = "toggleSortBy", l.clearSortBy = "clearSortBy", c.sortType = "alphanumeric", c.sortDescFirst = !1; var Ue = function (e) { e.getSortByToggleProps = [$e], e.stateReducers.push(Je), e.useInstance.push(Ye); }; Ue.pluginName = "useSortBy"; var $e = function (e, t) { var n = t.instance, o = t.column, r = n.isMultiSortEvent, i = void 0 === r ? function (e) { return e.shiftKey; } : r; return [e, { onClick: o.canSort ? function (e) { e.persist(), o.toggleSortBy(void 0, !n.disableMultiSort && i(e)); } : void 0, style: { cursor: o.canSort ? "pointer" : void 0 }, title: o.canSort ? "Toggle SortBy" : void 0 }]; }; function Je(e, t, n, o) { if (t.type === l.init)
        return r({ sortBy: [] }, e); if (t.type === l.resetSortBy)
        return r({}, e, { sortBy: o.initialState.sortBy || [] }); if (t.type === l.clearSortBy)
        return r({}, e, { sortBy: e.sortBy.filter((function (e) { return e.id !== t.columnId; })) }); if (t.type === l.setSortBy)
        return r({}, e, { sortBy: t.sortBy }); if (t.type === l.toggleSortBy) {
        var i, u = t.columnId, s = t.desc, a = t.multi, c = o.allColumns, d = o.disableMultiSort, f = o.disableSortRemove, p = o.disableMultiRemove, g = o.maxMultiSortColCount, v = void 0 === g ? Number.MAX_SAFE_INTEGER : g, m = e.sortBy, h = c.find((function (e) { return e.id === u; })).sortDescFirst, y = m.find((function (e) { return e.id === u; })), w = m.findIndex((function (e) { return e.id === u; })), R = null != s, b = [];
        return "toggle" !== (i = !d && a ? y ? "toggle" : "add" : w !== m.length - 1 || 1 !== m.length ? "replace" : y ? "toggle" : "replace") || f || R || a && p || !(y && y.desc && !h || !y.desc && h) || (i = "remove"), "replace" === i ? b = [{ id: u, desc: R ? s : h }] : "add" === i ? (b = [].concat(m, [{ id: u, desc: R ? s : h }])).splice(0, b.length - v) : "toggle" === i ? b = m.map((function (e) { return e.id === u ? r({}, e, { desc: R ? s : !y.desc }) : e; })) : "remove" === i && (b = m.filter((function (e) { return e.id !== u; }))), r({}, e, { sortBy: b });
    } } function Ye(e) { var n = e.data, o = e.rows, r = e.flatRows, i = e.allColumns, u = e.orderByFn, s = void 0 === u ? Qe : u, a = e.sortTypes, c = e.manualSortBy, d = e.defaultCanSort, p = e.disableSortBy, g = e.flatHeaders, m = e.state.sortBy, y = e.dispatch, R = e.plugins, b = e.getHooks, S = e.autoResetSortBy, C = void 0 === S || S; v(R, ["useFilters", "useGlobalFilter", "useGroupBy", "usePivotColumns"], "useSortBy"); var x = t.useCallback((function (e) { y({ type: l.setSortBy, sortBy: e }); }), [y]), P = t.useCallback((function (e, t, n) { y({ type: l.toggleSortBy, columnId: e, desc: t, multi: n }); }), [y]), B = h(e); g.forEach((function (e) { var t = e.accessor, n = e.canSort, o = e.disableSortBy, r = e.id, i = t ? I(!0 !== o && void 0, !0 !== p && void 0, !0) : I(d, n, !1); e.canSort = i, e.canSort && (e.toggleSortBy = function (t, n) { return P(e.id, t, n); }, e.clearSortBy = function () { y({ type: l.clearSortBy, columnId: e.id }); }), e.getSortByToggleProps = f(b().getSortByToggleProps, { instance: B(), column: e }); var u = m.find((function (e) { return e.id === r; })); e.isSorted = !!u, e.sortedIndex = m.findIndex((function (e) { return e.id === r; })), e.isSortedDesc = e.isSorted ? u.desc : void 0; })); var E = t.useMemo((function () { if (c || !m.length)
        return [o, r]; var e = [], t = m.filter((function (e) { return i.find((function (t) { return t.id === e.id; })); })); return [function n(o) { var r = s(o, t.map((function (e) { var t = i.find((function (t) { return t.id === e.id; })); if (!t)
            throw new Error("React-Table: Could not find a column with id: " + e.id + " while sorting"); var n = t.sortType, o = F(n) || (a || {})[n] || Ke[n]; if (!o)
            throw new Error("React-Table: Could not find a valid sortType of '" + n + "' for column '" + e.id + "'."); return function (t, n) { return o(t, n, e.id, e.desc); }; })), t.map((function (e) { var t = i.find((function (t) { return t.id === e.id; })); return t && t.sortInverted ? e.desc : !e.desc; }))); return r.forEach((function (t) { e.push(t), t.subRows && 0 !== t.subRows.length && (t.subRows = n(t.subRows)); })), r; }(o), e]; }), [c, m, o, r, i, s, a]), G = E[0], A = E[1], k = h(C); w((function () { k() && y({ type: l.resetSortBy }); }), [c ? null : n]), Object.assign(e, { preSortedRows: o, preSortedFlatRows: r, sortedRows: G, sortedFlatRows: A, rows: G, flatRows: A, setSortBy: x, toggleSortBy: P }); } function Qe(e, t, n) { return [].concat(e).sort((function (e, o) { for (var r = 0; r < t.length; r += 1) {
        var i = t[r], u = !1 === n[r] || "desc" === n[r], l = i(e, o);
        if (0 !== l)
            return u ? -l : l;
    } return n[0] ? e.index - o.index : o.index - e.index; })); } l.resetPage = "resetPage", l.gotoPage = "gotoPage", l.setPageSize = "setPageSize"; var Ze = function (e) { e.stateReducers.push(et), e.useInstance.push(tt); }; function et(e, t, n, o) { if (t.type === l.init)
        return r({ pageSize: 10, pageIndex: 0 }, e); if (t.type === l.resetPage)
        return r({}, e, { pageIndex: o.initialState.pageIndex || 0 }); if (t.type === l.gotoPage) {
        var i = o.pageCount, u = o.page, s = m(t.pageIndex, e.pageIndex), a = !1;
        return s > e.pageIndex ? a = -1 === i ? u.length >= e.pageSize : s < i : s < e.pageIndex && (a = s > -1), a ? r({}, e, { pageIndex: s }) : e;
    } if (t.type === l.setPageSize) {
        var c = t.pageSize, d = e.pageSize * e.pageIndex;
        return r({}, e, { pageIndex: Math.floor(d / c), pageSize: c });
    } } function tt(e) { var n = e.rows, o = e.autoResetPage, r = void 0 === o || o, i = e.manualExpandedKey, u = void 0 === i ? "expanded" : i, s = e.plugins, a = e.pageCount, c = e.paginateExpandedRows, d = void 0 === c || c, f = e.expandSubRows, p = void 0 === f || f, g = e.state, m = g.pageSize, y = g.pageIndex, R = g.expanded, b = g.globalFilter, S = g.filters, C = g.groupBy, x = g.sortBy, P = e.dispatch, B = e.data, E = e.manualPagination; v(s, ["useGlobalFilter", "useFilters", "useGroupBy", "useSortBy", "useExpanded"], "usePagination"); var I = h(r); w((function () { I() && P({ type: l.resetPage }); }), [P, E ? null : B, b, S, C, x]); var F = E ? a : Math.ceil(n.length / m), G = t.useMemo((function () { return F > 0 ? [].concat(new Array(F)).fill(null).map((function (e, t) { return t; })) : []; }), [F]), k = t.useMemo((function () { var e; if (E)
        e = n;
    else {
        var t = m * y, o = t + m;
        e = n.slice(t, o);
    } return d ? e : A(e, { manualExpandedKey: u, expanded: R, expandSubRows: p }); }), [p, R, u, E, y, m, d, n]), H = y > 0, W = -1 === F ? k.length >= m : y < F - 1, z = t.useCallback((function (e) { P({ type: l.gotoPage, pageIndex: e }); }), [P]), T = t.useCallback((function () { return z((function (e) { return e - 1; })); }), [z]), O = t.useCallback((function () { return z((function (e) { return e + 1; })); }), [z]), M = t.useCallback((function (e) { P({ type: l.setPageSize, pageSize: e }); }), [P]); Object.assign(e, { pageOptions: G, pageCount: F, page: k, canPreviousPage: H, canNextPage: W, gotoPage: z, previousPage: T, nextPage: O, setPageSize: M }); } Ze.pluginName = "usePagination", l.resetPivot = "resetPivot", l.togglePivot = "togglePivot"; var nt = function (e) { e.getPivotToggleProps = [rt], e.stateReducers.push(it), e.useInstanceAfterData.push(ut), e.allColumns.push(lt), e.accessValue.push(st), e.materializedColumns.push(at), e.materializedColumnsDeps.push(ct), e.visibleColumns.push(dt), e.visibleColumnsDeps.push(ft), e.useInstance.push(pt), e.prepareRow.push(gt); }; nt.pluginName = "usePivotColumns"; var ot = [], rt = function (e, t) { var n = t.header; return [e, { onClick: n.canPivot ? function (e) { e.persist(), n.togglePivot(); } : void 0, style: { cursor: n.canPivot ? "pointer" : void 0 }, title: "Toggle Pivot" }]; }; function it(e, t, n, o) { if (t.type === l.init)
        return r({ pivotColumns: ot }, e); if (t.type === l.resetPivot)
        return r({}, e, { pivotColumns: o.initialState.pivotColumns || ot }); if (t.type === l.togglePivot) {
        var i = t.columnId, u = t.value, s = void 0 !== u ? u : !e.pivotColumns.includes(i);
        return r({}, e, s ? { pivotColumns: [].concat(e.pivotColumns, [i]) } : { pivotColumns: e.pivotColumns.filter((function (e) { return e !== i; })) });
    } } function ut(e) { e.allColumns.forEach((function (t) { t.isPivotSource = e.state.pivotColumns.includes(t.id); })); } function lt(e, t) { var n = t.instance; return e.forEach((function (e) { e.isPivotSource = n.state.pivotColumns.includes(e.id), e.uniqueValues = new Set; })), e; } function st(e, t) { var n = t.column; return n.uniqueValues && void 0 !== e && n.uniqueValues.add(e), e; } function at(e, t) { var n = t.instance, o = n.allColumns, i = n.state; if (!i.pivotColumns.length || !i.groupBy || !i.groupBy.length)
        return e; var u = i.pivotColumns.map((function (e) { return o.find((function (t) { return t.id === e; })); })).filter(Boolean), l = o.filter((function (e) { return !e.isPivotSource && !i.groupBy.includes(e.id) && !i.pivotColumns.includes(e.id); })), s = C(function e(t, n, o) { void 0 === t && (t = 0), void 0 === o && (o = []); var i = u[t]; return i ? Array.from(i.uniqueValues).sort().map((function (u) { var l = r({}, i, { Header: i.PivotHeader || "string" == typeof i.header ? i.Header + ": " + u : u, isPivotGroup: !0, parent: n, depth: t, id: n ? n.id + "." + i.id + "." + u : i.id + "." + u, pivotValue: u }); return l.columns = e(t + 1, l, [].concat(o, [function (e) { return e.values[i.id] === u; }])), l; })) : l.map((function (e) { return r({}, e, { canPivot: !1, isPivoted: !0, parent: n, depth: t, id: "" + (n ? n.id + "." + e.id : e.id), accessor: function (t, n, r) { if (o.every((function (e) { return e(r); })))
            return r.values[e.id]; } }); })); }()); return [].concat(e, s); } function ct(e, t) { var n = t.instance.state, o = n.pivotColumns, r = n.groupBy; return [].concat(e, [o, r]); } function dt(e, t) { var n = t.instance.state; return e = e.filter((function (e) { return !e.isPivotSource; })), n.pivotColumns.length && n.groupBy && n.groupBy.length && (e = e.filter((function (e) { return e.isGrouped || e.isPivoted; }))), e; } function ft(e, t) { var n = t.instance; return [].concat(e, [n.state.pivotColumns, n.state.groupBy]); } function pt(e) { var t = e.columns, n = e.allColumns, o = e.flatHeaders, r = e.getHooks, i = e.plugins, u = e.dispatch, s = e.autoResetPivot, a = void 0 === s || s, c = e.manaulPivot, d = e.disablePivot, p = e.defaultCanPivot; v(i, ["useGroupBy"], "usePivotColumns"); var g = h(e); n.forEach((function (t) { var n = t.accessor, o = t.defaultPivot, r = t.disablePivot; t.canPivot = n ? I(t.canPivot, !0 !== r && void 0, !0 !== d && void 0, !0) : I(t.canPivot, o, p, !1), t.canPivot && (t.togglePivot = function () { return e.togglePivot(t.id); }), t.Aggregated = t.Aggregated || t.Cell; })); o.forEach((function (e) { e.getPivotToggleProps = f(r().getPivotToggleProps, { instance: g(), header: e }); })); var m = h(a); w((function () { m() && u({ type: l.resetPivot }); }), [u, c ? null : t]), Object.assign(e, { togglePivot: function (e, t) { u({ type: l.togglePivot, columnId: e, value: t }); } }); } function gt(e) { e.allCells.forEach((function (e) { e.isPivoted = e.column.isPivoted; })); } l.resetSelectedRows = "resetSelectedRows", l.toggleAllRowsSelected = "toggleAllRowsSelected", l.toggleRowSelected = "toggleRowSelected", l.toggleAllPageRowsSelected = "toggleAllPageRowsSelected"; var vt = function (e) { e.getToggleRowSelectedProps = [mt], e.getToggleAllRowsSelectedProps = [ht], e.getToggleAllPageRowsSelectedProps = [yt], e.stateReducers.push(wt), e.useInstance.push(Rt), e.prepareRow.push(bt); }; vt.pluginName = "useRowSelect"; var mt = function (e, t) { var n = t.instance, o = t.row, r = n.manualRowSelectedKey, i = void 0 === r ? "isSelected" : r; return [e, { onChange: function (e) { o.toggleRowSelected(e.target.checked); }, style: { cursor: "pointer" }, checked: !(!o.original || !o.original[i]) || o.isSelected, title: "Toggle Row Selected", indeterminate: o.isSomeSelected }]; }, ht = function (e, t) { var n = t.instance; return [e, { onChange: function (e) { n.toggleAllRowsSelected(e.target.checked); }, style: { cursor: "pointer" }, checked: n.isAllRowsSelected, title: "Toggle All Rows Selected", indeterminate: Boolean(!n.isAllRowsSelected && Object.keys(n.state.selectedRowIds).length) }]; }, yt = function (e, t) { var n = t.instance; return [e, { onChange: function (e) { n.toggleAllPageRowsSelected(e.target.checked); }, style: { cursor: "pointer" }, checked: n.isAllPageRowsSelected, title: "Toggle All Current Page Rows Selected", indeterminate: Boolean(!n.isAllPageRowsSelected && n.page.some((function (e) { var t = e.id; return n.state.selectedRowIds[t]; }))) }]; }; function wt(e, t, n, o) { if (t.type === l.init)
        return r({ selectedRowIds: {} }, e); if (t.type === l.resetSelectedRows)
        return r({}, e, { selectedRowIds: o.initialState.selectedRowIds || {} }); if (t.type === l.toggleAllRowsSelected) {
        var i = t.value, u = o.isAllRowsSelected, s = o.rowsById, a = o.nonGroupedRowsById, c = void 0 === a ? s : a, d = void 0 !== i ? i : !u, f = Object.assign({}, e.selectedRowIds);
        return d ? Object.keys(c).forEach((function (e) { f[e] = !0; })) : Object.keys(c).forEach((function (e) { delete f[e]; })), r({}, e, { selectedRowIds: f });
    } if (t.type === l.toggleRowSelected) {
        var p = t.id, g = t.value, v = o.rowsById, m = o.selectSubRows, h = void 0 === m || m, y = o.getSubRows, w = e.selectedRowIds[p], R = void 0 !== g ? g : !w;
        if (w === R)
            return e;
        var b = r({}, e.selectedRowIds);
        return function e(t) { var n = v[t]; if (n && (n.isGrouped || (R ? b[t] = !0 : delete b[t]), h && y(n)))
            return y(n).forEach((function (t) { return e(t.id); })); }(p), r({}, e, { selectedRowIds: b });
    } if (t.type === l.toggleAllPageRowsSelected) {
        var S = t.value, C = o.page, x = o.rowsById, P = o.selectSubRows, B = void 0 === P || P, E = o.isAllPageRowsSelected, I = o.getSubRows, F = void 0 !== S ? S : !E, G = r({}, e.selectedRowIds);
        return C.forEach((function (e) { return function e(t) { var n = x[t]; if (n.isGrouped || (F ? G[t] = !0 : delete G[t]), B && I(n))
            return I(n).forEach((function (t) { return e(t.id); })); }(e.id); })), r({}, e, { selectedRowIds: G });
    } return e; } function Rt(e) { var n = e.data, o = e.rows, r = e.getHooks, i = e.plugins, u = e.rowsById, s = e.nonGroupedRowsById, a = void 0 === s ? u : s, c = e.autoResetSelectedRows, d = void 0 === c || c, p = e.state.selectedRowIds, g = e.selectSubRows, m = void 0 === g || g, y = e.dispatch, R = e.page, b = e.getSubRows; v(i, ["useFilters", "useGroupBy", "useSortBy", "useExpanded", "usePagination"], "useRowSelect"); var S = t.useMemo((function () { var e = []; return o.forEach((function (t) { var n = m ? function e(t, n, o) { if (n[t.id])
        return !0; var r = o(t); if (r && r.length) {
        var i = !0, u = !1;
        return r.forEach((function (t) { u && !i || (e(t, n, o) ? u = !0 : i = !1); })), !!i || !!u && null;
    } return !1; }(t, p, b) : !!p[t.id]; t.isSelected = !!n, t.isSomeSelected = null === n, n && e.push(t); })), e; }), [o, m, p, b]), C = Boolean(Object.keys(a).length && Object.keys(p).length), x = C; C && Object.keys(a).some((function (e) { return !p[e]; })) && (C = !1), C || R && R.length && R.some((function (e) { var t = e.id; return !p[t]; })) && (x = !1); var P = h(d); w((function () { P() && y({ type: l.resetSelectedRows }); }), [y, n]); var B = t.useCallback((function (e) { return y({ type: l.toggleAllRowsSelected, value: e }); }), [y]), E = t.useCallback((function (e) { return y({ type: l.toggleAllPageRowsSelected, value: e }); }), [y]), I = t.useCallback((function (e, t) { return y({ type: l.toggleRowSelected, id: e, value: t }); }), [y]), F = h(e), G = f(r().getToggleAllRowsSelectedProps, { instance: F() }), A = f(r().getToggleAllPageRowsSelectedProps, { instance: F() }); Object.assign(e, { selectedFlatRows: S, isAllRowsSelected: C, isAllPageRowsSelected: x, toggleRowSelected: I, toggleAllRowsSelected: B, getToggleAllRowsSelectedProps: G, getToggleAllPageRowsSelectedProps: A, toggleAllPageRowsSelected: E }); } function bt(e, t) { var n = t.instance; e.toggleRowSelected = function (t) { return n.toggleRowSelected(e.id, t); }, e.getToggleRowSelectedProps = f(n.getHooks().getToggleRowSelectedProps, { instance: n, row: e }); } var St = function (e) { return {}; }, Ct = function (e) { return {}; }; l.setRowState = "setRowState", l.setCellState = "setCellState", l.resetRowState = "resetRowState"; var xt = function (e) { e.stateReducers.push(Pt), e.useInstance.push(Bt), e.prepareRow.push(Et); }; function Pt(e, t, n, o) { var i = o.initialRowStateAccessor, u = void 0 === i ? St : i, s = o.initialCellStateAccessor, a = void 0 === s ? Ct : s, c = o.rowsById; if (t.type === l.init)
        return r({ rowState: {} }, e); if (t.type === l.resetRowState)
        return r({}, e, { rowState: o.initialState.rowState || {} }); if (t.type === l.setRowState) {
        var d, f = t.rowId, p = t.value, g = void 0 !== e.rowState[f] ? e.rowState[f] : u(c[f]);
        return r({}, e, { rowState: r({}, e.rowState, (d = {}, d[f] = m(p, g), d)) });
    } if (t.type === l.setCellState) {
        var v, h, y, w, R, b = t.rowId, S = t.columnId, C = t.value, x = void 0 !== e.rowState[b] ? e.rowState[b] : u(c[b]), P = void 0 !== (null == x ? void 0 : null == (v = x.cellState) ? void 0 : v[S]) ? x.cellState[S] : a(null == (h = c[b]) ? void 0 : null == (y = h.cells) ? void 0 : y.find((function (e) { return e.column.id === S; })));
        return r({}, e, { rowState: r({}, e.rowState, (R = {}, R[b] = r({}, x, { cellState: r({}, x.cellState || {}, (w = {}, w[S] = m(C, P), w)) }), R)) });
    } } function Bt(e) { var n = e.autoResetRowState, o = void 0 === n || n, r = e.data, i = e.dispatch, u = t.useCallback((function (e, t) { return i({ type: l.setRowState, rowId: e, value: t }); }), [i]), s = t.useCallback((function (e, t, n) { return i({ type: l.setCellState, rowId: e, columnId: t, value: n }); }), [i]), a = h(o); w((function () { a() && i({ type: l.resetRowState }); }), [r]), Object.assign(e, { setRowState: u, setCellState: s }); } function Et(e, t) { var n = t.instance, o = n.initialRowStateAccessor, r = void 0 === o ? St : o, i = n.initialCellStateAccessor, u = void 0 === i ? Ct : i, l = n.state.rowState; e && (e.state = void 0 !== l[e.id] ? l[e.id] : r(e), e.setState = function (t) { return n.setRowState(e.id, t); }, e.cells.forEach((function (t) { e.state.cellState || (e.state.cellState = {}), t.state = void 0 !== e.state.cellState[t.column.id] ? e.state.cellState[t.column.id] : u(t), t.setState = function (o) { return n.setCellState(e.id, t.column.id, o); }; }))); } xt.pluginName = "useRowState", l.resetColumnOrder = "resetColumnOrder", l.setColumnOrder = "setColumnOrder"; var It = function (e) { e.stateReducers.push(Ft), e.visibleColumnsDeps.push((function (e, t) { var n = t.instance; return [].concat(e, [n.state.columnOrder]); })), e.visibleColumns.push(Gt), e.useInstance.push(At); }; function Ft(e, t, n, o) { return t.type === l.init ? r({ columnOrder: [] }, e) : t.type === l.resetColumnOrder ? r({}, e, { columnOrder: o.initialState.columnOrder || [] }) : t.type === l.setColumnOrder ? r({}, e, { columnOrder: m(t.columnOrder, e.columnOrder) }) : void 0; } function Gt(e, t) { var n = t.instance.state.columnOrder; if (!n || !n.length)
        return e; for (var o = [].concat(n), r = [].concat(e), i = [], u = function () { var e = o.shift(), t = r.findIndex((function (t) { return t.id === e; })); t > -1 && i.push(r.splice(t, 1)[0]); }; r.length && o.length;)
        u(); return [].concat(i, r); } function At(e) { var n = e.dispatch; e.setColumnOrder = t.useCallback((function (e) { return n({ type: l.setColumnOrder, columnOrder: e }); }), [n]); } It.pluginName = "useColumnOrder", c.canResize = !0, l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize"; var kt = function (e) { e.getResizerProps = [Ht], e.getHeaderProps.push({ style: { position: "relative" } }), e.stateReducers.push(Wt), e.useInstance.push(Tt), e.useInstanceBeforeDimensions.push(zt); }, Ht = function (e, t) { var n = t.instance, o = t.header, r = n.dispatch, i = function (e, t) { var n = !1; if ("touchstart" === e.type) {
        if (e.touches && e.touches.length > 1)
            return;
        n = !0;
    } var o, i, u = function (e) { var t = []; return function e(n) { n.columns && n.columns.length && n.columns.map(e); t.push(n); }(e), t; }(t).map((function (e) { return [e.id, e.totalWidth]; })), s = n ? Math.round(e.touches[0].clientX) : e.clientX, a = function () { window.cancelAnimationFrame(o), o = null, r({ type: l.columnDoneResizing }); }, c = function () { window.cancelAnimationFrame(o), o = null, r({ type: l.columnResizing, clientX: i }); }, d = function (e) { i = e, o || (o = window.requestAnimationFrame(c)); }, f = { mouse: { moveEvent: "mousemove", moveHandler: function (e) { return d(e.clientX); }, upEvent: "mouseup", upHandler: function (e) { document.removeEventListener("mousemove", f.mouse.moveHandler), document.removeEventListener("mouseup", f.mouse.upHandler), a(); } }, touch: { moveEvent: "touchmove", moveHandler: function (e) { return e.cancelable && (e.preventDefault(), e.stopPropagation()), d(e.touches[0].clientX), !1; }, upEvent: "touchend", upHandler: function (e) { document.removeEventListener(f.touch.moveEvent, f.touch.moveHandler), document.removeEventListener(f.touch.upEvent, f.touch.moveHandler), a(); } } }, p = n ? f.touch : f.mouse, g = !!function () { if ("boolean" == typeof z)
        return z; var e = !1; try {
        var t = { get passive() { return e = !0, !1; } };
        window.addEventListener("test", null, t), window.removeEventListener("test", null, t);
    }
    catch (t) {
        e = !1;
    } return z = e; }() && { passive: !1 }; document.addEventListener(p.moveEvent, p.moveHandler, g), document.addEventListener(p.upEvent, p.upHandler, g), r({ type: l.columnStartResizing, columnId: t.id, columnWidth: t.totalWidth, headerIdWidths: u, clientX: s }); }; return [e, { onMouseDown: function (e) { return e.persist() || i(e, o); }, onTouchStart: function (e) { return e.persist() || i(e, o); }, style: { cursor: "col-resize" }, draggable: !1, role: "separator" }]; }; function Wt(e, t) { if (t.type === l.init)
        return r({ columnResizing: { columnWidths: {} } }, e); if (t.type === l.resetResize)
        return r({}, e, { columnResizing: { columnWidths: {} } }); if (t.type === l.columnStartResizing) {
        var n = t.clientX, o = t.columnId, i = t.columnWidth, u = t.headerIdWidths;
        return r({}, e, { columnResizing: r({}, e.columnResizing, { startX: n, headerIdWidths: u, columnWidth: i, isResizingColumn: o }) });
    } if (t.type === l.columnResizing) {
        var s = t.clientX, a = e.columnResizing, c = a.startX, d = a.columnWidth, f = a.headerIdWidths, p = (s - c) / d, g = {};
        return (void 0 === f ? [] : f).forEach((function (e) { var t = e[0], n = e[1]; g[t] = Math.max(n + n * p, 0); })), r({}, e, { columnResizing: r({}, e.columnResizing, { columnWidths: r({}, e.columnResizing.columnWidths, {}, g) }) });
    } return t.type === l.columnDoneResizing ? r({}, e, { columnResizing: r({}, e.columnResizing, { startX: null, isResizingColumn: null }) }) : void 0; } kt.pluginName = "useResizeColumns"; var zt = function (e) { var t = e.flatHeaders, n = e.disableResizing, o = e.getHooks, r = e.state.columnResizing, i = h(e); t.forEach((function (e) { var t = I(!0 !== e.disableResizing && void 0, !0 !== n && void 0, !0); e.canResize = t, e.width = r.columnWidths[e.id] || e.originalWidth || e.width, e.isResizing = r.isResizingColumn === e.id, t && (e.getResizerProps = f(o().getResizerProps, { instance: i(), header: e })); })); }; function Tt(e) { var n = e.plugins, o = e.dispatch, r = e.autoResetResize, i = void 0 === r || r, u = e.columns; v(n, ["useAbsoluteLayout"], "useResizeColumns"); var s = h(i); w((function () { s() && o({ type: l.resetResize }); }), [u]); var a = t.useCallback((function () { return o({ type: l.resetResize }); }), [o]); Object.assign(e, { resetResizing: a }); } var Ot = { position: "absolute", top: 0 }, Mt = function (e) { e.getTableBodyProps.push(jt), e.getRowProps.push(jt), e.getHeaderGroupProps.push(jt), e.getFooterGroupProps.push(jt), e.getHeaderProps.push((function (e, t) { var n = t.column; return [e, { style: r({}, Ot, { left: n.totalLeft + "px", width: n.totalWidth + "px" }) }]; })), e.getCellProps.push((function (e, t) { var n = t.cell; return [e, { style: r({}, Ot, { left: n.column.totalLeft + "px", width: n.column.totalWidth + "px" }) }]; })), e.getFooterProps.push((function (e, t) { var n = t.column; return [e, { style: r({}, Ot, { left: n.totalLeft + "px", width: n.totalWidth + "px" }) }]; })); }; Mt.pluginName = "useAbsoluteLayout"; var jt = function (e, t) { return [e, { style: { position: "relative", width: t.instance.totalColumnsWidth + "px" } }]; }, Lt = { display: "inline-block", boxSizing: "border-box" }, Nt = function (e, t) { return [e, { style: { display: "flex", width: t.instance.totalColumnsWidth + "px" } }]; }, Dt = function (e) { e.getRowProps.push(Nt), e.getHeaderGroupProps.push(Nt), e.getFooterGroupProps.push(Nt), e.getHeaderProps.push((function (e, t) { var n = t.column; return [e, { style: r({}, Lt, { width: n.totalWidth + "px" }) }]; })), e.getCellProps.push((function (e, t) { var n = t.cell; return [e, { style: r({}, Lt, { width: n.column.totalWidth + "px" }) }]; })), e.getFooterProps.push((function (e, t) { var n = t.column; return [e, { style: r({}, Lt, { width: n.totalWidth + "px" }) }]; })); }; function Vt(e) { e.getTableProps.push(_t), e.getRowProps.push(Xt), e.getHeaderGroupProps.push(Xt), e.getFooterGroupProps.push(Xt), e.getHeaderProps.push(qt), e.getCellProps.push(Kt), e.getFooterProps.push(Ut); } Dt.pluginName = "useBlockLayout", Vt.pluginName = "useFlexLayout"; var _t = function (e, t) { return [e, { style: { minWidth: t.instance.totalColumnsMinWidth + "px" } }]; }, Xt = function (e, t) { return [e, { style: { display: "flex", flex: "1 0 auto", minWidth: t.instance.totalColumnsMinWidth + "px" } }]; }, qt = function (e, t) { var n = t.column; return [e, { style: { boxSizing: "border-box", flex: n.totalFlexWidth ? n.totalFlexWidth + " 0 auto" : void 0, minWidth: n.totalMinWidth + "px", width: n.totalWidth + "px" } }]; }, Kt = function (e, t) { var n = t.cell; return [e, { style: { boxSizing: "border-box", flex: n.column.totalFlexWidth + " 0 auto", minWidth: n.column.totalMinWidth + "px", width: n.column.totalWidth + "px" } }]; }, Ut = function (e, t) { var n = t.column; return [e, { style: { boxSizing: "border-box", flex: n.totalFlexWidth ? n.totalFlexWidth + " 0 auto" : void 0, minWidth: n.totalMinWidth + "px", width: n.totalWidth + "px" } }]; }; function $t(e) { e.stateReducers.push(Zt), e.getTableProps.push(Jt), e.getHeaderProps.push(Yt), e.getRowProps.push(Qt); } l.columnStartResizing = "columnStartResizing", l.columnResizing = "columnResizing", l.columnDoneResizing = "columnDoneResizing", l.resetResize = "resetResize", $t.pluginName = "useGridLayout"; var Jt = function (e, t) { var n = t.instance; return [e, { style: { display: "grid", gridTemplateColumns: n.visibleColumns.map((function (e) { var t; return n.state.gridLayout.columnWidths[e.id] ? n.state.gridLayout.columnWidths[e.id] + "px" : (null == (t = n.state.columnResizing) ? void 0 : t.isResizingColumn) ? n.state.gridLayout.startWidths[e.id] + "px" : "number" == typeof e.width ? e.width + "px" : e.width; })).join(" ") } }]; }, Yt = function (e, t) { var n = t.column; return [e, { id: "header-cell-" + n.id, style: { position: "sticky", gridColumn: "span " + n.totalVisibleHeaderCount } }]; }, Qt = function (e, t) { var n = t.row; return n.isExpanded ? [e, { style: { gridColumn: "1 / " + (n.cells.length + 1) } }] : [e, {}]; }; function Zt(e, t, n, o) { if (t.type === l.init)
        return r({ gridLayout: { columnWidths: {} } }, e); if (t.type === l.resetResize)
        return r({}, e, { gridLayout: { columnWidths: {} } }); if (t.type === l.columnStartResizing) {
        var i = t.columnId, u = t.headerIdWidths, s = en(i);
        if (void 0 !== s) {
            var a = o.visibleColumns.reduce((function (e, t) { var n; return r({}, e, ((n = {})[t.id] = en(t.id), n)); }), {}), c = o.visibleColumns.reduce((function (e, t) { var n; return r({}, e, ((n = {})[t.id] = t.minWidth, n)); }), {}), d = o.visibleColumns.reduce((function (e, t) { var n; return r({}, e, ((n = {})[t.id] = t.maxWidth, n)); }), {}), f = u.map((function (e) { var t = e[0]; return [t, en(t)]; }));
            return r({}, e, { gridLayout: r({}, e.gridLayout, { startWidths: a, minWidths: c, maxWidths: d, headerIdGridWidths: f, columnWidth: s }) });
        }
        return e;
    } if (t.type === l.columnResizing) {
        var p = t.clientX, g = e.columnResizing.startX, v = e.gridLayout, m = v.columnWidth, h = v.minWidths, y = v.maxWidths, w = v.headerIdGridWidths, R = (p - g) / m, b = {};
        return (void 0 === w ? [] : w).forEach((function (e) { var t = e[0], n = e[1]; b[t] = Math.min(Math.max(h[t], n + n * R), y[t]); })), r({}, e, { gridLayout: r({}, e.gridLayout, { columnWidths: r({}, e.gridLayout.columnWidths, {}, b) }) });
    } return t.type === l.columnDoneResizing ? r({}, e, { gridLayout: r({}, e.gridLayout, { startWidths: {}, minWidths: {}, maxWidths: {} }) }) : void 0; } function en(e) { var t, n = null == (t = document.getElementById("header-cell-" + e)) ? void 0 : t.offsetWidth; if (void 0 !== n)
        return n; } e._UNSTABLE_usePivotColumns = nt, e.actions = l, e.defaultColumn = c, e.defaultGroupByFn = De, e.defaultOrderByFn = Qe, e.defaultRenderer = s, e.emptyRenderer = a, e.ensurePluginOrder = v, e.flexRender = b, e.functionalUpdate = m, e.loopHooks = g, e.makePropGetter = f, e.makeRenderer = R, e.reduceHooks = p, e.safeUseLayoutEffect = y, e.useAbsoluteLayout = Mt, e.useAsyncDebounce = function (e, n) { void 0 === n && (n = 0); var r = t.useRef({}), i = h(e), u = h(n); return t.useCallback(function () { var e = o(regeneratorRuntime.mark((function e() { var t, n, l, s = arguments; return regeneratorRuntime.wrap((function (e) { for (;;)
        switch (e.prev = e.next) {
            case 0:
                for (t = s.length, n = new Array(t), l = 0; l < t; l++)
                    n[l] = s[l];
                return r.current.promise || (r.current.promise = new Promise((function (e, t) { r.current.resolve = e, r.current.reject = t; }))), r.current.timeout && clearTimeout(r.current.timeout), r.current.timeout = setTimeout(o(regeneratorRuntime.mark((function e() { return regeneratorRuntime.wrap((function (e) { for (;;)
                    switch (e.prev = e.next) {
                        case 0: return delete r.current.timeout, e.prev = 1, e.t0 = r.current, e.next = 5, i().apply(void 0, n);
                        case 5:
                            e.t1 = e.sent, e.t0.resolve.call(e.t0, e.t1), e.next = 12;
                            break;
                        case 9: e.prev = 9, e.t2 = e.catch(1), r.current.reject(e.t2);
                        case 12: return e.prev = 12, delete r.current.promise, e.finish(12);
                        case 15:
                        case "end": return e.stop();
                    } }), e, null, [[1, 9, 12, 15]]); }))), u()), e.abrupt("return", r.current.promise);
            case 5:
            case "end": return e.stop();
        } }), e); }))); return function () { return e.apply(this, arguments); }; }(), [i, u]); }, e.useBlockLayout = Dt, e.useColumnOrder = It, e.useExpanded = se, e.useFilters = Pe, e.useFlexLayout = Vt, e.useGetLatest = h, e.useGlobalFilter = Ie, e.useGridLayout = $t, e.useGroupBy = ze, e.useMountedLayoutEffect = w, e.usePagination = Ze, e.useResizeColumns = kt, e.useRowSelect = vt, e.useRowState = xt, e.useSortBy = Ue, e.useTable = function (e) { for (var n = arguments.length, o = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)
        o[i - 1] = arguments[i]; e = ie(e), o = [K].concat(o); var u = t.useRef({}), s = h(u.current); Object.assign(s(), r({}, e, { plugins: o, hooks: q() })), o.filter(Boolean).forEach((function (e) { e(s().hooks); })); var a = h(s().hooks); s().getHooks = a, delete s().hooks, Object.assign(s(), p(a().useOptions, ie(e))); var c = s(), d = c.data, v = c.columns, m = c.initialState, y = c.defaultColumn, w = c.getSubRows, b = c.getRowId, E = c.stateReducer, I = c.useControlledState, F = h(E), G = t.useCallback((function (e, t) { if (!t.type)
        throw console.info({ action: t }), new Error("Unknown Action 👆"); return [].concat(a().stateReducers, Array.isArray(F()) ? F() : [F()]).reduce((function (n, o) { return o(n, t, e, s()) || n; }), e); }), [a, F, s]), A = t.useReducer(G, void 0, (function () { return G(m, { type: l.init }); })), k = A[0], H = A[1], W = p([].concat(a().useControlledState, [I]), k, { instance: s() }); Object.assign(s(), { state: W, dispatch: H }); var z = t.useMemo((function () { return S(p(a().columns, v, { instance: s() })); }), [a, s, v].concat(p(a().columnsDeps, [], { instance: s() }))); s().columns = z; var T = t.useMemo((function () { return p(a().allColumns, C(z), { instance: s() }).map(x); }), [z, a, s].concat(p(a().allColumnsDeps, [], { instance: s() }))); s().allColumns = T; var O = t.useMemo((function () { for (var e = [], t = [], n = {}, o = [].concat(T); o.length;) {
        var r = o.shift();
        le({ data: d, rows: e, flatRows: t, rowsById: n, column: r, getRowId: b, getSubRows: w, accessValueHooks: a().accessValue, getInstance: s });
    } return [e, t, n]; }), [T, d, b, w, a, s]), M = O[0], j = O[1], L = O[2]; Object.assign(s(), { rows: M, initialRows: [].concat(M), flatRows: j, rowsById: L }), g(a().useInstanceAfterData, s()); var N = t.useMemo((function () { return p(a().visibleColumns, T, { instance: s() }).map((function (e) { return P(e, y); })); }), [a, T, s, y].concat(p(a().visibleColumnsDeps, [], { instance: s() }))); T = t.useMemo((function () { var e = [].concat(N); return T.forEach((function (t) { e.find((function (e) { return e.id === t.id; })) || e.push(t); })), e; }), [T, N]), s().allColumns = T; var D = t.useMemo((function () { return p(a().headerGroups, B(N, y), s()); }), [a, N, y, s].concat(p(a().headerGroupsDeps, [], { instance: s() }))); s().headerGroups = D; var V = t.useMemo((function () { return D.length ? D[0].headers : []; }), [D]); s().headers = V, s().flatHeaders = D.reduce((function (e, t) { return [].concat(e, t.headers); }), []), g(a().useInstanceBeforeDimensions, s()); var _ = N.filter((function (e) { return e.isVisible; })).map((function (e) { return e.id; })).sort().join("_"); N = t.useMemo((function () { return N.filter((function (e) { return e.isVisible; })); }), [N, _]), s().visibleColumns = N; var X = ue(V), U = X[0], $ = X[1], J = X[2]; return s().totalColumnsMinWidth = U, s().totalColumnsWidth = $, s().totalColumnsMaxWidth = J, g(a().useInstance, s()), [].concat(s().flatHeaders, s().allColumns).forEach((function (e) { e.render = R(s(), e), e.getHeaderProps = f(a().getHeaderProps, { instance: s(), column: e }), e.getFooterProps = f(a().getFooterProps, { instance: s(), column: e }); })), s().headerGroups = t.useMemo((function () { return D.filter((function (e, t) { return e.headers = e.headers.filter((function (e) { return e.headers ? function e(t) { return t.filter((function (t) { return t.headers ? e(t.headers) : t.isVisible; })).length; }(e.headers) : e.isVisible; })), !!e.headers.length && (e.getHeaderGroupProps = f(a().getHeaderGroupProps, { instance: s(), headerGroup: e, index: t }), e.getFooterGroupProps = f(a().getFooterGroupProps, { instance: s(), headerGroup: e, index: t }), !0); })); }), [D, s, a]), s().footerGroups = [].concat(s().headerGroups).reverse(), s().prepareRow = t.useCallback((function (e) { e.getRowProps = f(a().getRowProps, { instance: s(), row: e }), e.allCells = T.map((function (t) { var n = e.values[t.id], o = { column: t, row: e, value: n }; return o.getCellProps = f(a().getCellProps, { instance: s(), cell: o }), o.render = R(s(), t, { row: e, cell: o, value: n }), o; })), e.cells = N.map((function (t) { return e.allCells.find((function (e) { return e.column.id === t.id; })); })), g(a().prepareRow, e, { instance: s() }); }), [a, s, T, N]), s().getTableProps = f(a().getTableProps, { instance: s() }), s().getTableBodyProps = f(a().getTableBodyProps, { instance: s() }), g(a().useFinalInstance, s()), s(); }, Object.defineProperty(e, "__esModule", { value: !0 }); }));
}(reactTable_production_min, reactTable_production_min.exports));
var reactTable_development = { exports: {} };
(function (module, exports) {
    (function (global, factory) {
        factory(exports, react_1.default);
    }(commonjsGlobal, (function (exports, React) {
        React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            }
            catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            }
            else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function () {
                var self = this, args = arguments;
                return new Promise(function (resolve, reject) {
                    var gen = fn.apply(self, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                    }
                    _next(undefined);
                });
            };
        }
        function _extends() {
            _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            };
            return _extends.apply(this, arguments);
        }
        function _objectWithoutPropertiesLoose(source, excluded) {
            if (source == null)
                return {};
            var target = {};
            var sourceKeys = Object.keys(source);
            var key, i;
            for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0)
                    continue;
                target[key] = source[key];
            }
            return target;
        }
        function _toPrimitive(input, hint) {
            if (typeof input !== "object" || input === null)
                return input;
            var prim = input[Symbol.toPrimitive];
            if (prim !== undefined) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                    return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return (hint === "string" ? String : Number)(input);
        }
        function _toPropertyKey(arg) {
            var key = _toPrimitive(arg, "string");
            return typeof key === "symbol" ? key : String(key);
        }
        var renderErr = 'Renderer Error ☝️';
        var actions = {
            init: 'init'
        };
        var defaultRenderer = function defaultRenderer(_ref) {
            var _ref$value = _ref.value, value = _ref$value === void 0 ? '' : _ref$value;
            return value;
        };
        var emptyRenderer = function emptyRenderer() {
            return React.createElement(React.Fragment, null, "\xA0");
        };
        var defaultColumn = {
            Cell: defaultRenderer,
            width: 150,
            minWidth: 0,
            maxWidth: Number.MAX_SAFE_INTEGER
        };
        function mergeProps() {
            for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {
                propList[_key] = arguments[_key];
            }
            return propList.reduce(function (props, next) {
                var style = next.style, className = next.className, rest = _objectWithoutPropertiesLoose(next, ["style", "className"]);
                props = _extends({}, props, {}, rest);
                if (style) {
                    props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;
                }
                if (className) {
                    props.className = props.className ? props.className + ' ' + className : className;
                }
                if (props.className === '') {
                    delete props.className;
                }
                return props;
            }, {});
        }
        function handlePropGetter(prevProps, userProps, meta) {
            // Handle a lambda, pass it the previous props
            if (typeof userProps === 'function') {
                return handlePropGetter({}, userProps(prevProps, meta));
            } // Handle an array, merge each item as separate props
            if (Array.isArray(userProps)) {
                return mergeProps.apply(void 0, [prevProps].concat(userProps));
            } // Handle an object by default, merge the two objects
            return mergeProps(prevProps, userProps);
        }
        var makePropGetter = function makePropGetter(hooks, meta) {
            if (meta === void 0) {
                meta = {};
            }
            return function (userProps) {
                if (userProps === void 0) {
                    userProps = {};
                }
                return [].concat(hooks, [userProps]).reduce(function (prev, next) {
                    return handlePropGetter(prev, next, _extends({}, meta, {
                        userProps: userProps
                    }));
                }, {});
            };
        };
        var reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {
            if (meta === void 0) {
                meta = {};
            }
            return hooks.reduce(function (prev, next) {
                var nextValue = next(prev, meta);
                {
                    if (!allowUndefined && typeof nextValue === 'undefined') {
                        console.info(next);
                        throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');
                    }
                }
                return nextValue;
            }, initial);
        };
        var loopHooks = function loopHooks(hooks, context, meta) {
            if (meta === void 0) {
                meta = {};
            }
            return hooks.forEach(function (hook) {
                var nextValue = hook(context, meta);
                {
                    if (typeof nextValue !== 'undefined') {
                        console.info(hook, nextValue);
                        throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');
                    }
                }
            });
        };
        function ensurePluginOrder(plugins, befores, pluginName, afters) {
            if (afters) {
                throw new Error("Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin " + pluginName + ")");
            }
            var pluginIndex = plugins.findIndex(function (plugin) {
                return plugin.pluginName === pluginName;
            });
            if (pluginIndex === -1) {
                {
                    throw new Error("The plugin \"" + pluginName + "\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  " + pluginName + ".pluginName = '" + pluginName + "'\n");
                }
            }
            befores.forEach(function (before) {
                var beforeIndex = plugins.findIndex(function (plugin) {
                    return plugin.pluginName === before;
                });
                if (beforeIndex > -1 && beforeIndex > pluginIndex) {
                    {
                        throw new Error("React Table: The " + pluginName + " plugin hook must be placed after the " + before + " plugin hook!");
                    }
                }
            });
        }
        function functionalUpdate(updater, old) {
            return typeof updater === 'function' ? updater(old) : updater;
        }
        function useGetLatest(obj) {
            var ref = React.useRef();
            ref.current = obj;
            return React.useCallback(function () {
                return ref.current;
            }, []);
        } // SSR has issues with useLayoutEffect still, so use useEffect during SSR
        var safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;
        function useMountedLayoutEffect(fn, deps) {
            var mountedRef = React.useRef(false);
            safeUseLayoutEffect(function () {
                if (mountedRef.current) {
                    fn();
                }
                mountedRef.current = true; // eslint-disable-next-line
            }, deps);
        }
        function useAsyncDebounce(defaultFn, defaultWait) {
            if (defaultWait === void 0) {
                defaultWait = 0;
            }
            var debounceRef = React.useRef({});
            var getDefaultFn = useGetLatest(defaultFn);
            var getDefaultWait = useGetLatest(defaultWait);
            return React.useCallback(
            /*#__PURE__*/
            function () {
                var _ref2 = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee2() {
                    var _len2, args, _key2, _args2 = arguments;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                        args[_key2] = _args2[_key2];
                                    }
                                    if (!debounceRef.current.promise) {
                                        debounceRef.current.promise = new Promise(function (resolve, reject) {
                                            debounceRef.current.resolve = resolve;
                                            debounceRef.current.reject = reject;
                                        });
                                    }
                                    if (debounceRef.current.timeout) {
                                        clearTimeout(debounceRef.current.timeout);
                                    }
                                    debounceRef.current.timeout = setTimeout(
                                    /*#__PURE__*/
                                    _asyncToGenerator(
                                    /*#__PURE__*/
                                    regeneratorRuntime.mark(function _callee() {
                                        return regeneratorRuntime.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        delete debounceRef.current.timeout;
                                                        _context.prev = 1;
                                                        _context.t0 = debounceRef.current;
                                                        _context.next = 5;
                                                        return getDefaultFn().apply(void 0, args);
                                                    case 5:
                                                        _context.t1 = _context.sent;
                                                        _context.t0.resolve.call(_context.t0, _context.t1);
                                                        _context.next = 12;
                                                        break;
                                                    case 9:
                                                        _context.prev = 9;
                                                        _context.t2 = _context["catch"](1);
                                                        debounceRef.current.reject(_context.t2);
                                                    case 12:
                                                        _context.prev = 12;
                                                        delete debounceRef.current.promise;
                                                        return _context.finish(12);
                                                    case 15:
                                                    case "end":
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, null, [[1, 9, 12, 15]]);
                                    })), getDefaultWait());
                                    return _context2.abrupt("return", debounceRef.current.promise);
                                case 5:
                                case "end":
                                    return _context2.stop();
                            }
                        }
                    }, _callee2);
                }));
                return function () {
                    return _ref2.apply(this, arguments);
                };
            }(), [getDefaultFn, getDefaultWait]);
        }
        function makeRenderer(instance, column, meta) {
            if (meta === void 0) {
                meta = {};
            }
            return function (type, userProps) {
                if (userProps === void 0) {
                    userProps = {};
                }
                var Comp = typeof type === 'string' ? column[type] : type;
                if (typeof Comp === 'undefined') {
                    console.info(column);
                    throw new Error(renderErr);
                }
                return flexRender(Comp, _extends({}, instance, {
                    column: column
                }, meta, {}, userProps));
            };
        }
        function flexRender(Comp, props) {
            return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;
        }
        function isReactComponent(component) {
            return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);
        }
        function isClassComponent(component) {
            return typeof component === 'function' && function () {
                var proto = Object.getPrototypeOf(component);
                return proto.prototype && proto.prototype.isReactComponent;
            }();
        }
        function isExoticComponent(component) {
            return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);
        }
        function linkColumnStructure(columns, parent, depth) {
            if (depth === void 0) {
                depth = 0;
            }
            return columns.map(function (column) {
                column = _extends({}, column, {
                    parent: parent,
                    depth: depth
                });
                assignColumnAccessor(column);
                if (column.columns) {
                    column.columns = linkColumnStructure(column.columns, column, depth + 1);
                }
                return column;
            });
        }
        function flattenColumns(columns) {
            return flattenBy(columns, 'columns');
        }
        function assignColumnAccessor(column) {
            // First check for string accessor
            var id = column.id, accessor = column.accessor, Header = column.Header;
            if (typeof accessor === 'string') {
                id = id || accessor;
                var accessorPath = accessor.split('.');
                accessor = function accessor(row) {
                    return getBy(row, accessorPath);
                };
            }
            if (!id && typeof Header === 'string' && Header) {
                id = Header;
            }
            if (!id && column.columns) {
                console.error(column);
                throw new Error('A column ID (or unique "Header" value) is required!');
            }
            if (!id) {
                console.error(column);
                throw new Error('A column ID (or string accessor) is required!');
            }
            Object.assign(column, {
                id: id,
                accessor: accessor
            });
            return column;
        }
        function decorateColumn(column, userDefaultColumn) {
            if (!userDefaultColumn) {
                throw new Error();
            }
            Object.assign(column, _extends({
                // Make sure there is a fallback header, just in case
                Header: emptyRenderer,
                Footer: emptyRenderer
            }, defaultColumn, {}, userDefaultColumn, {}, column));
            Object.assign(column, {
                originalWidth: column.width
            });
            return column;
        } // Build the header groups from the bottom up
        function makeHeaderGroups(allColumns, defaultColumn, additionalHeaderProperties) {
            if (additionalHeaderProperties === void 0) {
                additionalHeaderProperties = function additionalHeaderProperties() {
                    return {};
                };
            }
            var headerGroups = [];
            var scanColumns = allColumns;
            var uid = 0;
            var getUID = function getUID() {
                return uid++;
            };
            var _loop = function _loop() {
                // The header group we are creating
                var headerGroup = {
                    headers: []
                }; // The parent columns we're going to scan next
                var parentColumns = [];
                var hasParents = scanColumns.some(function (d) {
                    return d.parent;
                }); // Scan each column for parents
                scanColumns.forEach(function (column) {
                    // What is the latest (last) parent column?
                    var latestParentColumn = [].concat(parentColumns).reverse()[0];
                    var newParent;
                    if (hasParents) {
                        // If the column has a parent, add it if necessary
                        if (column.parent) {
                            newParent = _extends({}, column.parent, {
                                originalId: column.parent.id,
                                id: column.parent.id + "_" + getUID(),
                                headers: [column]
                            }, additionalHeaderProperties(column));
                        }
                        else {
                            // If other columns have parents, we'll need to add a place holder if necessary
                            var originalId = column.id + "_placeholder";
                            newParent = decorateColumn(_extends({
                                originalId: originalId,
                                id: column.id + "_placeholder_" + getUID(),
                                placeholderOf: column,
                                headers: [column]
                            }, additionalHeaderProperties(column)), defaultColumn);
                        } // If the resulting parent columns are the same, just add
                        // the column and increment the header span
                        if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {
                            latestParentColumn.headers.push(column);
                        }
                        else {
                            parentColumns.push(newParent);
                        }
                    }
                    headerGroup.headers.push(column);
                });
                headerGroups.push(headerGroup); // Start scanning the parent columns
                scanColumns = parentColumns;
            };
            while (scanColumns.length) {
                _loop();
            }
            return headerGroups.reverse();
        }
        var pathObjCache = new Map();
        function getBy(obj, path, def) {
            if (!path) {
                return obj;
            }
            var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);
            var pathObj = pathObjCache.get(cacheKey) || function () {
                var pathObj = makePathArray(path);
                pathObjCache.set(cacheKey, pathObj);
                return pathObj;
            }();
            var val;
            try {
                val = pathObj.reduce(function (cursor, pathPart) {
                    return cursor[pathPart];
                }, obj);
            }
            catch (e) { // continue regardless of error
            }
            return typeof val !== 'undefined' ? val : def;
        }
        function getFirstDefined() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            for (var i = 0; i < args.length; i += 1) {
                if (typeof args[i] !== 'undefined') {
                    return args[i];
                }
            }
        }
        function isFunction(a) {
            if (typeof a === 'function') {
                return a;
            }
        }
        function flattenBy(arr, key) {
            var flat = [];
            var recurse = function recurse(arr) {
                arr.forEach(function (d) {
                    if (!d[key]) {
                        flat.push(d);
                    }
                    else {
                        recurse(d[key]);
                    }
                });
            };
            recurse(arr);
            return flat;
        }
        function expandRows(rows, _ref) {
            var manualExpandedKey = _ref.manualExpandedKey, expanded = _ref.expanded, _ref$expandSubRows = _ref.expandSubRows, expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;
            var expandedRows = [];
            var handleRow = function handleRow(row, addToExpandedRows) {
                if (addToExpandedRows === void 0) {
                    addToExpandedRows = true;
                }
                row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];
                row.canExpand = row.subRows && !!row.subRows.length;
                if (addToExpandedRows) {
                    expandedRows.push(row);
                }
                if (row.subRows && row.subRows.length && row.isExpanded) {
                    row.subRows.forEach(function (row) {
                        return handleRow(row, expandSubRows);
                    });
                }
            };
            rows.forEach(function (row) {
                return handleRow(row);
            });
            return expandedRows;
        }
        function getFilterMethod(filter, userFilterTypes, filterTypes) {
            return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;
        }
        function shouldAutoRemoveFilter(autoRemove, value, column) {
            return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';
        }
        function unpreparedAccessWarning() {
            throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');
        }
        var passiveSupported = null;
        function passiveEventSupported() {
            // memoize support to avoid adding multiple test events
            if (typeof passiveSupported === 'boolean')
                return passiveSupported;
            var supported = false;
            try {
                var options = {
                    get passive() {
                        supported = true;
                        return false;
                    }
                };
                window.addEventListener('test', null, options);
                window.removeEventListener('test', null, options);
            }
            catch (err) {
                supported = false;
            }
            passiveSupported = supported;
            return passiveSupported;
        } //
        var reOpenBracket = /\[/g;
        var reCloseBracket = /\]/g;
        function makePathArray(obj) {
            return flattenDeep(obj) // remove all periods in parts
                .map(function (d) {
                return String(d).replace('.', '_');
            }) // join parts using period
                .join('.') // replace brackets with periods
                .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods
                .split('.');
        }
        function flattenDeep(arr, newArr) {
            if (newArr === void 0) {
                newArr = [];
            }
            if (!Array.isArray(arr)) {
                newArr.push(arr);
            }
            else {
                for (var i = 0; i < arr.length; i += 1) {
                    flattenDeep(arr[i], newArr);
                }
            }
            return newArr;
        }
        var defaultGetTableProps = function defaultGetTableProps(props) {
            return _extends({
                role: 'table'
            }, props);
        };
        var defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {
            return _extends({
                role: 'rowgroup'
            }, props);
        };
        var defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {
            var column = _ref.column;
            return _extends({
                key: "header_" + column.id,
                colSpan: column.totalVisibleHeaderCount,
                role: 'columnheader'
            }, props);
        };
        var defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {
            var column = _ref2.column;
            return _extends({
                key: "footer_" + column.id,
                colSpan: column.totalVisibleHeaderCount
            }, props);
        };
        var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {
            var index = _ref3.index;
            return _extends({
                key: "headerGroup_" + index,
                role: 'row'
            }, props);
        };
        var defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {
            var index = _ref4.index;
            return _extends({
                key: "footerGroup_" + index
            }, props);
        };
        var defaultGetRowProps = function defaultGetRowProps(props, _ref5) {
            var row = _ref5.row;
            return _extends({
                key: "row_" + row.id,
                role: 'row'
            }, props);
        };
        var defaultGetCellProps = function defaultGetCellProps(props, _ref6) {
            var cell = _ref6.cell;
            return _extends({
                key: "cell_" + cell.row.id + "_" + cell.column.id,
                role: 'cell'
            }, props);
        };
        function makeDefaultPluginHooks() {
            return {
                useOptions: [],
                stateReducers: [],
                useControlledState: [],
                columns: [],
                columnsDeps: [],
                allColumns: [],
                allColumnsDeps: [],
                accessValue: [],
                materializedColumns: [],
                materializedColumnsDeps: [],
                useInstanceAfterData: [],
                visibleColumns: [],
                visibleColumnsDeps: [],
                headerGroups: [],
                headerGroupsDeps: [],
                useInstanceBeforeDimensions: [],
                useInstance: [],
                prepareRow: [],
                getTableProps: [defaultGetTableProps],
                getTableBodyProps: [defaultGetTableBodyProps],
                getHeaderGroupProps: [defaultGetHeaderGroupProps],
                getFooterGroupProps: [defaultGetFooterGroupProps],
                getHeaderProps: [defaultGetHeaderProps],
                getFooterProps: [defaultGetFooterProps],
                getRowProps: [defaultGetRowProps],
                getCellProps: [defaultGetCellProps],
                useFinalInstance: []
            };
        }
        actions.resetHiddenColumns = 'resetHiddenColumns';
        actions.toggleHideColumn = 'toggleHideColumn';
        actions.setHiddenColumns = 'setHiddenColumns';
        actions.toggleHideAllColumns = 'toggleHideAllColumns';
        var useColumnVisibility = function useColumnVisibility(hooks) {
            hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];
            hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];
            hooks.stateReducers.push(reducer);
            hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);
            hooks.headerGroupsDeps.push(function (deps, _ref) {
                var instance = _ref.instance;
                return [].concat(deps, [instance.state.hiddenColumns]);
            });
            hooks.useInstance.push(useInstance);
        };
        useColumnVisibility.pluginName = 'useColumnVisibility';
        var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {
            var column = _ref2.column;
            return [props, {
                    onChange: function onChange(e) {
                        column.toggleHidden(!e.target.checked);
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    checked: column.isVisible,
                    title: 'Toggle Column Visible'
                }];
        };
        var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {
            var instance = _ref3.instance;
            return [props, {
                    onChange: function onChange(e) {
                        instance.toggleHideAllColumns(!e.target.checked);
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,
                    title: 'Toggle All Columns Hidden',
                    indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length
                }];
        };
        function reducer(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    hiddenColumns: []
                }, state);
            }
            if (action.type === actions.resetHiddenColumns) {
                return _extends({}, state, {
                    hiddenColumns: instance.initialState.hiddenColumns || []
                });
            }
            if (action.type === actions.toggleHideColumn) {
                var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);
                var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {
                    return d !== action.columnId;
                });
                return _extends({}, state, {
                    hiddenColumns: hiddenColumns
                });
            }
            if (action.type === actions.setHiddenColumns) {
                return _extends({}, state, {
                    hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)
                });
            }
            if (action.type === actions.toggleHideAllColumns) {
                var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;
                return _extends({}, state, {
                    hiddenColumns: shouldAll ? instance.allColumns.map(function (d) {
                        return d.id;
                    }) : []
                });
            }
        }
        function useInstanceBeforeDimensions(instance) {
            var headers = instance.headers, hiddenColumns = instance.state.hiddenColumns;
            var isMountedRef = React.useRef(false);
            if (!isMountedRef.current)
                ;
            var handleColumn = function handleColumn(column, parentVisible) {
                column.isVisible = parentVisible && !hiddenColumns.includes(column.id);
                var totalVisibleHeaderCount = 0;
                if (column.headers && column.headers.length) {
                    column.headers.forEach(function (subColumn) {
                        return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);
                    });
                }
                else {
                    totalVisibleHeaderCount = column.isVisible ? 1 : 0;
                }
                column.totalVisibleHeaderCount = totalVisibleHeaderCount;
                return totalVisibleHeaderCount;
            };
            var totalVisibleHeaderCount = 0;
            headers.forEach(function (subHeader) {
                return totalVisibleHeaderCount += handleColumn(subHeader, true);
            });
        }
        function useInstance(instance) {
            var columns = instance.columns, flatHeaders = instance.flatHeaders, dispatch = instance.dispatch, allColumns = instance.allColumns, getHooks = instance.getHooks, hiddenColumns = instance.state.hiddenColumns, _instance$autoResetHi = instance.autoResetHiddenColumns, autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;
            var getInstance = useGetLatest(instance);
            var allColumnsHidden = allColumns.length === hiddenColumns.length;
            var toggleHideColumn = React.useCallback(function (columnId, value) {
                return dispatch({
                    type: actions.toggleHideColumn,
                    columnId: columnId,
                    value: value
                });
            }, [dispatch]);
            var setHiddenColumns = React.useCallback(function (value) {
                return dispatch({
                    type: actions.setHiddenColumns,
                    value: value
                });
            }, [dispatch]);
            var toggleHideAllColumns = React.useCallback(function (value) {
                return dispatch({
                    type: actions.toggleHideAllColumns,
                    value: value
                });
            }, [dispatch]);
            var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {
                instance: getInstance()
            });
            flatHeaders.forEach(function (column) {
                column.toggleHidden = function (value) {
                    dispatch({
                        type: actions.toggleHideColumn,
                        columnId: column.id,
                        value: value
                    });
                };
                column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {
                    instance: getInstance(),
                    column: column
                });
            });
            var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);
            useMountedLayoutEffect(function () {
                if (getAutoResetHiddenColumns()) {
                    dispatch({
                        type: actions.resetHiddenColumns
                    });
                }
            }, [dispatch, columns]);
            Object.assign(instance, {
                allColumnsHidden: allColumnsHidden,
                toggleHideColumn: toggleHideColumn,
                setHiddenColumns: setHiddenColumns,
                toggleHideAllColumns: toggleHideAllColumns,
                getToggleHideAllColumnsProps: getToggleHideAllColumnsProps
            });
        }
        var defaultInitialState = {};
        var defaultColumnInstance = {};
        var defaultReducer = function defaultReducer(state, action, prevState) {
            return state;
        };
        var defaultGetSubRows = function defaultGetSubRows(row, index) {
            return row.subRows || [];
        };
        var defaultGetRowId = function defaultGetRowId(row, index, parent) {
            return "" + (parent ? [parent.id, index].join('.') : index);
        };
        var defaultUseControlledState = function defaultUseControlledState(d) {
            return d;
        };
        function applyDefaults(props) {
            var _props$initialState = props.initialState, initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState, _props$defaultColumn = props.defaultColumn, defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn, _props$getSubRows = props.getSubRows, getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows, _props$getRowId = props.getRowId, getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId, _props$stateReducer = props.stateReducer, stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer, _props$useControlledS = props.useControlledState, useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS, rest = _objectWithoutPropertiesLoose(props, ["initialState", "defaultColumn", "getSubRows", "getRowId", "stateReducer", "useControlledState"]);
            return _extends({}, rest, {
                initialState: initialState,
                defaultColumn: defaultColumn,
                getSubRows: getSubRows,
                getRowId: getRowId,
                stateReducer: stateReducer,
                useControlledState: useControlledState
            });
        }
        var useTable = function useTable(props) {
            for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                plugins[_key - 1] = arguments[_key];
            }
            // Apply default props
            props = applyDefaults(props); // Add core plugins
            plugins = [useColumnVisibility].concat(plugins); // Create the table instance
            var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)
            var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance
            Object.assign(getInstance(), _extends({}, props, {
                plugins: plugins,
                hooks: makeDefaultPluginHooks()
            })); // Allow plugins to register hooks as early as possible
            plugins.filter(Boolean).forEach(function (plugin) {
                plugin(getInstance().hooks);
            }); // Consume all hooks and make a getter for them
            var getHooks = useGetLatest(getInstance().hooks);
            getInstance().getHooks = getHooks;
            delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table
            Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));
            var _getInstance = getInstance(), data = _getInstance.data, userColumns = _getInstance.columns, initialState = _getInstance.initialState, defaultColumn = _getInstance.defaultColumn, getSubRows = _getInstance.getSubRows, getRowId = _getInstance.getRowId, stateReducer = _getInstance.stateReducer, useControlledState = _getInstance.useControlledState; // Setup user reducer ref
            var getStateReducer = useGetLatest(stateReducer); // Build the reducer
            var reducer = React.useCallback(function (state, action) {
                // Detect invalid actions
                if (!action.type) {
                    console.info({
                        action: action
                    });
                    throw new Error('Unknown Action 👆');
                } // Reduce the state from all plugin reducers
                return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {
                    return handler(s, action, state, getInstance()) || s;
                }, state);
            }, [getHooks, getStateReducer, getInstance]); // Start the reducer
            var _React$useReducer = React.useReducer(reducer, undefined, function () {
                return reducer(initialState, {
                    type: actions.init
                });
            }), reducerState = _React$useReducer[0], dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks
            var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {
                instance: getInstance()
            });
            Object.assign(getInstance(), {
                state: state,
                dispatch: dispatch
            }); // Decorate All the columns
            var columns = React.useMemo(function () {
                return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {
                    instance: getInstance()
                }));
            }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {
                instance: getInstance()
            })));
            getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate
            // those columns (and trigger this memoization via deps)
            var allColumns = React.useMemo(function () {
                return reduceHooks(getHooks().allColumns, flattenColumns(columns), {
                    instance: getInstance()
                }).map(assignColumnAccessor);
            }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {
                instance: getInstance()
            })));
            getInstance().allColumns = allColumns; // Access the row model using initial columns
            var _React$useMemo = React.useMemo(function () {
                var rows = [];
                var flatRows = [];
                var rowsById = {};
                var allColumnsQueue = [].concat(allColumns);
                while (allColumnsQueue.length) {
                    var column = allColumnsQueue.shift();
                    accessRowsForColumn({
                        data: data,
                        rows: rows,
                        flatRows: flatRows,
                        rowsById: rowsById,
                        column: column,
                        getRowId: getRowId,
                        getSubRows: getSubRows,
                        accessValueHooks: getHooks().accessValue,
                        getInstance: getInstance
                    });
                }
                return [rows, flatRows, rowsById];
            }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]), rows = _React$useMemo[0], flatRows = _React$useMemo[1], rowsById = _React$useMemo[2];
            Object.assign(getInstance(), {
                rows: rows,
                initialRows: [].concat(rows),
                flatRows: flatRows,
                rowsById: rowsById // materializedColumns,
            });
            loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows
            // have been access, and allow hooks to decorate
            // those columns (and trigger this memoization via deps)
            var visibleColumns = React.useMemo(function () {
                return reduceHooks(getHooks().visibleColumns, allColumns, {
                    instance: getInstance()
                }).map(function (d) {
                    return decorateColumn(d, defaultColumn);
                });
            }, [getHooks, allColumns, getInstance, defaultColumn].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {
                instance: getInstance()
            }))); // Combine new visible columns with all columns
            allColumns = React.useMemo(function () {
                var columns = [].concat(visibleColumns);
                allColumns.forEach(function (column) {
                    if (!columns.find(function (d) {
                        return d.id === column.id;
                    })) {
                        columns.push(column);
                    }
                });
                return columns;
            }, [allColumns, visibleColumns]);
            getInstance().allColumns = allColumns;
            {
                var duplicateColumns = allColumns.filter(function (column, i) {
                    return allColumns.findIndex(function (d) {
                        return d.id === column.id;
                    }) !== i;
                });
                if (duplicateColumns.length) {
                    console.info(allColumns);
                    throw new Error("Duplicate columns were found with ids: \"" + duplicateColumns.map(function (d) {
                        return d.id;
                    }).join(', ') + "\" in the columns array above");
                }
            } // Make the headerGroups
            var headerGroups = React.useMemo(function () {
                return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());
            }, [getHooks, visibleColumns, defaultColumn, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {
                instance: getInstance()
            })));
            getInstance().headerGroups = headerGroups; // Get the first level of headers
            var headers = React.useMemo(function () {
                return headerGroups.length ? headerGroups[0].headers : [];
            }, [headerGroups]);
            getInstance().headers = headers; // Provide a flat header list for utilities
            getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {
                return [].concat(all, headerGroup.headers);
            }, []);
            loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones
            var visibleColumnsDep = visibleColumns.filter(function (d) {
                return d.isVisible;
            }).map(function (d) {
                return d.id;
            }).sort().join('_');
            visibleColumns = React.useMemo(function () {
                return visibleColumns.filter(function (d) {
                    return d.isVisible;
                });
            }, // eslint-disable-next-line react-hooks/exhaustive-deps
            [visibleColumns, visibleColumnsDep]);
            getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point
            var _calculateHeaderWidth = calculateHeaderWidths(headers), totalColumnsMinWidth = _calculateHeaderWidth[0], totalColumnsWidth = _calculateHeaderWidth[1], totalColumnsMaxWidth = _calculateHeaderWidth[2];
            getInstance().totalColumnsMinWidth = totalColumnsMinWidth;
            getInstance().totalColumnsWidth = totalColumnsWidth;
            getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;
            loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other
            ;
            [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function (column) {
                // Give columns/headers rendering power
                column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps
                column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {
                    instance: getInstance(),
                    column: column
                }); // Give columns/headers a default getFooterProps
                column.getFooterProps = makePropGetter(getHooks().getFooterProps, {
                    instance: getInstance(),
                    column: column
                });
            });
            getInstance().headerGroups = React.useMemo(function () {
                return headerGroups.filter(function (headerGroup, i) {
                    // Filter out any headers and headerGroups that don't have visible columns
                    headerGroup.headers = headerGroup.headers.filter(function (column) {
                        var recurse = function recurse(headers) {
                            return headers.filter(function (column) {
                                if (column.headers) {
                                    return recurse(column.headers);
                                }
                                return column.isVisible;
                            }).length;
                        };
                        if (column.headers) {
                            return recurse(column.headers);
                        }
                        return column.isVisible;
                    }); // Give headerGroups getRowProps
                    if (headerGroup.headers.length) {
                        headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {
                            instance: getInstance(),
                            headerGroup: headerGroup,
                            index: i
                        });
                        headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {
                            instance: getInstance(),
                            headerGroup: headerGroup,
                            index: i
                        });
                        return true;
                    }
                    return false;
                });
            }, [headerGroups, getInstance, getHooks]);
            getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on
            // any rows the user wishes to be displayed.
            getInstance().prepareRow = React.useCallback(function (row) {
                row.getRowProps = makePropGetter(getHooks().getRowProps, {
                    instance: getInstance(),
                    row: row
                }); // Build the visible cells for each row
                row.allCells = allColumns.map(function (column) {
                    var value = row.values[column.id];
                    var cell = {
                        column: column,
                        row: row,
                        value: value
                    }; // Give each cell a getCellProps base
                    cell.getCellProps = makePropGetter(getHooks().getCellProps, {
                        instance: getInstance(),
                        cell: cell
                    }); // Give each cell a renderer function (supports multiple renderers)
                    cell.render = makeRenderer(getInstance(), column, {
                        row: row,
                        cell: cell,
                        value: value
                    });
                    return cell;
                });
                row.cells = visibleColumns.map(function (column) {
                    return row.allCells.find(function (cell) {
                        return cell.column.id === column.id;
                    });
                }); // need to apply any row specific hooks (useExpanded requires this)
                loopHooks(getHooks().prepareRow, row, {
                    instance: getInstance()
                });
            }, [getHooks, getInstance, allColumns, visibleColumns]);
            getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {
                instance: getInstance()
            });
            getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {
                instance: getInstance()
            });
            loopHooks(getHooks().useFinalInstance, getInstance());
            return getInstance();
        };
        function calculateHeaderWidths(headers, left) {
            if (left === void 0) {
                left = 0;
            }
            var sumTotalMinWidth = 0;
            var sumTotalWidth = 0;
            var sumTotalMaxWidth = 0;
            var sumTotalFlexWidth = 0;
            headers.forEach(function (header) {
                var subHeaders = header.headers;
                header.totalLeft = left;
                if (subHeaders && subHeaders.length) {
                    var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left), totalMinWidth = _calculateHeaderWidth2[0], totalWidth = _calculateHeaderWidth2[1], totalMaxWidth = _calculateHeaderWidth2[2], totalFlexWidth = _calculateHeaderWidth2[3];
                    header.totalMinWidth = totalMinWidth;
                    header.totalWidth = totalWidth;
                    header.totalMaxWidth = totalMaxWidth;
                    header.totalFlexWidth = totalFlexWidth;
                }
                else {
                    header.totalMinWidth = header.minWidth;
                    header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);
                    header.totalMaxWidth = header.maxWidth;
                    header.totalFlexWidth = header.canResize ? header.totalWidth : 0;
                }
                if (header.isVisible) {
                    left += header.totalWidth;
                    sumTotalMinWidth += header.totalMinWidth;
                    sumTotalWidth += header.totalWidth;
                    sumTotalMaxWidth += header.totalMaxWidth;
                    sumTotalFlexWidth += header.totalFlexWidth;
                }
            });
            return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];
        }
        function accessRowsForColumn(_ref) {
            var data = _ref.data, rows = _ref.rows, flatRows = _ref.flatRows, rowsById = _ref.rowsById, column = _ref.column, getRowId = _ref.getRowId, getSubRows = _ref.getSubRows, accessValueHooks = _ref.accessValueHooks, getInstance = _ref.getInstance;
            // Access the row's data column-by-column
            // We do it this way so we can incrementally add materialized
            // columns after the first pass and avoid excessive looping
            var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {
                if (depth === void 0) {
                    depth = 0;
                }
                // Keep the original reference around
                var original = originalRow;
                var id = getRowId(originalRow, rowIndex, parent);
                var row = rowsById[id]; // If the row hasn't been created, let's make it
                if (!row) {
                    row = {
                        id: id,
                        original: original,
                        index: rowIndex,
                        depth: depth,
                        cells: [{}] // This is a dummy cell
                    }; // Override common array functions (and the dummy cell's getCellProps function)
                    // to show an error if it is accessed without calling prepareRow
                    row.cells.map = unpreparedAccessWarning;
                    row.cells.filter = unpreparedAccessWarning;
                    row.cells.forEach = unpreparedAccessWarning;
                    row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values
                    row.values = {}; // Push this row into the parentRows array
                    parentRows.push(row); // Keep track of every row in a flat array
                    flatRows.push(row); // Also keep track of every row by its ID
                    rowsById[id] = row; // Get the original subrows
                    row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them
                    if (row.originalSubRows) {
                        var subRows = [];
                        row.originalSubRows.forEach(function (d, i) {
                            return accessRow(d, i, depth + 1, row, subRows);
                        }); // Keep the new subRows array on the row
                        row.subRows = subRows;
                    }
                }
                else if (row.subRows) {
                    // If the row exists, then it's already been accessed
                    // Keep recursing, but don't worry about passing the
                    // accumlator array (those rows already exist)
                    row.originalSubRows.forEach(function (d, i) {
                        return accessRow(d, i, depth + 1, row);
                    });
                } // If the column has an accessor, use it to get a value
                if (column.accessor) {
                    row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);
                } // Allow plugins to manipulate the column value
                row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {
                    row: row,
                    column: column,
                    instance: getInstance()
                }, true);
            };
            data.forEach(function (originalRow, rowIndex) {
                return accessRow(originalRow, rowIndex, 0, undefined, rows);
            });
        }
        actions.resetExpanded = 'resetExpanded';
        actions.toggleRowExpanded = 'toggleRowExpanded';
        actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';
        var useExpanded = function useExpanded(hooks) {
            hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];
            hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];
            hooks.stateReducers.push(reducer$1);
            hooks.useInstance.push(useInstance$1);
            hooks.prepareRow.push(prepareRow);
        };
        useExpanded.pluginName = 'useExpanded';
        var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {
            var instance = _ref.instance;
            return [props, {
                    onClick: function onClick(e) {
                        instance.toggleAllRowsExpanded();
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    title: 'Toggle All Rows Expanded'
                }];
        };
        var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {
            var row = _ref2.row;
            return [props, {
                    onClick: function onClick() {
                        row.toggleRowExpanded();
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    title: 'Toggle Row Expanded'
                }];
        }; // Reducer
        function reducer$1(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    expanded: {}
                }, state);
            }
            if (action.type === actions.resetExpanded) {
                return _extends({}, state, {
                    expanded: instance.initialState.expanded || {}
                });
            }
            if (action.type === actions.toggleAllRowsExpanded) {
                var value = action.value;
                var rowsById = instance.rowsById;
                var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;
                var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;
                if (expandAll) {
                    var expanded = {};
                    Object.keys(rowsById).forEach(function (rowId) {
                        expanded[rowId] = true;
                    });
                    return _extends({}, state, {
                        expanded: expanded
                    });
                }
                return _extends({}, state, {
                    expanded: {}
                });
            }
            if (action.type === actions.toggleRowExpanded) {
                var id = action.id, setExpanded = action.value;
                var exists = state.expanded[id];
                var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;
                if (!exists && shouldExist) {
                    var _extends2;
                    return _extends({}, state, {
                        expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))
                    });
                }
                else if (exists && !shouldExist) {
                    var _state$expanded = state.expanded;
                    _state$expanded[id];
                    var rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));
                    return _extends({}, state, {
                        expanded: rest
                    });
                }
                else {
                    return state;
                }
            }
        }
        function useInstance$1(instance) {
            var data = instance.data, rows = instance.rows, rowsById = instance.rowsById, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$autoResetEx = instance.autoResetExpanded, autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx, getHooks = instance.getHooks, plugins = instance.plugins, expanded = instance.state.expanded, dispatch = instance.dispatch;
            ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');
            var getAutoResetExpanded = useGetLatest(autoResetExpanded);
            var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);
            if (isAllRowsExpanded) {
                if (Object.keys(rowsById).some(function (id) {
                    return !expanded[id];
                })) {
                    isAllRowsExpanded = false;
                }
            } // Bypass any effects from firing when this changes
            useMountedLayoutEffect(function () {
                if (getAutoResetExpanded()) {
                    dispatch({
                        type: actions.resetExpanded
                    });
                }
            }, [dispatch, data]);
            var toggleRowExpanded = React.useCallback(function (id, value) {
                dispatch({
                    type: actions.toggleRowExpanded,
                    id: id,
                    value: value
                });
            }, [dispatch]);
            var toggleAllRowsExpanded = React.useCallback(function (value) {
                return dispatch({
                    type: actions.toggleAllRowsExpanded,
                    value: value
                });
            }, [dispatch]);
            var expandedRows = React.useMemo(function () {
                if (paginateExpandedRows) {
                    return expandRows(rows, {
                        manualExpandedKey: manualExpandedKey,
                        expanded: expanded,
                        expandSubRows: expandSubRows
                    });
                }
                return rows;
            }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);
            var expandedDepth = React.useMemo(function () {
                return findExpandedDepth(expanded);
            }, [expanded]);
            var getInstance = useGetLatest(instance);
            var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {
                instance: getInstance()
            });
            Object.assign(instance, {
                preExpandedRows: rows,
                expandedRows: expandedRows,
                rows: expandedRows,
                expandedDepth: expandedDepth,
                isAllRowsExpanded: isAllRowsExpanded,
                toggleRowExpanded: toggleRowExpanded,
                toggleAllRowsExpanded: toggleAllRowsExpanded,
                getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps
            });
        }
        function prepareRow(row, _ref3) {
            var getHooks = _ref3.instance.getHooks, instance = _ref3.instance;
            row.toggleRowExpanded = function (set) {
                return instance.toggleRowExpanded(row.id, set);
            };
            row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {
                instance: instance,
                row: row
            });
        }
        function findExpandedDepth(expanded) {
            var maxDepth = 0;
            Object.keys(expanded).forEach(function (id) {
                var splitId = id.split('.');
                maxDepth = Math.max(maxDepth, splitId.length);
            });
            return maxDepth;
        }
        var text = function text(rows, ids, filterValue) {
            rows = rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());
                });
            });
            return rows;
        };
        text.autoRemove = function (val) {
            return !val;
        };
        var exactText = function exactText(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;
                });
            });
        };
        exactText.autoRemove = function (val) {
            return !val;
        };
        var exactTextCase = function exactTextCase(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;
                });
            });
        };
        exactTextCase.autoRemove = function (val) {
            return !val;
        };
        var includes = function includes(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue.includes(filterValue);
                });
            });
        };
        includes.autoRemove = function (val) {
            return !val || !val.length;
        };
        var includesAll = function includesAll(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue && rowValue.length && filterValue.every(function (val) {
                        return rowValue.includes(val);
                    });
                });
            });
        };
        includesAll.autoRemove = function (val) {
            return !val || !val.length;
        };
        var includesSome = function includesSome(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue && rowValue.length && filterValue.some(function (val) {
                        return rowValue.includes(val);
                    });
                });
            });
        };
        includesSome.autoRemove = function (val) {
            return !val || !val.length;
        };
        var includesValue = function includesValue(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return filterValue.includes(rowValue);
                });
            });
        };
        includesValue.autoRemove = function (val) {
            return !val || !val.length;
        };
        var exact = function exact(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue === filterValue;
                });
            });
        };
        exact.autoRemove = function (val) {
            return typeof val === 'undefined';
        };
        var equals = function equals(rows, ids, filterValue) {
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq
                    return rowValue == filterValue;
                });
            });
        };
        equals.autoRemove = function (val) {
            return val == null;
        };
        var between = function between(rows, ids, filterValue) {
            var _ref = filterValue || [], min = _ref[0], max = _ref[1];
            min = typeof min === 'number' ? min : -Infinity;
            max = typeof max === 'number' ? max : Infinity;
            if (min > max) {
                var temp = min;
                min = max;
                max = temp;
            }
            return rows.filter(function (row) {
                return ids.some(function (id) {
                    var rowValue = row.values[id];
                    return rowValue >= min && rowValue <= max;
                });
            });
        };
        between.autoRemove = function (val) {
            return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';
        };
        var filterTypes = /*#__PURE__*/ Object.freeze({
            __proto__: null,
            text: text,
            exactText: exactText,
            exactTextCase: exactTextCase,
            includes: includes,
            includesAll: includesAll,
            includesSome: includesSome,
            includesValue: includesValue,
            exact: exact,
            equals: equals,
            between: between
        });
        actions.resetFilters = 'resetFilters';
        actions.setFilter = 'setFilter';
        actions.setAllFilters = 'setAllFilters';
        var useFilters = function useFilters(hooks) {
            hooks.stateReducers.push(reducer$2);
            hooks.useInstance.push(useInstance$2);
        };
        useFilters.pluginName = 'useFilters';
        function reducer$2(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    filters: []
                }, state);
            }
            if (action.type === actions.resetFilters) {
                return _extends({}, state, {
                    filters: instance.initialState.filters || []
                });
            }
            if (action.type === actions.setFilter) {
                var columnId = action.columnId, filterValue = action.filterValue;
                var allColumns = instance.allColumns, userFilterTypes = instance.filterTypes;
                var column = allColumns.find(function (d) {
                    return d.id === columnId;
                });
                if (!column) {
                    throw new Error("React-Table: Could not find a column with id: " + columnId);
                }
                var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
                var previousfilter = state.filters.find(function (d) {
                    return d.id === columnId;
                });
                var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //
                if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {
                    return _extends({}, state, {
                        filters: state.filters.filter(function (d) {
                            return d.id !== columnId;
                        })
                    });
                }
                if (previousfilter) {
                    return _extends({}, state, {
                        filters: state.filters.map(function (d) {
                            if (d.id === columnId) {
                                return {
                                    id: columnId,
                                    value: newFilter
                                };
                            }
                            return d;
                        })
                    });
                }
                return _extends({}, state, {
                    filters: [].concat(state.filters, [{
                            id: columnId,
                            value: newFilter
                        }])
                });
            }
            if (action.type === actions.setAllFilters) {
                var filters = action.filters;
                var _allColumns = instance.allColumns, _userFilterTypes = instance.filterTypes;
                return _extends({}, state, {
                    // Filter out undefined values
                    filters: functionalUpdate(filters, state.filters).filter(function (filter) {
                        var column = _allColumns.find(function (d) {
                            return d.id === filter.id;
                        });
                        var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);
                        if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) {
                            return false;
                        }
                        return true;
                    })
                });
            }
        }
        function useInstance$2(instance) {
            var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns = instance.allColumns, userFilterTypes = instance.filterTypes, manualFilters = instance.manualFilters, _instance$defaultCanF = instance.defaultCanFilter, defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF, disableFilters = instance.disableFilters, filters = instance.state.filters, dispatch = instance.dispatch, _instance$autoResetFi = instance.autoResetFilters, autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;
            var setFilter = React.useCallback(function (columnId, filterValue) {
                dispatch({
                    type: actions.setFilter,
                    columnId: columnId,
                    filterValue: filterValue
                });
            }, [dispatch]);
            var setAllFilters = React.useCallback(function (filters) {
                dispatch({
                    type: actions.setAllFilters,
                    filters: filters
                });
            }, [dispatch]);
            allColumns.forEach(function (column) {
                var id = column.id, accessor = column.accessor, columnDefaultCanFilter = column.defaultCanFilter, columnDisableFilters = column.disableFilters; // Determine if a column is filterable
                column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value
                column.setFilter = function (val) {
                    return setFilter(column.id, val);
                }; // Provide the current filter value to the column for
                // convenience
                var found = filters.find(function (d) {
                    return d.id === id;
                });
                column.filterValue = found && found.value;
            });
            var _React$useMemo = React.useMemo(function () {
                if (manualFilters || !filters.length) {
                    return [rows, flatRows, rowsById];
                }
                var filteredFlatRows = [];
                var filteredRowsById = {}; // Filters top level and nested rows
                var filterRows = function filterRows(rows, depth) {
                    if (depth === void 0) {
                        depth = 0;
                    }
                    var filteredRows = rows;
                    filteredRows = filters.reduce(function (filteredSoFar, _ref) {
                        var columnId = _ref.id, filterValue = _ref.value;
                        // Find the filters column
                        var column = allColumns.find(function (d) {
                            return d.id === columnId;
                        });
                        if (!column) {
                            return filteredSoFar;
                        }
                        if (depth === 0) {
                            column.preFilteredRows = filteredSoFar;
                        }
                        var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);
                        if (!filterMethod) {
                            console.warn("Could not find a valid 'column.filter' for column with the ID: " + column.id + ".");
                            return filteredSoFar;
                        } // Pass the rows, id, filterValue and column to the filterMethod
                        // to get the filtered rows back
                        column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);
                        return column.filteredRows;
                    }, rows); // Apply the filter to any subRows
                    // We technically could do this recursively in the above loop,
                    // but that would severely hinder the API for the user, since they
                    // would be required to do that recursion in some scenarios
                    filteredRows.forEach(function (row) {
                        filteredFlatRows.push(row);
                        filteredRowsById[row.id] = row;
                        if (!row.subRows) {
                            return;
                        }
                        row.subRows = row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows;
                    });
                    return filteredRows;
                };
                return [filterRows(rows), filteredFlatRows, filteredRowsById];
            }, [manualFilters, filters, rows, flatRows, rowsById, allColumns, userFilterTypes]), filteredRows = _React$useMemo[0], filteredFlatRows = _React$useMemo[1], filteredRowsById = _React$useMemo[2];
            React.useMemo(function () {
                // Now that each filtered column has it's partially filtered rows,
                // lets assign the final filtered rows to all of the other columns
                var nonFilteredColumns = allColumns.filter(function (column) {
                    return !filters.find(function (d) {
                        return d.id === column.id;
                    });
                }); // This essentially enables faceted filter options to be built easily
                // using every column's preFilteredRows value
                nonFilteredColumns.forEach(function (column) {
                    column.preFilteredRows = filteredRows;
                    column.filteredRows = filteredRows;
                });
            }, [filteredRows, filters, allColumns]);
            var getAutoResetFilters = useGetLatest(autoResetFilters);
            useMountedLayoutEffect(function () {
                if (getAutoResetFilters()) {
                    dispatch({
                        type: actions.resetFilters
                    });
                }
            }, [dispatch, manualFilters ? null : data]);
            Object.assign(instance, {
                preFilteredRows: rows,
                preFilteredFlatRows: flatRows,
                preFilteredRowsById: rowsById,
                filteredRows: filteredRows,
                filteredFlatRows: filteredFlatRows,
                filteredRowsById: filteredRowsById,
                rows: filteredRows,
                flatRows: filteredFlatRows,
                rowsById: filteredRowsById,
                setFilter: setFilter,
                setAllFilters: setAllFilters
            });
        }
        actions.resetGlobalFilter = 'resetGlobalFilter';
        actions.setGlobalFilter = 'setGlobalFilter';
        var useGlobalFilter = function useGlobalFilter(hooks) {
            hooks.stateReducers.push(reducer$3);
            hooks.useInstance.push(useInstance$3);
        };
        useGlobalFilter.pluginName = 'useGlobalFilter';
        function reducer$3(state, action, previousState, instance) {
            if (action.type === actions.resetGlobalFilter) {
                return _extends({}, state, {
                    globalFilter: instance.initialState.globalFilter || undefined
                });
            }
            if (action.type === actions.setGlobalFilter) {
                var filterValue = action.filterValue;
                var userFilterTypes = instance.userFilterTypes;
                var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);
                var newFilter = functionalUpdate(filterValue, state.globalFilter); //
                if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {
                    state.globalFilter;
                    var stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, ["globalFilter"]);
                    return stateWithoutGlobalFilter;
                }
                return _extends({}, state, {
                    globalFilter: newFilter
                });
            }
        }
        function useInstance$3(instance) {
            var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns = instance.allColumns, userFilterTypes = instance.filterTypes, globalFilter = instance.globalFilter, manualGlobalFilter = instance.manualGlobalFilter, globalFilterValue = instance.state.globalFilter, dispatch = instance.dispatch, _instance$autoResetGl = instance.autoResetGlobalFilter, autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl, disableGlobalFilter = instance.disableGlobalFilter;
            var setGlobalFilter = React.useCallback(function (filterValue) {
                dispatch({
                    type: actions.setGlobalFilter,
                    filterValue: filterValue
                });
            }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering
            // This gets pretty complicated pretty fast, since you have to maintain a
            // cache for each row group (top-level rows, and each row's recursive subrows)
            // This would make multi-filtering a lot faster though. Too far?
            var _React$useMemo = React.useMemo(function () {
                if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {
                    return [rows, flatRows, rowsById];
                }
                var filteredFlatRows = [];
                var filteredRowsById = {};
                var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);
                if (!filterMethod) {
                    console.warn("Could not find a valid 'globalFilter' option.");
                    return rows;
                }
                allColumns.forEach(function (column) {
                    var columnDisableGlobalFilter = column.disableGlobalFilter;
                    column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);
                });
                var filterableColumns = allColumns.filter(function (c) {
                    return c.canFilter === true;
                }); // Filters top level and nested rows
                var filterRows = function filterRows(filteredRows) {
                    filteredRows = filterMethod(filteredRows, filterableColumns.map(function (d) {
                        return d.id;
                    }), globalFilterValue);
                    filteredRows.forEach(function (row) {
                        filteredFlatRows.push(row);
                        filteredRowsById[row.id] = row;
                        row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;
                    });
                    return filteredRows;
                };
                return [filterRows(rows), filteredFlatRows, filteredRowsById];
            }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns, rows, flatRows, rowsById, disableGlobalFilter]), globalFilteredRows = _React$useMemo[0], globalFilteredFlatRows = _React$useMemo[1], globalFilteredRowsById = _React$useMemo[2];
            var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);
            useMountedLayoutEffect(function () {
                if (getAutoResetGlobalFilter()) {
                    dispatch({
                        type: actions.resetGlobalFilter
                    });
                }
            }, [dispatch, manualGlobalFilter ? null : data]);
            Object.assign(instance, {
                preGlobalFilteredRows: rows,
                preGlobalFilteredFlatRows: flatRows,
                preGlobalFilteredRowsById: rowsById,
                globalFilteredRows: globalFilteredRows,
                globalFilteredFlatRows: globalFilteredFlatRows,
                globalFilteredRowsById: globalFilteredRowsById,
                rows: globalFilteredRows,
                flatRows: globalFilteredFlatRows,
                rowsById: globalFilteredRowsById,
                setGlobalFilter: setGlobalFilter,
                disableGlobalFilter: disableGlobalFilter
            });
        }
        function sum(values, aggregatedValues) {
            // It's faster to just add the aggregations together instead of
            // process leaf nodes individually
            return aggregatedValues.reduce(function (sum, next) {
                return sum + (typeof next === 'number' ? next : 0);
            }, 0);
        }
        function min(values) {
            var min = values[0] || 0;
            values.forEach(function (value) {
                if (typeof value === 'number') {
                    min = Math.min(min, value);
                }
            });
            return min;
        }
        function max(values) {
            var max = values[0] || 0;
            values.forEach(function (value) {
                if (typeof value === 'number') {
                    max = Math.max(max, value);
                }
            });
            return max;
        }
        function minMax(values) {
            var min = values[0] || 0;
            var max = values[0] || 0;
            values.forEach(function (value) {
                if (typeof value === 'number') {
                    min = Math.min(min, value);
                    max = Math.max(max, value);
                }
            });
            return min + ".." + max;
        }
        function average(values) {
            return sum(null, values) / values.length;
        }
        function median(values) {
            if (!values.length) {
                return null;
            }
            var mid = Math.floor(values.length / 2);
            var nums = [].concat(values).sort(function (a, b) {
                return a - b;
            });
            return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;
        }
        function unique(values) {
            return Array.from(new Set(values).values());
        }
        function uniqueCount(values) {
            return new Set(values).size;
        }
        function count(values) {
            return values.length;
        }
        var aggregations = /*#__PURE__*/ Object.freeze({
            __proto__: null,
            sum: sum,
            min: min,
            max: max,
            minMax: minMax,
            average: average,
            median: median,
            unique: unique,
            uniqueCount: uniqueCount,
            count: count
        });
        var emptyArray = [];
        var emptyObject = {}; // Actions
        actions.resetGroupBy = 'resetGroupBy';
        actions.setGroupBy = 'setGroupBy';
        actions.toggleGroupBy = 'toggleGroupBy';
        var useGroupBy = function useGroupBy(hooks) {
            hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];
            hooks.stateReducers.push(reducer$4);
            hooks.visibleColumnsDeps.push(function (deps, _ref) {
                var instance = _ref.instance;
                return [].concat(deps, [instance.state.groupBy]);
            });
            hooks.visibleColumns.push(visibleColumns);
            hooks.useInstance.push(useInstance$4);
            hooks.prepareRow.push(prepareRow$1);
        };
        useGroupBy.pluginName = 'useGroupBy';
        var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {
            var header = _ref2.header;
            return [props, {
                    onClick: header.canGroupBy ? function (e) {
                        e.persist();
                        header.toggleGroupBy();
                    } : undefined,
                    style: {
                        cursor: header.canGroupBy ? 'pointer' : undefined
                    },
                    title: 'Toggle GroupBy'
                }];
        }; // Reducer
        function reducer$4(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    groupBy: []
                }, state);
            }
            if (action.type === actions.resetGroupBy) {
                return _extends({}, state, {
                    groupBy: instance.initialState.groupBy || []
                });
            }
            if (action.type === actions.setGroupBy) {
                var value = action.value;
                return _extends({}, state, {
                    groupBy: value
                });
            }
            if (action.type === actions.toggleGroupBy) {
                var columnId = action.columnId, setGroupBy = action.value;
                var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);
                if (resolvedGroupBy) {
                    return _extends({}, state, {
                        groupBy: [].concat(state.groupBy, [columnId])
                    });
                }
                return _extends({}, state, {
                    groupBy: state.groupBy.filter(function (d) {
                        return d !== columnId;
                    })
                });
            }
        }
        function visibleColumns(columns, _ref3) {
            var groupBy = _ref3.instance.state.groupBy;
            // Sort grouped columns to the start of the column list
            // before the headers are built
            var groupByColumns = groupBy.map(function (g) {
                return columns.find(function (col) {
                    return col.id === g;
                });
            }).filter(Boolean);
            var nonGroupByColumns = columns.filter(function (col) {
                return !groupBy.includes(col.id);
            });
            columns = [].concat(groupByColumns, nonGroupByColumns);
            columns.forEach(function (column) {
                column.isGrouped = groupBy.includes(column.id);
                column.groupedIndex = groupBy.indexOf(column.id);
            });
            return columns;
        }
        var defaultUserAggregations = {};
        function useInstance$4(instance) {
            var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, rowsById = instance.rowsById, allColumns = instance.allColumns, flatHeaders = instance.flatHeaders, _instance$groupByFn = instance.groupByFn, groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn, manualGroupBy = instance.manualGroupBy, _instance$aggregation = instance.aggregations, userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation, plugins = instance.plugins, groupBy = instance.state.groupBy, dispatch = instance.dispatch, _instance$autoResetGr = instance.autoResetGroupBy, autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr, disableGroupBy = instance.disableGroupBy, defaultCanGroupBy = instance.defaultCanGroupBy, getHooks = instance.getHooks;
            ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy');
            var getInstance = useGetLatest(instance);
            allColumns.forEach(function (column) {
                var accessor = column.accessor, defaultColumnGroupBy = column.defaultGroupBy, columnDisableGroupBy = column.disableGroupBy;
                column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);
                if (column.canGroupBy) {
                    column.toggleGroupBy = function () {
                        return instance.toggleGroupBy(column.id);
                    };
                }
                column.Aggregated = column.Aggregated || column.Cell;
            });
            var toggleGroupBy = React.useCallback(function (columnId, value) {
                dispatch({
                    type: actions.toggleGroupBy,
                    columnId: columnId,
                    value: value
                });
            }, [dispatch]);
            var setGroupBy = React.useCallback(function (value) {
                dispatch({
                    type: actions.setGroupBy,
                    value: value
                });
            }, [dispatch]);
            flatHeaders.forEach(function (header) {
                header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {
                    instance: getInstance(),
                    header: header
                });
            });
            var _React$useMemo = React.useMemo(function () {
                if (manualGroupBy || !groupBy.length) {
                    return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];
                } // Ensure that the list of filtered columns exist
                var existingGroupBy = groupBy.filter(function (g) {
                    return allColumns.find(function (col) {
                        return col.id === g;
                    });
                }); // Find the columns that can or are aggregating
                // Uses each column to aggregate rows into a single value
                var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {
                    var values = {};
                    allColumns.forEach(function (column) {
                        // Don't aggregate columns that are in the groupBy
                        if (existingGroupBy.includes(column.id)) {
                            values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;
                            return;
                        } // Aggregate the values
                        var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];
                        if (aggregateFn) {
                            // Get the columnValues to aggregate
                            var groupedValues = groupedRows.map(function (row) {
                                return row.values[column.id];
                            }); // Get the columnValues to aggregate
                            var leafValues = leafRows.map(function (row) {
                                var columnValue = row.values[column.id];
                                if (!depth && column.aggregateValue) {
                                    var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];
                                    if (!aggregateValueFn) {
                                        console.info({
                                            column: column
                                        });
                                        throw new Error("React Table: Invalid column.aggregateValue option for column listed above");
                                    }
                                    columnValue = aggregateValueFn(columnValue, row, column);
                                }
                                return columnValue;
                            });
                            values[column.id] = aggregateFn(leafValues, groupedValues);
                        }
                        else if (column.aggregate) {
                            console.info({
                                column: column
                            });
                            throw new Error("React Table: Invalid column.aggregate option for column listed above");
                        }
                        else {
                            values[column.id] = null;
                        }
                    });
                    return values;
                };
                var groupedFlatRows = [];
                var groupedRowsById = {};
                var onlyGroupedFlatRows = [];
                var onlyGroupedRowsById = {};
                var nonGroupedFlatRows = [];
                var nonGroupedRowsById = {}; // Recursively group the data
                var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {
                    if (depth === void 0) {
                        depth = 0;
                    }
                    // This is the last level, just return the rows
                    if (depth === existingGroupBy.length) {
                        return rows.map(function (row) {
                            return _extends({}, row, {
                                depth: depth
                            });
                        });
                    }
                    var columnId = existingGroupBy[depth]; // Group the rows together for this level
                    var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group
                    var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function (_ref4, index) {
                        var groupByVal = _ref4[0], groupedRows = _ref4[1];
                        var id = columnId + ":" + groupByVal;
                        id = parentId ? parentId + ">" + id : id; // First, Recurse to group sub rows before aggregation
                        var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group
                        var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;
                        var values = aggregateRowsToValues(leafRows, groupedRows, depth);
                        var row = {
                            id: id,
                            isGrouped: true,
                            groupByID: columnId,
                            groupByVal: groupByVal,
                            values: values,
                            subRows: subRows,
                            leafRows: leafRows,
                            depth: depth,
                            index: index
                        };
                        subRows.forEach(function (subRow) {
                            groupedFlatRows.push(subRow);
                            groupedRowsById[subRow.id] = subRow;
                            if (subRow.isGrouped) {
                                onlyGroupedFlatRows.push(subRow);
                                onlyGroupedRowsById[subRow.id] = subRow;
                            }
                            else {
                                nonGroupedFlatRows.push(subRow);
                                nonGroupedRowsById[subRow.id] = subRow;
                            }
                        });
                        return row;
                    });
                    return aggregatedGroupedRows;
                };
                var groupedRows = groupUpRecursively(rows);
                groupedRows.forEach(function (subRow) {
                    groupedFlatRows.push(subRow);
                    groupedRowsById[subRow.id] = subRow;
                    if (subRow.isGrouped) {
                        onlyGroupedFlatRows.push(subRow);
                        onlyGroupedRowsById[subRow.id] = subRow;
                    }
                    else {
                        nonGroupedFlatRows.push(subRow);
                        nonGroupedRowsById[subRow.id] = subRow;
                    }
                }); // Assign the new data
                return [groupedRows, groupedFlatRows, groupedRowsById, onlyGroupedFlatRows, onlyGroupedRowsById, nonGroupedFlatRows, nonGroupedRowsById];
            }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns, userAggregations, groupByFn]), groupedRows = _React$useMemo[0], groupedFlatRows = _React$useMemo[1], groupedRowsById = _React$useMemo[2], onlyGroupedFlatRows = _React$useMemo[3], onlyGroupedRowsById = _React$useMemo[4], nonGroupedFlatRows = _React$useMemo[5], nonGroupedRowsById = _React$useMemo[6];
            var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);
            useMountedLayoutEffect(function () {
                if (getAutoResetGroupBy()) {
                    dispatch({
                        type: actions.resetGroupBy
                    });
                }
            }, [dispatch, manualGroupBy ? null : data]);
            Object.assign(instance, {
                preGroupedRows: rows,
                preGroupedFlatRow: flatRows,
                preGroupedRowsById: rowsById,
                groupedRows: groupedRows,
                groupedFlatRows: groupedFlatRows,
                groupedRowsById: groupedRowsById,
                onlyGroupedFlatRows: onlyGroupedFlatRows,
                onlyGroupedRowsById: onlyGroupedRowsById,
                nonGroupedFlatRows: nonGroupedFlatRows,
                nonGroupedRowsById: nonGroupedRowsById,
                rows: groupedRows,
                flatRows: groupedFlatRows,
                rowsById: groupedRowsById,
                toggleGroupBy: toggleGroupBy,
                setGroupBy: setGroupBy
            });
        }
        function prepareRow$1(row) {
            row.allCells.forEach(function (cell) {
                var _row$subRows;
                // Grouped cells are in the groupBy and the pivot cell for the row
                cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped
                cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows
                cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);
            });
        }
        function defaultGroupByFn(rows, columnId) {
            return rows.reduce(function (prev, row, i) {
                // TODO: Might want to implement a key serializer here so
                // irregular column values can still be grouped if needed?
                var resKey = "" + row.values[columnId];
                prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];
                prev[resKey].push(row);
                return prev;
            }, {});
        }
        var reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.
        // It handles numbers, mixed alphanumeric combinations, and even
        // null, undefined, and Infinity
        var alphanumeric = function alphanumeric(rowA, rowB, columnId) {
            var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn[0], b = _getRowValuesByColumn[1]; // Force to strings (or "" for unsupported types)
            a = toString(a);
            b = toString(b); // Split on number groups, but keep the delimiter
            // Then remove falsey split values
            a = a.split(reSplitAlphaNumeric).filter(Boolean);
            b = b.split(reSplitAlphaNumeric).filter(Boolean); // While
            while (a.length && b.length) {
                var aa = a.shift();
                var bb = b.shift();
                var an = parseInt(aa, 10);
                var bn = parseInt(bb, 10);
                var combo = [an, bn].sort(); // Both are string
                if (isNaN(combo[0])) {
                    if (aa > bb) {
                        return 1;
                    }
                    if (bb > aa) {
                        return -1;
                    }
                    continue;
                } // One is a string, one is a number
                if (isNaN(combo[1])) {
                    return isNaN(an) ? -1 : 1;
                } // Both are numbers
                if (an > bn) {
                    return 1;
                }
                if (bn > an) {
                    return -1;
                }
            }
            return a.length - b.length;
        };
        function datetime(rowA, rowB, columnId) {
            var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn2[0], b = _getRowValuesByColumn2[1];
            a = a.getTime();
            b = b.getTime();
            return compareBasic(a, b);
        }
        function basic(rowA, rowB, columnId) {
            var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn3[0], b = _getRowValuesByColumn3[1];
            return compareBasic(a, b);
        }
        function string(rowA, rowB, columnId) {
            var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn4[0], b = _getRowValuesByColumn4[1];
            a = a.split('').filter(Boolean);
            b = b.split('').filter(Boolean);
            while (a.length && b.length) {
                var aa = a.shift();
                var bb = b.shift();
                var alower = aa.toLowerCase();
                var blower = bb.toLowerCase(); // Case insensitive comparison until characters match
                if (alower > blower) {
                    return 1;
                }
                if (blower > alower) {
                    return -1;
                } // If lowercase characters are identical
                if (aa > bb) {
                    return 1;
                }
                if (bb > aa) {
                    return -1;
                }
                continue;
            }
            return a.length - b.length;
        }
        function number(rowA, rowB, columnId) {
            var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId), a = _getRowValuesByColumn5[0], b = _getRowValuesByColumn5[1];
            var replaceNonNumeric = /[^0-9.]/gi;
            a = Number(String(a).replace(replaceNonNumeric, ''));
            b = Number(String(b).replace(replaceNonNumeric, ''));
            return compareBasic(a, b);
        } // Utils
        function compareBasic(a, b) {
            return a === b ? 0 : a > b ? 1 : -1;
        }
        function getRowValuesByColumnID(row1, row2, columnId) {
            return [row1.values[columnId], row2.values[columnId]];
        }
        function toString(a) {
            if (typeof a === 'number') {
                if (isNaN(a) || a === Infinity || a === -Infinity) {
                    return '';
                }
                return String(a);
            }
            if (typeof a === 'string') {
                return a;
            }
            return '';
        }
        var sortTypes = /*#__PURE__*/ Object.freeze({
            __proto__: null,
            alphanumeric: alphanumeric,
            datetime: datetime,
            basic: basic,
            string: string,
            number: number
        });
        actions.resetSortBy = 'resetSortBy';
        actions.setSortBy = 'setSortBy';
        actions.toggleSortBy = 'toggleSortBy';
        actions.clearSortBy = 'clearSortBy';
        defaultColumn.sortType = 'alphanumeric';
        defaultColumn.sortDescFirst = false;
        var useSortBy = function useSortBy(hooks) {
            hooks.getSortByToggleProps = [defaultGetSortByToggleProps];
            hooks.stateReducers.push(reducer$5);
            hooks.useInstance.push(useInstance$5);
        };
        useSortBy.pluginName = 'useSortBy';
        var defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {
            var instance = _ref.instance, column = _ref.column;
            var _instance$isMultiSort = instance.isMultiSortEvent, isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {
                return e.shiftKey;
            } : _instance$isMultiSort;
            return [props, {
                    onClick: column.canSort ? function (e) {
                        e.persist();
                        column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));
                    } : undefined,
                    style: {
                        cursor: column.canSort ? 'pointer' : undefined
                    },
                    title: column.canSort ? 'Toggle SortBy' : undefined
                }];
        }; // Reducer
        function reducer$5(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    sortBy: []
                }, state);
            }
            if (action.type === actions.resetSortBy) {
                return _extends({}, state, {
                    sortBy: instance.initialState.sortBy || []
                });
            }
            if (action.type === actions.clearSortBy) {
                var sortBy = state.sortBy;
                var newSortBy = sortBy.filter(function (d) {
                    return d.id !== action.columnId;
                });
                return _extends({}, state, {
                    sortBy: newSortBy
                });
            }
            if (action.type === actions.setSortBy) {
                var _sortBy = action.sortBy;
                return _extends({}, state, {
                    sortBy: _sortBy
                });
            }
            if (action.type === actions.toggleSortBy) {
                var columnId = action.columnId, desc = action.desc, multi = action.multi;
                var allColumns = instance.allColumns, disableMultiSort = instance.disableMultiSort, disableSortRemove = instance.disableSortRemove, disableMultiRemove = instance.disableMultiRemove, _instance$maxMultiSor = instance.maxMultiSortColCount, maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;
                var _sortBy2 = state.sortBy; // Find the column for this columnId
                var column = allColumns.find(function (d) {
                    return d.id === columnId;
                });
                var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column
                var existingSortBy = _sortBy2.find(function (d) {
                    return d.id === columnId;
                });
                var existingIndex = _sortBy2.findIndex(function (d) {
                    return d.id === columnId;
                });
                var hasDescDefined = typeof desc !== 'undefined' && desc !== null;
                var _newSortBy = []; // What should we do with this sort action?
                var sortAction;
                if (!disableMultiSort && multi) {
                    if (existingSortBy) {
                        sortAction = 'toggle';
                    }
                    else {
                        sortAction = 'add';
                    }
                }
                else {
                    // Normal mode
                    if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {
                        sortAction = 'replace';
                    }
                    else if (existingSortBy) {
                        sortAction = 'toggle';
                    }
                    else {
                        sortAction = 'replace';
                    }
                } // Handle toggle states that will remove the sortBy
                if (sortAction === 'toggle' && // Must be toggling
                    !disableSortRemove && // If disableSortRemove, disable in general
                    !hasDescDefined && ( // Must not be setting desc
                multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove
                existingSortBy && // Finally, detect if it should indeed be removed
                    existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {
                    sortAction = 'remove';
                }
                if (sortAction === 'replace') {
                    _newSortBy = [{
                            id: columnId,
                            desc: hasDescDefined ? desc : sortDescFirst
                        }];
                }
                else if (sortAction === 'add') {
                    _newSortBy = [].concat(_sortBy2, [{
                            id: columnId,
                            desc: hasDescDefined ? desc : sortDescFirst
                        }]); // Take latest n columns
                    _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);
                }
                else if (sortAction === 'toggle') {
                    // This flips (or sets) the
                    _newSortBy = _sortBy2.map(function (d) {
                        if (d.id === columnId) {
                            return _extends({}, d, {
                                desc: hasDescDefined ? desc : !existingSortBy.desc
                            });
                        }
                        return d;
                    });
                }
                else if (sortAction === 'remove') {
                    _newSortBy = _sortBy2.filter(function (d) {
                        return d.id !== columnId;
                    });
                }
                return _extends({}, state, {
                    sortBy: _newSortBy
                });
            }
        }
        function useInstance$5(instance) {
            var data = instance.data, rows = instance.rows, flatRows = instance.flatRows, allColumns = instance.allColumns, _instance$orderByFn = instance.orderByFn, orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn, userSortTypes = instance.sortTypes, manualSortBy = instance.manualSortBy, defaultCanSort = instance.defaultCanSort, disableSortBy = instance.disableSortBy, flatHeaders = instance.flatHeaders, sortBy = instance.state.sortBy, dispatch = instance.dispatch, plugins = instance.plugins, getHooks = instance.getHooks, _instance$autoResetSo = instance.autoResetSortBy, autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;
            ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy');
            var setSortBy = React.useCallback(function (sortBy) {
                dispatch({
                    type: actions.setSortBy,
                    sortBy: sortBy
                });
            }, [dispatch]); // Updates sorting based on a columnId, desc flag and multi flag
            var toggleSortBy = React.useCallback(function (columnId, desc, multi) {
                dispatch({
                    type: actions.toggleSortBy,
                    columnId: columnId,
                    desc: desc,
                    multi: multi
                });
            }, [dispatch]); // use reference to avoid memory leak in #1608
            var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers
            flatHeaders.forEach(function (column) {
                var accessor = column.accessor, defaultColumnCanSort = column.canSort, columnDisableSortBy = column.disableSortBy, id = column.id;
                var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);
                column.canSort = canSort;
                if (column.canSort) {
                    column.toggleSortBy = function (desc, multi) {
                        return toggleSortBy(column.id, desc, multi);
                    };
                    column.clearSortBy = function () {
                        dispatch({
                            type: actions.clearSortBy,
                            columnId: column.id
                        });
                    };
                }
                column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {
                    instance: getInstance(),
                    column: column
                });
                var columnSort = sortBy.find(function (d) {
                    return d.id === id;
                });
                column.isSorted = !!columnSort;
                column.sortedIndex = sortBy.findIndex(function (d) {
                    return d.id === id;
                });
                column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;
            });
            var _React$useMemo = React.useMemo(function () {
                if (manualSortBy || !sortBy.length) {
                    return [rows, flatRows];
                }
                var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns
                var availableSortBy = sortBy.filter(function (sort) {
                    return allColumns.find(function (col) {
                        return col.id === sort.id;
                    });
                });
                var sortData = function sortData(rows) {
                    // Use the orderByFn to compose multiple sortBy's together.
                    // This will also perform a stable sorting using the row index
                    // if needed.
                    var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {
                        // Support custom sorting methods for each column
                        var column = allColumns.find(function (d) {
                            return d.id === sort.id;
                        });
                        if (!column) {
                            throw new Error("React-Table: Could not find a column with id: " + sort.id + " while sorting");
                        }
                        var sortType = column.sortType; // Look up sortBy functions in this order:
                        // column function
                        // column string lookup on user sortType
                        // column string lookup on built-in sortType
                        // default function
                        // default string lookup on user sortType
                        // default string lookup on built-in sortType
                        var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];
                        if (!sortMethod) {
                            throw new Error("React-Table: Could not find a valid sortType of '" + sortType + "' for column '" + sort.id + "'.");
                        } // Return the correct sortFn.
                        // This function should always return in ascending order
                        return function (a, b) {
                            return sortMethod(a, b, sort.id, sort.desc);
                        };
                    }), // Map the directions
                    availableSortBy.map(function (sort) {
                        // Detect and use the sortInverted option
                        var column = allColumns.find(function (d) {
                            return d.id === sort.id;
                        });
                        if (column && column.sortInverted) {
                            return sort.desc;
                        }
                        return !sort.desc;
                    })); // If there are sub-rows, sort them
                    sortedData.forEach(function (row) {
                        sortedFlatRows.push(row);
                        if (!row.subRows || row.subRows.length === 0) {
                            return;
                        }
                        row.subRows = sortData(row.subRows);
                    });
                    return sortedData;
                };
                return [sortData(rows), sortedFlatRows];
            }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]), sortedRows = _React$useMemo[0], sortedFlatRows = _React$useMemo[1];
            var getAutoResetSortBy = useGetLatest(autoResetSortBy);
            useMountedLayoutEffect(function () {
                if (getAutoResetSortBy()) {
                    dispatch({
                        type: actions.resetSortBy
                    });
                }
            }, [manualSortBy ? null : data]);
            Object.assign(instance, {
                preSortedRows: rows,
                preSortedFlatRows: flatRows,
                sortedRows: sortedRows,
                sortedFlatRows: sortedFlatRows,
                rows: sortedRows,
                flatRows: sortedFlatRows,
                setSortBy: setSortBy,
                toggleSortBy: toggleSortBy
            });
        }
        function defaultOrderByFn(arr, funcs, dirs) {
            return [].concat(arr).sort(function (rowA, rowB) {
                for (var i = 0; i < funcs.length; i += 1) {
                    var sortFn = funcs[i];
                    var desc = dirs[i] === false || dirs[i] === 'desc';
                    var sortInt = sortFn(rowA, rowB);
                    if (sortInt !== 0) {
                        return desc ? -sortInt : sortInt;
                    }
                }
                return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;
            });
        }
        var pluginName = 'usePagination'; // Actions
        actions.resetPage = 'resetPage';
        actions.gotoPage = 'gotoPage';
        actions.setPageSize = 'setPageSize';
        var usePagination = function usePagination(hooks) {
            hooks.stateReducers.push(reducer$6);
            hooks.useInstance.push(useInstance$6);
        };
        usePagination.pluginName = pluginName;
        function reducer$6(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    pageSize: 10,
                    pageIndex: 0
                }, state);
            }
            if (action.type === actions.resetPage) {
                return _extends({}, state, {
                    pageIndex: instance.initialState.pageIndex || 0
                });
            }
            if (action.type === actions.gotoPage) {
                var pageCount = instance.pageCount, page = instance.page;
                var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);
                var canNavigate = false;
                if (newPageIndex > state.pageIndex) {
                    // next page
                    canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;
                }
                else if (newPageIndex < state.pageIndex) {
                    // prev page
                    canNavigate = newPageIndex > -1;
                }
                if (!canNavigate) {
                    return state;
                }
                return _extends({}, state, {
                    pageIndex: newPageIndex
                });
            }
            if (action.type === actions.setPageSize) {
                var pageSize = action.pageSize;
                var topRowIndex = state.pageSize * state.pageIndex;
                var pageIndex = Math.floor(topRowIndex / pageSize);
                return _extends({}, state, {
                    pageIndex: pageIndex,
                    pageSize: pageSize
                });
            }
        }
        function useInstance$6(instance) {
            var rows = instance.rows, _instance$autoResetPa = instance.autoResetPage, autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa, _instance$manualExpan = instance.manualExpandedKey, manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan, plugins = instance.plugins, userPageCount = instance.pageCount, _instance$paginateExp = instance.paginateExpandedRows, paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp, _instance$expandSubRo = instance.expandSubRows, expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo, _instance$state = instance.state, pageSize = _instance$state.pageSize, pageIndex = _instance$state.pageIndex, expanded = _instance$state.expanded, globalFilter = _instance$state.globalFilter, filters = _instance$state.filters, groupBy = _instance$state.groupBy, sortBy = _instance$state.sortBy, dispatch = instance.dispatch, data = instance.data, manualPagination = instance.manualPagination;
            ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');
            var getAutoResetPage = useGetLatest(autoResetPage);
            useMountedLayoutEffect(function () {
                if (getAutoResetPage()) {
                    dispatch({
                        type: actions.resetPage
                    });
                }
            }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);
            var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);
            var pageOptions = React.useMemo(function () {
                return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function (d, i) {
                    return i;
                }) : [];
            }, [pageCount]);
            var page = React.useMemo(function () {
                var page;
                if (manualPagination) {
                    page = rows;
                }
                else {
                    var pageStart = pageSize * pageIndex;
                    var pageEnd = pageStart + pageSize;
                    page = rows.slice(pageStart, pageEnd);
                }
                if (paginateExpandedRows) {
                    return page;
                }
                return expandRows(page, {
                    manualExpandedKey: manualExpandedKey,
                    expanded: expanded,
                    expandSubRows: expandSubRows
                });
            }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);
            var canPreviousPage = pageIndex > 0;
            var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;
            var gotoPage = React.useCallback(function (pageIndex) {
                dispatch({
                    type: actions.gotoPage,
                    pageIndex: pageIndex
                });
            }, [dispatch]);
            var previousPage = React.useCallback(function () {
                return gotoPage(function (old) {
                    return old - 1;
                });
            }, [gotoPage]);
            var nextPage = React.useCallback(function () {
                return gotoPage(function (old) {
                    return old + 1;
                });
            }, [gotoPage]);
            var setPageSize = React.useCallback(function (pageSize) {
                dispatch({
                    type: actions.setPageSize,
                    pageSize: pageSize
                });
            }, [dispatch]);
            Object.assign(instance, {
                pageOptions: pageOptions,
                pageCount: pageCount,
                page: page,
                canPreviousPage: canPreviousPage,
                canNextPage: canNextPage,
                gotoPage: gotoPage,
                previousPage: previousPage,
                nextPage: nextPage,
                setPageSize: setPageSize
            });
        }
        actions.resetPivot = 'resetPivot';
        actions.togglePivot = 'togglePivot';
        var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {
            hooks.getPivotToggleProps = [defaultGetPivotToggleProps];
            hooks.stateReducers.push(reducer$7);
            hooks.useInstanceAfterData.push(useInstanceAfterData);
            hooks.allColumns.push(allColumns);
            hooks.accessValue.push(accessValue);
            hooks.materializedColumns.push(materializedColumns);
            hooks.materializedColumnsDeps.push(materializedColumnsDeps);
            hooks.visibleColumns.push(visibleColumns$1);
            hooks.visibleColumnsDeps.push(visibleColumnsDeps);
            hooks.useInstance.push(useInstance$7);
            hooks.prepareRow.push(prepareRow$2);
        };
        _UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';
        var defaultPivotColumns = [];
        var defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {
            var header = _ref.header;
            return [props, {
                    onClick: header.canPivot ? function (e) {
                        e.persist();
                        header.togglePivot();
                    } : undefined,
                    style: {
                        cursor: header.canPivot ? 'pointer' : undefined
                    },
                    title: 'Toggle Pivot'
                }];
        }; // Reducer
        function reducer$7(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    pivotColumns: defaultPivotColumns
                }, state);
            }
            if (action.type === actions.resetPivot) {
                return _extends({}, state, {
                    pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns
                });
            }
            if (action.type === actions.togglePivot) {
                var columnId = action.columnId, setPivot = action.value;
                var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);
                if (resolvedPivot) {
                    return _extends({}, state, {
                        pivotColumns: [].concat(state.pivotColumns, [columnId])
                    });
                }
                return _extends({}, state, {
                    pivotColumns: state.pivotColumns.filter(function (d) {
                        return d !== columnId;
                    })
                });
            }
        }
        function useInstanceAfterData(instance) {
            instance.allColumns.forEach(function (column) {
                column.isPivotSource = instance.state.pivotColumns.includes(column.id);
            });
        }
        function allColumns(columns, _ref2) {
            var instance = _ref2.instance;
            columns.forEach(function (column) {
                column.isPivotSource = instance.state.pivotColumns.includes(column.id);
                column.uniqueValues = new Set();
            });
            return columns;
        }
        function accessValue(value, _ref3) {
            var column = _ref3.column;
            if (column.uniqueValues && typeof value !== 'undefined') {
                column.uniqueValues.add(value);
            }
            return value;
        }
        function materializedColumns(materialized, _ref4) {
            var instance = _ref4.instance;
            var allColumns = instance.allColumns, state = instance.state;
            if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {
                return materialized;
            }
            var pivotColumns = state.pivotColumns.map(function (id) {
                return allColumns.find(function (d) {
                    return d.id === id;
                });
            }).filter(Boolean);
            var sourceColumns = allColumns.filter(function (d) {
                return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);
            });
            var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {
                if (depth === void 0) {
                    depth = 0;
                }
                if (pivotFilters === void 0) {
                    pivotFilters = [];
                }
                var pivotColumn = pivotColumns[depth];
                if (!pivotColumn) {
                    return sourceColumns.map(function (sourceColumn) {
                        // TODO: We could offer support here for renesting pivoted
                        // columns inside copies of their header groups. For now,
                        // that seems like it would be (1) overkill on nesting, considering
                        // you already get nesting for every pivot level and (2)
                        // really hard. :)
                        return _extends({}, sourceColumn, {
                            canPivot: false,
                            isPivoted: true,
                            parent: parent,
                            depth: depth,
                            id: "" + (parent ? parent.id + "." + sourceColumn.id : sourceColumn.id),
                            accessor: function accessor(originalRow, i, row) {
                                if (pivotFilters.every(function (filter) {
                                    return filter(row);
                                })) {
                                    return row.values[sourceColumn.id];
                                }
                            }
                        });
                    });
                }
                var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();
                return uniqueValues.map(function (uniqueValue) {
                    var columnGroup = _extends({}, pivotColumn, {
                        Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + ": " + uniqueValue : uniqueValue,
                        isPivotGroup: true,
                        parent: parent,
                        depth: depth,
                        id: parent ? parent.id + "." + pivotColumn.id + "." + uniqueValue : pivotColumn.id + "." + uniqueValue,
                        pivotValue: uniqueValue
                    });
                    columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [function (row) {
                            return row.values[pivotColumn.id] === uniqueValue;
                        }]));
                    return columnGroup;
                });
            };
            var newMaterialized = flattenColumns(buildPivotColumns());
            return [].concat(materialized, newMaterialized);
        }
        function materializedColumnsDeps(deps, _ref5) {
            var _ref5$instance$state = _ref5.instance.state, pivotColumns = _ref5$instance$state.pivotColumns, groupBy = _ref5$instance$state.groupBy;
            return [].concat(deps, [pivotColumns, groupBy]);
        }
        function visibleColumns$1(visibleColumns, _ref6) {
            var state = _ref6.instance.state;
            visibleColumns = visibleColumns.filter(function (d) {
                return !d.isPivotSource;
            });
            if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {
                visibleColumns = visibleColumns.filter(function (column) {
                    return column.isGrouped || column.isPivoted;
                });
            }
            return visibleColumns;
        }
        function visibleColumnsDeps(deps, _ref7) {
            var instance = _ref7.instance;
            return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);
        }
        function useInstance$7(instance) {
            var columns = instance.columns, allColumns = instance.allColumns, flatHeaders = instance.flatHeaders, getHooks = instance.getHooks, plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetPi = instance.autoResetPivot, autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi, manaulPivot = instance.manaulPivot, disablePivot = instance.disablePivot, defaultCanPivot = instance.defaultCanPivot;
            ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');
            var getInstance = useGetLatest(instance);
            allColumns.forEach(function (column) {
                var accessor = column.accessor, defaultColumnPivot = column.defaultPivot, columnDisablePivot = column.disablePivot;
                column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);
                if (column.canPivot) {
                    column.togglePivot = function () {
                        return instance.togglePivot(column.id);
                    };
                }
                column.Aggregated = column.Aggregated || column.Cell;
            });
            var togglePivot = function togglePivot(columnId, value) {
                dispatch({
                    type: actions.togglePivot,
                    columnId: columnId,
                    value: value
                });
            };
            flatHeaders.forEach(function (header) {
                header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {
                    instance: getInstance(),
                    header: header
                });
            });
            var getAutoResetPivot = useGetLatest(autoResetPivot);
            useMountedLayoutEffect(function () {
                if (getAutoResetPivot()) {
                    dispatch({
                        type: actions.resetPivot
                    });
                }
            }, [dispatch, manaulPivot ? null : columns]);
            Object.assign(instance, {
                togglePivot: togglePivot
            });
        }
        function prepareRow$2(row) {
            row.allCells.forEach(function (cell) {
                // Grouped cells are in the pivotColumns and the pivot cell for the row
                cell.isPivoted = cell.column.isPivoted;
            });
        }
        var pluginName$1 = 'useRowSelect'; // Actions
        actions.resetSelectedRows = 'resetSelectedRows';
        actions.toggleAllRowsSelected = 'toggleAllRowsSelected';
        actions.toggleRowSelected = 'toggleRowSelected';
        actions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected';
        var useRowSelect = function useRowSelect(hooks) {
            hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];
            hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];
            hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];
            hooks.stateReducers.push(reducer$8);
            hooks.useInstance.push(useInstance$8);
            hooks.prepareRow.push(prepareRow$3);
        };
        useRowSelect.pluginName = pluginName$1;
        var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {
            var instance = _ref.instance, row = _ref.row;
            var _instance$manualRowSe = instance.manualRowSelectedKey, manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;
            var checked = false;
            if (row.original && row.original[manualRowSelectedKey]) {
                checked = true;
            }
            else {
                checked = row.isSelected;
            }
            return [props, {
                    onChange: function onChange(e) {
                        row.toggleRowSelected(e.target.checked);
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    checked: checked,
                    title: 'Toggle Row Selected',
                    indeterminate: row.isSomeSelected
                }];
        };
        var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {
            var instance = _ref2.instance;
            return [props, {
                    onChange: function onChange(e) {
                        instance.toggleAllRowsSelected(e.target.checked);
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    checked: instance.isAllRowsSelected,
                    title: 'Toggle All Rows Selected',
                    indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)
                }];
        };
        var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps(props, _ref3) {
            var instance = _ref3.instance;
            return [props, {
                    onChange: function onChange(e) {
                        instance.toggleAllPageRowsSelected(e.target.checked);
                    },
                    style: {
                        cursor: 'pointer'
                    },
                    checked: instance.isAllPageRowsSelected,
                    title: 'Toggle All Current Page Rows Selected',
                    indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function (_ref4) {
                        var id = _ref4.id;
                        return instance.state.selectedRowIds[id];
                    }))
                }];
        }; // eslint-disable-next-line max-params
        function reducer$8(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    selectedRowIds: {}
                }, state);
            }
            if (action.type === actions.resetSelectedRows) {
                return _extends({}, state, {
                    selectedRowIds: instance.initialState.selectedRowIds || {}
                });
            }
            if (action.type === actions.toggleAllRowsSelected) {
                var setSelected = action.value;
                var isAllRowsSelected = instance.isAllRowsSelected, rowsById = instance.rowsById, _instance$nonGroupedR = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;
                var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen
                //  Leave all the other rows that are selected alone.
                var selectedRowIds = Object.assign({}, state.selectedRowIds);
                if (selectAll) {
                    Object.keys(nonGroupedRowsById).forEach(function (rowId) {
                        selectedRowIds[rowId] = true;
                    });
                }
                else {
                    Object.keys(nonGroupedRowsById).forEach(function (rowId) {
                        delete selectedRowIds[rowId];
                    });
                }
                return _extends({}, state, {
                    selectedRowIds: selectedRowIds
                });
            }
            if (action.type === actions.toggleRowSelected) {
                var id = action.id, _setSelected = action.value;
                var _rowsById = instance.rowsById, _instance$selectSubRo = instance.selectSubRows, selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo, getSubRows = instance.getSubRows;
                var isSelected = state.selectedRowIds[id];
                var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;
                if (isSelected === shouldExist) {
                    return state;
                }
                var newSelectedRowIds = _extends({}, state.selectedRowIds);
                var handleRowById = function handleRowById(id) {
                    var row = _rowsById[id];
                    if (row) {
                        if (!row.isGrouped) {
                            if (shouldExist) {
                                newSelectedRowIds[id] = true;
                            }
                            else {
                                delete newSelectedRowIds[id];
                            }
                        }
                        if (selectSubRows && getSubRows(row)) {
                            return getSubRows(row).forEach(function (row) {
                                return handleRowById(row.id);
                            });
                        }
                    }
                };
                handleRowById(id);
                return _extends({}, state, {
                    selectedRowIds: newSelectedRowIds
                });
            }
            if (action.type === actions.toggleAllPageRowsSelected) {
                var _setSelected2 = action.value;
                var page = instance.page, _rowsById2 = instance.rowsById, _instance$selectSubRo2 = instance.selectSubRows, _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2, isAllPageRowsSelected = instance.isAllPageRowsSelected, _getSubRows = instance.getSubRows;
                var _selectAll = typeof _setSelected2 !== 'undefined' ? _setSelected2 : !isAllPageRowsSelected;
                var _newSelectedRowIds = _extends({}, state.selectedRowIds);
                var _handleRowById = function _handleRowById(id) {
                    var row = _rowsById2[id];
                    if (!row.isGrouped) {
                        if (_selectAll) {
                            _newSelectedRowIds[id] = true;
                        }
                        else {
                            delete _newSelectedRowIds[id];
                        }
                    }
                    if (_selectSubRows && _getSubRows(row)) {
                        return _getSubRows(row).forEach(function (row) {
                            return _handleRowById(row.id);
                        });
                    }
                };
                page.forEach(function (row) {
                    return _handleRowById(row.id);
                });
                return _extends({}, state, {
                    selectedRowIds: _newSelectedRowIds
                });
            }
            return state;
        }
        function useInstance$8(instance) {
            var data = instance.data, rows = instance.rows, getHooks = instance.getHooks, plugins = instance.plugins, rowsById = instance.rowsById, _instance$nonGroupedR2 = instance.nonGroupedRowsById, nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2, _instance$autoResetSe = instance.autoResetSelectedRows, autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe, selectedRowIds = instance.state.selectedRowIds, _instance$selectSubRo3 = instance.selectSubRows, selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3, dispatch = instance.dispatch, page = instance.page, getSubRows = instance.getSubRows;
            ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'], 'useRowSelect');
            var selectedFlatRows = React.useMemo(function () {
                var selectedFlatRows = [];
                rows.forEach(function (row) {
                    var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];
                    row.isSelected = !!isSelected;
                    row.isSomeSelected = isSelected === null;
                    if (isSelected) {
                        selectedFlatRows.push(row);
                    }
                });
                return selectedFlatRows;
            }, [rows, selectSubRows, selectedRowIds, getSubRows]);
            var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);
            var isAllPageRowsSelected = isAllRowsSelected;
            if (isAllRowsSelected) {
                if (Object.keys(nonGroupedRowsById).some(function (id) {
                    return !selectedRowIds[id];
                })) {
                    isAllRowsSelected = false;
                }
            }
            if (!isAllRowsSelected) {
                if (page && page.length && page.some(function (_ref5) {
                    var id = _ref5.id;
                    return !selectedRowIds[id];
                })) {
                    isAllPageRowsSelected = false;
                }
            }
            var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);
            useMountedLayoutEffect(function () {
                if (getAutoResetSelectedRows()) {
                    dispatch({
                        type: actions.resetSelectedRows
                    });
                }
            }, [dispatch, data]);
            var toggleAllRowsSelected = React.useCallback(function (value) {
                return dispatch({
                    type: actions.toggleAllRowsSelected,
                    value: value
                });
            }, [dispatch]);
            var toggleAllPageRowsSelected = React.useCallback(function (value) {
                return dispatch({
                    type: actions.toggleAllPageRowsSelected,
                    value: value
                });
            }, [dispatch]);
            var toggleRowSelected = React.useCallback(function (id, value) {
                return dispatch({
                    type: actions.toggleRowSelected,
                    id: id,
                    value: value
                });
            }, [dispatch]);
            var getInstance = useGetLatest(instance);
            var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {
                instance: getInstance()
            });
            var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {
                instance: getInstance()
            });
            Object.assign(instance, {
                selectedFlatRows: selectedFlatRows,
                isAllRowsSelected: isAllRowsSelected,
                isAllPageRowsSelected: isAllPageRowsSelected,
                toggleRowSelected: toggleRowSelected,
                toggleAllRowsSelected: toggleAllRowsSelected,
                getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,
                getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,
                toggleAllPageRowsSelected: toggleAllPageRowsSelected
            });
        }
        function prepareRow$3(row, _ref6) {
            var instance = _ref6.instance;
            row.toggleRowSelected = function (set) {
                return instance.toggleRowSelected(row.id, set);
            };
            row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {
                instance: instance,
                row: row
            });
        }
        function getRowIsSelected(row, selectedRowIds, getSubRows) {
            if (selectedRowIds[row.id]) {
                return true;
            }
            var subRows = getSubRows(row);
            if (subRows && subRows.length) {
                var allChildrenSelected = true;
                var someSelected = false;
                subRows.forEach(function (subRow) {
                    // Bail out early if we know both of these
                    if (someSelected && !allChildrenSelected) {
                        return;
                    }
                    if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {
                        someSelected = true;
                    }
                    else {
                        allChildrenSelected = false;
                    }
                });
                return allChildrenSelected ? true : someSelected ? null : false;
            }
            return false;
        }
        var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(row) {
            return {};
        };
        var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(cell) {
            return {};
        }; // Actions
        actions.setRowState = 'setRowState';
        actions.setCellState = 'setCellState';
        actions.resetRowState = 'resetRowState';
        var useRowState = function useRowState(hooks) {
            hooks.stateReducers.push(reducer$9);
            hooks.useInstance.push(useInstance$9);
            hooks.prepareRow.push(prepareRow$4);
        };
        useRowState.pluginName = 'useRowState';
        function reducer$9(state, action, previousState, instance) {
            var _instance$initialRowS = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS, _instance$initialCell = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell, rowsById = instance.rowsById;
            if (action.type === actions.init) {
                return _extends({
                    rowState: {}
                }, state);
            }
            if (action.type === actions.resetRowState) {
                return _extends({}, state, {
                    rowState: instance.initialState.rowState || {}
                });
            }
            if (action.type === actions.setRowState) {
                var _extends2;
                var rowId = action.rowId, value = action.value;
                var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);
                return _extends({}, state, {
                    rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))
                });
            }
            if (action.type === actions.setCellState) {
                var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;
                var _rowId = action.rowId, columnId = action.columnId, _value = action.value;
                var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);
                var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function (cell) {
                    return cell.column.id === columnId;
                }));
                return _extends({}, state, {
                    rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {
                        cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))
                    }), _extends4))
                });
            }
        }
        function useInstance$9(instance) {
            var _instance$autoResetRo = instance.autoResetRowState, autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo, data = instance.data, dispatch = instance.dispatch;
            var setRowState = React.useCallback(function (rowId, value) {
                return dispatch({
                    type: actions.setRowState,
                    rowId: rowId,
                    value: value
                });
            }, [dispatch]);
            var setCellState = React.useCallback(function (rowId, columnId, value) {
                return dispatch({
                    type: actions.setCellState,
                    rowId: rowId,
                    columnId: columnId,
                    value: value
                });
            }, [dispatch]);
            var getAutoResetRowState = useGetLatest(autoResetRowState);
            useMountedLayoutEffect(function () {
                if (getAutoResetRowState()) {
                    dispatch({
                        type: actions.resetRowState
                    });
                }
            }, [data]);
            Object.assign(instance, {
                setRowState: setRowState,
                setCellState: setCellState
            });
        }
        function prepareRow$4(row, _ref) {
            var instance = _ref.instance;
            var _instance$initialRowS2 = instance.initialRowStateAccessor, initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2, _instance$initialCell2 = instance.initialCellStateAccessor, initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2, rowState = instance.state.rowState;
            if (row) {
                row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row);
                row.setState = function (updater) {
                    return instance.setRowState(row.id, updater);
                };
                row.cells.forEach(function (cell) {
                    if (!row.state.cellState) {
                        row.state.cellState = {};
                    }
                    cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);
                    cell.setState = function (updater) {
                        return instance.setCellState(row.id, cell.column.id, updater);
                    };
                });
            }
        }
        actions.resetColumnOrder = 'resetColumnOrder';
        actions.setColumnOrder = 'setColumnOrder';
        var useColumnOrder = function useColumnOrder(hooks) {
            hooks.stateReducers.push(reducer$a);
            hooks.visibleColumnsDeps.push(function (deps, _ref) {
                var instance = _ref.instance;
                return [].concat(deps, [instance.state.columnOrder]);
            });
            hooks.visibleColumns.push(visibleColumns$2);
            hooks.useInstance.push(useInstance$a);
        };
        useColumnOrder.pluginName = 'useColumnOrder';
        function reducer$a(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    columnOrder: []
                }, state);
            }
            if (action.type === actions.resetColumnOrder) {
                return _extends({}, state, {
                    columnOrder: instance.initialState.columnOrder || []
                });
            }
            if (action.type === actions.setColumnOrder) {
                return _extends({}, state, {
                    columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)
                });
            }
        }
        function visibleColumns$2(columns, _ref2) {
            var columnOrder = _ref2.instance.state.columnOrder;
            // If there is no order, return the normal columns
            if (!columnOrder || !columnOrder.length) {
                return columns;
            }
            var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns
            var columnsCopy = [].concat(columns); // And make a new ordered array of the columns
            var columnsInOrder = []; // Loop over the columns and place them in order into the new array
            var _loop = function _loop() {
                var targetColumnId = columnOrderCopy.shift();
                var foundIndex = columnsCopy.findIndex(function (d) {
                    return d.id === targetColumnId;
                });
                if (foundIndex > -1) {
                    columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);
                }
            };
            while (columnsCopy.length && columnOrderCopy.length) {
                _loop();
            } // If there are any columns left, add them to the end
            return [].concat(columnsInOrder, columnsCopy);
        }
        function useInstance$a(instance) {
            var dispatch = instance.dispatch;
            instance.setColumnOrder = React.useCallback(function (columnOrder) {
                return dispatch({
                    type: actions.setColumnOrder,
                    columnOrder: columnOrder
                });
            }, [dispatch]);
        }
        defaultColumn.canResize = true; // Actions
        actions.columnStartResizing = 'columnStartResizing';
        actions.columnResizing = 'columnResizing';
        actions.columnDoneResizing = 'columnDoneResizing';
        actions.resetResize = 'resetResize';
        var useResizeColumns = function useResizeColumns(hooks) {
            hooks.getResizerProps = [defaultGetResizerProps];
            hooks.getHeaderProps.push({
                style: {
                    position: 'relative'
                }
            });
            hooks.stateReducers.push(reducer$b);
            hooks.useInstance.push(useInstance$b);
            hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);
        };
        var defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {
            var instance = _ref.instance, header = _ref.header;
            var dispatch = instance.dispatch;
            var onResizeStart = function onResizeStart(e, header) {
                var isTouchEvent = false;
                if (e.type === 'touchstart') {
                    // lets not respond to multiple touches (e.g. 2 or 3 fingers)
                    if (e.touches && e.touches.length > 1) {
                        return;
                    }
                    isTouchEvent = true;
                }
                var headersToResize = getLeafHeaders(header);
                var headerIdWidths = headersToResize.map(function (d) {
                    return [d.id, d.totalWidth];
                });
                var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;
                var raf;
                var mostRecentClientX;
                var dispatchEnd = function dispatchEnd() {
                    window.cancelAnimationFrame(raf);
                    raf = null;
                    dispatch({
                        type: actions.columnDoneResizing
                    });
                };
                var dispatchMove = function dispatchMove() {
                    window.cancelAnimationFrame(raf);
                    raf = null;
                    dispatch({
                        type: actions.columnResizing,
                        clientX: mostRecentClientX
                    });
                };
                var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame(clientXPos) {
                    mostRecentClientX = clientXPos;
                    if (!raf) {
                        raf = window.requestAnimationFrame(dispatchMove);
                    }
                };
                var handlersAndEvents = {
                    mouse: {
                        moveEvent: 'mousemove',
                        moveHandler: function moveHandler(e) {
                            return scheduleDispatchMoveOnNextAnimationFrame(e.clientX);
                        },
                        upEvent: 'mouseup',
                        upHandler: function upHandler(e) {
                            document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);
                            document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);
                            dispatchEnd();
                        }
                    },
                    touch: {
                        moveEvent: 'touchmove',
                        moveHandler: function moveHandler(e) {
                            if (e.cancelable) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                            scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX);
                            return false;
                        },
                        upEvent: 'touchend',
                        upHandler: function upHandler(e) {
                            document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);
                            document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);
                            dispatchEnd();
                        }
                    }
                };
                var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;
                var passiveIfSupported = passiveEventSupported() ? {
                    passive: false
                } : false;
                document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);
                document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);
                dispatch({
                    type: actions.columnStartResizing,
                    columnId: header.id,
                    columnWidth: header.totalWidth,
                    headerIdWidths: headerIdWidths,
                    clientX: clientX
                });
            };
            return [props, {
                    onMouseDown: function onMouseDown(e) {
                        return e.persist() || onResizeStart(e, header);
                    },
                    onTouchStart: function onTouchStart(e) {
                        return e.persist() || onResizeStart(e, header);
                    },
                    style: {
                        cursor: 'col-resize'
                    },
                    draggable: false,
                    role: 'separator'
                }];
        };
        useResizeColumns.pluginName = 'useResizeColumns';
        function reducer$b(state, action) {
            if (action.type === actions.init) {
                return _extends({
                    columnResizing: {
                        columnWidths: {}
                    }
                }, state);
            }
            if (action.type === actions.resetResize) {
                return _extends({}, state, {
                    columnResizing: {
                        columnWidths: {}
                    }
                });
            }
            if (action.type === actions.columnStartResizing) {
                var clientX = action.clientX, columnId = action.columnId, columnWidth = action.columnWidth, headerIdWidths = action.headerIdWidths;
                return _extends({}, state, {
                    columnResizing: _extends({}, state.columnResizing, {
                        startX: clientX,
                        headerIdWidths: headerIdWidths,
                        columnWidth: columnWidth,
                        isResizingColumn: columnId
                    })
                });
            }
            if (action.type === actions.columnResizing) {
                var _clientX = action.clientX;
                var _state$columnResizing = state.columnResizing, startX = _state$columnResizing.startX, _columnWidth = _state$columnResizing.columnWidth, _state$columnResizing2 = _state$columnResizing.headerIdWidths, _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;
                var deltaX = _clientX - startX;
                var percentageDeltaX = deltaX / _columnWidth;
                var newColumnWidths = {};
                _headerIdWidths.forEach(function (_ref2) {
                    var headerId = _ref2[0], headerWidth = _ref2[1];
                    newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
                });
                return _extends({}, state, {
                    columnResizing: _extends({}, state.columnResizing, {
                        columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)
                    })
                });
            }
            if (action.type === actions.columnDoneResizing) {
                return _extends({}, state, {
                    columnResizing: _extends({}, state.columnResizing, {
                        startX: null,
                        isResizingColumn: null
                    })
                });
            }
        }
        var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {
            var flatHeaders = instance.flatHeaders, disableResizing = instance.disableResizing, getHooks = instance.getHooks, columnResizing = instance.state.columnResizing;
            var getInstance = useGetLatest(instance);
            flatHeaders.forEach(function (header) {
                var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);
                header.canResize = canResize;
                header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;
                header.isResizing = columnResizing.isResizingColumn === header.id;
                if (canResize) {
                    header.getResizerProps = makePropGetter(getHooks().getResizerProps, {
                        instance: getInstance(),
                        header: header
                    });
                }
            });
        };
        function useInstance$b(instance) {
            var plugins = instance.plugins, dispatch = instance.dispatch, _instance$autoResetRe = instance.autoResetResize, autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe, columns = instance.columns;
            ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');
            var getAutoResetResize = useGetLatest(autoResetResize);
            useMountedLayoutEffect(function () {
                if (getAutoResetResize()) {
                    dispatch({
                        type: actions.resetResize
                    });
                }
            }, [columns]);
            var resetResizing = React.useCallback(function () {
                return dispatch({
                    type: actions.resetResize
                });
            }, [dispatch]);
            Object.assign(instance, {
                resetResizing: resetResizing
            });
        }
        function getLeafHeaders(header) {
            var leafHeaders = [];
            var recurseHeader = function recurseHeader(header) {
                if (header.columns && header.columns.length) {
                    header.columns.map(recurseHeader);
                }
                leafHeaders.push(header);
            };
            recurseHeader(header);
            return leafHeaders;
        }
        var cellStyles = {
            position: 'absolute',
            top: 0
        };
        var useAbsoluteLayout = function useAbsoluteLayout(hooks) {
            hooks.getTableBodyProps.push(getRowStyles);
            hooks.getRowProps.push(getRowStyles);
            hooks.getHeaderGroupProps.push(getRowStyles);
            hooks.getFooterGroupProps.push(getRowStyles);
            hooks.getHeaderProps.push(function (props, _ref) {
                var column = _ref.column;
                return [props, {
                        style: _extends({}, cellStyles, {
                            left: column.totalLeft + "px",
                            width: column.totalWidth + "px"
                        })
                    }];
            });
            hooks.getCellProps.push(function (props, _ref2) {
                var cell = _ref2.cell;
                return [props, {
                        style: _extends({}, cellStyles, {
                            left: cell.column.totalLeft + "px",
                            width: cell.column.totalWidth + "px"
                        })
                    }];
            });
            hooks.getFooterProps.push(function (props, _ref3) {
                var column = _ref3.column;
                return [props, {
                        style: _extends({}, cellStyles, {
                            left: column.totalLeft + "px",
                            width: column.totalWidth + "px"
                        })
                    }];
            });
        };
        useAbsoluteLayout.pluginName = 'useAbsoluteLayout';
        var getRowStyles = function getRowStyles(props, _ref4) {
            var instance = _ref4.instance;
            return [props, {
                    style: {
                        position: 'relative',
                        width: instance.totalColumnsWidth + "px"
                    }
                }];
        };
        var cellStyles$1 = {
            display: 'inline-block',
            boxSizing: 'border-box'
        };
        var getRowStyles$1 = function getRowStyles(props, _ref) {
            var instance = _ref.instance;
            return [props, {
                    style: {
                        display: 'flex',
                        width: instance.totalColumnsWidth + "px"
                    }
                }];
        };
        var useBlockLayout = function useBlockLayout(hooks) {
            hooks.getRowProps.push(getRowStyles$1);
            hooks.getHeaderGroupProps.push(getRowStyles$1);
            hooks.getFooterGroupProps.push(getRowStyles$1);
            hooks.getHeaderProps.push(function (props, _ref2) {
                var column = _ref2.column;
                return [props, {
                        style: _extends({}, cellStyles$1, {
                            width: column.totalWidth + "px"
                        })
                    }];
            });
            hooks.getCellProps.push(function (props, _ref3) {
                var cell = _ref3.cell;
                return [props, {
                        style: _extends({}, cellStyles$1, {
                            width: cell.column.totalWidth + "px"
                        })
                    }];
            });
            hooks.getFooterProps.push(function (props, _ref4) {
                var column = _ref4.column;
                return [props, {
                        style: _extends({}, cellStyles$1, {
                            width: column.totalWidth + "px"
                        })
                    }];
            });
        };
        useBlockLayout.pluginName = 'useBlockLayout';
        function useFlexLayout(hooks) {
            hooks.getTableProps.push(getTableProps);
            hooks.getRowProps.push(getRowStyles$2);
            hooks.getHeaderGroupProps.push(getRowStyles$2);
            hooks.getFooterGroupProps.push(getRowStyles$2);
            hooks.getHeaderProps.push(getHeaderProps);
            hooks.getCellProps.push(getCellProps);
            hooks.getFooterProps.push(getFooterProps);
        }
        useFlexLayout.pluginName = 'useFlexLayout';
        var getTableProps = function getTableProps(props, _ref) {
            var instance = _ref.instance;
            return [props, {
                    style: {
                        minWidth: instance.totalColumnsMinWidth + "px"
                    }
                }];
        };
        var getRowStyles$2 = function getRowStyles(props, _ref2) {
            var instance = _ref2.instance;
            return [props, {
                    style: {
                        display: 'flex',
                        flex: '1 0 auto',
                        minWidth: instance.totalColumnsMinWidth + "px"
                    }
                }];
        };
        var getHeaderProps = function getHeaderProps(props, _ref3) {
            var column = _ref3.column;
            return [props, {
                    style: {
                        boxSizing: 'border-box',
                        flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : undefined,
                        minWidth: column.totalMinWidth + "px",
                        width: column.totalWidth + "px"
                    }
                }];
        };
        var getCellProps = function getCellProps(props, _ref4) {
            var cell = _ref4.cell;
            return [props, {
                    style: {
                        boxSizing: 'border-box',
                        flex: cell.column.totalFlexWidth + " 0 auto",
                        minWidth: cell.column.totalMinWidth + "px",
                        width: cell.column.totalWidth + "px"
                    }
                }];
        };
        var getFooterProps = function getFooterProps(props, _ref5) {
            var column = _ref5.column;
            return [props, {
                    style: {
                        boxSizing: 'border-box',
                        flex: column.totalFlexWidth ? column.totalFlexWidth + " 0 auto" : undefined,
                        minWidth: column.totalMinWidth + "px",
                        width: column.totalWidth + "px"
                    }
                }];
        };
        actions.columnStartResizing = 'columnStartResizing';
        actions.columnResizing = 'columnResizing';
        actions.columnDoneResizing = 'columnDoneResizing';
        actions.resetResize = 'resetResize';
        function useGridLayout(hooks) {
            hooks.stateReducers.push(reducer$c);
            hooks.getTableProps.push(getTableProps$1);
            hooks.getHeaderProps.push(getHeaderProps$1);
            hooks.getRowProps.push(getRowProps);
        }
        useGridLayout.pluginName = 'useGridLayout';
        var getTableProps$1 = function getTableProps(props, _ref) {
            var instance = _ref.instance;
            var gridTemplateColumns = instance.visibleColumns.map(function (column) {
                var _instance$state$colum;
                if (instance.state.gridLayout.columnWidths[column.id])
                    return instance.state.gridLayout.columnWidths[column.id] + "px"; // When resizing, lock the width of all unset columns
                // instead of using user-provided width or defaultColumn width,
                // which could potentially be 'auto' or 'fr' units that don't scale linearly
                if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn)
                    return instance.state.gridLayout.startWidths[column.id] + "px";
                if (typeof column.width === 'number')
                    return column.width + "px";
                return column.width;
            });
            return [props, {
                    style: {
                        display: "grid",
                        gridTemplateColumns: gridTemplateColumns.join(" ")
                    }
                }];
        };
        var getHeaderProps$1 = function getHeaderProps(props, _ref2) {
            var column = _ref2.column;
            return [props, {
                    id: "header-cell-" + column.id,
                    style: {
                        position: "sticky",
                        //enables a scroll wrapper to be placed around the table and have sticky headers
                        gridColumn: "span " + column.totalVisibleHeaderCount
                    }
                }];
        };
        var getRowProps = function getRowProps(props, _ref3) {
            var row = _ref3.row;
            if (row.isExpanded) {
                return [props, {
                        style: {
                            gridColumn: "1 / " + (row.cells.length + 1)
                        }
                    }];
            }
            return [props, {}];
        };
        function reducer$c(state, action, previousState, instance) {
            if (action.type === actions.init) {
                return _extends({
                    gridLayout: {
                        columnWidths: {}
                    }
                }, state);
            }
            if (action.type === actions.resetResize) {
                return _extends({}, state, {
                    gridLayout: {
                        columnWidths: {}
                    }
                });
            }
            if (action.type === actions.columnStartResizing) {
                var columnId = action.columnId, headerIdWidths = action.headerIdWidths;
                var columnWidth = getElementWidth(columnId);
                if (columnWidth !== undefined) {
                    var startWidths = instance.visibleColumns.reduce(function (acc, column) {
                        var _extends2;
                        return _extends({}, acc, (_extends2 = {}, _extends2[column.id] = getElementWidth(column.id), _extends2));
                    }, {});
                    var minWidths = instance.visibleColumns.reduce(function (acc, column) {
                        var _extends3;
                        return _extends({}, acc, (_extends3 = {}, _extends3[column.id] = column.minWidth, _extends3));
                    }, {});
                    var maxWidths = instance.visibleColumns.reduce(function (acc, column) {
                        var _extends4;
                        return _extends({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));
                    }, {});
                    var headerIdGridWidths = headerIdWidths.map(function (_ref4) {
                        var headerId = _ref4[0];
                        return [headerId, getElementWidth(headerId)];
                    });
                    return _extends({}, state, {
                        gridLayout: _extends({}, state.gridLayout, {
                            startWidths: startWidths,
                            minWidths: minWidths,
                            maxWidths: maxWidths,
                            headerIdGridWidths: headerIdGridWidths,
                            columnWidth: columnWidth
                        })
                    });
                }
                else {
                    return state;
                }
            }
            if (action.type === actions.columnResizing) {
                var clientX = action.clientX;
                var startX = state.columnResizing.startX;
                var _state$gridLayout = state.gridLayout, _columnWidth = _state$gridLayout.columnWidth, _minWidths = _state$gridLayout.minWidths, _maxWidths = _state$gridLayout.maxWidths, _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths, _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;
                var deltaX = clientX - startX;
                var percentageDeltaX = deltaX / _columnWidth;
                var newColumnWidths = {};
                _headerIdGridWidths.forEach(function (_ref5) {
                    var headerId = _ref5[0], headerWidth = _ref5[1];
                    newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);
                });
                return _extends({}, state, {
                    gridLayout: _extends({}, state.gridLayout, {
                        columnWidths: _extends({}, state.gridLayout.columnWidths, {}, newColumnWidths)
                    })
                });
            }
            if (action.type === actions.columnDoneResizing) {
                return _extends({}, state, {
                    gridLayout: _extends({}, state.gridLayout, {
                        startWidths: {},
                        minWidths: {},
                        maxWidths: {}
                    })
                });
            }
        }
        function getElementWidth(columnId) {
            var _document$getElementB;
            var width = (_document$getElementB = document.getElementById("header-cell-" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;
            if (width !== undefined) {
                return width;
            }
        }
        exports._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;
        exports.actions = actions;
        exports.defaultColumn = defaultColumn;
        exports.defaultGroupByFn = defaultGroupByFn;
        exports.defaultOrderByFn = defaultOrderByFn;
        exports.defaultRenderer = defaultRenderer;
        exports.emptyRenderer = emptyRenderer;
        exports.ensurePluginOrder = ensurePluginOrder;
        exports.flexRender = flexRender;
        exports.functionalUpdate = functionalUpdate;
        exports.loopHooks = loopHooks;
        exports.makePropGetter = makePropGetter;
        exports.makeRenderer = makeRenderer;
        exports.reduceHooks = reduceHooks;
        exports.safeUseLayoutEffect = safeUseLayoutEffect;
        exports.useAbsoluteLayout = useAbsoluteLayout;
        exports.useAsyncDebounce = useAsyncDebounce;
        exports.useBlockLayout = useBlockLayout;
        exports.useColumnOrder = useColumnOrder;
        exports.useExpanded = useExpanded;
        exports.useFilters = useFilters;
        exports.useFlexLayout = useFlexLayout;
        exports.useGetLatest = useGetLatest;
        exports.useGlobalFilter = useGlobalFilter;
        exports.useGridLayout = useGridLayout;
        exports.useGroupBy = useGroupBy;
        exports.useMountedLayoutEffect = useMountedLayoutEffect;
        exports.usePagination = usePagination;
        exports.useResizeColumns = useResizeColumns;
        exports.useRowSelect = useRowSelect;
        exports.useRowState = useRowState;
        exports.useSortBy = useSortBy;
        exports.useTable = useTable;
        Object.defineProperty(exports, '__esModule', { value: true });
    })));
}(reactTable_development, reactTable_development.exports));
if (process.env.NODE_ENV === 'production') {
    reactTable.exports = reactTable_production_min.exports;
}
else {
    reactTable.exports = reactTable_development.exports;
}
function ownKeys$2(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function (r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread2$2(e) {
    for (var r = 1; r < arguments.length; r++) {
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) {
            _defineProperty$2(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
function _arrayWithHoles$1(arr) {
    if (Array.isArray(arr))
        return arr;
}
function _iterableToArrayLimit$1(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) {
                if (Object(t) !== t)
                    return;
                f = !1;
            }
            else
                for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0)
                    ;
        }
        catch (r) {
            o = !0, n = r;
        }
        finally {
            try {
                if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
                    return;
            }
            finally {
                if (o)
                    throw n;
            }
        }
        return a;
    }
}
function _nonIterableRest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray$1(arr, i) {
    return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest$1();
}
function _objectWithoutPropertiesLoose$2(source, excluded) {
    if (source == null)
        return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
            continue;
        target[key] = source[key];
    }
    return target;
}
function _objectWithoutProperties$1(source, excluded) {
    if (source == null)
        return {};
    var target = _objectWithoutPropertiesLoose$2(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
                continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
            target[key] = source[key];
        }
    }
    return target;
}
var _excluded$6 = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
function useStateManager(_ref) {
    var _ref$defaultInputValu = _ref.defaultInputValue, defaultInputValue = _ref$defaultInputValu === void 0 ? '' : _ref$defaultInputValu, _ref$defaultMenuIsOpe = _ref.defaultMenuIsOpen, defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe, _ref$defaultValue = _ref.defaultValue, defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue, propsInputValue = _ref.inputValue, propsMenuIsOpen = _ref.menuIsOpen, propsOnChange = _ref.onChange, propsOnInputChange = _ref.onInputChange, propsOnMenuClose = _ref.onMenuClose, propsOnMenuOpen = _ref.onMenuOpen, propsValue = _ref.value, restSelectProps = _objectWithoutProperties$1(_ref, _excluded$6);
    var _useState = (0, react_1.useState)(propsInputValue !== undefined ? propsInputValue : defaultInputValue), _useState2 = _slicedToArray$1(_useState, 2), stateInputValue = _useState2[0], setStateInputValue = _useState2[1];
    var _useState3 = (0, react_1.useState)(propsMenuIsOpen !== undefined ? propsMenuIsOpen : defaultMenuIsOpen), _useState4 = _slicedToArray$1(_useState3, 2), stateMenuIsOpen = _useState4[0], setStateMenuIsOpen = _useState4[1];
    var _useState5 = (0, react_1.useState)(propsValue !== undefined ? propsValue : defaultValue), _useState6 = _slicedToArray$1(_useState5, 2), stateValue = _useState6[0], setStateValue = _useState6[1];
    var onChange = (0, react_1.useCallback)(function (value, actionMeta) {
        if (typeof propsOnChange === 'function') {
            propsOnChange(value, actionMeta);
        }
        setStateValue(value);
    }, [propsOnChange]);
    var onInputChange = (0, react_1.useCallback)(function (value, actionMeta) {
        var newValue;
        if (typeof propsOnInputChange === 'function') {
            newValue = propsOnInputChange(value, actionMeta);
        }
        setStateInputValue(newValue !== undefined ? newValue : value);
    }, [propsOnInputChange]);
    var onMenuOpen = (0, react_1.useCallback)(function () {
        if (typeof propsOnMenuOpen === 'function') {
            propsOnMenuOpen();
        }
        setStateMenuIsOpen(true);
    }, [propsOnMenuOpen]);
    var onMenuClose = (0, react_1.useCallback)(function () {
        if (typeof propsOnMenuClose === 'function') {
            propsOnMenuClose();
        }
        setStateMenuIsOpen(false);
    }, [propsOnMenuClose]);
    var inputValue = propsInputValue !== undefined ? propsInputValue : stateInputValue;
    var menuIsOpen = propsMenuIsOpen !== undefined ? propsMenuIsOpen : stateMenuIsOpen;
    var value = propsValue !== undefined ? propsValue : stateValue;
    return _objectSpread2$2(_objectSpread2$2({}, restSelectProps), {}, {
        inputValue: inputValue,
        menuIsOpen: menuIsOpen,
        onChange: onChange,
        onInputChange: onInputChange,
        onMenuClose: onMenuClose,
        onMenuOpen: onMenuOpen,
        value: value
    });
}
function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
function _arrayWithoutHoles$2(arr) {
    if (Array.isArray(arr))
        return _arrayLikeToArray$2(arr);
}
function _iterableToArray$2(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
}
function _nonIterableSpread$2() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray$2(arr) {
    return _arrayWithoutHoles$2(arr) || _iterableToArray$2(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread$2();
}
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/
// $FlowFixMe
function sheetForTag(tag) {
    if (tag.sheet) {
        // $FlowFixMe
        return tag.sheet;
    } // this weirdness brought to you by firefox
    /* istanbul ignore next */
    for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
            // $FlowFixMe
            return document.styleSheets[i];
        }
    }
}
function createStyleElement(options) {
    var tag = document.createElement('style');
    tag.setAttribute('data-emotion', options.key);
    if (options.nonce !== undefined) {
        tag.setAttribute('nonce', options.nonce);
    }
    tag.appendChild(document.createTextNode(''));
    tag.setAttribute('data-s', '');
    return tag;
}
var StyleSheet = /*#__PURE__*/ function () {
    // Using Node instead of HTMLElement since container may be a ShadowRoot
    function StyleSheet(options) {
        var _this = this;
        this._insertTag = function (tag) {
            var before;
            if (_this.tags.length === 0) {
                if (_this.insertionPoint) {
                    before = _this.insertionPoint.nextSibling;
                }
                else if (_this.prepend) {
                    before = _this.container.firstChild;
                }
                else {
                    before = _this.before;
                }
            }
            else {
                before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === undefined ? process.env.NODE_ENV === 'production' : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
    }
    var _proto = StyleSheet.prototype;
    _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
        // the max length is how many rules we have per style tag, it's 65000 in speedy mode
        // it's 1 in dev because we insert source maps that map a single rule to a location
        // and you can only have one source map per style tag
        if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
            this._insertTag(createStyleElement(this));
        }
        var tag = this.tags[this.tags.length - 1];
        if (process.env.NODE_ENV !== 'production') {
            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
                // this would only cause problem in speedy mode
                // but we don't want enabling speedy to affect the observable behavior
                // so we report this error at all times
                console.error("You're attempting to insert the following rule:\n" + rule + '\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        }
        if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
                // this is the ultrafast version, works across browsers
                // the big drawback is that the css won't be editable in devtools
                sheet.insertRule(rule, sheet.cssRules.length);
            }
            catch (e) {
                if (process.env.NODE_ENV !== 'production' && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
                    console.error("There was a problem inserting the following rule: \"" + rule + "\"", e);
                }
            }
        }
        else {
            tag.appendChild(document.createTextNode(rule));
        }
        this.ctr++;
    };
    _proto.flush = function flush() {
        // $FlowFixMe
        this.tags.forEach(function (tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        if (process.env.NODE_ENV !== 'production') {
            this._alreadyInsertedOrderInsensitiveRule = false;
        }
    };
    return StyleSheet;
}();
var MS = '-ms-';
var MOZ = '-moz-';
var WEBKIT = '-webkit-';
var COMMENT = 'comm';
var RULESET = 'rule';
var DECLARATION = 'decl';
var IMPORT = '@import';
var KEYFRAMES = '@keyframes';
var LAYER = '@layer';
/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs;
/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode;
/**
 * @param {object}
 * @return {object}
 */
var assign = Object.assign;
/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash$2(value, length) {
    return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0;
}
/**
 * @param {string} value
 * @return {string}
 */
function trim(value) {
    return value.trim();
}
/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
}
/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace$1(value, pattern, replacement) {
    return value.replace(pattern, replacement);
}
/**
 * @param {string} value
 * @param {string} search
 * @return {number}
 */
function indexof(value, search) {
    return value.indexOf(search);
}
/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat(value, index) {
    return value.charCodeAt(index) | 0;
}
/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr(value, begin, end) {
    return value.slice(begin, end);
}
/**
 * @param {string} value
 * @return {number}
 */
function strlen(value) {
    return value.length;
}
/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof(value) {
    return value.length;
}
/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append(value, array) {
    return array.push(value), value;
}
/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine(array, callback) {
    return array.map(callback).join('');
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = '';
/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {number} length
 */
function node(value, root, parent, type, props, children, length) {
    return { value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: '' };
}
/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy(root, props) {
    return assign(node('', null, null, '', null, null, 0), root, { length: -root.length }, props);
}
/**
 * @return {number}
 */
function char() {
    return character;
}
/**
 * @return {number}
 */
function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
        column = 1, line--;
    return character;
}
/**
 * @return {number}
 */
function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
        column = 1, line++;
    return character;
}
/**
 * @return {number}
 */
function peek() {
    return charat(characters, position);
}
/**
 * @return {number}
 */
function caret() {
    return position;
}
/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice(begin, end) {
    return substr(characters, begin, end);
}
/**
 * @param {number} type
 * @return {number}
 */
function token(type) {
    switch (type) {
        // \0 \t \n \r \s whitespace token
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
            return 5;
        // ! + , / > @ ~ isolate token
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        // ; { } breakpoint token
        case 59:
        case 123:
        case 125:
            return 4;
        // : accompanied token
        case 58:
            return 3;
        // " ' ( [ opening delimit token
        case 34:
        case 39:
        case 40:
        case 91:
            return 2;
        // ) ] closing delimit token
        case 41:
        case 93:
            return 1;
    }
    return 0;
}
/**
 * @param {string} value
 * @return {any[]}
 */
function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
}
/**
 * @param {any} value
 * @return {any}
 */
function dealloc(value) {
    return characters = '', value;
}
/**
 * @param {number} type
 * @return {string}
 */
function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
/**
 * @param {number} type
 * @return {string}
 */
function whitespace(type) {
    while (character = peek())
        if (character < 33)
            next();
        else
            break;
    return token(type) > 2 || token(character) > 3 ? '' : ' ';
}
/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping(index, count) {
    while (--count && next())
        // not 0-9 A-F a-f
        if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
            break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
}
/**
 * @param {number} type
 * @return {number}
 */
function delimiter(type) {
    while (next())
        switch (character) {
            // ] ) " '
            case type:
                return position;
            // " '
            case 34:
            case 39:
                if (type !== 34 && type !== 39)
                    delimiter(character);
                break;
            // (
            case 40:
                if (type === 41)
                    delimiter(type);
                break;
            // \
            case 92:
                next();
                break;
        }
    return position;
}
/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter(type, index) {
    while (next())
        // //
        if (type + character === 47 + 10)
            break;
        // /*
        else if (type + character === 42 + 42 && peek() === 47)
            break;
    return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next());
}
/**
 * @param {number} index
 * @return {string}
 */
function identifier(index) {
    while (!token(peek()))
        next();
    return slice(index, position);
}
/**
 * @param {string} value
 * @return {object[]}
 */
function compile(value) {
    return dealloc(parse$2('', null, null, null, [''], value = alloc(value), 0, [0], value));
}
/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse$2(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character = 0;
    var type = '';
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters = type;
    while (scanning)
        switch (previous = character, character = next()) {
            // (
            case 40:
                if (previous != 108 && charat(characters, length - 1) == 58) {
                    if (indexof(characters += replace$1(delimit(character), '&', '&\f'), '&\f') != -1)
                        ampersand = -1;
                    break;
                }
            // " ' [
            case 34:
            case 39:
            case 91:
                characters += delimit(character);
                break;
            // \t \n \r \s
            case 9:
            case 10:
            case 13:
            case 32:
                characters += whitespace(previous);
                break;
            // \
            case 92:
                characters += escaping(caret() - 1, 7);
                continue;
            // /
            case 47:
                switch (peek()) {
                    case 42:
                    case 47:
                        append(comment(commenter(next(), caret()), root, parent), declarations);
                        break;
                    default:
                        characters += '/';
                }
                break;
            // {
            case 123 * variable:
                points[index++] = strlen(characters) * ampersand;
            // } ; \0
            case 125 * variable:
            case 59:
            case 0:
                switch (character) {
                    // \0 }
                    case 0:
                    case 125: scanning = 0;
                    // ;
                    case 59 + offset:
                        if (ampersand == -1)
                            characters = replace$1(characters, /\f/g, '');
                        if (property > 0 && (strlen(characters) - length))
                            append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace$1(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
                        break;
                    // @ ;
                    case 59: characters += ';';
                    // { rule/at-rule
                    default:
                        append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);
                        if (character === 123)
                            if (offset === 0)
                                parse$2(characters, root, reference, reference, props, rulesets, length, points, children);
                            else
                                switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
                                    // d l m s
                                    case 100:
                                    case 108:
                                    case 109:
                                    case 115:
                                        parse$2(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
                                        break;
                                    default:
                                        parse$2(characters, reference, reference, reference, [''], children, 0, points, children);
                                }
                }
                index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
                break;
            // :
            case 58:
                length = 1 + strlen(characters), property = previous;
            default:
                if (variable < 1)
                    if (character == 123)
                        --variable;
                    else if (character == 125 && variable++ == 0 && prev() == 125)
                        continue;
                switch (characters += from(character), character * variable) {
                    // &
                    case 38:
                        ampersand = offset > 0 ? 1 : (characters += '\f', -1);
                        break;
                    // ,
                    case 44:
                        points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
                        break;
                    // @
                    case 64:
                        // -
                        if (peek() === 45)
                            characters += delimit(next());
                        atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
                        break;
                    // -
                    case 45:
                        if (previous === 45 && strlen(characters) == 2)
                            variable = 0;
                }
        }
    return rulesets;
}
/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @return {object}
 */
function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [''];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
        for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
            if (z = trim(j > 0 ? rule[x] + ' ' + y : replace$1(y, /&\f/g, rule[x])))
                props[k++] = z;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length);
}
/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @return {object}
 */
function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @return {object}
 */
function declaration(value, root, parent, length) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length);
}
/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize(children, callback) {
    var output = '';
    var length = sizeof(children);
    for (var i = 0; i < length; i++)
        output += callback(children[i], i, children, callback) || '';
    return output;
}
/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify(element, index, children, callback) {
    switch (element.type) {
        case LAYER: if (element.children.length)
            break;
        case IMPORT:
        case DECLARATION: return element.return = element.return || element.value;
        case COMMENT: return '';
        case KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}';
        case RULESET: element.value = element.props.join(',');
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : '';
}
/**
 * @param {function[]} collection
 * @return {function}
 */
function middleware(collection) {
    var length = sizeof(collection);
    return function (element, index, children, callback) {
        var output = '';
        for (var i = 0; i < length; i++)
            output += collection[i](element, index, children, callback) || '';
        return output;
    };
}
/**
 * @param {function} callback
 * @return {function}
 */
function rulesheet(callback) {
    return function (element) {
        if (!element.root)
            if (element = element.return)
                callback(element);
    };
}
var weakMemoize = function weakMemoize(func) {
    // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
    var cache = new WeakMap();
    return function (arg) {
        if (cache.has(arg)) {
            // $FlowFixMe
            return cache.get(arg);
        }
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
    };
};
function memoize$2(fn) {
    var cache = Object.create(null);
    return function (arg) {
        if (cache[arg] === undefined)
            cache[arg] = fn(arg);
        return cache[arg];
    };
}
var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
    var previous = 0;
    var character = 0;
    while (true) {
        previous = character;
        character = peek(); // &\f
        if (previous === 38 && character === 12) {
            points[index] = 1;
        }
        if (token(character)) {
            break;
        }
        next();
    }
    return slice(begin, position);
};
var toRules = function toRules(parsed, points) {
    // pretend we've started with a comma
    var index = -1;
    var character = 44;
    do {
        switch (token(character)) {
            case 0:
                // &\f
                if (character === 38 && peek() === 12) {
                    // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
                    // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
                    // and when it should just concatenate the outer and inner selectors
                    // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
                    points[index] = 1;
                }
                parsed[index] += identifierWithPointTracking(position - 1, points, index);
                break;
            case 2:
                parsed[index] += delimit(character);
                break;
            case 4:
                // comma
                if (character === 44) {
                    // colon
                    parsed[++index] = peek() === 58 ? '&\f' : '';
                    points[index] = parsed[index].length;
                    break;
                }
            // fallthrough
            default:
                parsed[index] += from(character);
        }
    } while (character = next());
    return parsed;
};
var getRules = function getRules(value, points) {
    return dealloc(toRules(alloc(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11
var fixedElements = /* #__PURE__ */ new WeakMap();
var compat = function compat(element) {
    if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
        return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== 'rule') {
        parent = parent.parent;
        if (!parent)
            return;
    } // short-circuit for the simplest case
    if (element.props.length === 1 && value.charCodeAt(0) !== 58
        /* colon */
        && !fixedElements.get(parent)) {
        return;
    } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
    // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"
    if (isImplicitRule) {
        return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i = 0, k = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
        }
    }
};
var removeLabel = function removeLabel(element) {
    if (element.type === 'decl') {
        var value = element.value;
        if ( // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98) {
            // this ignores label
            element["return"] = '';
            element.value = '';
        }
    }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
var isIgnoringComment = function isIgnoringComment(element) {
    return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
    return function (element, index, children) {
        if (element.type !== 'rule' || cache.compat)
            return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses) {
            var isNested = !!element.parent; // in nested rules comments become children of the "auto-inserted" rule and that's always the `element.parent`
            //
            // considering this input:
            // .a {
            //   .b /* comm */ {}
            //   color: hotpink;
            // }
            // we get output corresponding to this:
            // .a {
            //   & {
            //     /* comm */
            //     color: hotpink;
            //   }
            //   .b {}
            // }
            var commentContainer = isNested ? element.parent.children : // global rule at the root level
                children;
            for (var i = commentContainer.length - 1; i >= 0; i--) {
                var node = commentContainer[i];
                if (node.line < element.line) {
                    break;
                } // it is quite weird but comments are *usually* put at `column: element.column - 1`
                // so we seek *from the end* for the node that is earlier than the rule's `element` and check that
                // this will also match inputs like this:
                // .a {
                //   /* comm */
                //   .b {}
                // }
                //
                // but that is fine
                //
                // it would be the easiest to change the placement of the comment to be the first child of the rule:
                // .a {
                //   .b { /* comm */ }
                // }
                // with such inputs we wouldn't have to search for the comment at all
                // TODO: consider changing this comment placement in the next major version
                if (node.column < element.column) {
                    if (isIgnoringComment(node)) {
                        return;
                    }
                    break;
                }
            }
            unsafePseudoClasses.forEach(function (unsafePseudoClass) {
                console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
            });
        }
    };
};
var isImportRule = function isImportRule(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
    for (var i = index - 1; i >= 0; i--) {
        if (!isImportRule(children[i])) {
            return true;
        }
    }
    return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user
var nullifyElement = function nullifyElement(element) {
    element.type = '';
    element.value = '';
    element["return"] = '';
    element.children = '';
    element.props = '';
};
var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
    if (!isImportRule(element)) {
        return;
    }
    if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
    }
    else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
    }
};
/* eslint-disable no-fallthrough */
function prefix$1(value, length) {
    switch (hash$2(value, length)) {
        // color-adjust
        case 5103:
            return WEBKIT + 'print-' + value + value;
        // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
            return WEBKIT + value + value;
        // appearance, user-select, transform, hyphens, text-size-adjust
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
            return WEBKIT + value + MOZ + value + MS + value + value;
        // flex, flex-direction
        case 6828:
        case 4268:
            return WEBKIT + value + MS + value + value;
        // order
        case 6165:
            return WEBKIT + value + MS + 'flex-' + value + value;
        // align-items
        case 5187:
            return WEBKIT + value + replace$1(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
        // align-self
        case 5443:
            return WEBKIT + value + MS + 'flex-item-' + replace$1(value, /flex-|-self/, '') + value;
        // align-content
        case 4675:
            return WEBKIT + value + MS + 'flex-line-pack' + replace$1(value, /align-content|flex-|-self/, '') + value;
        // flex-shrink
        case 5548:
            return WEBKIT + value + MS + replace$1(value, 'shrink', 'negative') + value;
        // flex-basis
        case 5292:
            return WEBKIT + value + MS + replace$1(value, 'basis', 'preferred-size') + value;
        // flex-grow
        case 6060:
            return WEBKIT + 'box-' + replace$1(value, '-grow', '') + WEBKIT + value + MS + replace$1(value, 'grow', 'positive') + value;
        // transition
        case 4554:
            return WEBKIT + replace$1(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
        // cursor
        case 6187:
            return replace$1(replace$1(replace$1(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
        // background, background-image
        case 5495:
        case 3959:
            return replace$1(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
        // justify-content
        case 4968:
            return replace$1(replace$1(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
        // (margin|padding)-inline-(start|end)
        case 4095:
        case 3583:
        case 4068:
        case 2532:
            return replace$1(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
        // (min|max)?(width|height|inline-size|block-size)
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
            // stretch, max-content, min-content, fill-available
            if (strlen(value) - 1 - length > 6)
                switch (charat(value, length + 1)) {
                    // (m)ax-content, (m)in-content
                    case 109:
                        // -
                        if (charat(value, length + 4) !== 45)
                            break;
                    // (f)ill-available, (f)it-content
                    case 102:
                        return replace$1(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
                    // (s)tretch
                    case 115:
                        return ~indexof(value, 'stretch') ? prefix$1(replace$1(value, 'stretch', 'fill-available'), length) + value : value;
                }
            break;
        // position: sticky
        case 4949:
            // (s)ticky?
            if (charat(value, length + 1) !== 115)
                break;
        // display: (flex|inline-flex)
        case 6444:
            switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
                // stic(k)y
                case 107:
                    return replace$1(value, ':', ':' + WEBKIT) + value;
                // (inline-)?fl(e)x
                case 101:
                    return replace$1(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
            }
            break;
        // writing-mode
        case 5936:
            switch (charat(value, length + 11)) {
                // vertical-l(r)
                case 114:
                    return WEBKIT + value + MS + replace$1(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
                // vertical-r(l)
                case 108:
                    return WEBKIT + value + MS + replace$1(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
                // horizontal(-)tb
                case 45:
                    return WEBKIT + value + MS + replace$1(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
            }
            return WEBKIT + value + MS + value + value;
    }
    return value;
}
var prefixer = function prefixer(element, index, children, callback) {
    if (element.length > -1)
        if (!element["return"])
            switch (element.type) {
                case DECLARATION:
                    element["return"] = prefix$1(element.value, element.length);
                    break;
                case KEYFRAMES:
                    return serialize([copy(element, {
                            value: replace$1(element.value, '@', '@' + WEBKIT)
                        })], callback);
                case RULESET:
                    if (element.length)
                        return combine(element.props, function (value) {
                            switch (match(value, /(::plac\w+|:read-\w+)/)) {
                                // :read-(only|write)
                                case ':read-only':
                                case ':read-write':
                                    return serialize([copy(element, {
                                            props: [replace$1(value, /:(read-\w+)/, ':' + MOZ + '$1')]
                                        })], callback);
                                // :placeholder
                                case '::placeholder':
                                    return serialize([copy(element, {
                                            props: [replace$1(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
                                        }), copy(element, {
                                            props: [replace$1(value, /:(plac\w+)/, ':' + MOZ + '$1')]
                                        }), copy(element, {
                                            props: [replace$1(value, /:(plac\w+)/, MS + 'input-$1')]
                                        })], callback);
                            }
                            return '';
                        });
            }
};
var isBrowser$4 = typeof document !== 'undefined';
var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
    return memoize$2(function () {
        var cache = {};
        return function (name) {
            return cache[name];
        };
    });
});
var defaultStylisPlugins = [prefixer];
var createCache = function createCache(options) {
    var key = options.key;
    if (process.env.NODE_ENV !== 'production' && !key) {
        throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\n" + "If multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (isBrowser$4 && key === 'css') {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
        // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
        // note this very very intentionally targets all style elements regardless of the key to ensure
        // that creating a cache works inside of render of a React component
        Array.prototype.forEach.call(ssrStyles, function (node) {
            // we want to only move elements which have a space in the data-emotion attribute value
            // because that indicates that it is an Emotion 11 server-side rendered style elements
            // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
            // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
            // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
            // will not result in the Emotion 10 styles being destroyed
            var dataEmotionAttribute = node.getAttribute('data-emotion');
            if (dataEmotionAttribute.indexOf(' ') === -1) {
                return;
            }
            document.head.appendChild(node);
            node.setAttribute('data-s', '');
        });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (process.env.NODE_ENV !== 'production') {
        // $FlowFixMe
        if (/[^a-z-]/.test(key)) {
            throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
        }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    if (isBrowser$4) {
        container = options.container || document.head;
        Array.prototype.forEach.call(// this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
            var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe
            for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
            }
            nodesToHydrate.push(node);
        });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (process.env.NODE_ENV !== 'production') {
        omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
                return cache.compat;
            }
        }), incorrectImportAlarm);
    }
    if (isBrowser$4) {
        var currentSheet;
        var finalizingPlugins = [stringify, process.env.NODE_ENV !== 'production' ? function (element) {
                if (!element.root) {
                    if (element["return"]) {
                        currentSheet.insert(element["return"]);
                    }
                    else if (element.value && element.type !== COMMENT) {
                        // insert empty rule in non-production environments
                        // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet
                        currentSheet.insert(element.value + "{}");
                    }
                }
            } : rulesheet(function (rule) {
                currentSheet.insert(rule);
            })];
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis = function stylis(styles) {
            return serialize(compile(styles), serializer);
        };
        _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            if (process.env.NODE_ENV !== 'production' && serialized.map !== undefined) {
                currentSheet = {
                    insert: function insert(rule) {
                        sheet.insert(rule + serialized.map);
                    }
                };
            }
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
                cache.inserted[serialized.name] = true;
            }
        };
    }
    else {
        var _finalizingPlugins = [stringify];
        var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
        var _stylis = function _stylis(styles) {
            return serialize(compile(styles), _serializer);
        }; // $FlowFixMe
        var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
        var getRules = function getRules(selector, serialized) {
            var name = serialized.name;
            if (serverStylisCache[name] === undefined) {
                serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            }
            return serverStylisCache[name];
        };
        _insert = function _insert(selector, serialized, sheet, shouldCache) {
            var name = serialized.name;
            var rules = getRules(selector, serialized);
            if (cache.compat === undefined) {
                // in regular mode, we don't set the styles on the inserted cache
                // since we don't need to and that would be wasting memory
                // we return them so that they are rendered in a style tag
                if (shouldCache) {
                    cache.inserted[name] = true;
                }
                if ( // using === development instead of !== production
                // because if people do ssr in tests, the source maps showing up would be annoying
                process.env.NODE_ENV === 'development' && serialized.map !== undefined) {
                    return rules + serialized.map;
                }
                return rules;
            }
            else {
                // in compat mode, we put the styles on the inserted cache so
                // that emotion-server can pull out the styles
                // except when we don't want to cache it which was in Global but now
                // is nowhere but we don't want to do a major right now
                // and just in case we're going to leave the case here
                // it's also not affecting client side bundle size
                // so it's really not a big deal
                if (shouldCache) {
                    cache.inserted[name] = rules;
                }
                else {
                    return rules;
                }
            }
        };
    }
    var cache = {
        key: key,
        sheet: new StyleSheet({
            key: key,
            container: container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted: inserted,
        registered: {},
        insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
};
var reactIs = reactIs$1.exports;
var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
};
var MEMO_STATICS = {
    '$$typeof': true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
var isBrowser$3 = typeof document !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = '';
    classNames.split(' ').forEach(function (className) {
        if (registered[className] !== undefined) {
            registeredStyles.push(registered[className] + ";");
        }
        else {
            rawClassName += className + " ";
        }
    });
    return rawClassName;
}
var registerStyles = function registerStyles(cache, serialized, isStringTag) {
    var className = cache.key + "-" + serialized.name;
    if ( // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
        // in node since emotion-server relies on whether a style is in
        // the registered cache to know whether a style is global or not
        // also, note that this check will be dead code eliminated in the browser
        isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
        cache.registered[className] = serialized.styles;
    }
};
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === undefined) {
        var stylesForSSR = '';
        var current = serialized;
        do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
            if (!isBrowser$3 && maybeStyles !== undefined) {
                stylesForSSR += maybeStyles;
            }
            current = current.next;
        } while (current !== undefined);
        if (!isBrowser$3 && stylesForSSR.length !== 0) {
            return stylesForSSR;
        }
    }
};
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
    // 'm' and 'r' are mixing constants generated offline.
    // They're not really 'magic', they just happen to work well.
    // const m = 0x5bd1e995;
    // const r = 24;
    // Initialize the hash
    var h = 0; // Mix 4 bytes at a time into the hash
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
        k =
            /* Math.imul(k, m): */
            (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
        k ^=
            /* k >>> r: */
            k >>> 24;
        h =
            /* Math.imul(k, m): */
            (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
                /* Math.imul(h, m): */
                (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Handle the last few bytes of the input array
    switch (len) {
        case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 0xff;
            h =
                /* Math.imul(h, m): */
                (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    } // Do a few final mixes of the hash to ensure the last few
    // bytes are well-incorporated.
    h ^= h >>> 13;
    h =
        /* Math.imul(h, m): */
        (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty(property) {
    return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue(value) {
    return value != null && typeof value !== 'boolean';
};
var processStyleName = /* #__PURE__ */ memoize$2(function (styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});
var processStyleValue = function processStyleValue(key, value) {
    switch (key) {
        case 'animation':
        case 'animationName':
            {
                if (typeof value === 'string') {
                    return value.replace(animationRegex, function (match, p1, p2) {
                        cursor = {
                            name: p1,
                            styles: p2,
                            next: cursor
                        };
                        return p1;
                    });
                }
            }
    }
    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
        return value + 'px';
    }
    return value;
};
if (process.env.NODE_ENV !== 'production') {
    var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];
    var oldProcessStyleValue = processStyleValue;
    var msPattern = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    var hyphenatedCache = {};
    processStyleValue = function processStyleValue(key, value) {
        if (key === 'content') {
            if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
                throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
        }
        var processed = oldProcessStyleValue(key, value);
        if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
                return _char.toUpperCase();
            }) + "?");
        }
        return processed;
    };
}
var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';
function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
        return '';
    }
    if (interpolation.__emotion_styles !== undefined) {
        if (process.env.NODE_ENV !== 'production' && interpolation.toString() === 'NO_COMPONENT_SELECTOR') {
            throw new Error(noComponentSelectorMessage);
        }
        return interpolation;
    }
    switch (typeof interpolation) {
        case 'boolean':
            {
                return '';
            }
        case 'object':
            {
                if (interpolation.anim === 1) {
                    cursor = {
                        name: interpolation.name,
                        styles: interpolation.styles,
                        next: cursor
                    };
                    return interpolation.name;
                }
                if (interpolation.styles !== undefined) {
                    var next = interpolation.next;
                    if (next !== undefined) {
                        // not the most efficient thing ever but this is a pretty rare case
                        // and there will be very few iterations of this generally
                        while (next !== undefined) {
                            cursor = {
                                name: next.name,
                                styles: next.styles,
                                next: cursor
                            };
                            next = next.next;
                        }
                    }
                    var styles = interpolation.styles + ";";
                    if (process.env.NODE_ENV !== 'production' && interpolation.map !== undefined) {
                        styles += interpolation.map;
                    }
                    return styles;
                }
                return createStringFromObject(mergedProps, registered, interpolation);
            }
        case 'function':
            {
                if (mergedProps !== undefined) {
                    var previousCursor = cursor;
                    var result = interpolation(mergedProps);
                    cursor = previousCursor;
                    return handleInterpolation(mergedProps, registered, result);
                }
                else if (process.env.NODE_ENV !== 'production') {
                    console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
                }
                break;
            }
        case 'string':
            if (process.env.NODE_ENV !== 'production') {
                var matched = [];
                var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
                    var fakeVarName = "animation" + matched.length;
                    matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
                    return "${" + fakeVarName + "}";
                });
                if (matched.length) {
                    console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
                }
            }
            break;
    } // finalize string values (regular strings and functions interpolated into css calls)
    if (registered == null) {
        return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== undefined ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
    var string = '';
    if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
            string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
        }
    }
    else {
        for (var _key in obj) {
            var value = obj[_key];
            if (typeof value !== 'object') {
                if (registered != null && registered[value] !== undefined) {
                    string += _key + "{" + registered[value] + "}";
                }
                else if (isProcessableValue(value)) {
                    string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
                }
            }
            else {
                if (_key === 'NO_COMPONENT_SELECTOR' && process.env.NODE_ENV !== 'production') {
                    throw new Error(noComponentSelectorMessage);
                }
                if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
                    for (var _i = 0; _i < value.length; _i++) {
                        if (isProcessableValue(value[_i])) {
                            string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                        }
                    }
                }
                else {
                    var interpolated = handleInterpolation(mergedProps, registered, value);
                    switch (_key) {
                        case 'animation':
                        case 'animationName':
                            {
                                string += processStyleName(_key) + ":" + interpolated + ";";
                                break;
                            }
                        default:
                            {
                                if (process.env.NODE_ENV !== 'production' && _key === 'undefined') {
                                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                                }
                                string += _key + "{" + interpolated + "}";
                            }
                    }
                }
            }
        }
    }
    return string;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
if (process.env.NODE_ENV !== 'production') {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
} // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list
var cursor;
var serializeStyles = function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
        return args[0];
    }
    var stringMode = true;
    var styles = '';
    cursor = undefined;
    var strings = args[0];
    if (strings == null || strings.raw === undefined) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
    }
    else {
        if (process.env.NODE_ENV !== 'production' && strings[0] === undefined) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles += strings[0];
    } // we start at 1 since we've already handled the first arg
    for (var i = 1; i < args.length; i++) {
        styles += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
            if (process.env.NODE_ENV !== 'production' && strings[i] === undefined) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles += strings[i];
        }
    }
    var sourceMap;
    if (process.env.NODE_ENV !== 'production') {
        styles = styles.replace(sourceMapPattern, function (match) {
            sourceMap = match;
            return '';
        });
    } // using a global regex with .exec is stateful so lastIndex has to be reset each time
    labelPattern.lastIndex = 0;
    var identifierName = '';
    var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
    while ((match = labelPattern.exec(styles)) !== null) {
        identifierName += '-' + // $FlowFixMe we know it's not null
            match[1];
    }
    var name = murmur2(styles) + identifierName;
    if (process.env.NODE_ENV !== 'production') {
        // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
        return {
            name: name,
            styles: styles,
            map: sourceMap,
            next: cursor,
            toString: function toString() {
                return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
        };
    }
    return {
        name: name,
        styles: styles,
        next: cursor
    };
};
var isBrowser$2 = typeof document !== 'undefined';
var syncFallback = function syncFallback(create) {
    return create();
};
var useInsertionEffect = React$4['useInsertion' + 'Effect'] ? React$4['useInsertion' + 'Effect'] : false;
var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$2 ? syncFallback : useInsertionEffect || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect || React$4.useLayoutEffect;
var isBrowser$1 = typeof document !== 'undefined';
var hasOwnProperty = {}.hasOwnProperty;
var EmotionCacheContext = /* #__PURE__ */ React$4.createContext(// we're doing this to avoid preconstruct's dead code elimination in this one case
// because this module is primarily intended for the browser and node
// but it's also required in react native and similar environments sometimes
// and we could have a special build just for that
// but this is much easier and the native packages
// might use a different theme context in the future anyway
typeof HTMLElement !== 'undefined' ? /* #__PURE__ */ createCache({
    key: 'css'
}) : null);
if (process.env.NODE_ENV !== 'production') {
    EmotionCacheContext.displayName = 'EmotionCacheContext';
}
EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache(func) {
    // $FlowFixMe
    return /*#__PURE__*/ (0, react_1.forwardRef)(function (props, ref) {
        // the cache will never be null in the browser
        var cache = (0, react_1.useContext)(EmotionCacheContext);
        return func(props, cache, ref);
    });
};
if (!isBrowser$1) {
    withEmotionCache = function withEmotionCache(func) {
        return function (props) {
            var cache = (0, react_1.useContext)(EmotionCacheContext);
            if (cache === null) {
                // yes, we're potentially creating this on every render
                // it doesn't actually matter though since it's only on the server
                // so there will only every be a single render
                // that could change in the future because of suspense and etc. but for now,
                // this works and i don't want to optimise for a future thing that we aren't sure about
                cache = createCache({
                    key: 'css'
                });
                return /*#__PURE__*/ React$4.createElement(EmotionCacheContext.Provider, {
                    value: cache
                }, func(props, cache));
            }
            else {
                return func(props, cache);
            }
        };
    };
}
var ThemeContext = /* #__PURE__ */ React$4.createContext({});
if (process.env.NODE_ENV !== 'production') {
    ThemeContext.displayName = 'EmotionThemeContext';
}
var getLastPart = function getLastPart(functionName) {
    // The match may be something like 'Object.createEmotionProps' or
    // 'Loader.prototype.render'
    var parts = functionName.split('.');
    return parts[parts.length - 1];
};
var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {
    // V8
    var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
    if (match)
        return getLastPart(match[1]); // Safari / Firefox
    match = /^([A-Za-z0-9$.]+)@/.exec(line);
    if (match)
        return getLastPart(match[1]);
    return undefined;
};
var internalReactFunctionNames = /* #__PURE__ */ new Set(['renderWithHooks', 'processChild', 'finishClassComponent', 'renderToString']); // These identifiers come from error stacks, so they have to be valid JS
// identifiers, thus we only need to replace what is a valid character for JS,
// but not for CSS.
var sanitizeIdentifier = function sanitizeIdentifier(identifier) {
    return identifier.replace(/\$/g, '-');
};
var getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {
    if (!stackTrace)
        return undefined;
    var lines = stackTrace.split('\n');
    for (var i = 0; i < lines.length; i++) {
        var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just "Error"
        if (!functionName)
            continue; // If we reach one of these, we have gone too far and should quit
        if (internalReactFunctionNames.has(functionName))
            break; // The component name is the first function in the stack that starts with an
        // uppercase letter
        if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
    }
    return undefined;
};
var typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';
var labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';
var createEmotionProps = function createEmotionProps(type, props) {
    if (process.env.NODE_ENV !== 'production' && typeof props.css === 'string' && // check if there is a css declaration
        props.css.indexOf(':') !== -1) {
        throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    }
    var newProps = {};
    for (var key in props) {
        if (hasOwnProperty.call(props, key)) {
            newProps[key] = props[key];
        }
    }
    newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when
    // the label hasn't already been computed
    if (process.env.NODE_ENV !== 'production' && !!props.css && (typeof props.css !== 'object' || typeof props.css.name !== 'string' || props.css.name.indexOf('-') === -1)) {
        var label = getLabelFromStackTrace(new Error().stack);
        if (label)
            newProps[labelPropName] = label;
    }
    return newProps;
};
var Insertion$1 = function Insertion(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag);
    var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
        return insertStyles(cache, serialized, isStringTag);
    });
    if (!isBrowser$1 && rules !== undefined) {
        var _ref2;
        var serializedNames = serialized.name;
        var next = serialized.next;
        while (next !== undefined) {
            serializedNames += ' ' + next.name;
            next = next.next;
        }
        return /*#__PURE__*/ React$4.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
    }
    return null;
};
var Emotion = /* #__PURE__ */ withEmotionCache(function (props, cache, ref) {
    var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works
    // not passing the registered cache to serializeStyles because it would
    // make certain babel optimisations not possible
    if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {
        cssProp = cache.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className = '';
    if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
    }
    else if (props.className != null) {
        className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, undefined, React$4.useContext(ThemeContext));
    if (process.env.NODE_ENV !== 'production' && serialized.name.indexOf('-') === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) {
            serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);
        }
    }
    className += cache.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
        if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && (process.env.NODE_ENV === 'production' || key !== labelPropName)) {
            newProps[key] = props[key];
        }
    }
    newProps.ref = ref;
    newProps.className = className;
    return /*#__PURE__*/ React$4.createElement(React$4.Fragment, null, /*#__PURE__*/ React$4.createElement(Insertion$1, {
        cache: cache,
        serialized: serialized,
        isStringTag: typeof WrappedComponent === 'string'
    }), /*#__PURE__*/ React$4.createElement(WrappedComponent, newProps));
});
if (process.env.NODE_ENV !== 'production') {
    Emotion.displayName = 'EmotionCssPropInternal';
}
var Emotion$1 = Emotion;
var pkg = {
    name: "@emotion/react",
    version: "11.11.1",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    exports: {
        ".": {
            module: {
                worker: "./dist/emotion-react.worker.esm.js",
                browser: "./dist/emotion-react.browser.esm.js",
                "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
        },
        "./jsx-runtime": {
            module: {
                worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
                browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
                "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
        },
        "./_isolated-hnrs": {
            module: {
                worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
                browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
                "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
        },
        "./jsx-dev-runtime": {
            module: {
                worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
                browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
                "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
        },
        "./package.json": "./package.json",
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
            types: {
                "import": "./macro.d.mts",
                "default": "./macro.d.ts"
            },
            "default": "./macro.js"
        }
    },
    types: "types/index.d.ts",
    files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "_isolated-hnrs",
        "types/*.d.ts",
        "macro.*"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
        "test:typescript": "dtslint types"
    },
    dependencies: {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.11.0",
        "@emotion/cache": "^11.11.0",
        "@emotion/serialize": "^1.1.2",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
        "@emotion/utils": "^1.2.1",
        "@emotion/weak-memoize": "^0.3.1",
        "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
        react: ">=16.8.0"
    },
    peerDependenciesMeta: {
        "@types/react": {
            optional: true
        }
    },
    devDependencies: {
        "@definitelytyped/dtslint": "0.0.112",
        "@emotion/css": "11.11.0",
        "@emotion/css-prettifier": "1.1.3",
        "@emotion/server": "11.11.0",
        "@emotion/styled": "11.11.0",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1",
        typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
        access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
        entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
        ],
        umdName: "emotionReact",
        exports: {
            envConditions: [
                "browser",
                "worker"
            ],
            extra: {
                "./types/css-prop": "./types/css-prop.d.ts",
                "./macro": {
                    types: {
                        "import": "./macro.d.mts",
                        "default": "./macro.d.ts"
                    },
                    "default": "./macro.js"
                }
            }
        }
    }
};
var jsx$1 = function jsx(type, props) {
    var args = arguments;
    if (props == null || !hasOwnProperty.call(props, 'css')) {
        // $FlowFixMe
        return React$4.createElement.apply(undefined, args);
    }
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = Emotion$1;
    createElementArgArray[1] = createEmotionProps(type, props);
    for (var i = 2; i < argsLength; i++) {
        createElementArgArray[i] = args[i];
    } // $FlowFixMe
    return React$4.createElement.apply(null, createElementArgArray);
};
var warnedAboutCssPropForGlobal = false; // maintain place over rerenders.
// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
// initial client-side render from SSR, use place of hydrating tag
var Global = /* #__PURE__ */ withEmotionCache(function (props, cache) {
    if (process.env.NODE_ENV !== 'production' && !warnedAboutCssPropForGlobal && ( // check for className as well since the user is
    // probably using the custom createElement which
    // means it will be turned into a className prop
    // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
    props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = serializeStyles([styles], undefined, React$4.useContext(ThemeContext));
    if (!isBrowser$1) {
        var _ref;
        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next = serialized.next;
        while (next !== undefined) {
            serializedNames += ' ' + next.name;
            serializedStyles += next.styles;
            next = next.next;
        }
        var shouldCache = cache.compat === true;
        var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
        }, cache.sheet, shouldCache);
        if (shouldCache) {
            return null;
        }
        return /*#__PURE__*/ React$4.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref.nonce = cache.sheet.nonce, _ref));
    } // yes, i know these hooks are used conditionally
    // but it is based on a constant that will never change at runtime
    // it's effectively like having two implementations and switching them out
    // so it's not actually breaking anything
    var sheetRef = React$4.useRef();
    useInsertionEffectWithLayoutFallback(function () {
        var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675
        var sheet = new cache.sheet.constructor({
            key: key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false; // $FlowFixMe
        var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
        if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
        }
        if (node !== null) {
            rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s
            node.setAttribute('data-emotion', key);
            sheet.hydrate([node]);
        }
        sheetRef.current = [sheet, rehydrating];
        return function () {
            sheet.flush();
        };
    }, [cache]);
    useInsertionEffectWithLayoutFallback(function () {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
        }
        if (serialized.next !== undefined) {
            // insert keyframes
            insertStyles(cache, serialized.next, true);
        }
        if (sheet.tags.length) {
            // if this doesn't exist then it will be null so the style element will be appended
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
    }, [cache, serialized.name]);
    return null;
});
if (process.env.NODE_ENV !== 'production') {
    Global.displayName = 'EmotionGlobal';
}
function css$3() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }
    return serializeStyles(args);
}
var keyframes = function keyframes() {
    var insertable = css$3.apply(void 0, arguments);
    var name = "animation-" + insertable.name; // $FlowFixMe
    return {
        name: name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
    };
};
var classnames = function classnames(args) {
    var len = args.length;
    var i = 0;
    var cls = '';
    for (; i < len; i++) {
        var arg = args[i];
        if (arg == null)
            continue;
        var toAdd = void 0;
        switch (typeof arg) {
            case 'boolean':
                break;
            case 'object':
                {
                    if (Array.isArray(arg)) {
                        toAdd = classnames(arg);
                    }
                    else {
                        if (process.env.NODE_ENV !== 'production' && arg.styles !== undefined && arg.name !== undefined) {
                            console.error('You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n' + '`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.');
                        }
                        toAdd = '';
                        for (var k in arg) {
                            if (arg[k] && k) {
                                toAdd && (toAdd += ' ');
                                toAdd += k;
                            }
                        }
                    }
                    break;
                }
            default:
                {
                    toAdd = arg;
                }
        }
        if (toAdd) {
            cls && (cls += ' ');
            cls += toAdd;
        }
    }
    return cls;
};
function merge(registered, css, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
        return className;
    }
    return rawClassName + css(registeredStyles);
}
var Insertion = function Insertion(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
        var rules = '';
        for (var i = 0; i < serializedArr.length; i++) {
            var res = insertStyles(cache, serializedArr[i], false);
            if (!isBrowser$1 && res !== undefined) {
                rules += res;
            }
        }
        if (!isBrowser$1) {
            return rules;
        }
    });
    if (!isBrowser$1 && rules.length !== 0) {
        var _ref2;
        return /*#__PURE__*/ React$4.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function (serialized) {
            return serialized.name;
        }).join(' '), _ref2.dangerouslySetInnerHTML = {
            __html: rules
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
    }
    return null;
};
var ClassNames = /* #__PURE__ */ withEmotionCache(function (props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css = function css() {
        if (hasRendered && process.env.NODE_ENV !== 'production') {
            throw new Error('css can only be used during render');
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }
        var serialized = serializeStyles(args, cache.registered);
        serializedArr.push(serialized); // registration has to happen here as the result of this might get consumed by `cx`
        registerStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
    };
    var cx = function cx() {
        if (hasRendered && process.env.NODE_ENV !== 'production') {
            throw new Error('cx can only be used during render');
        }
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }
        return merge(cache.registered, css, classnames(args));
    };
    var content = {
        css: css,
        cx: cx,
        theme: React$4.useContext(ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    return /*#__PURE__*/ React$4.createElement(React$4.Fragment, null, /*#__PURE__*/ React$4.createElement(Insertion, {
        cache: cache,
        serializedArr: serializedArr
    }), ele);
});
if (process.env.NODE_ENV !== 'production') {
    ClassNames.displayName = 'EmotionClassNames';
}
if (process.env.NODE_ENV !== 'production') {
    var isBrowser = typeof document !== 'undefined'; // #1727, #2905 for some reason Jest and Vitest evaluate modules twice if some consuming module gets mocked
    var isTestEnv = typeof jest !== 'undefined' || typeof vi !== 'undefined';
    if (isBrowser && !isTestEnv) {
        // globalThis has wide browser support - https://caniuse.com/?search=globalThis, Node.js 12 and later
        var globalContext = // $FlowIgnore
         typeof globalThis !== 'undefined' ? globalThis // eslint-disable-line no-undef
            : isBrowser ? window : global;
        var globalKey = "__EMOTION_REACT_" + pkg.version.split('.')[0] + "__";
        if (globalContext[globalKey]) {
            console.warn('You are loading @emotion/react when it is already loaded. Running ' + 'multiple instances may cause problems. This can happen if multiple ' + 'versions are used, or if multiple builds of the same version are ' + 'used.');
        }
        globalContext[globalKey] = true;
    }
}
function _taggedTemplateLiteral(strings, raw) {
    if (!raw) {
        raw = strings.slice(0);
    }
    return Object.freeze(Object.defineProperties(strings, {
        raw: {
            value: Object.freeze(raw)
        }
    }));
}
const min$1 = Math.min;
const max$1 = Math.max;
const round$1 = Math.round;
const floor = Math.floor;
const createCoords = v => ({
    x: v,
    y: v
});
function rectToClientRect$1(rect) {
    return Object.assign(Object.assign({}, rect), { top: rect.y, left: rect.x, right: rect.x + rect.width, bottom: rect.y + rect.height });
}
function getNodeName$1(node) {
    if (isNode(node)) {
        return (node.nodeName || '').toLowerCase();
    }
    // Mocked nodes in testing environments may not be instances of Node. By
    // returning `#document` an infinite loop won't occur.
    // https://github.com/floating-ui/floating-ui/issues/2317
    return '#document';
}
function getWindow$1(node) {
    var _node$ownerDocument;
    return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement$1(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
    return value instanceof Node || value instanceof getWindow$1(value).Node;
}
function isElement$1(value) {
    return value instanceof Element || value instanceof getWindow$1(value).Element;
}
function isHTMLElement$1(value) {
    return value instanceof HTMLElement || value instanceof getWindow$1(value).HTMLElement;
}
function isShadowRoot$1(value) {
    // Browsers without `ShadowRoot` support.
    if (typeof ShadowRoot === 'undefined') {
        return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow$1(value).ShadowRoot;
}
function isOverflowElement(element) {
    const { overflow, overflowX, overflowY, display } = getComputedStyle$2(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);
}
function isWebKit() {
    if (typeof CSS === 'undefined' || !CSS.supports)
        return false;
    return CSS.supports('-webkit-backdrop-filter', 'none');
}
function isLastTraversableNode(node) {
    return ['html', 'body', '#document'].includes(getNodeName$1(node));
}
function getComputedStyle$2(element) {
    return getWindow$1(element).getComputedStyle(element);
}
function getParentNode$1(node) {
    if (getNodeName$1(node) === 'html') {
        return node;
    }
    const result = 
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot ||
        // DOM Element detected.
        node.parentNode ||
        // ShadowRoot detected.
        isShadowRoot$1(node) && node.host ||
        // Fallback.
        getDocumentElement$1(node);
    return isShadowRoot$1(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode$1(node);
    if (isLastTraversableNode(parentNode)) {
        return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement$1(parentNode) && isOverflowElement(parentNode)) {
        return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
        list = [];
    }
    if (traverseIframes === void 0) {
        traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow$1(scrollableAncestor);
    if (isBody) {
        return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getCssDimensions(element) {
    const css = getComputedStyle$2(element);
    // In testing environments, the `width` and `height` properties are empty
    // strings for SVG elements, returning NaN. Fallback to `0` in this case.
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement$1(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round$1(width) !== offsetWidth || round$1(height) !== offsetHeight;
    if (shouldFallback) {
        width = offsetWidth;
        height = offsetHeight;
    }
    return {
        width,
        height,
        $: shouldFallback
    };
}
function unwrapElement(element) {
    return !isElement$1(element) ? element.contextElement : element;
}
function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement$1(domElement)) {
        return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const { width, height, $ } = getCssDimensions(domElement);
    let x = ($ ? round$1(rect.width) : rect.width) / width;
    let y = ($ ? round$1(rect.height) : rect.height) / height;
    // 0, NaN, or Infinity should always fallback to 1.
    if (!x || !Number.isFinite(x)) {
        x = 1;
    }
    if (!y || !Number.isFinite(y)) {
        y = 1;
    }
    return {
        x,
        y
    };
}
const noOffsets = /*#__PURE__*/ createCoords(0);
function getVisualOffsets(element) {
    const win = getWindow$1(element);
    if (!isWebKit() || !win.visualViewport) {
        return noOffsets;
    }
    return {
        x: win.visualViewport.offsetLeft,
        y: win.visualViewport.offsetTop
    };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
        isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow$1(element)) {
        return false;
    }
    return isFixed;
}
function getBoundingClientRect$1(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
        includeScale = false;
    }
    if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
        if (offsetParent) {
            if (isElement$1(offsetParent)) {
                scale = getScale(offsetParent);
            }
        }
        else {
            scale = getScale(element);
        }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
        const win = getWindow$1(domElement);
        const offsetWin = offsetParent && isElement$1(offsetParent) ? getWindow$1(offsetParent) : offsetParent;
        let currentIFrame = win.frameElement;
        while (currentIFrame && offsetParent && offsetWin !== win) {
            const iframeScale = getScale(currentIFrame);
            const iframeRect = currentIFrame.getBoundingClientRect();
            const css = getComputedStyle$2(currentIFrame);
            const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
            const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
            x *= iframeScale.x;
            y *= iframeScale.y;
            width *= iframeScale.x;
            height *= iframeScale.y;
            x += left;
            y += top;
            currentIFrame = getWindow$1(currentIFrame).frameElement;
        }
    }
    return rectToClientRect$1({
        width,
        height,
        x,
        y
    });
}
// https://samthor.au/2021/observing-dom/
function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement$1(element);
    function cleanup() {
        clearTimeout(timeoutId);
        io && io.disconnect();
        io = null;
    }
    function refresh(skip, threshold) {
        if (skip === void 0) {
            skip = false;
        }
        if (threshold === void 0) {
            threshold = 1;
        }
        cleanup();
        const { left, top, width, height } = element.getBoundingClientRect();
        if (!skip) {
            onMove();
        }
        if (!width || !height) {
            return;
        }
        const insetTop = floor(top);
        const insetRight = floor(root.clientWidth - (left + width));
        const insetBottom = floor(root.clientHeight - (top + height));
        const insetLeft = floor(left);
        const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
        const options = {
            rootMargin,
            threshold: max$1(0, min$1(1, threshold)) || 1
        };
        let isFirstUpdate = true;
        function handleObserve(entries) {
            const ratio = entries[0].intersectionRatio;
            if (ratio !== threshold) {
                if (!isFirstUpdate) {
                    return refresh();
                }
                if (!ratio) {
                    timeoutId = setTimeout(() => {
                        refresh(false, 1e-7);
                    }, 100);
                }
                else {
                    refresh(false, ratio);
                }
            }
            isFirstUpdate = false;
        }
        // Older browsers don't support a `document` as the root and will throw an
        // error.
        try {
            io = new IntersectionObserver(handleObserve, Object.assign(Object.assign({}, options), { 
                // Handle <iframe>s
                root: root.ownerDocument }));
        }
        catch (e) {
            io = new IntersectionObserver(handleObserve, options);
        }
        io.observe(element);
    }
    refresh(true);
    return cleanup;
}
/**
 * Automatically updates the position of the floating element when necessary.
 * Should only be called when the floating element is mounted on the DOM or
 * visible on the screen.
 * @returns cleanup function that should be invoked when the floating element is
 * removed from the DOM or hidden from the screen.
 * @see https://floating-ui.com/docs/autoUpdate
 */
function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
        options = {};
    }
    const { ancestorScroll = true, ancestorResize = true, elementResize = typeof ResizeObserver === 'function', layoutShift = typeof IntersectionObserver === 'function', animationFrame = false } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];
    ancestors.forEach(ancestor => {
        ancestorScroll && ancestor.addEventListener('scroll', update, {
            passive: true
        });
        ancestorResize && ancestor.addEventListener('resize', update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
        resizeObserver = new ResizeObserver(_ref => {
            let [firstEntry] = _ref;
            if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
                // Prevent update loops when using the `size` middleware.
                // https://github.com/floating-ui/floating-ui/issues/1740
                resizeObserver.unobserve(floating);
                cancelAnimationFrame(reobserveFrame);
                reobserveFrame = requestAnimationFrame(() => {
                    resizeObserver && resizeObserver.observe(floating);
                });
            }
            update();
        });
        if (referenceEl && !animationFrame) {
            resizeObserver.observe(referenceEl);
        }
        resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect$1(reference) : null;
    if (animationFrame) {
        frameLoop();
    }
    function frameLoop() {
        const nextRefRect = getBoundingClientRect$1(reference);
        if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
            update();
        }
        prevRefRect = nextRefRect;
        frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
        ancestors.forEach(ancestor => {
            ancestorScroll && ancestor.removeEventListener('scroll', update);
            ancestorResize && ancestor.removeEventListener('resize', update);
        });
        cleanupIo && cleanupIo();
        resizeObserver && resizeObserver.disconnect();
        resizeObserver = null;
        if (animationFrame) {
            cancelAnimationFrame(frameId);
        }
    };
}
var index = typeof document !== 'undefined' ? react_1.useLayoutEffect : react_1.useEffect;
var _excluded$4$1 = ["className", "clearValue", "cx", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue", "theme"];
// ==============================
// NO OP
// ==============================
var noop$3 = function noop() { };
// ==============================
// Class Name Prefixer
// ==============================
/**
 String representation of component state for styling with class names.

 Expects an array of strings OR a string/object pair:
 - className(['comp', 'comp-arg', 'comp-arg-2'])
   @returns 'react-select__comp react-select__comp-arg react-select__comp-arg-2'
 - className('comp', { some: true, state: false })
   @returns 'react-select__comp react-select__comp--some'
*/
function applyPrefixToName(prefix, name) {
    if (!name) {
        return prefix;
    }
    else if (name[0] === '-') {
        return prefix + name;
    }
    else {
        return prefix + '__' + name;
    }
}
function classNames(prefix, state) {
    for (var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        classNameList[_key - 2] = arguments[_key];
    }
    var arr = [].concat(classNameList);
    if (state && prefix) {
        for (var key in state) {
            if (state.hasOwnProperty(key) && state[key]) {
                arr.push("".concat(applyPrefixToName(prefix, key)));
            }
        }
    }
    return arr.filter(function (i) {
        return i;
    }).map(function (i) {
        return String(i).trim();
    }).join(' ');
}
// ==============================
// Clean Value
// ==============================
var cleanValue$1 = function cleanValue(value) {
    if (isArray(value))
        return value.filter(Boolean);
    if (_typeof$2(value) === 'object' && value !== null)
        return [value];
    return [];
};
// ==============================
// Clean Common Props
// ==============================
var cleanCommonProps = function cleanCommonProps(props) {
    //className
    props.className;
    props.clearValue;
    props.cx;
    props.getStyles;
    props.getClassNames;
    props.getValue;
    props.hasValue;
    props.isMulti;
    props.isRtl;
    props.options;
    props.selectOption;
    props.selectProps;
    props.setValue;
    props.theme;
    var innerProps = _objectWithoutProperties$1(props, _excluded$4$1);
    return _objectSpread2$2({}, innerProps);
};
// ==============================
// Get Style Props
// ==============================
var getStyleProps = function getStyleProps(props, name, classNamesState) {
    var cx = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, className = props.className;
    return {
        css: getStyles(name, props),
        className: cx(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)
    };
};
// ==============================
// Scroll Helpers
// ==============================
function isDocumentElement(el) {
    return [document.documentElement, document.body, window].indexOf(el) > -1;
}
// Normalized Scroll Top
// ------------------------------
function normalizedHeight(el) {
    if (isDocumentElement(el)) {
        return window.innerHeight;
    }
    return el.clientHeight;
}
// Normalized scrollTo & scrollTop
// ------------------------------
function getScrollTop(el) {
    if (isDocumentElement(el)) {
        return window.pageYOffset;
    }
    return el.scrollTop;
}
function scrollTo(el, top) {
    // with a scroll distance, we perform scroll on the element
    if (isDocumentElement(el)) {
        window.scrollTo(0, top);
        return;
    }
    el.scrollTop = top;
}
// Get Scroll Parent
// ------------------------------
function getScrollParent$1(element) {
    var style = getComputedStyle(element);
    var excludeStaticParent = style.position === 'absolute';
    var overflowRx = /(auto|scroll)/;
    if (style.position === 'fixed')
        return document.documentElement;
    for (var parent = element; parent = parent.parentElement;) {
        style = getComputedStyle(parent);
        if (excludeStaticParent && style.position === 'static') {
            continue;
        }
        if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
            return parent;
        }
    }
    return document.documentElement;
}
// Animated Scroll To
// ------------------------------
/**
  @param t: time (elapsed)
  @param b: initial value
  @param c: amount of change
  @param d: duration
*/
function easeOutCubic(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t + 1) + b;
}
function animatedScrollTo(element, to) {
    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
    var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop$3;
    var start = getScrollTop(element);
    var change = to - start;
    var increment = 10;
    var currentTime = 0;
    function animateScroll() {
        currentTime += increment;
        var val = easeOutCubic(currentTime, start, change, duration);
        scrollTo(element, val);
        if (currentTime < duration) {
            window.requestAnimationFrame(animateScroll);
        }
        else {
            callback(element);
        }
    }
    animateScroll();
}
// Scroll Into View
// ------------------------------
function scrollIntoView(menuEl, focusedEl) {
    var menuRect = menuEl.getBoundingClientRect();
    var focusedRect = focusedEl.getBoundingClientRect();
    var overScroll = focusedEl.offsetHeight / 3;
    if (focusedRect.bottom + overScroll > menuRect.bottom) {
        scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
    }
    else if (focusedRect.top - overScroll < menuRect.top) {
        scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
    }
}
// ==============================
// Get bounding client object
// ==============================
// cannot get keys using array notation with DOMRect
function getBoundingClientObj(element) {
    var rect = element.getBoundingClientRect();
    return {
        bottom: rect.bottom,
        height: rect.height,
        left: rect.left,
        right: rect.right,
        top: rect.top,
        width: rect.width
    };
}
// ==============================
// Touch Capability Detector
// ==============================
function isTouchCapable() {
    try {
        document.createEvent('TouchEvent');
        return true;
    }
    catch (e) {
        return false;
    }
}
// ==============================
// Mobile Device Detector
// ==============================
function isMobileDevice() {
    try {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    catch (e) {
        return false;
    }
}
// ==============================
// Passive Event Detector
// ==============================
// https://github.com/rafgraph/detect-it/blob/main/src/index.ts#L19-L36
var passiveOptionAccessed = false;
var options = {
    get passive() {
        return passiveOptionAccessed = true;
    }
};
// check for SSR
var w$1 = typeof window !== 'undefined' ? window : {};
if (w$1.addEventListener && w$1.removeEventListener) {
    w$1.addEventListener('p', noop$3, options);
    w$1.removeEventListener('p', noop$3, false);
}
var supportsPassiveEvents = passiveOptionAccessed;
function notNullish(item) {
    return item != null;
}
function isArray(arg) {
    return Array.isArray(arg);
}
function valueTernary(isMulti, multiValue, singleValue) {
    return isMulti ? multiValue : singleValue;
}
function singleValueAsValue(singleValue) {
    return singleValue;
}
function multiValueAsValue(multiValue) {
    return multiValue;
}
var removeProps = function removeProps(propsObj) {
    for (var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        properties[_key2 - 1] = arguments[_key2];
    }
    var propsMap = Object.entries(propsObj).filter(function (_ref) {
        var _ref2 = _slicedToArray$1(_ref, 1), key = _ref2[0];
        return !properties.includes(key);
    });
    return propsMap.reduce(function (newProps, _ref3) {
        var _ref4 = _slicedToArray$1(_ref3, 2), key = _ref4[0], val = _ref4[1];
        newProps[key] = val;
        return newProps;
    }, {});
};
var _excluded$3$1 = ["children", "innerProps"], _excluded2$1$1 = ["children", "innerProps"];
function getMenuPlacement(_ref) {
    var preferredMaxHeight = _ref.maxHeight, menuEl = _ref.menuEl, minHeight = _ref.minHeight, preferredPlacement = _ref.placement, shouldScroll = _ref.shouldScroll, isFixedPosition = _ref.isFixedPosition, controlHeight = _ref.controlHeight;
    var scrollParent = getScrollParent$1(menuEl);
    var defaultState = {
        placement: 'bottom',
        maxHeight: preferredMaxHeight
    };
    // something went wrong, return default state
    if (!menuEl || !menuEl.offsetParent)
        return defaultState;
    // we can't trust `scrollParent.scrollHeight` --> it may increase when
    // the menu is rendered
    var _scrollParent$getBoun = scrollParent.getBoundingClientRect(), scrollHeight = _scrollParent$getBoun.height;
    var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(), menuBottom = _menuEl$getBoundingCl.bottom, menuHeight = _menuEl$getBoundingCl.height, menuTop = _menuEl$getBoundingCl.top;
    var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(), containerTop = _menuEl$offsetParent$.top;
    var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
    var scrollTop = getScrollTop(scrollParent);
    var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
    var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
    var viewSpaceAbove = containerTop - marginTop;
    var viewSpaceBelow = viewHeight - menuTop;
    var scrollSpaceAbove = viewSpaceAbove + scrollTop;
    var scrollSpaceBelow = scrollHeight - scrollTop - menuTop;
    var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
    var scrollUp = scrollTop + menuTop - marginTop;
    var scrollDuration = 160;
    switch (preferredPlacement) {
        case 'auto':
        case 'bottom':
            // 1: the menu will fit, do nothing
            if (viewSpaceBelow >= menuHeight) {
                return {
                    placement: 'bottom',
                    maxHeight: preferredMaxHeight
                };
            }
            // 2: the menu will fit, if scrolled
            if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollDown, scrollDuration);
                }
                return {
                    placement: 'bottom',
                    maxHeight: preferredMaxHeight
                };
            }
            // 3: the menu will fit, if constrained
            if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollDown, scrollDuration);
                }
                // we want to provide as much of the menu as possible to the user,
                // so give them whatever is available below rather than the minHeight.
                var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
                return {
                    placement: 'bottom',
                    maxHeight: constrainedHeight
                };
            }
            // 4. Forked beviour when there isn't enough space below
            // AUTO: flip the menu, render above
            if (preferredPlacement === 'auto' || isFixedPosition) {
                // may need to be constrained after flipping
                var _constrainedHeight = preferredMaxHeight;
                var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
                if (spaceAbove >= minHeight) {
                    _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);
                }
                return {
                    placement: 'top',
                    maxHeight: _constrainedHeight
                };
            }
            // BOTTOM: allow browser to increase scrollable area and immediately set scroll
            if (preferredPlacement === 'bottom') {
                if (shouldScroll) {
                    scrollTo(scrollParent, scrollDown);
                }
                return {
                    placement: 'bottom',
                    maxHeight: preferredMaxHeight
                };
            }
            break;
        case 'top':
            // 1: the menu will fit, do nothing
            if (viewSpaceAbove >= menuHeight) {
                return {
                    placement: 'top',
                    maxHeight: preferredMaxHeight
                };
            }
            // 2: the menu will fit, if scrolled
            if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollUp, scrollDuration);
                }
                return {
                    placement: 'top',
                    maxHeight: preferredMaxHeight
                };
            }
            // 3: the menu will fit, if constrained
            if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
                var _constrainedHeight2 = preferredMaxHeight;
                // we want to provide as much of the menu as possible to the user,
                // so give them whatever is available below rather than the minHeight.
                if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
                    _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
                }
                if (shouldScroll) {
                    animatedScrollTo(scrollParent, scrollUp, scrollDuration);
                }
                return {
                    placement: 'top',
                    maxHeight: _constrainedHeight2
                };
            }
            // 4. not enough space, the browser WILL NOT increase scrollable area when
            // absolutely positioned element rendered above the viewport (only below).
            // Flip the menu, render below
            return {
                placement: 'bottom',
                maxHeight: preferredMaxHeight
            };
        default:
            throw new Error("Invalid placement provided \"".concat(preferredPlacement, "\"."));
    }
    return defaultState;
}
// Menu Component
// ------------------------------
function alignToControl(placement) {
    var placementToCSSProp = {
        bottom: 'top',
        top: 'bottom'
    };
    return placement ? placementToCSSProp[placement] : 'bottom';
}
var coercePlacement = function coercePlacement(p) {
    return p === 'auto' ? 'bottom' : p;
};
var menuCSS = function menuCSS(_ref2, unstyled) {
    var _objectSpread2;
    var placement = _ref2.placement, _ref2$theme = _ref2.theme, borderRadius = _ref2$theme.borderRadius, spacing = _ref2$theme.spacing, colors = _ref2$theme.colors;
    return _objectSpread2$2((_objectSpread2 = {
        label: 'menu'
    }, _defineProperty$2(_objectSpread2, alignToControl(placement), '100%'), _defineProperty$2(_objectSpread2, "position", 'absolute'), _defineProperty$2(_objectSpread2, "width", '100%'), _defineProperty$2(_objectSpread2, "zIndex", 1), _objectSpread2), unstyled ? {} : {
        backgroundColor: colors.neutral0,
        borderRadius: borderRadius,
        boxShadow: '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)',
        marginBottom: spacing.menuGutter,
        marginTop: spacing.menuGutter
    });
};
var PortalPlacementContext = /*#__PURE__*/ (0, react_1.createContext)(null);
// NOTE: internal only
var MenuPlacer = function MenuPlacer(props) {
    var children = props.children, minMenuHeight = props.minMenuHeight, maxMenuHeight = props.maxMenuHeight, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition, menuShouldScrollIntoView = props.menuShouldScrollIntoView, theme = props.theme;
    var _ref3 = (0, react_1.useContext)(PortalPlacementContext) || {}, setPortalPlacement = _ref3.setPortalPlacement;
    var ref = (0, react_1.useRef)(null);
    var _useState = (0, react_1.useState)(maxMenuHeight), _useState2 = _slicedToArray$1(_useState, 2), maxHeight = _useState2[0], setMaxHeight = _useState2[1];
    var _useState3 = (0, react_1.useState)(null), _useState4 = _slicedToArray$1(_useState3, 2), placement = _useState4[0], setPlacement = _useState4[1];
    var controlHeight = theme.spacing.controlHeight;
    index(function () {
        var menuEl = ref.current;
        if (!menuEl)
            return;
        // DO NOT scroll if position is fixed
        var isFixedPosition = menuPosition === 'fixed';
        var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
        var state = getMenuPlacement({
            maxHeight: maxMenuHeight,
            menuEl: menuEl,
            minHeight: minMenuHeight,
            placement: menuPlacement,
            shouldScroll: shouldScroll,
            isFixedPosition: isFixedPosition,
            controlHeight: controlHeight
        });
        setMaxHeight(state.maxHeight);
        setPlacement(state.placement);
        setPortalPlacement === null || setPortalPlacement === void 0 ? void 0 : setPortalPlacement(state.placement);
    }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight]);
    return children({
        ref: ref,
        placerProps: _objectSpread2$2(_objectSpread2$2({}, props), {}, {
            placement: placement || coercePlacement(menuPlacement),
            maxHeight: maxHeight
        })
    });
};
var Menu = function Menu(props) {
    var children = props.children, innerRef = props.innerRef, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'menu', {
        menu: true
    }), {
        ref: innerRef
    }, innerProps), children);
};
var Menu$1 = Menu;
// ==============================
// Menu List
// ==============================
var menuListCSS = function menuListCSS(_ref4, unstyled) {
    var maxHeight = _ref4.maxHeight, baseUnit = _ref4.theme.spacing.baseUnit;
    return _objectSpread2$2({
        maxHeight: maxHeight,
        overflowY: 'auto',
        position: 'relative',
        // required for offset[Height, Top] > keyboard scroll
        WebkitOverflowScrolling: 'touch'
    }, unstyled ? {} : {
        paddingBottom: baseUnit,
        paddingTop: baseUnit
    });
};
var MenuList = function MenuList(props) {
    var children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, isMulti = props.isMulti;
    return jsx$1("div", _extends({}, getStyleProps(props, 'menuList', {
        'menu-list': true,
        'menu-list--is-multi': isMulti
    }), {
        ref: innerRef
    }, innerProps), children);
};
// ==============================
// Menu Notices
// ==============================
var noticeCSS = function noticeCSS(_ref5, unstyled) {
    var _ref5$theme = _ref5.theme, baseUnit = _ref5$theme.spacing.baseUnit, colors = _ref5$theme.colors;
    return _objectSpread2$2({
        textAlign: 'center'
    }, unstyled ? {} : {
        color: colors.neutral40,
        padding: "".concat(baseUnit * 2, "px ").concat(baseUnit * 3, "px")
    });
};
var noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = noticeCSS;
var NoOptionsMessage = function NoOptionsMessage(_ref6) {
    var _ref6$children = _ref6.children, children = _ref6$children === void 0 ? 'No options' : _ref6$children, innerProps = _ref6.innerProps, restProps = _objectWithoutProperties$1(_ref6, _excluded$3$1);
    return jsx$1("div", _extends({}, getStyleProps(_objectSpread2$2(_objectSpread2$2({}, restProps), {}, {
        children: children,
        innerProps: innerProps
    }), 'noOptionsMessage', {
        'menu-notice': true,
        'menu-notice--no-options': true
    }), innerProps), children);
};
var LoadingMessage = function LoadingMessage(_ref7) {
    var _ref7$children = _ref7.children, children = _ref7$children === void 0 ? 'Loading...' : _ref7$children, innerProps = _ref7.innerProps, restProps = _objectWithoutProperties$1(_ref7, _excluded2$1$1);
    return jsx$1("div", _extends({}, getStyleProps(_objectSpread2$2(_objectSpread2$2({}, restProps), {}, {
        children: children,
        innerProps: innerProps
    }), 'loadingMessage', {
        'menu-notice': true,
        'menu-notice--loading': true
    }), innerProps), children);
};
// ==============================
// Menu Portal
// ==============================
var menuPortalCSS = function menuPortalCSS(_ref8) {
    var rect = _ref8.rect, offset = _ref8.offset, position = _ref8.position;
    return {
        left: rect.left,
        position: position,
        top: offset,
        width: rect.width,
        zIndex: 1
    };
};
var MenuPortal = function MenuPortal(props) {
    var appendTo = props.appendTo, children = props.children, controlElement = props.controlElement, innerProps = props.innerProps, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition;
    var menuPortalRef = (0, react_1.useRef)(null);
    var cleanupRef = (0, react_1.useRef)(null);
    var _useState5 = (0, react_1.useState)(coercePlacement(menuPlacement)), _useState6 = _slicedToArray$1(_useState5, 2), placement = _useState6[0], setPortalPlacement = _useState6[1];
    var portalPlacementContext = (0, react_1.useMemo)(function () {
        return {
            setPortalPlacement: setPortalPlacement
        };
    }, []);
    var _useState7 = (0, react_1.useState)(null), _useState8 = _slicedToArray$1(_useState7, 2), computedPosition = _useState8[0], setComputedPosition = _useState8[1];
    var updateComputedPosition = (0, react_1.useCallback)(function () {
        if (!controlElement)
            return;
        var rect = getBoundingClientObj(controlElement);
        var scrollDistance = menuPosition === 'fixed' ? 0 : window.pageYOffset;
        var offset = rect[placement] + scrollDistance;
        if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
            setComputedPosition({
                offset: offset,
                rect: rect
            });
        }
    }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
    index(function () {
        updateComputedPosition();
    }, [updateComputedPosition]);
    var runAutoUpdate = (0, react_1.useCallback)(function () {
        if (typeof cleanupRef.current === 'function') {
            cleanupRef.current();
            cleanupRef.current = null;
        }
        if (controlElement && menuPortalRef.current) {
            cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
                elementResize: 'ResizeObserver' in window
            });
        }
    }, [controlElement, updateComputedPosition]);
    index(function () {
        runAutoUpdate();
    }, [runAutoUpdate]);
    var setMenuPortalElement = (0, react_1.useCallback)(function (menuPortalElement) {
        menuPortalRef.current = menuPortalElement;
        runAutoUpdate();
    }, [runAutoUpdate]);
    // bail early if required elements aren't present
    if (!appendTo && menuPosition !== 'fixed' || !computedPosition)
        return null;
    // same wrapper element whether fixed or portalled
    var menuWrapper = jsx$1("div", _extends({
        ref: setMenuPortalElement
    }, getStyleProps(_objectSpread2$2(_objectSpread2$2({}, props), {}, {
        offset: computedPosition.offset,
        position: menuPosition,
        rect: computedPosition.rect
    }), 'menuPortal', {
        'menu-portal': true
    }), innerProps), children);
    return jsx$1(PortalPlacementContext.Provider, {
        value: portalPlacementContext
    }, appendTo ? /*#__PURE__*/ (0, react_dom_1.createPortal)(menuWrapper, appendTo) : menuWrapper);
};
// ==============================
// Root Container
// ==============================
var containerCSS = function containerCSS(_ref) {
    var isDisabled = _ref.isDisabled, isRtl = _ref.isRtl;
    return {
        label: 'container',
        direction: isRtl ? 'rtl' : undefined,
        pointerEvents: isDisabled ? 'none' : undefined,
        // cancel mouse events when disabled
        position: 'relative'
    };
};
var SelectContainer = function SelectContainer(props) {
    var children = props.children, innerProps = props.innerProps, isDisabled = props.isDisabled, isRtl = props.isRtl;
    return jsx$1("div", _extends({}, getStyleProps(props, 'container', {
        '--is-disabled': isDisabled,
        '--is-rtl': isRtl
    }), innerProps), children);
};
// ==============================
// Value Container
// ==============================
var valueContainerCSS = function valueContainerCSS(_ref2, unstyled) {
    var spacing = _ref2.theme.spacing, isMulti = _ref2.isMulti, hasValue = _ref2.hasValue, controlShouldRenderValue = _ref2.selectProps.controlShouldRenderValue;
    return _objectSpread2$2({
        alignItems: 'center',
        display: isMulti && hasValue && controlShouldRenderValue ? 'flex' : 'grid',
        flex: 1,
        flexWrap: 'wrap',
        WebkitOverflowScrolling: 'touch',
        position: 'relative',
        overflow: 'hidden'
    }, unstyled ? {} : {
        padding: "".concat(spacing.baseUnit / 2, "px ").concat(spacing.baseUnit * 2, "px")
    });
};
var ValueContainer = function ValueContainer(props) {
    var children = props.children, innerProps = props.innerProps, isMulti = props.isMulti, hasValue = props.hasValue;
    return jsx$1("div", _extends({}, getStyleProps(props, 'valueContainer', {
        'value-container': true,
        'value-container--is-multi': isMulti,
        'value-container--has-value': hasValue
    }), innerProps), children);
};
// ==============================
// Indicator Container
// ==============================
var indicatorsContainerCSS = function indicatorsContainerCSS() {
    return {
        alignItems: 'center',
        alignSelf: 'stretch',
        display: 'flex',
        flexShrink: 0
    };
};
var IndicatorsContainer = function IndicatorsContainer(props) {
    var children = props.children, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'indicatorsContainer', {
        indicators: true
    }), innerProps), children);
};
var _templateObject;
var _excluded$2$1 = ["size"], _excluded2$2 = ["innerProps", "isRtl", "size"];
function _EMOTION_STRINGIFIED_CSS_ERROR__$3() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
// ==============================
// Dropdown & Clear Icons
// ==============================
var _ref2$2 = process.env.NODE_ENV === "production" ? {
    name: "8mmkcg",
    styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0"
} : {
    name: "tj5bde-Svg",
    styles: "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__$3
};
var Svg = function Svg(_ref) {
    var size = _ref.size, props = _objectWithoutProperties$1(_ref, _excluded$2$1);
    return jsx$1("svg", _extends({
        height: size,
        width: size,
        viewBox: "0 0 20 20",
        "aria-hidden": "true",
        focusable: "false",
        css: _ref2$2
    }, props));
};
var CrossIcon = function CrossIcon(props) {
    return jsx$1(Svg, _extends({
        size: 20
    }, props), jsx$1("path", {
        d: "M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
    }));
};
var DownChevron = function DownChevron(props) {
    return jsx$1(Svg, _extends({
        size: 20
    }, props), jsx$1("path", {
        d: "M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
    }));
};
// ==============================
// Dropdown & Clear Buttons
// ==============================
var baseCSS = function baseCSS(_ref3, unstyled) {
    var isFocused = _ref3.isFocused, _ref3$theme = _ref3.theme, baseUnit = _ref3$theme.spacing.baseUnit, colors = _ref3$theme.colors;
    return _objectSpread2$2({
        label: 'indicatorContainer',
        display: 'flex',
        transition: 'color 150ms'
    }, unstyled ? {} : {
        color: isFocused ? colors.neutral60 : colors.neutral20,
        padding: baseUnit * 2,
        ':hover': {
            color: isFocused ? colors.neutral80 : colors.neutral40
        }
    });
};
var dropdownIndicatorCSS = baseCSS;
var DropdownIndicator = function DropdownIndicator(props) {
    var children = props.children, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'dropdownIndicator', {
        indicator: true,
        'dropdown-indicator': true
    }), innerProps), children || jsx$1(DownChevron, null));
};
var clearIndicatorCSS = baseCSS;
var ClearIndicator = function ClearIndicator(props) {
    var children = props.children, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'clearIndicator', {
        indicator: true,
        'clear-indicator': true
    }), innerProps), children || jsx$1(CrossIcon, null));
};
// ==============================
// Separator
// ==============================
var indicatorSeparatorCSS = function indicatorSeparatorCSS(_ref4, unstyled) {
    var isDisabled = _ref4.isDisabled, _ref4$theme = _ref4.theme, baseUnit = _ref4$theme.spacing.baseUnit, colors = _ref4$theme.colors;
    return _objectSpread2$2({
        label: 'indicatorSeparator',
        alignSelf: 'stretch',
        width: 1
    }, unstyled ? {} : {
        backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,
        marginBottom: baseUnit * 2,
        marginTop: baseUnit * 2
    });
};
var IndicatorSeparator = function IndicatorSeparator(props) {
    var innerProps = props.innerProps;
    return jsx$1("span", _extends({}, innerProps, getStyleProps(props, 'indicatorSeparator', {
        'indicator-separator': true
    })));
};
// ==============================
// Loading
// ==============================
var loadingDotAnimations = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%, 80%, 100% { opacity: 0; }\n  40% { opacity: 1; }\n"])));
var loadingIndicatorCSS = function loadingIndicatorCSS(_ref5, unstyled) {
    var isFocused = _ref5.isFocused, size = _ref5.size, _ref5$theme = _ref5.theme, colors = _ref5$theme.colors, baseUnit = _ref5$theme.spacing.baseUnit;
    return _objectSpread2$2({
        label: 'loadingIndicator',
        display: 'flex',
        transition: 'color 150ms',
        alignSelf: 'center',
        fontSize: size,
        lineHeight: 1,
        marginRight: size,
        textAlign: 'center',
        verticalAlign: 'middle'
    }, unstyled ? {} : {
        color: isFocused ? colors.neutral60 : colors.neutral20,
        padding: baseUnit * 2
    });
};
var LoadingDot = function LoadingDot(_ref6) {
    var delay = _ref6.delay, offset = _ref6.offset;
    return jsx$1("span", {
        css: /*#__PURE__*/ css$3({
            animation: "".concat(loadingDotAnimations, " 1s ease-in-out ").concat(delay, "ms infinite;"),
            backgroundColor: 'currentColor',
            borderRadius: '1em',
            display: 'inline-block',
            marginLeft: offset ? '1em' : undefined,
            height: '1em',
            verticalAlign: 'top',
            width: '1em'
        }, process.env.NODE_ENV === "production" ? "" : ";label:LoadingDot;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    });
};
var LoadingIndicator = function LoadingIndicator(_ref7) {
    var innerProps = _ref7.innerProps, isRtl = _ref7.isRtl, _ref7$size = _ref7.size, size = _ref7$size === void 0 ? 4 : _ref7$size, restProps = _objectWithoutProperties$1(_ref7, _excluded2$2);
    return jsx$1("div", _extends({}, getStyleProps(_objectSpread2$2(_objectSpread2$2({}, restProps), {}, {
        innerProps: innerProps,
        isRtl: isRtl,
        size: size
    }), 'loadingIndicator', {
        indicator: true,
        'loading-indicator': true
    }), innerProps), jsx$1(LoadingDot, {
        delay: 0,
        offset: isRtl
    }), jsx$1(LoadingDot, {
        delay: 160,
        offset: true
    }), jsx$1(LoadingDot, {
        delay: 320,
        offset: !isRtl
    }));
};
var css$1 = function css(_ref, unstyled) {
    var isDisabled = _ref.isDisabled, isFocused = _ref.isFocused, _ref$theme = _ref.theme, colors = _ref$theme.colors, borderRadius = _ref$theme.borderRadius, spacing = _ref$theme.spacing;
    return _objectSpread2$2({
        label: 'control',
        alignItems: 'center',
        cursor: 'default',
        display: 'flex',
        flexWrap: 'wrap',
        justifyContent: 'space-between',
        minHeight: spacing.controlHeight,
        outline: '0 !important',
        position: 'relative',
        transition: 'all 100ms'
    }, unstyled ? {} : {
        backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,
        borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,
        borderRadius: borderRadius,
        borderStyle: 'solid',
        borderWidth: 1,
        boxShadow: isFocused ? "0 0 0 1px ".concat(colors.primary) : undefined,
        '&:hover': {
            borderColor: isFocused ? colors.primary : colors.neutral30
        }
    });
};
var Control = function Control(props) {
    var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, innerRef = props.innerRef, innerProps = props.innerProps, menuIsOpen = props.menuIsOpen;
    return jsx$1("div", _extends({
        ref: innerRef
    }, getStyleProps(props, 'control', {
        control: true,
        'control--is-disabled': isDisabled,
        'control--is-focused': isFocused,
        'control--menu-is-open': menuIsOpen
    }), innerProps, {
        "aria-disabled": isDisabled || undefined
    }), children);
};
var Control$1 = Control;
var _excluded$1$1 = ["data"];
var groupCSS = function groupCSS(_ref, unstyled) {
    var spacing = _ref.theme.spacing;
    return unstyled ? {} : {
        paddingBottom: spacing.baseUnit * 2,
        paddingTop: spacing.baseUnit * 2
    };
};
var Group = function Group(props) {
    var children = props.children, cx = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, Heading = props.Heading, headingProps = props.headingProps, innerProps = props.innerProps, label = props.label, theme = props.theme, selectProps = props.selectProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'group', {
        group: true
    }), innerProps), jsx$1(Heading, _extends({}, headingProps, {
        selectProps: selectProps,
        theme: theme,
        getStyles: getStyles,
        getClassNames: getClassNames,
        cx: cx
    }), label), jsx$1("div", null, children));
};
var groupHeadingCSS = function groupHeadingCSS(_ref2, unstyled) {
    var _ref2$theme = _ref2.theme, colors = _ref2$theme.colors, spacing = _ref2$theme.spacing;
    return _objectSpread2$2({
        label: 'group',
        cursor: 'default',
        display: 'block'
    }, unstyled ? {} : {
        color: colors.neutral40,
        fontSize: '75%',
        fontWeight: 500,
        marginBottom: '0.25em',
        paddingLeft: spacing.baseUnit * 3,
        paddingRight: spacing.baseUnit * 3,
        textTransform: 'uppercase'
    });
};
var GroupHeading = function GroupHeading(props) {
    var _cleanCommonProps = cleanCommonProps(props);
    _cleanCommonProps.data;
    var innerProps = _objectWithoutProperties$1(_cleanCommonProps, _excluded$1$1);
    return jsx$1("div", _extends({}, getStyleProps(props, 'groupHeading', {
        'group-heading': true
    }), innerProps));
};
var Group$1 = Group;
var _excluded$5 = ["innerRef", "isDisabled", "isHidden", "inputClassName"];
var inputCSS = function inputCSS(_ref, unstyled) {
    var isDisabled = _ref.isDisabled, value = _ref.value, _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;
    return _objectSpread2$2(_objectSpread2$2({
        visibility: isDisabled ? 'hidden' : 'visible',
        // force css to recompute when value change due to @emotion bug.
        // We can remove it whenever the bug is fixed.
        transform: value ? 'translateZ(0)' : ''
    }, containerStyle), unstyled ? {} : {
        margin: spacing.baseUnit / 2,
        paddingBottom: spacing.baseUnit / 2,
        paddingTop: spacing.baseUnit / 2,
        color: colors.neutral80
    });
};
var spacingStyle = {
    gridArea: '1 / 2',
    font: 'inherit',
    minWidth: '2px',
    border: 0,
    margin: 0,
    outline: 0,
    padding: 0
};
var containerStyle = {
    flex: '1 1 auto',
    display: 'inline-grid',
    gridArea: '1 / 1 / 2 / 3',
    gridTemplateColumns: '0 min-content',
    '&:after': _objectSpread2$2({
        content: 'attr(data-value) " "',
        visibility: 'hidden',
        whiteSpace: 'pre'
    }, spacingStyle)
};
var inputStyle = function inputStyle(isHidden) {
    return _objectSpread2$2({
        label: 'input',
        color: 'inherit',
        background: 0,
        opacity: isHidden ? 0 : 1,
        width: '100%'
    }, spacingStyle);
};
var Input = function Input(props) {
    var cx = props.cx, value = props.value;
    var _cleanCommonProps = cleanCommonProps(props), innerRef = _cleanCommonProps.innerRef, isDisabled = _cleanCommonProps.isDisabled, isHidden = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, innerProps = _objectWithoutProperties$1(_cleanCommonProps, _excluded$5);
    return jsx$1("div", _extends({}, getStyleProps(props, 'input', {
        'input-container': true
    }), {
        "data-value": value || ''
    }), jsx$1("input", _extends({
        className: cx({
            input: true
        }, inputClassName),
        ref: innerRef,
        style: inputStyle(isHidden),
        disabled: isDisabled
    }, innerProps)));
};
var Input$1 = Input;
var multiValueCSS = function multiValueCSS(_ref, unstyled) {
    var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, borderRadius = _ref$theme.borderRadius, colors = _ref$theme.colors;
    return _objectSpread2$2({
        label: 'multiValue',
        display: 'flex',
        minWidth: 0
    }, unstyled ? {} : {
        backgroundColor: colors.neutral10,
        borderRadius: borderRadius / 2,
        margin: spacing.baseUnit / 2
    });
};
var multiValueLabelCSS = function multiValueLabelCSS(_ref2, unstyled) {
    var _ref2$theme = _ref2.theme, borderRadius = _ref2$theme.borderRadius, colors = _ref2$theme.colors, cropWithEllipsis = _ref2.cropWithEllipsis;
    return _objectSpread2$2({
        overflow: 'hidden',
        textOverflow: cropWithEllipsis || cropWithEllipsis === undefined ? 'ellipsis' : undefined,
        whiteSpace: 'nowrap'
    }, unstyled ? {} : {
        borderRadius: borderRadius / 2,
        color: colors.neutral80,
        fontSize: '85%',
        padding: 3,
        paddingLeft: 6
    });
};
var multiValueRemoveCSS = function multiValueRemoveCSS(_ref3, unstyled) {
    var _ref3$theme = _ref3.theme, spacing = _ref3$theme.spacing, borderRadius = _ref3$theme.borderRadius, colors = _ref3$theme.colors, isFocused = _ref3.isFocused;
    return _objectSpread2$2({
        alignItems: 'center',
        display: 'flex'
    }, unstyled ? {} : {
        borderRadius: borderRadius / 2,
        backgroundColor: isFocused ? colors.dangerLight : undefined,
        paddingLeft: spacing.baseUnit,
        paddingRight: spacing.baseUnit,
        ':hover': {
            backgroundColor: colors.dangerLight,
            color: colors.danger
        }
    });
};
var MultiValueGeneric = function MultiValueGeneric(_ref4) {
    var children = _ref4.children, innerProps = _ref4.innerProps;
    return jsx$1("div", innerProps, children);
};
var MultiValueContainer = MultiValueGeneric;
var MultiValueLabel = MultiValueGeneric;
function MultiValueRemove(_ref5) {
    var children = _ref5.children, innerProps = _ref5.innerProps;
    return jsx$1("div", _extends({
        role: "button"
    }, innerProps), children || jsx$1(CrossIcon, {
        size: 14
    }));
}
var MultiValue = function MultiValue(props) {
    var children = props.children, components = props.components, data = props.data, innerProps = props.innerProps, isDisabled = props.isDisabled, removeProps = props.removeProps, selectProps = props.selectProps;
    var Container = components.Container, Label = components.Label, Remove = components.Remove;
    return jsx$1(Container, {
        data: data,
        innerProps: _objectSpread2$2(_objectSpread2$2({}, getStyleProps(props, 'multiValue', {
            'multi-value': true,
            'multi-value--is-disabled': isDisabled
        })), innerProps),
        selectProps: selectProps
    }, jsx$1(Label, {
        data: data,
        innerProps: _objectSpread2$2({}, getStyleProps(props, 'multiValueLabel', {
            'multi-value__label': true
        })),
        selectProps: selectProps
    }, children), jsx$1(Remove, {
        data: data,
        innerProps: _objectSpread2$2(_objectSpread2$2({}, getStyleProps(props, 'multiValueRemove', {
            'multi-value__remove': true
        })), {}, {
            'aria-label': "Remove ".concat(children || 'option')
        }, removeProps),
        selectProps: selectProps
    }));
};
var MultiValue$1 = MultiValue;
var optionCSS = function optionCSS(_ref, unstyled) {
    var isDisabled = _ref.isDisabled, isFocused = _ref.isFocused, isSelected = _ref.isSelected, _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;
    return _objectSpread2$2({
        label: 'option',
        cursor: 'default',
        display: 'block',
        fontSize: 'inherit',
        width: '100%',
        userSelect: 'none',
        WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)'
    }, unstyled ? {} : {
        backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : 'transparent',
        color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : 'inherit',
        padding: "".concat(spacing.baseUnit * 2, "px ").concat(spacing.baseUnit * 3, "px"),
        // provide some affordance on touch devices
        ':active': {
            backgroundColor: !isDisabled ? isSelected ? colors.primary : colors.primary50 : undefined
        }
    });
};
var Option = function Option(props) {
    var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected, innerRef = props.innerRef, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'option', {
        option: true,
        'option--is-disabled': isDisabled,
        'option--is-focused': isFocused,
        'option--is-selected': isSelected
    }), {
        ref: innerRef,
        "aria-disabled": isDisabled
    }, innerProps), children);
};
var Option$1 = Option;
var placeholderCSS = function placeholderCSS(_ref, unstyled) {
    var _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;
    return _objectSpread2$2({
        label: 'placeholder',
        gridArea: '1 / 1 / 2 / 3'
    }, unstyled ? {} : {
        color: colors.neutral50,
        marginLeft: spacing.baseUnit / 2,
        marginRight: spacing.baseUnit / 2
    });
};
var Placeholder = function Placeholder(props) {
    var children = props.children, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'placeholder', {
        placeholder: true
    }), innerProps), children);
};
var Placeholder$1 = Placeholder;
var css$2 = function css(_ref, unstyled) {
    var isDisabled = _ref.isDisabled, _ref$theme = _ref.theme, spacing = _ref$theme.spacing, colors = _ref$theme.colors;
    return _objectSpread2$2({
        label: 'singleValue',
        gridArea: '1 / 1 / 2 / 3',
        maxWidth: '100%',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap'
    }, unstyled ? {} : {
        color: isDisabled ? colors.neutral40 : colors.neutral80,
        marginLeft: spacing.baseUnit / 2,
        marginRight: spacing.baseUnit / 2
    });
};
var SingleValue = function SingleValue(props) {
    var children = props.children, isDisabled = props.isDisabled, innerProps = props.innerProps;
    return jsx$1("div", _extends({}, getStyleProps(props, 'singleValue', {
        'single-value': true,
        'single-value--is-disabled': isDisabled
    }), innerProps), children);
};
var SingleValue$1 = SingleValue;
var components = {
    ClearIndicator: ClearIndicator,
    Control: Control$1,
    DropdownIndicator: DropdownIndicator,
    DownChevron: DownChevron,
    CrossIcon: CrossIcon,
    Group: Group$1,
    GroupHeading: GroupHeading,
    IndicatorsContainer: IndicatorsContainer,
    IndicatorSeparator: IndicatorSeparator,
    Input: Input$1,
    LoadingIndicator: LoadingIndicator,
    Menu: Menu$1,
    MenuList: MenuList,
    MenuPortal: MenuPortal,
    LoadingMessage: LoadingMessage,
    NoOptionsMessage: NoOptionsMessage,
    MultiValue: MultiValue$1,
    MultiValueContainer: MultiValueContainer,
    MultiValueLabel: MultiValueLabel,
    MultiValueRemove: MultiValueRemove,
    Option: Option$1,
    Placeholder: Placeholder$1,
    SelectContainer: SelectContainer,
    SingleValue: SingleValue$1,
    ValueContainer: ValueContainer
};
var defaultComponents = function defaultComponents(props) {
    return _objectSpread2$2(_objectSpread2$2({}, components), props.components);
};
var safeIsNaN = Number.isNaN ||
    function ponyfill(value) {
        return typeof value === 'number' && value !== value;
    };
function isEqual(first, second) {
    if (first === second) {
        return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
        return true;
    }
    return false;
}
function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
        return false;
    }
    for (var i = 0; i < newInputs.length; i++) {
        if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
        }
    }
    return true;
}
function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) {
        isEqual = areInputsEqual;
    }
    var cache = null;
    function memoized() {
        var newArgs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
        }
        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
            return cache.lastResult;
        }
        var lastResult = resultFn.apply(this, newArgs);
        cache = {
            lastResult: lastResult,
            lastArgs: newArgs,
            lastThis: this,
        };
        return lastResult;
    }
    memoized.clear = function clear() {
        cache = null;
    };
    return memoized;
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$2() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
// Assistive text to describe visual elements. Hidden for sighted users.
var _ref$1 = process.env.NODE_ENV === "production" ? {
    name: "7pg0cj-a11yText",
    styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap"
} : {
    name: "1f43avz-a11yText-A11yText",
    styles: "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNSSIsImZpbGUiOiJBMTF5VGV4dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IGpzeCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLy8gQXNzaXN0aXZlIHRleHQgdG8gZGVzY3JpYmUgdmlzdWFsIGVsZW1lbnRzLiBIaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMuXG5jb25zdCBBMTF5VGV4dCA9IChwcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ10pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__$2
};
var A11yText = function A11yText(props) {
    return jsx$1("span", _extends({
        css: _ref$1
    }, props));
};
var A11yText$1 = A11yText;
var defaultAriaLiveMessages = {
    guidance: function guidance(props) {
        var isSearchable = props.isSearchable, isMulti = props.isMulti, tabSelectsValue = props.tabSelectsValue, context = props.context, isInitialFocus = props.isInitialFocus;
        switch (context) {
            case 'menu':
                return "Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu".concat(tabSelectsValue ? ', press Tab to select the option and exit the menu' : '', ".");
            case 'input':
                return isInitialFocus ? "".concat(props['aria-label'] || 'Select', " is focused ").concat(isSearchable ? ',type to refine list' : '', ", press Down to open the menu, ").concat(isMulti ? ' press left to focus selected values' : '') : '';
            case 'value':
                return 'Use left and right to toggle between focused values, press Backspace to remove the currently focused value';
            default:
                return '';
        }
    },
    onChange: function onChange(props) {
        var action = props.action, _props$label = props.label, label = _props$label === void 0 ? '' : _props$label, labels = props.labels, isDisabled = props.isDisabled;
        switch (action) {
            case 'deselect-option':
            case 'pop-value':
            case 'remove-value':
                return "option ".concat(label, ", deselected.");
            case 'clear':
                return 'All selected options have been cleared.';
            case 'initial-input-focus':
                return "option".concat(labels.length > 1 ? 's' : '', " ").concat(labels.join(','), ", selected.");
            case 'select-option':
                return isDisabled ? "option ".concat(label, " is disabled. Select another option.") : "option ".concat(label, ", selected.");
            default:
                return '';
        }
    },
    onFocus: function onFocus(props) {
        var context = props.context, focused = props.focused, options = props.options, _props$label2 = props.label, label = _props$label2 === void 0 ? '' : _props$label2, selectValue = props.selectValue, isDisabled = props.isDisabled, isSelected = props.isSelected, isAppleDevice = props.isAppleDevice;
        var getArrayIndex = function getArrayIndex(arr, item) {
            return arr && arr.length ? "".concat(arr.indexOf(item) + 1, " of ").concat(arr.length) : '';
        };
        if (context === 'value' && selectValue) {
            return "value ".concat(label, " focused, ").concat(getArrayIndex(selectValue, focused), ".");
        }
        if (context === 'menu' && isAppleDevice) {
            var disabled = isDisabled ? ' disabled' : '';
            var status = "".concat(isSelected ? ' selected' : '').concat(disabled);
            return "".concat(label).concat(status, ", ").concat(getArrayIndex(options, focused), ".");
        }
        return '';
    },
    onFilter: function onFilter(props) {
        var inputValue = props.inputValue, resultsMessage = props.resultsMessage;
        return "".concat(resultsMessage).concat(inputValue ? ' for search term ' + inputValue : '', ".");
    }
};
var LiveRegion = function LiveRegion(props) {
    var ariaSelection = props.ariaSelection, focusedOption = props.focusedOption, focusedValue = props.focusedValue, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id = props.id, isAppleDevice = props.isAppleDevice;
    var ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isMulti = selectProps.isMulti, isOptionDisabled = selectProps.isOptionDisabled, isSearchable = selectProps.isSearchable, menuIsOpen = selectProps.menuIsOpen, options = selectProps.options, screenReaderStatus = selectProps.screenReaderStatus, tabSelectsValue = selectProps.tabSelectsValue, isLoading = selectProps.isLoading;
    var ariaLabel = selectProps['aria-label'];
    var ariaLive = selectProps['aria-live'];
    // Update aria live message configuration when prop changes
    var messages = (0, react_1.useMemo)(function () {
        return _objectSpread2$2(_objectSpread2$2({}, defaultAriaLiveMessages), ariaLiveMessages || {});
    }, [ariaLiveMessages]);
    // Update aria live selected option when prop changes
    var ariaSelected = (0, react_1.useMemo)(function () {
        var message = '';
        if (ariaSelection && messages.onChange) {
            var option = ariaSelection.option, selectedOptions = ariaSelection.options, removedValue = ariaSelection.removedValue, removedValues = ariaSelection.removedValues, value = ariaSelection.value;
            // select-option when !isMulti does not return option so we assume selected option is value
            var asOption = function asOption(val) {
                return !Array.isArray(val) ? val : null;
            };
            // If there is just one item from the action then get its label
            var selected = removedValue || option || asOption(value);
            var label = selected ? getOptionLabel(selected) : '';
            // If there are multiple items from the action then return an array of labels
            var multiSelected = selectedOptions || removedValues || undefined;
            var labels = multiSelected ? multiSelected.map(getOptionLabel) : [];
            var onChangeProps = _objectSpread2$2({
                // multiSelected items are usually items that have already been selected
                // or set by the user as a default value so we assume they are not disabled
                isDisabled: selected && isOptionDisabled(selected, selectValue),
                label: label,
                labels: labels
            }, ariaSelection);
            message = messages.onChange(onChangeProps);
        }
        return message;
    }, [ariaSelection, messages, isOptionDisabled, selectValue, getOptionLabel]);
    var ariaFocused = (0, react_1.useMemo)(function () {
        var focusMsg = '';
        var focused = focusedOption || focusedValue;
        var isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
        if (focused && messages.onFocus) {
            var onFocusProps = {
                focused: focused,
                label: getOptionLabel(focused),
                isDisabled: isOptionDisabled(focused, selectValue),
                isSelected: isSelected,
                options: focusableOptions,
                context: focused === focusedOption ? 'menu' : 'value',
                selectValue: selectValue,
                isAppleDevice: isAppleDevice
            };
            focusMsg = messages.onFocus(onFocusProps);
        }
        return focusMsg;
    }, [focusedOption, focusedValue, getOptionLabel, isOptionDisabled, messages, focusableOptions, selectValue, isAppleDevice]);
    var ariaResults = (0, react_1.useMemo)(function () {
        var resultsMsg = '';
        if (menuIsOpen && options.length && !isLoading && messages.onFilter) {
            var resultsMessage = screenReaderStatus({
                count: focusableOptions.length
            });
            resultsMsg = messages.onFilter({
                inputValue: inputValue,
                resultsMessage: resultsMessage
            });
        }
        return resultsMsg;
    }, [focusableOptions, inputValue, menuIsOpen, messages, options, screenReaderStatus, isLoading]);
    var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus';
    var ariaGuidance = (0, react_1.useMemo)(function () {
        var guidanceMsg = '';
        if (messages.guidance) {
            var context = focusedValue ? 'value' : menuIsOpen ? 'menu' : 'input';
            guidanceMsg = messages.guidance({
                'aria-label': ariaLabel,
                context: context,
                isDisabled: focusedOption && isOptionDisabled(focusedOption, selectValue),
                isMulti: isMulti,
                isSearchable: isSearchable,
                tabSelectsValue: tabSelectsValue,
                isInitialFocus: isInitialFocus
            });
        }
        return guidanceMsg;
    }, [ariaLabel, focusedOption, focusedValue, isMulti, isOptionDisabled, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue, isInitialFocus]);
    var ScreenReaderText = jsx$1(react_1.Fragment, null, jsx$1("span", {
        id: "aria-selection"
    }, ariaSelected), jsx$1("span", {
        id: "aria-focused"
    }, ariaFocused), jsx$1("span", {
        id: "aria-results"
    }, ariaResults), jsx$1("span", {
        id: "aria-guidance"
    }, ariaGuidance));
    return jsx$1(react_1.Fragment, null, jsx$1(A11yText$1, {
        id: id
    }, isInitialFocus && ScreenReaderText), jsx$1(A11yText$1, {
        "aria-live": ariaLive,
        "aria-atomic": "false",
        "aria-relevant": "additions text",
        role: "log"
    }, isFocused && !isInitialFocus && ScreenReaderText));
};
var LiveRegion$1 = LiveRegion;
var diacritics = [{
        base: 'A',
        letters: "A\u24B6\uFF21\xC0\xC1\xC2\u1EA6\u1EA4\u1EAA\u1EA8\xC3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\xC4\u01DE\u1EA2\xC5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F"
    }, {
        base: 'AA',
        letters: "\uA732"
    }, {
        base: 'AE',
        letters: "\xC6\u01FC\u01E2"
    }, {
        base: 'AO',
        letters: "\uA734"
    }, {
        base: 'AU',
        letters: "\uA736"
    }, {
        base: 'AV',
        letters: "\uA738\uA73A"
    }, {
        base: 'AY',
        letters: "\uA73C"
    }, {
        base: 'B',
        letters: "B\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181"
    }, {
        base: 'C',
        letters: "C\u24B8\uFF23\u0106\u0108\u010A\u010C\xC7\u1E08\u0187\u023B\uA73E"
    }, {
        base: 'D',
        letters: "D\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779"
    }, {
        base: 'DZ',
        letters: "\u01F1\u01C4"
    }, {
        base: 'Dz',
        letters: "\u01F2\u01C5"
    }, {
        base: 'E',
        letters: "E\u24BA\uFF25\xC8\xC9\xCA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\xCB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E"
    }, {
        base: 'F',
        letters: "F\u24BB\uFF26\u1E1E\u0191\uA77B"
    }, {
        base: 'G',
        letters: "G\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E"
    }, {
        base: 'H',
        letters: "H\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D"
    }, {
        base: 'I',
        letters: "I\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197"
    }, {
        base: 'J',
        letters: "J\u24BF\uFF2A\u0134\u0248"
    }, {
        base: 'K',
        letters: "K\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2"
    }, {
        base: 'L',
        letters: "L\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780"
    }, {
        base: 'LJ',
        letters: "\u01C7"
    }, {
        base: 'Lj',
        letters: "\u01C8"
    }, {
        base: 'M',
        letters: "M\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C"
    }, {
        base: 'N',
        letters: "N\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4"
    }, {
        base: 'NJ',
        letters: "\u01CA"
    }, {
        base: 'Nj',
        letters: "\u01CB"
    }, {
        base: 'O',
        letters: "O\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C"
    }, {
        base: 'OI',
        letters: "\u01A2"
    }, {
        base: 'OO',
        letters: "\uA74E"
    }, {
        base: 'OU',
        letters: "\u0222"
    }, {
        base: 'P',
        letters: "P\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754"
    }, {
        base: 'Q',
        letters: "Q\u24C6\uFF31\uA756\uA758\u024A"
    }, {
        base: 'R',
        letters: "R\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782"
    }, {
        base: 'S',
        letters: "S\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784"
    }, {
        base: 'T',
        letters: "T\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786"
    }, {
        base: 'TZ',
        letters: "\uA728"
    }, {
        base: 'U',
        letters: "U\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244"
    }, {
        base: 'V',
        letters: "V\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245"
    }, {
        base: 'VY',
        letters: "\uA760"
    }, {
        base: 'W',
        letters: "W\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72"
    }, {
        base: 'X',
        letters: "X\u24CD\uFF38\u1E8A\u1E8C"
    }, {
        base: 'Y',
        letters: "Y\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE"
    }, {
        base: 'Z',
        letters: "Z\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762"
    }, {
        base: 'a',
        letters: "a\u24D0\uFF41\u1E9A\xE0\xE1\xE2\u1EA7\u1EA5\u1EAB\u1EA9\xE3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\xE4\u01DF\u1EA3\xE5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250"
    }, {
        base: 'aa',
        letters: "\uA733"
    }, {
        base: 'ae',
        letters: "\xE6\u01FD\u01E3"
    }, {
        base: 'ao',
        letters: "\uA735"
    }, {
        base: 'au',
        letters: "\uA737"
    }, {
        base: 'av',
        letters: "\uA739\uA73B"
    }, {
        base: 'ay',
        letters: "\uA73D"
    }, {
        base: 'b',
        letters: "b\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253"
    }, {
        base: 'c',
        letters: "c\u24D2\uFF43\u0107\u0109\u010B\u010D\xE7\u1E09\u0188\u023C\uA73F\u2184"
    }, {
        base: 'd',
        letters: "d\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A"
    }, {
        base: 'dz',
        letters: "\u01F3\u01C6"
    }, {
        base: 'e',
        letters: "e\u24D4\uFF45\xE8\xE9\xEA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\xEB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD"
    }, {
        base: 'f',
        letters: "f\u24D5\uFF46\u1E1F\u0192\uA77C"
    }, {
        base: 'g',
        letters: "g\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F"
    }, {
        base: 'h',
        letters: "h\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265"
    }, {
        base: 'hv',
        letters: "\u0195"
    }, {
        base: 'i',
        letters: "i\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131"
    }, {
        base: 'j',
        letters: "j\u24D9\uFF4A\u0135\u01F0\u0249"
    }, {
        base: 'k',
        letters: "k\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3"
    }, {
        base: 'l',
        letters: "l\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747"
    }, {
        base: 'lj',
        letters: "\u01C9"
    }, {
        base: 'm',
        letters: "m\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F"
    }, {
        base: 'n',
        letters: "n\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5"
    }, {
        base: 'nj',
        letters: "\u01CC"
    }, {
        base: 'o',
        letters: "o\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\u0254\uA74B\uA74D\u0275"
    }, {
        base: 'oi',
        letters: "\u01A3"
    }, {
        base: 'ou',
        letters: "\u0223"
    }, {
        base: 'oo',
        letters: "\uA74F"
    }, {
        base: 'p',
        letters: "p\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755"
    }, {
        base: 'q',
        letters: "q\u24E0\uFF51\u024B\uA757\uA759"
    }, {
        base: 'r',
        letters: "r\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783"
    }, {
        base: 's',
        letters: "s\u24E2\uFF53\xDF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B"
    }, {
        base: 't',
        letters: "t\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787"
    }, {
        base: 'tz',
        letters: "\uA729"
    }, {
        base: 'u',
        letters: "u\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289"
    }, {
        base: 'v',
        letters: "v\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C"
    }, {
        base: 'vy',
        letters: "\uA761"
    }, {
        base: 'w',
        letters: "w\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73"
    }, {
        base: 'x',
        letters: "x\u24E7\uFF58\u1E8B\u1E8D"
    }, {
        base: 'y',
        letters: "y\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF"
    }, {
        base: 'z',
        letters: "z\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763"
    }];
var anyDiacritic = new RegExp('[' + diacritics.map(function (d) {
    return d.letters;
}).join('') + ']', 'g');
var diacriticToBase = {};
for (var i = 0; i < diacritics.length; i++) {
    var diacritic = diacritics[i];
    for (var j = 0; j < diacritic.letters.length; j++) {
        diacriticToBase[diacritic.letters[j]] = diacritic.base;
    }
}
var stripDiacritics = function stripDiacritics(str) {
    return str.replace(anyDiacritic, function (match) {
        return diacriticToBase[match];
    });
};
var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
var trimString = function trimString(str) {
    return str.replace(/^\s+|\s+$/g, '');
};
var defaultStringify = function defaultStringify(option) {
    return "".concat(option.label, " ").concat(option.value);
};
var createFilter = function createFilter(config) {
    return function (option, rawInput) {
        // eslint-disable-next-line no-underscore-dangle
        if (option.data.__isNew__)
            return true;
        var _ignoreCase$ignoreAcc = _objectSpread2$2({
            ignoreCase: true,
            ignoreAccents: true,
            stringify: defaultStringify,
            trim: true,
            matchFrom: 'any'
        }, config), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify = _ignoreCase$ignoreAcc.stringify, trim = _ignoreCase$ignoreAcc.trim, matchFrom = _ignoreCase$ignoreAcc.matchFrom;
        var input = trim ? trimString(rawInput) : rawInput;
        var candidate = trim ? trimString(stringify(option)) : stringify(option);
        if (ignoreCase) {
            input = input.toLowerCase();
            candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
            input = memoizedStripDiacriticsForInput(input);
            candidate = stripDiacritics(candidate);
        }
        return matchFrom === 'start' ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
    };
};
var _excluded$4 = ["innerRef"];
function DummyInput(_ref) {
    var innerRef = _ref.innerRef, props = _objectWithoutProperties$1(_ref, _excluded$4);
    // Remove animation props not meant for HTML elements
    var filteredProps = removeProps(props, 'onExited', 'in', 'enter', 'exit', 'appear');
    return jsx$1("input", _extends({
        ref: innerRef
    }, filteredProps, {
        css: /*#__PURE__*/ css$3({
            label: 'dummyInput',
            // get rid of any default styles
            background: 0,
            border: 0,
            // important! this hides the flashing cursor
            caretColor: 'transparent',
            fontSize: 'inherit',
            gridArea: '1 / 1 / 2 / 3',
            outline: 0,
            padding: 0,
            // important! without `width` browsers won't allow focus
            width: 1,
            // remove cursor on desktop
            color: 'transparent',
            // remove cursor on mobile whilst maintaining "scroll into view" behaviour
            left: -100,
            opacity: 0,
            position: 'relative',
            transform: 'scale(.01)'
        }, process.env.NODE_ENV === "production" ? "" : ";label:DummyInput;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkR1bW15SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCTSIsImZpbGUiOiJEdW1teUlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgcmVtb3ZlUHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIER1bW15SW5wdXQoe1xuICBpbm5lclJlZixcbiAgLi4ucHJvcHNcbn06IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmIHtcbiAgcmVhZG9ubHkgaW5uZXJSZWY6IFJlZjxIVE1MSW5wdXRFbGVtZW50Pjtcbn0pIHtcbiAgLy8gUmVtb3ZlIGFuaW1hdGlvbiBwcm9wcyBub3QgbWVhbnQgZm9yIEhUTUwgZWxlbWVudHNcbiAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHJlbW92ZVByb3BzKFxuICAgIHByb3BzLFxuICAgICdvbkV4aXRlZCcsXG4gICAgJ2luJyxcbiAgICAnZW50ZXInLFxuICAgICdleGl0JyxcbiAgICAnYXBwZWFyJ1xuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgey4uLmZpbHRlcmVkUHJvcHN9XG4gICAgICBjc3M9e3tcbiAgICAgICAgbGFiZWw6ICdkdW1teUlucHV0JyxcbiAgICAgICAgLy8gZ2V0IHJpZCBvZiBhbnkgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHRoaXMgaGlkZXMgdGhlIGZsYXNoaW5nIGN1cnNvclxuICAgICAgICBjYXJldENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICBncmlkQXJlYTogJzEgLyAxIC8gMiAvIDMnLFxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHdpdGhvdXQgYHdpZHRoYCBicm93c2VycyB3b24ndCBhbGxvdyBmb2N1c1xuICAgICAgICB3aWR0aDogMSxcblxuICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG5cbiAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBtb2JpbGUgd2hpbHN0IG1haW50YWluaW5nIFwic2Nyb2xsIGludG8gdmlld1wiIGJlaGF2aW91clxuICAgICAgICBsZWZ0OiAtMTAwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoLjAxKScsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0= */")
    }));
}
var cancelScroll = function cancelScroll(event) {
    if (event.cancelable)
        event.preventDefault();
    event.stopPropagation();
};
function useScrollCapture(_ref) {
    var isEnabled = _ref.isEnabled, onBottomArrive = _ref.onBottomArrive, onBottomLeave = _ref.onBottomLeave, onTopArrive = _ref.onTopArrive, onTopLeave = _ref.onTopLeave;
    var isBottom = (0, react_1.useRef)(false);
    var isTop = (0, react_1.useRef)(false);
    var touchStart = (0, react_1.useRef)(0);
    var scrollTarget = (0, react_1.useRef)(null);
    var handleEventDelta = (0, react_1.useCallback)(function (event, delta) {
        if (scrollTarget.current === null)
            return;
        var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, clientHeight = _scrollTarget$current.clientHeight;
        var target = scrollTarget.current;
        var isDeltaPositive = delta > 0;
        var availableScroll = scrollHeight - clientHeight - scrollTop;
        var shouldCancelScroll = false;
        // reset bottom/top flags
        if (availableScroll > delta && isBottom.current) {
            if (onBottomLeave)
                onBottomLeave(event);
            isBottom.current = false;
        }
        if (isDeltaPositive && isTop.current) {
            if (onTopLeave)
                onTopLeave(event);
            isTop.current = false;
        }
        // bottom limit
        if (isDeltaPositive && delta > availableScroll) {
            if (onBottomArrive && !isBottom.current) {
                onBottomArrive(event);
            }
            target.scrollTop = scrollHeight;
            shouldCancelScroll = true;
            isBottom.current = true;
            // top limit
        }
        else if (!isDeltaPositive && -delta > scrollTop) {
            if (onTopArrive && !isTop.current) {
                onTopArrive(event);
            }
            target.scrollTop = 0;
            shouldCancelScroll = true;
            isTop.current = true;
        }
        // cancel scroll
        if (shouldCancelScroll) {
            cancelScroll(event);
        }
    }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
    var onWheel = (0, react_1.useCallback)(function (event) {
        handleEventDelta(event, event.deltaY);
    }, [handleEventDelta]);
    var onTouchStart = (0, react_1.useCallback)(function (event) {
        // set touch start so we can calculate touchmove delta
        touchStart.current = event.changedTouches[0].clientY;
    }, []);
    var onTouchMove = (0, react_1.useCallback)(function (event) {
        var deltaY = touchStart.current - event.changedTouches[0].clientY;
        handleEventDelta(event, deltaY);
    }, [handleEventDelta]);
    var startListening = (0, react_1.useCallback)(function (el) {
        // bail early if no element is available to attach to
        if (!el)
            return;
        var notPassive = supportsPassiveEvents ? {
            passive: false
        } : false;
        el.addEventListener('wheel', onWheel, notPassive);
        el.addEventListener('touchstart', onTouchStart, notPassive);
        el.addEventListener('touchmove', onTouchMove, notPassive);
    }, [onTouchMove, onTouchStart, onWheel]);
    var stopListening = (0, react_1.useCallback)(function (el) {
        // bail early if no element is available to detach from
        if (!el)
            return;
        el.removeEventListener('wheel', onWheel, false);
        el.removeEventListener('touchstart', onTouchStart, false);
        el.removeEventListener('touchmove', onTouchMove, false);
    }, [onTouchMove, onTouchStart, onWheel]);
    (0, react_1.useEffect)(function () {
        if (!isEnabled)
            return;
        var element = scrollTarget.current;
        startListening(element);
        return function () {
            stopListening(element);
        };
    }, [isEnabled, startListening, stopListening]);
    return function (element) {
        scrollTarget.current = element;
    };
}
var STYLE_KEYS = ['boxSizing', 'height', 'overflow', 'paddingRight', 'position'];
var LOCK_STYLES = {
    boxSizing: 'border-box',
    // account for possible declaration `width: 100%;` on body
    overflow: 'hidden',
    position: 'relative',
    height: '100%'
};
function preventTouchMove(e) {
    e.preventDefault();
}
function allowTouchMove(e) {
    e.stopPropagation();
}
function preventInertiaScroll() {
    var top = this.scrollTop;
    var totalScroll = this.scrollHeight;
    var currentScroll = top + this.offsetHeight;
    if (top === 0) {
        this.scrollTop = 1;
    }
    else if (currentScroll === totalScroll) {
        this.scrollTop = top - 1;
    }
}
// `ontouchstart` check works on most browsers
// `maxTouchPoints` works on IE10/11 and Surface
function isTouchDevice() {
    return 'ontouchstart' in window || navigator.maxTouchPoints;
}
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var activeScrollLocks = 0;
var listenerOptions = {
    capture: false,
    passive: false
};
function useScrollLock(_ref) {
    var isEnabled = _ref.isEnabled, _ref$accountForScroll = _ref.accountForScrollbars, accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
    var originalStyles = (0, react_1.useRef)({});
    var scrollTarget = (0, react_1.useRef)(null);
    var addScrollLock = (0, react_1.useCallback)(function (touchScrollTarget) {
        if (!canUseDOM)
            return;
        var target = document.body;
        var targetStyle = target && target.style;
        if (accountForScrollbars) {
            // store any styles already applied to the body
            STYLE_KEYS.forEach(function (key) {
                var val = targetStyle && targetStyle[key];
                originalStyles.current[key] = val;
            });
        }
        // apply the lock styles and padding if this is the first scroll lock
        if (accountForScrollbars && activeScrollLocks < 1) {
            var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
            var clientWidth = document.body ? document.body.clientWidth : 0;
            var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
            Object.keys(LOCK_STYLES).forEach(function (key) {
                var val = LOCK_STYLES[key];
                if (targetStyle) {
                    targetStyle[key] = val;
                }
            });
            if (targetStyle) {
                targetStyle.paddingRight = "".concat(adjustedPadding, "px");
            }
        }
        // account for touch devices
        if (target && isTouchDevice()) {
            // Mobile Safari ignores { overflow: hidden } declaration on the body.
            target.addEventListener('touchmove', preventTouchMove, listenerOptions);
            // Allow scroll on provided target
            if (touchScrollTarget) {
                touchScrollTarget.addEventListener('touchstart', preventInertiaScroll, listenerOptions);
                touchScrollTarget.addEventListener('touchmove', allowTouchMove, listenerOptions);
            }
        }
        // increment active scroll locks
        activeScrollLocks += 1;
    }, [accountForScrollbars]);
    var removeScrollLock = (0, react_1.useCallback)(function (touchScrollTarget) {
        if (!canUseDOM)
            return;
        var target = document.body;
        var targetStyle = target && target.style;
        // safely decrement active scroll locks
        activeScrollLocks = Math.max(activeScrollLocks - 1, 0);
        // reapply original body styles, if any
        if (accountForScrollbars && activeScrollLocks < 1) {
            STYLE_KEYS.forEach(function (key) {
                var val = originalStyles.current[key];
                if (targetStyle) {
                    targetStyle[key] = val;
                }
            });
        }
        // remove touch listeners
        if (target && isTouchDevice()) {
            target.removeEventListener('touchmove', preventTouchMove, listenerOptions);
            if (touchScrollTarget) {
                touchScrollTarget.removeEventListener('touchstart', preventInertiaScroll, listenerOptions);
                touchScrollTarget.removeEventListener('touchmove', allowTouchMove, listenerOptions);
            }
        }
    }, [accountForScrollbars]);
    (0, react_1.useEffect)(function () {
        if (!isEnabled)
            return;
        var element = scrollTarget.current;
        addScrollLock(element);
        return function () {
            removeScrollLock(element);
        };
    }, [isEnabled, addScrollLock, removeScrollLock]);
    return function (element) {
        scrollTarget.current = element;
    };
}
function _EMOTION_STRINGIFIED_CSS_ERROR__$1() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var blurSelectInput = function blurSelectInput(event) {
    var element = event.target;
    return element.ownerDocument.activeElement && element.ownerDocument.activeElement.blur();
};
var _ref2$1 = process.env.NODE_ENV === "production" ? {
    name: "1kfdb0e",
    styles: "position:fixed;left:0;bottom:0;right:0;top:0"
} : {
    name: "bp8cua-ScrollManager",
    styles: "position:fixed;left:0;bottom:0;right:0;top:0;label:ScrollManager;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbE1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EVSIsImZpbGUiOiJTY3JvbGxNYW5hZ2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVmQ2FsbGJhY2ssIE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL3VzZVNjcm9sbENhcHR1cmUnO1xuaW1wb3J0IHVzZVNjcm9sbExvY2sgZnJvbSAnLi91c2VTY3JvbGxMb2NrJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVhZG9ubHkgY2hpbGRyZW46IChyZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PikgPT4gUmVhY3RFbGVtZW50O1xuICByZWFkb25seSBsb2NrRW5hYmxlZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FwdHVyZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG9uQm90dG9tQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Cb3R0b21MZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IG9uVG9wQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Ub3BMZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGJsdXJTZWxlY3RJbnB1dCA9IChldmVudDogTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcbiAgcmV0dXJuIChcbiAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgIChlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuYmx1cigpXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY3JvbGxNYW5hZ2VyKHtcbiAgY2hpbGRyZW4sXG4gIGxvY2tFbmFibGVkLFxuICBjYXB0dXJlRW5hYmxlZCA9IHRydWUsXG4gIG9uQm90dG9tQXJyaXZlLFxuICBvbkJvdHRvbUxlYXZlLFxuICBvblRvcEFycml2ZSxcbiAgb25Ub3BMZWF2ZSxcbn06IFByb3BzKSB7XG4gIGNvbnN0IHNldFNjcm9sbENhcHR1cmVUYXJnZXQgPSB1c2VTY3JvbGxDYXB0dXJlKHtcbiAgICBpc0VuYWJsZWQ6IGNhcHR1cmVFbmFibGVkLFxuICAgIG9uQm90dG9tQXJyaXZlLFxuICAgIG9uQm90dG9tTGVhdmUsXG4gICAgb25Ub3BBcnJpdmUsXG4gICAgb25Ub3BMZWF2ZSxcbiAgfSk7XG4gIGNvbnN0IHNldFNjcm9sbExvY2tUYXJnZXQgPSB1c2VTY3JvbGxMb2NrKHsgaXNFbmFibGVkOiBsb2NrRW5hYmxlZCB9KTtcblxuICBjb25zdCB0YXJnZXRSZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PiA9IChlbGVtZW50KSA9PiB7XG4gICAgc2V0U2Nyb2xsQ2FwdHVyZVRhcmdldChlbGVtZW50KTtcbiAgICBzZXRTY3JvbGxMb2NrVGFyZ2V0KGVsZW1lbnQpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAge2xvY2tFbmFibGVkICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIG9uQ2xpY2s9e2JsdXJTZWxlY3RJbnB1dH1cbiAgICAgICAgICBjc3M9e3sgcG9zaXRpb246ICdmaXhlZCcsIGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIHRvcDogMCB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtjaGlsZHJlbih0YXJnZXRSZWYpfVxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__$1
};
function ScrollManager(_ref) {
    var children = _ref.children, lockEnabled = _ref.lockEnabled, _ref$captureEnabled = _ref.captureEnabled, captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled, onBottomArrive = _ref.onBottomArrive, onBottomLeave = _ref.onBottomLeave, onTopArrive = _ref.onTopArrive, onTopLeave = _ref.onTopLeave;
    var setScrollCaptureTarget = useScrollCapture({
        isEnabled: captureEnabled,
        onBottomArrive: onBottomArrive,
        onBottomLeave: onBottomLeave,
        onTopArrive: onTopArrive,
        onTopLeave: onTopLeave
    });
    var setScrollLockTarget = useScrollLock({
        isEnabled: lockEnabled
    });
    var targetRef = function targetRef(element) {
        setScrollCaptureTarget(element);
        setScrollLockTarget(element);
    };
    return jsx$1(react_1.Fragment, null, lockEnabled && jsx$1("div", {
        onClick: blurSelectInput,
        css: _ref2$1
    }), children(targetRef));
}
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var _ref2 = process.env.NODE_ENV === "production" ? {
    name: "1a0ro4n-requiredInput",
    styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%"
} : {
    name: "5kkxb2-requiredInput-RequiredInput",
    styles: "label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%;label:RequiredInput;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlcXVpcmVkSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNJIiwiZmlsZSI6IlJlcXVpcmVkSW5wdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBGb2N1c0V2ZW50SGFuZGxlciwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmNvbnN0IFJlcXVpcmVkSW5wdXQ6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgb25Gb2N1czogRm9jdXNFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG59PiA9ICh7IG5hbWUsIG9uRm9jdXMgfSkgPT4gKFxuICA8aW5wdXRcbiAgICByZXF1aXJlZFxuICAgIG5hbWU9e25hbWV9XG4gICAgdGFiSW5kZXg9ey0xfVxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAncmVxdWlyZWRJbnB1dCcsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH19XG4gICAgLy8gUHJldmVudCBgU3dpdGNoaW5nIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWRgIGVycm9yXG4gICAgdmFsdWU9XCJcIlxuICAgIG9uQ2hhbmdlPXsoKSA9PiB7fX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVkSW5wdXQ7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
var RequiredInput = function RequiredInput(_ref) {
    var name = _ref.name, onFocus = _ref.onFocus;
    return jsx$1("input", {
        required: true,
        name: name,
        tabIndex: -1,
        "aria-hidden": "true",
        onFocus: onFocus,
        css: _ref2
        // Prevent `Switching from uncontrolled to controlled` error
        ,
        value: "",
        onChange: function onChange() { }
    });
};
var RequiredInput$1 = RequiredInput;
/// <reference types="user-agent-data-types" />
function testPlatform(re) {
    var _window$navigator$use;
    return typeof window !== 'undefined' && window.navigator != null ? re.test(((_window$navigator$use = window.navigator['userAgentData']) === null || _window$navigator$use === void 0 ? void 0 : _window$navigator$use.platform) || window.navigator.platform) : false;
}
function isIPhone() {
    return testPlatform(/^iPhone/i);
}
function isMac() {
    return testPlatform(/^Mac/i);
}
function isIPad() {
    return testPlatform(/^iPad/i) ||
        // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
        isMac() && navigator.maxTouchPoints > 1;
}
function isIOS() {
    return isIPhone() || isIPad();
}
function isAppleDevice() {
    return isMac() || isIOS();
}
var formatGroupLabel = function formatGroupLabel(group) {
    return group.label;
};
var getOptionLabel$1 = function getOptionLabel(option) {
    return option.label;
};
var getOptionValue$1 = function getOptionValue(option) {
    return option.value;
};
var isOptionDisabled = function isOptionDisabled(option) {
    return !!option.isDisabled;
};
var defaultStyles = {
    clearIndicator: clearIndicatorCSS,
    container: containerCSS,
    control: css$1,
    dropdownIndicator: dropdownIndicatorCSS,
    group: groupCSS,
    groupHeading: groupHeadingCSS,
    indicatorsContainer: indicatorsContainerCSS,
    indicatorSeparator: indicatorSeparatorCSS,
    input: inputCSS,
    loadingIndicator: loadingIndicatorCSS,
    loadingMessage: loadingMessageCSS,
    menu: menuCSS,
    menuList: menuListCSS,
    menuPortal: menuPortalCSS,
    multiValue: multiValueCSS,
    multiValueLabel: multiValueLabelCSS,
    multiValueRemove: multiValueRemoveCSS,
    noOptionsMessage: noOptionsMessageCSS,
    option: optionCSS,
    placeholder: placeholderCSS,
    singleValue: css$2,
    valueContainer: valueContainerCSS
};
var colors = {
    primary: '#2684FF',
    primary75: '#4C9AFF',
    primary50: '#B2D4FF',
    primary25: '#DEEBFF',
    danger: '#DE350B',
    dangerLight: '#FFBDAD',
    neutral0: 'hsl(0, 0%, 100%)',
    neutral5: 'hsl(0, 0%, 95%)',
    neutral10: 'hsl(0, 0%, 90%)',
    neutral20: 'hsl(0, 0%, 80%)',
    neutral30: 'hsl(0, 0%, 70%)',
    neutral40: 'hsl(0, 0%, 60%)',
    neutral50: 'hsl(0, 0%, 50%)',
    neutral60: 'hsl(0, 0%, 40%)',
    neutral70: 'hsl(0, 0%, 30%)',
    neutral80: 'hsl(0, 0%, 20%)',
    neutral90: 'hsl(0, 0%, 10%)'
};
var borderRadius = 4;
// Used to calculate consistent margin/padding on elements
var baseUnit = 4;
// The minimum height of the control
var controlHeight = 38;
// The amount of space between the control and menu */
var menuGutter = baseUnit * 2;
var spacing = {
    baseUnit: baseUnit,
    controlHeight: controlHeight,
    menuGutter: menuGutter
};
var defaultTheme = {
    borderRadius: borderRadius,
    colors: colors,
    spacing: spacing
};
var defaultProps = {
    'aria-live': 'polite',
    backspaceRemovesValue: true,
    blurInputOnSelect: isTouchCapable(),
    captureMenuScroll: !isTouchCapable(),
    classNames: {},
    closeMenuOnSelect: true,
    closeMenuOnScroll: false,
    components: {},
    controlShouldRenderValue: true,
    escapeClearsValue: false,
    filterOption: createFilter(),
    formatGroupLabel: formatGroupLabel,
    getOptionLabel: getOptionLabel$1,
    getOptionValue: getOptionValue$1,
    isDisabled: false,
    isLoading: false,
    isMulti: false,
    isRtl: false,
    isSearchable: true,
    isOptionDisabled: isOptionDisabled,
    loadingMessage: function loadingMessage() {
        return 'Loading...';
    },
    maxMenuHeight: 300,
    minMenuHeight: 140,
    menuIsOpen: false,
    menuPlacement: 'bottom',
    menuPosition: 'absolute',
    menuShouldBlockScroll: false,
    menuShouldScrollIntoView: !isMobileDevice(),
    noOptionsMessage: function noOptionsMessage() {
        return 'No options';
    },
    openMenuOnFocus: false,
    openMenuOnClick: true,
    options: [],
    pageSize: 5,
    placeholder: 'Select...',
    screenReaderStatus: function screenReaderStatus(_ref) {
        var count = _ref.count;
        return "".concat(count, " result").concat(count !== 1 ? 's' : '', " available");
    },
    styles: {},
    tabIndex: 0,
    tabSelectsValue: true,
    unstyled: false
};
function toCategorizedOption(props, option, selectValue, index) {
    var isDisabled = _isOptionDisabled(props, option, selectValue);
    var isSelected = _isOptionSelected(props, option, selectValue);
    var label = getOptionLabel(props, option);
    var value = getOptionValue(props, option);
    return {
        type: 'option',
        data: option,
        isDisabled: isDisabled,
        isSelected: isSelected,
        label: label,
        value: value,
        index: index
    };
}
function buildCategorizedOptions(props, selectValue) {
    return props.options.map(function (groupOrOption, groupOrOptionIndex) {
        if ('options' in groupOrOption) {
            var categorizedOptions = groupOrOption.options.map(function (option, optionIndex) {
                return toCategorizedOption(props, option, selectValue, optionIndex);
            }).filter(function (categorizedOption) {
                return isFocusable(props, categorizedOption);
            });
            return categorizedOptions.length > 0 ? {
                type: 'group',
                data: groupOrOption,
                options: categorizedOptions,
                index: groupOrOptionIndex
            } : undefined;
        }
        var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
        return isFocusable(props, categorizedOption) ? categorizedOption : undefined;
    }).filter(notNullish);
}
function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
    return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
        if (categorizedOption.type === 'group') {
            optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray$2(categorizedOption.options.map(function (option) {
                return option.data;
            })));
        }
        else {
            optionsAccumulator.push(categorizedOption.data);
        }
        return optionsAccumulator;
    }, []);
}
function buildFocusableOptionsWithIds(categorizedOptions, optionId) {
    return categorizedOptions.reduce(function (optionsAccumulator, categorizedOption) {
        if (categorizedOption.type === 'group') {
            optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray$2(categorizedOption.options.map(function (option) {
                return {
                    data: option.data,
                    id: "".concat(optionId, "-").concat(categorizedOption.index, "-").concat(option.index)
                };
            })));
        }
        else {
            optionsAccumulator.push({
                data: categorizedOption.data,
                id: "".concat(optionId, "-").concat(categorizedOption.index)
            });
        }
        return optionsAccumulator;
    }, []);
}
function buildFocusableOptions(props, selectValue) {
    return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
}
function isFocusable(props, categorizedOption) {
    var _props$inputValue = props.inputValue, inputValue = _props$inputValue === void 0 ? '' : _props$inputValue;
    var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label, value = categorizedOption.value;
    return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
        label: label,
        value: value,
        data: data
    }, inputValue);
}
function getNextFocusedValue(state, nextSelectValue) {
    var focusedValue = state.focusedValue, lastSelectValue = state.selectValue;
    var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
    if (lastFocusedIndex > -1) {
        var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
        if (nextFocusedIndex > -1) {
            // the focused value is still in the selectValue, return it
            return focusedValue;
        }
        else if (lastFocusedIndex < nextSelectValue.length) {
            // the focusedValue is not present in the next selectValue array by
            // reference, so return the new value at the same index
            return nextSelectValue[lastFocusedIndex];
        }
    }
    return null;
}
function getNextFocusedOption(state, options) {
    var lastFocusedOption = state.focusedOption;
    return lastFocusedOption && options.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options[0];
}
var getFocusedOptionId = function getFocusedOptionId(focusableOptionsWithIds, focusedOption) {
    var _focusableOptionsWith;
    var focusedOptionId = (_focusableOptionsWith = focusableOptionsWithIds.find(function (option) {
        return option.data === focusedOption;
    })) === null || _focusableOptionsWith === void 0 ? void 0 : _focusableOptionsWith.id;
    return focusedOptionId || null;
};
var getOptionLabel = function getOptionLabel(props, data) {
    return props.getOptionLabel(data);
};
var getOptionValue = function getOptionValue(props, data) {
    return props.getOptionValue(data);
};
function _isOptionDisabled(props, option, selectValue) {
    return typeof props.isOptionDisabled === 'function' ? props.isOptionDisabled(option, selectValue) : false;
}
function _isOptionSelected(props, option, selectValue) {
    if (selectValue.indexOf(option) > -1)
        return true;
    if (typeof props.isOptionSelected === 'function') {
        return props.isOptionSelected(option, selectValue);
    }
    var candidate = getOptionValue(props, option);
    return selectValue.some(function (i) {
        return getOptionValue(props, i) === candidate;
    });
}
function _filterOption(props, option, inputValue) {
    return props.filterOption ? props.filterOption(option, inputValue) : true;
}
var shouldHideSelectedOptions = function shouldHideSelectedOptions(props) {
    var hideSelectedOptions = props.hideSelectedOptions, isMulti = props.isMulti;
    if (hideSelectedOptions === undefined)
        return isMulti;
    return hideSelectedOptions;
};
var instanceId = 1;
var Select = /*#__PURE__*/ function (_Component) {
    _inherits(Select, _Component);
    var _super = _createSuper(Select);
    // Misc. Instance Properties
    // ------------------------------
    // TODO
    // Refs
    // ------------------------------
    // Lifecycle
    // ------------------------------
    function Select(_props) {
        var _this;
        _classCallCheck$1(this, Select);
        _this = _super.call(this, _props);
        _this.state = {
            ariaSelection: null,
            focusedOption: null,
            focusedOptionId: null,
            focusableOptionsWithIds: [],
            focusedValue: null,
            inputIsHidden: false,
            isFocused: false,
            selectValue: [],
            clearFocusValueOnUpdate: false,
            prevWasFocused: false,
            inputIsHiddenAfterUpdate: undefined,
            prevProps: undefined,
            instancePrefix: ''
        };
        _this.blockOptionHover = false;
        _this.isComposing = false;
        _this.commonProps = void 0;
        _this.initialTouchX = 0;
        _this.initialTouchY = 0;
        _this.openAfterFocus = false;
        _this.scrollToFocusedOptionOnUpdate = false;
        _this.userIsDragging = void 0;
        _this.isAppleDevice = isAppleDevice();
        _this.controlRef = null;
        _this.getControlRef = function (ref) {
            _this.controlRef = ref;
        };
        _this.focusedOptionRef = null;
        _this.getFocusedOptionRef = function (ref) {
            _this.focusedOptionRef = ref;
        };
        _this.menuListRef = null;
        _this.getMenuListRef = function (ref) {
            _this.menuListRef = ref;
        };
        _this.inputRef = null;
        _this.getInputRef = function (ref) {
            _this.inputRef = ref;
        };
        _this.focus = _this.focusInput;
        _this.blur = _this.blurInput;
        _this.onChange = function (newValue, actionMeta) {
            var _this$props = _this.props, onChange = _this$props.onChange, name = _this$props.name;
            actionMeta.name = name;
            _this.ariaOnChange(newValue, actionMeta);
            onChange(newValue, actionMeta);
        };
        _this.setValue = function (newValue, action, option) {
            var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti, inputValue = _this$props2.inputValue;
            _this.onInputChange('', {
                action: 'set-value',
                prevInputValue: inputValue
            });
            if (closeMenuOnSelect) {
                _this.setState({
                    inputIsHiddenAfterUpdate: !isMulti
                });
                _this.onMenuClose();
            }
            // when the select value should change, we should reset focusedValue
            _this.setState({
                clearFocusValueOnUpdate: true
            });
            _this.onChange(newValue, {
                action: action,
                option: option
            });
        };
        _this.selectOption = function (newValue) {
            var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti, name = _this$props3.name;
            var selectValue = _this.state.selectValue;
            var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
            var isDisabled = _this.isOptionDisabled(newValue, selectValue);
            if (deselected) {
                var candidate = _this.getOptionValue(newValue);
                _this.setValue(multiValueAsValue(selectValue.filter(function (i) {
                    return _this.getOptionValue(i) !== candidate;
                })), 'deselect-option', newValue);
            }
            else if (!isDisabled) {
                // Select option if option is not disabled
                if (isMulti) {
                    _this.setValue(multiValueAsValue([].concat(_toConsumableArray$2(selectValue), [newValue])), 'select-option', newValue);
                }
                else {
                    _this.setValue(singleValueAsValue(newValue), 'select-option');
                }
            }
            else {
                _this.ariaOnChange(singleValueAsValue(newValue), {
                    action: 'select-option',
                    option: newValue,
                    name: name
                });
                return;
            }
            if (blurInputOnSelect) {
                _this.blurInput();
            }
        };
        _this.removeValue = function (removedValue) {
            var isMulti = _this.props.isMulti;
            var selectValue = _this.state.selectValue;
            var candidate = _this.getOptionValue(removedValue);
            var newValueArray = selectValue.filter(function (i) {
                return _this.getOptionValue(i) !== candidate;
            });
            var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
            _this.onChange(newValue, {
                action: 'remove-value',
                removedValue: removedValue
            });
            _this.focusInput();
        };
        _this.clearValue = function () {
            var selectValue = _this.state.selectValue;
            _this.onChange(valueTernary(_this.props.isMulti, [], null), {
                action: 'clear',
                removedValues: selectValue
            });
        };
        _this.popValue = function () {
            var isMulti = _this.props.isMulti;
            var selectValue = _this.state.selectValue;
            var lastSelectedValue = selectValue[selectValue.length - 1];
            var newValueArray = selectValue.slice(0, selectValue.length - 1);
            var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
            _this.onChange(newValue, {
                action: 'pop-value',
                removedValue: lastSelectedValue
            });
        };
        _this.getFocusedOptionId = function (focusedOption) {
            return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption);
        };
        _this.getFocusableOptionsWithIds = function () {
            return buildFocusableOptionsWithIds(buildCategorizedOptions(_this.props, _this.state.selectValue), _this.getElementId('option'));
        };
        _this.getValue = function () {
            return _this.state.selectValue;
        };
        _this.cx = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            return classNames.apply(void 0, [_this.props.classNamePrefix].concat(args));
        };
        _this.getOptionLabel = function (data) {
            return getOptionLabel(_this.props, data);
        };
        _this.getOptionValue = function (data) {
            return getOptionValue(_this.props, data);
        };
        _this.getStyles = function (key, props) {
            var unstyled = _this.props.unstyled;
            var base = defaultStyles[key](props, unstyled);
            base.boxSizing = 'border-box';
            var custom = _this.props.styles[key];
            return custom ? custom(base, props) : base;
        };
        _this.getClassNames = function (key, props) {
            var _this$props$className, _this$props$className2;
            return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);
        };
        _this.getElementId = function (element) {
            return "".concat(_this.state.instancePrefix, "-").concat(element);
        };
        _this.getComponents = function () {
            return defaultComponents(_this.props);
        };
        _this.buildCategorizedOptions = function () {
            return buildCategorizedOptions(_this.props, _this.state.selectValue);
        };
        _this.getCategorizedOptions = function () {
            return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
        };
        _this.buildFocusableOptions = function () {
            return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
        };
        _this.getFocusableOptions = function () {
            return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
        };
        _this.ariaOnChange = function (value, actionMeta) {
            _this.setState({
                ariaSelection: _objectSpread2$2({
                    value: value
                }, actionMeta)
            });
        };
        _this.onMenuMouseDown = function (event) {
            if (event.button !== 0) {
                return;
            }
            event.stopPropagation();
            event.preventDefault();
            _this.focusInput();
        };
        _this.onMenuMouseMove = function (event) {
            _this.blockOptionHover = false;
        };
        _this.onControlMouseDown = function (event) {
            // Event captured by dropdown indicator
            if (event.defaultPrevented) {
                return;
            }
            var openMenuOnClick = _this.props.openMenuOnClick;
            if (!_this.state.isFocused) {
                if (openMenuOnClick) {
                    _this.openAfterFocus = true;
                }
                _this.focusInput();
            }
            else if (!_this.props.menuIsOpen) {
                if (openMenuOnClick) {
                    _this.openMenu('first');
                }
            }
            else {
                if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
                    _this.onMenuClose();
                }
            }
            if (event.target.tagName !== 'INPUT' && event.target.tagName !== 'TEXTAREA') {
                event.preventDefault();
            }
        };
        _this.onDropdownIndicatorMouseDown = function (event) {
            // ignore mouse events that weren't triggered by the primary button
            if (event && event.type === 'mousedown' && event.button !== 0) {
                return;
            }
            if (_this.props.isDisabled)
                return;
            var _this$props4 = _this.props, isMulti = _this$props4.isMulti, menuIsOpen = _this$props4.menuIsOpen;
            _this.focusInput();
            if (menuIsOpen) {
                _this.setState({
                    inputIsHiddenAfterUpdate: !isMulti
                });
                _this.onMenuClose();
            }
            else {
                _this.openMenu('first');
            }
            event.preventDefault();
        };
        _this.onClearIndicatorMouseDown = function (event) {
            // ignore mouse events that weren't triggered by the primary button
            if (event && event.type === 'mousedown' && event.button !== 0) {
                return;
            }
            _this.clearValue();
            event.preventDefault();
            _this.openAfterFocus = false;
            if (event.type === 'touchend') {
                _this.focusInput();
            }
            else {
                setTimeout(function () {
                    return _this.focusInput();
                });
            }
        };
        _this.onScroll = function (event) {
            if (typeof _this.props.closeMenuOnScroll === 'boolean') {
                if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
                    _this.props.onMenuClose();
                }
            }
            else if (typeof _this.props.closeMenuOnScroll === 'function') {
                if (_this.props.closeMenuOnScroll(event)) {
                    _this.props.onMenuClose();
                }
            }
        };
        _this.onCompositionStart = function () {
            _this.isComposing = true;
        };
        _this.onCompositionEnd = function () {
            _this.isComposing = false;
        };
        _this.onTouchStart = function (_ref2) {
            var touches = _ref2.touches;
            var touch = touches && touches.item(0);
            if (!touch) {
                return;
            }
            _this.initialTouchX = touch.clientX;
            _this.initialTouchY = touch.clientY;
            _this.userIsDragging = false;
        };
        _this.onTouchMove = function (_ref3) {
            var touches = _ref3.touches;
            var touch = touches && touches.item(0);
            if (!touch) {
                return;
            }
            var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
            var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
            var moveThreshold = 5;
            _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
        };
        _this.onTouchEnd = function (event) {
            if (_this.userIsDragging)
                return;
            // close the menu if the user taps outside
            // we're checking on event.target here instead of event.currentTarget, because we want to assert information
            // on events on child elements, not the document (which we've attached this handler to).
            if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
                _this.blurInput();
            }
            // reset move vars
            _this.initialTouchX = 0;
            _this.initialTouchY = 0;
        };
        _this.onControlTouchEnd = function (event) {
            if (_this.userIsDragging)
                return;
            _this.onControlMouseDown(event);
        };
        _this.onClearIndicatorTouchEnd = function (event) {
            if (_this.userIsDragging)
                return;
            _this.onClearIndicatorMouseDown(event);
        };
        _this.onDropdownIndicatorTouchEnd = function (event) {
            if (_this.userIsDragging)
                return;
            _this.onDropdownIndicatorMouseDown(event);
        };
        _this.handleInputChange = function (event) {
            var prevInputValue = _this.props.inputValue;
            var inputValue = event.currentTarget.value;
            _this.setState({
                inputIsHiddenAfterUpdate: false
            });
            _this.onInputChange(inputValue, {
                action: 'input-change',
                prevInputValue: prevInputValue
            });
            if (!_this.props.menuIsOpen) {
                _this.onMenuOpen();
            }
        };
        _this.onInputFocus = function (event) {
            if (_this.props.onFocus) {
                _this.props.onFocus(event);
            }
            _this.setState({
                inputIsHiddenAfterUpdate: false,
                isFocused: true
            });
            if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
                _this.openMenu('first');
            }
            _this.openAfterFocus = false;
        };
        _this.onInputBlur = function (event) {
            var prevInputValue = _this.props.inputValue;
            if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
                _this.inputRef.focus();
                return;
            }
            if (_this.props.onBlur) {
                _this.props.onBlur(event);
            }
            _this.onInputChange('', {
                action: 'input-blur',
                prevInputValue: prevInputValue
            });
            _this.onMenuClose();
            _this.setState({
                focusedValue: null,
                isFocused: false
            });
        };
        _this.onOptionHover = function (focusedOption) {
            if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
                return;
            }
            var options = _this.getFocusableOptions();
            var focusedOptionIndex = options.indexOf(focusedOption);
            _this.setState({
                focusedOption: focusedOption,
                focusedOptionId: focusedOptionIndex > -1 ? _this.getFocusedOptionId(focusedOption) : null
            });
        };
        _this.shouldHideSelectedOptions = function () {
            return shouldHideSelectedOptions(_this.props);
        };
        _this.onValueInputFocus = function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this.focus();
        };
        _this.onKeyDown = function (event) {
            var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, isDisabled = _this$props5.isDisabled, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus;
            var _this$state = _this.state, focusedOption = _this$state.focusedOption, focusedValue = _this$state.focusedValue, selectValue = _this$state.selectValue;
            if (isDisabled)
                return;
            if (typeof onKeyDown === 'function') {
                onKeyDown(event);
                if (event.defaultPrevented) {
                    return;
                }
            }
            // Block option hover events when the user has just pressed a key
            _this.blockOptionHover = true;
            switch (event.key) {
                case 'ArrowLeft':
                    if (!isMulti || inputValue)
                        return;
                    _this.focusValue('previous');
                    break;
                case 'ArrowRight':
                    if (!isMulti || inputValue)
                        return;
                    _this.focusValue('next');
                    break;
                case 'Delete':
                case 'Backspace':
                    if (inputValue)
                        return;
                    if (focusedValue) {
                        _this.removeValue(focusedValue);
                    }
                    else {
                        if (!backspaceRemovesValue)
                            return;
                        if (isMulti) {
                            _this.popValue();
                        }
                        else if (isClearable) {
                            _this.clearValue();
                        }
                    }
                    break;
                case 'Tab':
                    if (_this.isComposing)
                        return;
                    if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption ||
                        // don't capture the event if the menu opens on focus and the focused
                        // option is already selected; it breaks the flow of navigation
                        openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
                        return;
                    }
                    _this.selectOption(focusedOption);
                    break;
                case 'Enter':
                    if (event.keyCode === 229) {
                        // ignore the keydown event from an Input Method Editor(IME)
                        // ref. https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode
                        break;
                    }
                    if (menuIsOpen) {
                        if (!focusedOption)
                            return;
                        if (_this.isComposing)
                            return;
                        _this.selectOption(focusedOption);
                        break;
                    }
                    return;
                case 'Escape':
                    if (menuIsOpen) {
                        _this.setState({
                            inputIsHiddenAfterUpdate: false
                        });
                        _this.onInputChange('', {
                            action: 'menu-close',
                            prevInputValue: inputValue
                        });
                        _this.onMenuClose();
                    }
                    else if (isClearable && escapeClearsValue) {
                        _this.clearValue();
                    }
                    break;
                case ' ':
                    // space
                    if (inputValue) {
                        return;
                    }
                    if (!menuIsOpen) {
                        _this.openMenu('first');
                        break;
                    }
                    if (!focusedOption)
                        return;
                    _this.selectOption(focusedOption);
                    break;
                case 'ArrowUp':
                    if (menuIsOpen) {
                        _this.focusOption('up');
                    }
                    else {
                        _this.openMenu('last');
                    }
                    break;
                case 'ArrowDown':
                    if (menuIsOpen) {
                        _this.focusOption('down');
                    }
                    else {
                        _this.openMenu('first');
                    }
                    break;
                case 'PageUp':
                    if (!menuIsOpen)
                        return;
                    _this.focusOption('pageup');
                    break;
                case 'PageDown':
                    if (!menuIsOpen)
                        return;
                    _this.focusOption('pagedown');
                    break;
                case 'Home':
                    if (!menuIsOpen)
                        return;
                    _this.focusOption('first');
                    break;
                case 'End':
                    if (!menuIsOpen)
                        return;
                    _this.focusOption('last');
                    break;
                default:
                    return;
            }
            event.preventDefault();
        };
        _this.state.instancePrefix = 'react-select-' + (_this.props.instanceId || ++instanceId);
        _this.state.selectValue = cleanValue$1(_props.value);
        // Set focusedOption if menuIsOpen is set on init (e.g. defaultMenuIsOpen)
        if (_props.menuIsOpen && _this.state.selectValue.length) {
            var focusableOptionsWithIds = _this.getFocusableOptionsWithIds();
            var focusableOptions = _this.buildFocusableOptions();
            var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
            _this.state.focusableOptionsWithIds = focusableOptionsWithIds;
            _this.state.focusedOption = focusableOptions[optionIndex];
            _this.state.focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusableOptions[optionIndex]);
        }
        return _this;
    }
    _createClass$1(Select, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                this.startListeningComposition();
                this.startListeningToTouch();
                if (this.props.closeMenuOnScroll && document && document.addEventListener) {
                    // Listen to all scroll events, and filter them out inside of 'onScroll'
                    document.addEventListener('scroll', this.onScroll, true);
                }
                if (this.props.autoFocus) {
                    this.focusInput();
                }
                // Scroll focusedOption into view if menuIsOpen is set on mount (e.g. defaultMenuIsOpen)
                if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {
                    scrollIntoView(this.menuListRef, this.focusedOptionRef);
                }
            }
        }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate(prevProps) {
                var _this$props6 = this.props, isDisabled = _this$props6.isDisabled, menuIsOpen = _this$props6.menuIsOpen;
                var isFocused = this.state.isFocused;
                if (
                // ensure focus is restored correctly when the control becomes enabled
                isFocused && !isDisabled && prevProps.isDisabled ||
                    // ensure focus is on the Input when the menu opens
                    isFocused && menuIsOpen && !prevProps.menuIsOpen) {
                    this.focusInput();
                }
                if (isFocused && isDisabled && !prevProps.isDisabled) {
                    // ensure select state gets blurred in case Select is programmatically disabled while focused
                    // eslint-disable-next-line react/no-did-update-set-state
                    this.setState({
                        isFocused: false
                    }, this.onMenuClose);
                }
                else if (!isFocused && !isDisabled && prevProps.isDisabled && this.inputRef === document.activeElement) {
                    // ensure select state gets focused in case Select is programatically re-enabled while focused (Firefox)
                    // eslint-disable-next-line react/no-did-update-set-state
                    this.setState({
                        isFocused: true
                    });
                }
                // scroll the focused option into view if necessary
                if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
                    scrollIntoView(this.menuListRef, this.focusedOptionRef);
                    this.scrollToFocusedOptionOnUpdate = false;
                }
            }
        }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
                this.stopListeningComposition();
                this.stopListeningToTouch();
                document.removeEventListener('scroll', this.onScroll, true);
            }
            // ==============================
            // Consumer Handlers
            // ==============================
        }, {
            key: "onMenuOpen",
            value: function onMenuOpen() {
                this.props.onMenuOpen();
            }
        }, {
            key: "onMenuClose",
            value: function onMenuClose() {
                this.onInputChange('', {
                    action: 'menu-close',
                    prevInputValue: this.props.inputValue
                });
                this.props.onMenuClose();
            }
        }, {
            key: "onInputChange",
            value: function onInputChange(newValue, actionMeta) {
                this.props.onInputChange(newValue, actionMeta);
            }
            // ==============================
            // Methods
            // ==============================
        }, {
            key: "focusInput",
            value: function focusInput() {
                if (!this.inputRef)
                    return;
                this.inputRef.focus();
            }
        }, {
            key: "blurInput",
            value: function blurInput() {
                if (!this.inputRef)
                    return;
                this.inputRef.blur();
            }
            // aliased for consumers
        }, {
            key: "openMenu",
            value: function openMenu(focusOption) {
                var _this2 = this;
                var _this$state2 = this.state, selectValue = _this$state2.selectValue, isFocused = _this$state2.isFocused;
                var focusableOptions = this.buildFocusableOptions();
                var openAtIndex = focusOption === 'first' ? 0 : focusableOptions.length - 1;
                if (!this.props.isMulti) {
                    var selectedIndex = focusableOptions.indexOf(selectValue[0]);
                    if (selectedIndex > -1) {
                        openAtIndex = selectedIndex;
                    }
                }
                // only scroll if the menu isn't already open
                this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
                this.setState({
                    inputIsHiddenAfterUpdate: false,
                    focusedValue: null,
                    focusedOption: focusableOptions[openAtIndex],
                    focusedOptionId: this.getFocusedOptionId(focusableOptions[openAtIndex])
                }, function () {
                    return _this2.onMenuOpen();
                });
            }
        }, {
            key: "focusValue",
            value: function focusValue(direction) {
                var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;
                // Only multiselects support value focusing
                if (!this.props.isMulti)
                    return;
                this.setState({
                    focusedOption: null
                });
                var focusedIndex = selectValue.indexOf(focusedValue);
                if (!focusedValue) {
                    focusedIndex = -1;
                }
                var lastIndex = selectValue.length - 1;
                var nextFocus = -1;
                if (!selectValue.length)
                    return;
                switch (direction) {
                    case 'previous':
                        if (focusedIndex === 0) {
                            // don't cycle from the start to the end
                            nextFocus = 0;
                        }
                        else if (focusedIndex === -1) {
                            // if nothing is focused, focus the last value first
                            nextFocus = lastIndex;
                        }
                        else {
                            nextFocus = focusedIndex - 1;
                        }
                        break;
                    case 'next':
                        if (focusedIndex > -1 && focusedIndex < lastIndex) {
                            nextFocus = focusedIndex + 1;
                        }
                        break;
                }
                this.setState({
                    inputIsHidden: nextFocus !== -1,
                    focusedValue: selectValue[nextFocus]
                });
            }
        }, {
            key: "focusOption",
            value: function focusOption() {
                var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'first';
                var pageSize = this.props.pageSize;
                var focusedOption = this.state.focusedOption;
                var options = this.getFocusableOptions();
                if (!options.length)
                    return;
                var nextFocus = 0; // handles 'first'
                var focusedIndex = options.indexOf(focusedOption);
                if (!focusedOption) {
                    focusedIndex = -1;
                }
                if (direction === 'up') {
                    nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options.length - 1;
                }
                else if (direction === 'down') {
                    nextFocus = (focusedIndex + 1) % options.length;
                }
                else if (direction === 'pageup') {
                    nextFocus = focusedIndex - pageSize;
                    if (nextFocus < 0)
                        nextFocus = 0;
                }
                else if (direction === 'pagedown') {
                    nextFocus = focusedIndex + pageSize;
                    if (nextFocus > options.length - 1)
                        nextFocus = options.length - 1;
                }
                else if (direction === 'last') {
                    nextFocus = options.length - 1;
                }
                this.scrollToFocusedOptionOnUpdate = true;
                this.setState({
                    focusedOption: options[nextFocus],
                    focusedValue: null,
                    focusedOptionId: this.getFocusedOptionId(options[nextFocus])
                });
            }
        }, {
            key: "getTheme",
            value: 
            // ==============================
            // Getters
            // ==============================
            function getTheme() {
                // Use the default theme if there are no customisations.
                if (!this.props.theme) {
                    return defaultTheme;
                }
                // If the theme prop is a function, assume the function
                // knows how to merge the passed-in default theme with
                // its own modifications.
                if (typeof this.props.theme === 'function') {
                    return this.props.theme(defaultTheme);
                }
                // Otherwise, if a plain theme object was passed in,
                // overlay it with the default theme.
                return _objectSpread2$2(_objectSpread2$2({}, defaultTheme), this.props.theme);
            }
        }, {
            key: "getCommonProps",
            value: function getCommonProps() {
                var clearValue = this.clearValue, cx = this.cx, getStyles = this.getStyles, getClassNames = this.getClassNames, getValue = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props;
                var isMulti = props.isMulti, isRtl = props.isRtl, options = props.options;
                var hasValue = this.hasValue();
                return {
                    clearValue: clearValue,
                    cx: cx,
                    getStyles: getStyles,
                    getClassNames: getClassNames,
                    getValue: getValue,
                    hasValue: hasValue,
                    isMulti: isMulti,
                    isRtl: isRtl,
                    options: options,
                    selectOption: selectOption,
                    selectProps: props,
                    setValue: setValue,
                    theme: this.getTheme()
                };
            }
        }, {
            key: "hasValue",
            value: function hasValue() {
                var selectValue = this.state.selectValue;
                return selectValue.length > 0;
            }
        }, {
            key: "hasOptions",
            value: function hasOptions() {
                return !!this.getFocusableOptions().length;
            }
        }, {
            key: "isClearable",
            value: function isClearable() {
                var _this$props7 = this.props, isClearable = _this$props7.isClearable, isMulti = _this$props7.isMulti;
                // single select, by default, IS NOT clearable
                // multi select, by default, IS clearable
                if (isClearable === undefined)
                    return isMulti;
                return isClearable;
            }
        }, {
            key: "isOptionDisabled",
            value: function isOptionDisabled(option, selectValue) {
                return _isOptionDisabled(this.props, option, selectValue);
            }
        }, {
            key: "isOptionSelected",
            value: function isOptionSelected(option, selectValue) {
                return _isOptionSelected(this.props, option, selectValue);
            }
        }, {
            key: "filterOption",
            value: function filterOption(option, inputValue) {
                return _filterOption(this.props, option, inputValue);
            }
        }, {
            key: "formatOptionLabel",
            value: function formatOptionLabel(data, context) {
                if (typeof this.props.formatOptionLabel === 'function') {
                    var _inputValue = this.props.inputValue;
                    var _selectValue = this.state.selectValue;
                    return this.props.formatOptionLabel(data, {
                        context: context,
                        inputValue: _inputValue,
                        selectValue: _selectValue
                    });
                }
                else {
                    return this.getOptionLabel(data);
                }
            }
        }, {
            key: "formatGroupLabel",
            value: function formatGroupLabel(data) {
                return this.props.formatGroupLabel(data);
            }
            // ==============================
            // Mouse Handlers
            // ==============================
        }, {
            key: "startListeningComposition",
            value: 
            // ==============================
            // Composition Handlers
            // ==============================
            function startListeningComposition() {
                if (document && document.addEventListener) {
                    document.addEventListener('compositionstart', this.onCompositionStart, false);
                    document.addEventListener('compositionend', this.onCompositionEnd, false);
                }
            }
        }, {
            key: "stopListeningComposition",
            value: function stopListeningComposition() {
                if (document && document.removeEventListener) {
                    document.removeEventListener('compositionstart', this.onCompositionStart);
                    document.removeEventListener('compositionend', this.onCompositionEnd);
                }
            }
        }, {
            key: "startListeningToTouch",
            value: 
            // ==============================
            // Touch Handlers
            // ==============================
            function startListeningToTouch() {
                if (document && document.addEventListener) {
                    document.addEventListener('touchstart', this.onTouchStart, false);
                    document.addEventListener('touchmove', this.onTouchMove, false);
                    document.addEventListener('touchend', this.onTouchEnd, false);
                }
            }
        }, {
            key: "stopListeningToTouch",
            value: function stopListeningToTouch() {
                if (document && document.removeEventListener) {
                    document.removeEventListener('touchstart', this.onTouchStart);
                    document.removeEventListener('touchmove', this.onTouchMove);
                    document.removeEventListener('touchend', this.onTouchEnd);
                }
            }
        }, {
            key: "renderInput",
            value: 
            // ==============================
            // Renderers
            // ==============================
            function renderInput() {
                var _this$props8 = this.props, isDisabled = _this$props8.isDisabled, isSearchable = _this$props8.isSearchable, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, tabIndex = _this$props8.tabIndex, form = _this$props8.form, menuIsOpen = _this$props8.menuIsOpen, required = _this$props8.required;
                var _this$getComponents = this.getComponents(), Input = _this$getComponents.Input;
                var _this$state4 = this.state, inputIsHidden = _this$state4.inputIsHidden, ariaSelection = _this$state4.ariaSelection;
                var commonProps = this.commonProps;
                var id = inputId || this.getElementId('input');
                // aria attributes makes the JSX "noisy", separated for clarity
                var ariaAttributes = _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({
                    'aria-autocomplete': 'list',
                    'aria-expanded': menuIsOpen,
                    'aria-haspopup': true,
                    'aria-errormessage': this.props['aria-errormessage'],
                    'aria-invalid': this.props['aria-invalid'],
                    'aria-label': this.props['aria-label'],
                    'aria-labelledby': this.props['aria-labelledby'],
                    'aria-required': required,
                    role: 'combobox',
                    'aria-activedescendant': this.isAppleDevice ? undefined : this.state.focusedOptionId || ''
                }, menuIsOpen && {
                    'aria-controls': this.getElementId('listbox')
                }), !isSearchable && {
                    'aria-readonly': true
                }), this.hasValue() ? (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus' && {
                    'aria-describedby': this.getElementId('live-region')
                } : {
                    'aria-describedby': this.getElementId('placeholder')
                });
                if (!isSearchable) {
                    // use a dummy input to maintain focus/blur functionality
                    return /*#__PURE__*/ React$4.createElement(DummyInput, _extends({
                        id: id,
                        innerRef: this.getInputRef,
                        onBlur: this.onInputBlur,
                        onChange: noop$3,
                        onFocus: this.onInputFocus,
                        disabled: isDisabled,
                        tabIndex: tabIndex,
                        inputMode: "none",
                        form: form,
                        value: ""
                    }, ariaAttributes));
                }
                return /*#__PURE__*/ React$4.createElement(Input, _extends({}, commonProps, {
                    autoCapitalize: "none",
                    autoComplete: "off",
                    autoCorrect: "off",
                    id: id,
                    innerRef: this.getInputRef,
                    isDisabled: isDisabled,
                    isHidden: inputIsHidden,
                    onBlur: this.onInputBlur,
                    onChange: this.handleInputChange,
                    onFocus: this.onInputFocus,
                    spellCheck: "false",
                    tabIndex: tabIndex,
                    form: form,
                    type: "text",
                    value: inputValue
                }, ariaAttributes));
            }
        }, {
            key: "renderPlaceholderOrValue",
            value: function renderPlaceholderOrValue() {
                var _this3 = this;
                var _this$getComponents2 = this.getComponents(), MultiValue = _this$getComponents2.MultiValue, MultiValueContainer = _this$getComponents2.MultiValueContainer, MultiValueLabel = _this$getComponents2.MultiValueLabel, MultiValueRemove = _this$getComponents2.MultiValueRemove, SingleValue = _this$getComponents2.SingleValue, Placeholder = _this$getComponents2.Placeholder;
                var commonProps = this.commonProps;
                var _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue, placeholder = _this$props9.placeholder;
                var _this$state5 = this.state, selectValue = _this$state5.selectValue, focusedValue = _this$state5.focusedValue, isFocused = _this$state5.isFocused;
                if (!this.hasValue() || !controlShouldRenderValue) {
                    return inputValue ? null : /*#__PURE__*/ React$4.createElement(Placeholder, _extends({}, commonProps, {
                        key: "placeholder",
                        isDisabled: isDisabled,
                        isFocused: isFocused,
                        innerProps: {
                            id: this.getElementId('placeholder')
                        }
                    }), placeholder);
                }
                if (isMulti) {
                    return selectValue.map(function (opt, index) {
                        var isOptionFocused = opt === focusedValue;
                        var key = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
                        return /*#__PURE__*/ React$4.createElement(MultiValue, _extends({}, commonProps, {
                            components: {
                                Container: MultiValueContainer,
                                Label: MultiValueLabel,
                                Remove: MultiValueRemove
                            },
                            isFocused: isOptionFocused,
                            isDisabled: isDisabled,
                            key: key,
                            index: index,
                            removeProps: {
                                onClick: function onClick() {
                                    return _this3.removeValue(opt);
                                },
                                onTouchEnd: function onTouchEnd() {
                                    return _this3.removeValue(opt);
                                },
                                onMouseDown: function onMouseDown(e) {
                                    e.preventDefault();
                                }
                            },
                            data: opt
                        }), _this3.formatOptionLabel(opt, 'value'));
                    });
                }
                if (inputValue) {
                    return null;
                }
                var singleValue = selectValue[0];
                return /*#__PURE__*/ React$4.createElement(SingleValue, _extends({}, commonProps, {
                    data: singleValue,
                    isDisabled: isDisabled
                }), this.formatOptionLabel(singleValue, 'value'));
            }
        }, {
            key: "renderClearIndicator",
            value: function renderClearIndicator() {
                var _this$getComponents3 = this.getComponents(), ClearIndicator = _this$getComponents3.ClearIndicator;
                var commonProps = this.commonProps;
                var _this$props10 = this.props, isDisabled = _this$props10.isDisabled, isLoading = _this$props10.isLoading;
                var isFocused = this.state.isFocused;
                if (!this.isClearable() || !ClearIndicator || isDisabled || !this.hasValue() || isLoading) {
                    return null;
                }
                var innerProps = {
                    onMouseDown: this.onClearIndicatorMouseDown,
                    onTouchEnd: this.onClearIndicatorTouchEnd,
                    'aria-hidden': 'true'
                };
                return /*#__PURE__*/ React$4.createElement(ClearIndicator, _extends({}, commonProps, {
                    innerProps: innerProps,
                    isFocused: isFocused
                }));
            }
        }, {
            key: "renderLoadingIndicator",
            value: function renderLoadingIndicator() {
                var _this$getComponents4 = this.getComponents(), LoadingIndicator = _this$getComponents4.LoadingIndicator;
                var commonProps = this.commonProps;
                var _this$props11 = this.props, isDisabled = _this$props11.isDisabled, isLoading = _this$props11.isLoading;
                var isFocused = this.state.isFocused;
                if (!LoadingIndicator || !isLoading)
                    return null;
                var innerProps = {
                    'aria-hidden': 'true'
                };
                return /*#__PURE__*/ React$4.createElement(LoadingIndicator, _extends({}, commonProps, {
                    innerProps: innerProps,
                    isDisabled: isDisabled,
                    isFocused: isFocused
                }));
            }
        }, {
            key: "renderIndicatorSeparator",
            value: function renderIndicatorSeparator() {
                var _this$getComponents5 = this.getComponents(), DropdownIndicator = _this$getComponents5.DropdownIndicator, IndicatorSeparator = _this$getComponents5.IndicatorSeparator;
                // separator doesn't make sense without the dropdown indicator
                if (!DropdownIndicator || !IndicatorSeparator)
                    return null;
                var commonProps = this.commonProps;
                var isDisabled = this.props.isDisabled;
                var isFocused = this.state.isFocused;
                return /*#__PURE__*/ React$4.createElement(IndicatorSeparator, _extends({}, commonProps, {
                    isDisabled: isDisabled,
                    isFocused: isFocused
                }));
            }
        }, {
            key: "renderDropdownIndicator",
            value: function renderDropdownIndicator() {
                var _this$getComponents6 = this.getComponents(), DropdownIndicator = _this$getComponents6.DropdownIndicator;
                if (!DropdownIndicator)
                    return null;
                var commonProps = this.commonProps;
                var isDisabled = this.props.isDisabled;
                var isFocused = this.state.isFocused;
                var innerProps = {
                    onMouseDown: this.onDropdownIndicatorMouseDown,
                    onTouchEnd: this.onDropdownIndicatorTouchEnd,
                    'aria-hidden': 'true'
                };
                return /*#__PURE__*/ React$4.createElement(DropdownIndicator, _extends({}, commonProps, {
                    innerProps: innerProps,
                    isDisabled: isDisabled,
                    isFocused: isFocused
                }));
            }
        }, {
            key: "renderMenu",
            value: function renderMenu() {
                var _this4 = this;
                var _this$getComponents7 = this.getComponents(), Group = _this$getComponents7.Group, GroupHeading = _this$getComponents7.GroupHeading, Menu = _this$getComponents7.Menu, MenuList = _this$getComponents7.MenuList, MenuPortal = _this$getComponents7.MenuPortal, LoadingMessage = _this$getComponents7.LoadingMessage, NoOptionsMessage = _this$getComponents7.NoOptionsMessage, Option = _this$getComponents7.Option;
                var commonProps = this.commonProps;
                var focusedOption = this.state.focusedOption;
                var _this$props12 = this.props, captureMenuScroll = _this$props12.captureMenuScroll, inputValue = _this$props12.inputValue, isLoading = _this$props12.isLoading, loadingMessage = _this$props12.loadingMessage, minMenuHeight = _this$props12.minMenuHeight, maxMenuHeight = _this$props12.maxMenuHeight, menuIsOpen = _this$props12.menuIsOpen, menuPlacement = _this$props12.menuPlacement, menuPosition = _this$props12.menuPosition, menuPortalTarget = _this$props12.menuPortalTarget, menuShouldBlockScroll = _this$props12.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView, noOptionsMessage = _this$props12.noOptionsMessage, onMenuScrollToTop = _this$props12.onMenuScrollToTop, onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
                if (!menuIsOpen)
                    return null;
                // TODO: Internal Option Type here
                var render = function render(props, id) {
                    var type = props.type, data = props.data, isDisabled = props.isDisabled, isSelected = props.isSelected, label = props.label, value = props.value;
                    var isFocused = focusedOption === data;
                    var onHover = isDisabled ? undefined : function () {
                        return _this4.onOptionHover(data);
                    };
                    var onSelect = isDisabled ? undefined : function () {
                        return _this4.selectOption(data);
                    };
                    var optionId = "".concat(_this4.getElementId('option'), "-").concat(id);
                    var innerProps = {
                        id: optionId,
                        onClick: onSelect,
                        onMouseMove: onHover,
                        onMouseOver: onHover,
                        tabIndex: -1,
                        role: 'option',
                        'aria-selected': _this4.isAppleDevice ? undefined : isSelected // is not supported on Apple devices
                    };
                    return /*#__PURE__*/ React$4.createElement(Option, _extends({}, commonProps, {
                        innerProps: innerProps,
                        data: data,
                        isDisabled: isDisabled,
                        isSelected: isSelected,
                        key: optionId,
                        label: label,
                        type: type,
                        value: value,
                        isFocused: isFocused,
                        innerRef: isFocused ? _this4.getFocusedOptionRef : undefined
                    }), _this4.formatOptionLabel(props.data, 'menu'));
                };
                var menuUI;
                if (this.hasOptions()) {
                    menuUI = this.getCategorizedOptions().map(function (item) {
                        if (item.type === 'group') {
                            var _data = item.data, options = item.options, groupIndex = item.index;
                            var groupId = "".concat(_this4.getElementId('group'), "-").concat(groupIndex);
                            var headingId = "".concat(groupId, "-heading");
                            return /*#__PURE__*/ React$4.createElement(Group, _extends({}, commonProps, {
                                key: groupId,
                                data: _data,
                                options: options,
                                Heading: GroupHeading,
                                headingProps: {
                                    id: headingId,
                                    data: item.data
                                },
                                label: _this4.formatGroupLabel(item.data)
                            }), item.options.map(function (option) {
                                return render(option, "".concat(groupIndex, "-").concat(option.index));
                            }));
                        }
                        else if (item.type === 'option') {
                            return render(item, "".concat(item.index));
                        }
                    });
                }
                else if (isLoading) {
                    var message = loadingMessage({
                        inputValue: inputValue
                    });
                    if (message === null)
                        return null;
                    menuUI = /*#__PURE__*/ React$4.createElement(LoadingMessage, commonProps, message);
                }
                else {
                    var _message = noOptionsMessage({
                        inputValue: inputValue
                    });
                    if (_message === null)
                        return null;
                    menuUI = /*#__PURE__*/ React$4.createElement(NoOptionsMessage, commonProps, _message);
                }
                var menuPlacementProps = {
                    minMenuHeight: minMenuHeight,
                    maxMenuHeight: maxMenuHeight,
                    menuPlacement: menuPlacement,
                    menuPosition: menuPosition,
                    menuShouldScrollIntoView: menuShouldScrollIntoView
                };
                var menuElement = /*#__PURE__*/ React$4.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function (_ref4) {
                    var ref = _ref4.ref, _ref4$placerProps = _ref4.placerProps, placement = _ref4$placerProps.placement, maxHeight = _ref4$placerProps.maxHeight;
                    return /*#__PURE__*/ React$4.createElement(Menu, _extends({}, commonProps, menuPlacementProps, {
                        innerRef: ref,
                        innerProps: {
                            onMouseDown: _this4.onMenuMouseDown,
                            onMouseMove: _this4.onMenuMouseMove
                        },
                        isLoading: isLoading,
                        placement: placement
                    }), /*#__PURE__*/ React$4.createElement(ScrollManager, {
                        captureEnabled: captureMenuScroll,
                        onTopArrive: onMenuScrollToTop,
                        onBottomArrive: onMenuScrollToBottom,
                        lockEnabled: menuShouldBlockScroll
                    }, function (scrollTargetRef) {
                        return /*#__PURE__*/ React$4.createElement(MenuList, _extends({}, commonProps, {
                            innerRef: function innerRef(instance) {
                                _this4.getMenuListRef(instance);
                                scrollTargetRef(instance);
                            },
                            innerProps: {
                                role: 'listbox',
                                'aria-multiselectable': commonProps.isMulti,
                                id: _this4.getElementId('listbox')
                            },
                            isLoading: isLoading,
                            maxHeight: maxHeight,
                            focusedOption: focusedOption
                        }), menuUI);
                    }));
                });
                // positioning behaviour is almost identical for portalled and fixed,
                // so we use the same component. the actual portalling logic is forked
                // within the component based on `menuPosition`
                return menuPortalTarget || menuPosition === 'fixed' ? /*#__PURE__*/ React$4.createElement(MenuPortal, _extends({}, commonProps, {
                    appendTo: menuPortalTarget,
                    controlElement: this.controlRef,
                    menuPlacement: menuPlacement,
                    menuPosition: menuPosition
                }), menuElement) : menuElement;
            }
        }, {
            key: "renderFormField",
            value: function renderFormField() {
                var _this5 = this;
                var _this$props13 = this.props, delimiter = _this$props13.delimiter, isDisabled = _this$props13.isDisabled, isMulti = _this$props13.isMulti, name = _this$props13.name, required = _this$props13.required;
                var selectValue = this.state.selectValue;
                if (required && !this.hasValue() && !isDisabled) {
                    return /*#__PURE__*/ React$4.createElement(RequiredInput$1, {
                        name: name,
                        onFocus: this.onValueInputFocus
                    });
                }
                if (!name || isDisabled)
                    return;
                if (isMulti) {
                    if (delimiter) {
                        var value = selectValue.map(function (opt) {
                            return _this5.getOptionValue(opt);
                        }).join(delimiter);
                        return /*#__PURE__*/ React$4.createElement("input", {
                            name: name,
                            type: "hidden",
                            value: value
                        });
                    }
                    else {
                        var input = selectValue.length > 0 ? selectValue.map(function (opt, i) {
                            return /*#__PURE__*/ React$4.createElement("input", {
                                key: "i-".concat(i),
                                name: name,
                                type: "hidden",
                                value: _this5.getOptionValue(opt)
                            });
                        }) : /*#__PURE__*/ React$4.createElement("input", {
                            name: name,
                            type: "hidden",
                            value: ""
                        });
                        return /*#__PURE__*/ React$4.createElement("div", null, input);
                    }
                }
                else {
                    var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : '';
                    return /*#__PURE__*/ React$4.createElement("input", {
                        name: name,
                        type: "hidden",
                        value: _value
                    });
                }
            }
        }, {
            key: "renderLiveRegion",
            value: function renderLiveRegion() {
                var commonProps = this.commonProps;
                var _this$state6 = this.state, ariaSelection = _this$state6.ariaSelection, focusedOption = _this$state6.focusedOption, focusedValue = _this$state6.focusedValue, isFocused = _this$state6.isFocused, selectValue = _this$state6.selectValue;
                var focusableOptions = this.getFocusableOptions();
                return /*#__PURE__*/ React$4.createElement(LiveRegion$1, _extends({}, commonProps, {
                    id: this.getElementId('live-region'),
                    ariaSelection: ariaSelection,
                    focusedOption: focusedOption,
                    focusedValue: focusedValue,
                    isFocused: isFocused,
                    selectValue: selectValue,
                    focusableOptions: focusableOptions,
                    isAppleDevice: this.isAppleDevice
                }));
            }
        }, {
            key: "render",
            value: function render() {
                var _this$getComponents8 = this.getComponents(), Control = _this$getComponents8.Control, IndicatorsContainer = _this$getComponents8.IndicatorsContainer, SelectContainer = _this$getComponents8.SelectContainer, ValueContainer = _this$getComponents8.ValueContainer;
                var _this$props14 = this.props, className = _this$props14.className, id = _this$props14.id, isDisabled = _this$props14.isDisabled, menuIsOpen = _this$props14.menuIsOpen;
                var isFocused = this.state.isFocused;
                var commonProps = this.commonProps = this.getCommonProps();
                return /*#__PURE__*/ React$4.createElement(SelectContainer, _extends({}, commonProps, {
                    className: className,
                    innerProps: {
                        id: id,
                        onKeyDown: this.onKeyDown
                    },
                    isDisabled: isDisabled,
                    isFocused: isFocused
                }), this.renderLiveRegion(), /*#__PURE__*/ React$4.createElement(Control, _extends({}, commonProps, {
                    innerRef: this.getControlRef,
                    innerProps: {
                        onMouseDown: this.onControlMouseDown,
                        onTouchEnd: this.onControlTouchEnd
                    },
                    isDisabled: isDisabled,
                    isFocused: isFocused,
                    menuIsOpen: menuIsOpen
                }), /*#__PURE__*/ React$4.createElement(ValueContainer, _extends({}, commonProps, {
                    isDisabled: isDisabled
                }), this.renderPlaceholderOrValue(), this.renderInput()), /*#__PURE__*/ React$4.createElement(IndicatorsContainer, _extends({}, commonProps, {
                    isDisabled: isDisabled
                }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
            }
        }], [{
            key: "getDerivedStateFromProps",
            value: function getDerivedStateFromProps(props, state) {
                var prevProps = state.prevProps, clearFocusValueOnUpdate = state.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate, ariaSelection = state.ariaSelection, isFocused = state.isFocused, prevWasFocused = state.prevWasFocused, instancePrefix = state.instancePrefix;
                var options = props.options, value = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti;
                var selectValue = cleanValue$1(value);
                var newMenuOptionsState = {};
                if (prevProps && (value !== prevProps.value || options !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
                    var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
                    var focusableOptionsWithIds = menuIsOpen ? buildFocusableOptionsWithIds(buildCategorizedOptions(props, selectValue), "".concat(instancePrefix, "-option")) : [];
                    var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state, selectValue) : null;
                    var focusedOption = getNextFocusedOption(state, focusableOptions);
                    var focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusedOption);
                    newMenuOptionsState = {
                        selectValue: selectValue,
                        focusedOption: focusedOption,
                        focusedOptionId: focusedOptionId,
                        focusableOptionsWithIds: focusableOptionsWithIds,
                        focusedValue: focusedValue,
                        clearFocusValueOnUpdate: false
                    };
                }
                // some updates should toggle the state of the input visibility
                var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
                    inputIsHidden: inputIsHiddenAfterUpdate,
                    inputIsHiddenAfterUpdate: undefined
                } : {};
                var newAriaSelection = ariaSelection;
                var hasKeptFocus = isFocused && prevWasFocused;
                if (isFocused && !hasKeptFocus) {
                    // If `value` or `defaultValue` props are not empty then announce them
                    // when the Select is initially focused
                    newAriaSelection = {
                        value: valueTernary(isMulti, selectValue, selectValue[0] || null),
                        options: selectValue,
                        action: 'initial-input-focus'
                    };
                    hasKeptFocus = !prevWasFocused;
                }
                // If the 'initial-input-focus' action has been set already
                // then reset the ariaSelection to null
                if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === 'initial-input-focus') {
                    newAriaSelection = null;
                }
                return _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, newMenuOptionsState), newInputIsHiddenState), {}, {
                    prevProps: props,
                    ariaSelection: newAriaSelection,
                    prevWasFocused: hasKeptFocus
                });
            }
        }]);
    return Select;
}(react_1.Component);
Select.defaultProps = defaultProps;
var StateManagedSelect = /*#__PURE__*/ (0, react_1.forwardRef)(function (props, ref) {
    var baseSelectProps = useStateManager(props);
    return /*#__PURE__*/ React$4.createElement(Select, _extends({
        ref: ref
    }, baseSelectProps));
});
var StateManagedSelect$1 = StateManagedSelect;
var IbbDropdown = function (props) {
    props.field_label;
    var field_id = props.field_id, field_value = props.field_value, field_name = props.field_name, field_row_index = props.field_row_index, field_options = props.field_options, customClass = props.customClass, customIcon = props.customIcon;
    props.defaultValue;
    var items = props.items, readonly = props.readonly, handleUpdateAction = props.handleUpdateAction, handleChangeInput = props.handleChangeInput, handleInputChange = props.handleInputChange;
    var _a = __read((0, react_1.useState)([]), 2), dropdownOptions = _a[0], setDropdownOptions = _a[1];
    var _b = __read((0, react_1.useState)(""), 2), longestOption = _b[0], setLongestOption = _b[1];
    var _c = __read((0, react_1.useState)(""), 2), selectedValue = _c[0], setSelectedValue = _c[1];
    var _d = __read((0, react_1.useState)(false), 2), isMenuOpen = _d[0], setIsMenuOpen = _d[1];
    var getLongestOption = (0, react_1.useCallback)(function () {
        var _a, _b;
        for (var i = 0; i < (dropdownOptions === null || dropdownOptions === void 0 ? void 0 : dropdownOptions.length); i++) {
            if (((_a = dropdownOptions[i]) === null || _a === void 0 ? void 0 : _a.label.length) > longestOption.length) {
                setLongestOption((_b = dropdownOptions[i]) === null || _b === void 0 ? void 0 : _b.label);
            }
        }
    }, [dropdownOptions]);
    (0, react_1.useEffect)(function () {
        getLongestOption();
    }, [dropdownOptions]);
    (0, react_1.useEffect)(function () {
        setSelectedValue(field_value);
    }, [field_value]);
    (0, react_1.useEffect)(function () {
        if (items) {
            var options_1 = [];
            (!field_options || (field_options && !field_options.disallowEmptyValue)) &&
                options_1.push({
                    id: null,
                    value: null,
                    label: "",
                });
            items.forEach(function (element, i) {
                options_1 = __spreadArray$1(__spreadArray$1([], __read(options_1), false), [
                    {
                        id: element.id ? element.id : i,
                        value: element.value,
                        label: element.label,
                    },
                ], false);
            });
            setDropdownOptions(options_1);
        }
    }, [items]);
    var handleChange = function (field_id, event) {
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (handleChangeInput) {
                    if (event)
                        event.type = "change";
                    handleChangeInput(field_id, event);
                    if (event && event.value && handleUpdateAction && field_options) {
                        handleUpdateAction(field_options, event.value, field_row_index);
                    }
                }
                else {
                    event
                        ? setSelectedValue(items && items.find(function (i) { return i.id == event.value; }) ? items.find(function (i) { return i.id == event.value; }).value : event.value)
                        : setSelectedValue(null);
                }
                return [2 /*return*/];
            });
        });
    };
    var selected = dropdownOptions.find(function (o) { return o.value == selectedValue; });
    var customStyles = {
        container: function (provided) { return (__assign$1(__assign$1({}, provided), { minWidth: "".concat(Math.max(125, (longestOption === null || longestOption === void 0 ? void 0 : longestOption.length) * 6), "px!important") })); },
        placeholder: function (provided) { return (__assign$1(__assign$1({}, provided), { position: "static", transform: "none" })); },
        singleValue: function (provided) { return (__assign$1(__assign$1({}, provided), { position: "static", transform: "none" })); },
    };
    return (react_1.default.createElement("div", { className: "select-field ".concat(isMenuOpen ? "opened" : ""), title: "".concat(selected ? selected.label : "") }, react_1.default.createElement(react_1.default.Fragment, null, customIcon, react_1.default.createElement(StateManagedSelect$1, { key: "selected-".concat(field_id), options: dropdownOptions, id: field_id, name: field_name, isDisabled: readonly, onInputChange: function (value, e) { return (handleInputChange ? handleInputChange(value, e) : setIsMenuOpen(!isMenuOpen)); }, onChange: function (event) { return handleChange(field_id, event); }, value: selected ? selected : "", className: classNames$1("custom-dropdown align-middle ".concat(field_id), customClass !== null && customClass !== void 0 ? customClass : ""), placeholder: "", onMenuOpen: function () { return setIsMenuOpen(true); }, onMenuClose: function () { return setIsMenuOpen(false); }, isClearable: !readonly && (!field_options || (field_options && !field_options.disallowEmptyValue)) ? true : false, styles: customStyles }))));
};
exports.IbbDropdown = IbbDropdown;
var IsElementButton = function (type) {
    return ([
        ElementTypes.customButton,
        ElementTypes.actionButton,
        ElementTypes.openUrlButton,
        ElementTypes.subformButton,
        ElementTypes.subformButton,
        ElementTypes.downloadButton,
        ElementTypes.dynamicDownloadButton,
    ].indexOf(type) > 0);
};
var ElementTypes = {
    form: "form-component",
    inputText: "input-text-component",
    inputNumeric: "input-numeric-component",
    inputCurrency: "input-currency-component",
    inputPassword: "input-pw-component",
    textarea: "text-area-component",
    date: "date-component",
    dropdown: "dropdown-component",
    checkbox: "checkbox-component",
    radio: "radiobutton-component",
    subformButton: "subform-component",
    openUrlButton: "openurl-component",
    table: "table-component",
    label: "label-component",
    labelTemplate: "label-template",
    heading: "heading-component",
    history: "history-component",
    actionButton: "action-button-component",
    customButton: "custom-button-component",
    downloadButton: "download-button-component",
    dynamicDownloadButton: "dynamic-download-button-component",
    calculationComponent: "calculation-component",
    accordion: "accordion-component",
    elementGroup: "element-group-component",
    dynamicView: "dynamic-view-component",
};
exports.ElementTypes = ElementTypes;
function GlobalFilter(_a) {
    var preGlobalFilteredRows = _a.preGlobalFilteredRows, globalFilter = _a.globalFilter, setGlobalFilter = _a.setGlobalFilter, placeholder = _a.placeholder;
    var count = preGlobalFilteredRows.length;
    return (react_1.default.createElement(TwSearchInputField, null, react_1.default.createElement(TwInputField, { type: "search", placeholder: placeholder ? placeholder : "".concat(count, " Eintr\u00E4ge..."), value: globalFilter || "", onChange: function (e) {
            setGlobalFilter(e.target.value);
        }, className: globalFilter ? "border border-ibb-dark focus:border-ibb-dark" : "" })));
}
function ColumnFilter(_a) {
    var _b = _a.column, filterValue = _b.filterValue, setFilter = _b.setFilter, preFilteredRows = _b.preFilteredRows, id = _b.id, render = _b.render;
    var columnType = getColumnType(preFilteredRows, id);
    var options = react_1.default.useMemo(function () {
        var allOptions = new Set();
        preFilteredRows.forEach(function (row) {
            var value = row.values[id];
            value && value.props ? allOptions.add(getFieldValue$1(value.props.field)) : allOptions.add(value);
        });
        if (allOptions) {
            allOptions = sortSet(allOptions);
        }
        return __spreadArray$1([], __read(allOptions.values()), false);
    }, [id, preFilteredRows]);
    if (preFilteredRows.length < 1)
        return null;
    switch (columnType) {
        case ElementTypes.inputNumeric:
        case ElementTypes.inputCurrency:
            return FilterInput(filterValue, setFilter);
        default:
            return FilterDropdown(id, filterValue, render, setFilter, options);
    }
}
exports.ColumnFilter = ColumnFilter;
var FilterDropdown = function (id, filterValue, render, setFilter, options) {
    var args = {
        field_id: id,
        field_name: id,
        field_value: filterValue,
        defaultValue: "-1",
        field_label: render("Header"),
        customClass: !isEmpty$1(filterValue) ? "border border-ibb-dark" : "",
        items: [{ id: -1, value: "Alle", label: "Alle" }].concat(options.filter(function (option) { return option != undefined && option != ""; }).map(function (option, i) { return ({ id: i, value: option, label: option }); })),
        handleChangeInput: function (field_id, e) {
            var value = e && e.id !== -1 ? (e.value ? e.value : e.target.value) : null;
            setFilter(value);
        },
        handleInputChange: function (value, event) {
            if (event.action == "input-change")
                setFilter(value);
        },
    };
    return react_1.default.createElement(IbbDropdown, __assign$1({}, args));
};
var FilterInput = function (filterValue, setFilter) {
    return (react_1.default.createElement(TwInputField, { type: "search", placeholder: "", value: filterValue || "", onChange: function (e) {
            setFilter(e.target.value);
        }, className: filterValue ? "border border-ibb-dark focus:border-ibb-dark" : "" }));
};
function customTableFilter(rows, columnIds, filterValue) {
    if (filterValue === "" || filterValue === null || filterValue === undefined) {
        return rows;
    }
    var textSearchValue = filterValue.trim().toLocaleLowerCase();
    var arraySearchValues = textSearchValue === null || textSearchValue === void 0 ? void 0 : textSearchValue.split(" "); // Transform to word array
    return rows.filter(function (row) {
        var values = row.values;
        var textValues = columnIds
            .map(function (col) { var _a, _b, _c; return values && (((_a = values[col]) === null || _a === void 0 ? void 0 : _a.props) ? getFieldValue$1((_c = (_b = values[col]) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.field) : values[col]); })
            .filter(function (v) { return ["string", "number"].includes(typeof v); })
            .join(" ")
            .split(" ") // Delete extra spaces between words
            .filter(function (v) { return v !== ""; })
            .join(" ")
            .toLocaleLowerCase();
        var matches = arraySearchValues.every(function (str) { return textValues.includes(str); });
        return matches;
    });
}
exports.customTableFilter = customTableFilter;
var getFieldValue$1 = function (field) {
    var _a;
    if (!field)
        return "";
    var val;
    switch (field.field_type) {
        case ElementTypes.dropdown:
            val = (_a = field.field_dropdown_options.find(function (o) { return o.value == field.field_value; })) === null || _a === void 0 ? void 0 : _a.label;
        case ElementTypes.inputNumeric:
        case ElementTypes.inputCurrency:
            val = parseFloat(field.field_value);
        default:
            val = field.field_value;
    }
    return val ? val : "";
};
var getColumnType = function (rows, id) {
    var _a, _b;
    if (rows && rows.length > 0) {
        var field = (_b = (_a = rows[0].values[id]) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.field;
        if (field)
            return field.field_type;
    }
    return null;
};
var TwSearchInputField = F$3.div(templateObject_1$b || (templateObject_1$b = __makeTemplateObject([""], [""])));
var templateObject_1$b;
const React$3 = react_1.default;
function ChevronDoubleLeftIcon(props, svgRef) {
    return /*#__PURE__*/ React$3.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$3.createElement("path", {
        fillRule: "evenodd",
        d: "M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z",
        clipRule: "evenodd"
    }));
}
const ForwardRef$4 = React$3.forwardRef(ChevronDoubleLeftIcon);
var ChevronDoubleLeftIcon_1 = ForwardRef$4;
var ChevronDoubleLeftIcon$1 = ChevronDoubleLeftIcon_1;
const React$2 = react_1.default;
function ChevronDoubleRightIcon(props, svgRef) {
    return /*#__PURE__*/ React$2.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$2.createElement("path", {
        fillRule: "evenodd",
        d: "M10.293 15.707a1 1 0 010-1.414L14.586 10l-4.293-4.293a1 1 0 111.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z",
        clipRule: "evenodd"
    }), /*#__PURE__*/ React$2.createElement("path", {
        fillRule: "evenodd",
        d: "M4.293 15.707a1 1 0 010-1.414L8.586 10 4.293 5.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z",
        clipRule: "evenodd"
    }));
}
const ForwardRef$3 = React$2.forwardRef(ChevronDoubleRightIcon);
var ChevronDoubleRightIcon_1 = ForwardRef$3;
var ChevronDoubleRightIcon$1 = ChevronDoubleRightIcon_1;
const React$1 = react_1.default;
function ChevronLeftIcon(props, svgRef) {
    return /*#__PURE__*/ React$1.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$1.createElement("path", {
        fillRule: "evenodd",
        d: "M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z",
        clipRule: "evenodd"
    }));
}
const ForwardRef$2 = React$1.forwardRef(ChevronLeftIcon);
var ChevronLeftIcon_1 = ForwardRef$2;
var ChevronLeftIcon$1 = ChevronLeftIcon_1;
const React = react_1.default;
function ChevronRightIcon(props, svgRef) {
    return /*#__PURE__*/ React.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React.createElement("path", {
        fillRule: "evenodd",
        d: "M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z",
        clipRule: "evenodd"
    }));
}
const ForwardRef$1 = React.forwardRef(ChevronRightIcon);
var ChevronRightIcon_1 = ForwardRef$1;
var ChevronRightIcon$1 = ChevronRightIcon_1;
function PageButton(_a) {
    var children = _a.children, className = _a.className, rest = __rest$1(_a, ["children", "className"]);
    return (react_1.default.createElement("button", __assign$1({ type: "button", className: classNames$1("relative inline-flex items-center px-2 py-2 bg-white font-medium", className, rest.disabled ? "text-gray-300 cursor-default" : "text-gray-600 cursor-pointer hover:bg-gray-100 focus:outline-none") }, rest), children));
}
var IbbTablePagination = function (_a) {
    var state = _a.state, canPreviousPage = _a.canPreviousPage, canNextPage = _a.canNextPage, previousPage = _a.previousPage, nextPage = _a.nextPage, gotoPage = _a.gotoPage, setPageSize = _a.setPageSize, pageOptions = _a.pageOptions, pageCount = _a.pageCount, countRows = _a.countRows;
    return (react_1.default.createElement(TwTablePaginationContainer, null, react_1.default.createElement(TwTablePaginationButtonsContainer, null, react_1.default.createElement(IbbButton, { onClick: function () { return previousPage(); }, disabled: !canPreviousPage }, "Previous"), react_1.default.createElement(IbbButton, { onClick: function () { return nextPage(); }, disabled: !canNextPage }, "Next")), react_1.default.createElement(TwTablePagerContainer, null, react_1.default.createElement(TwTablePager, null, react_1.default.createElement(TwLabelSmall, null, "Seite ", react_1.default.createElement("span", { className: "font-medium" }, state.pageIndex + 1), " von ", react_1.default.createElement("span", { className: "font-medium" }, pageOptions.length)), react_1.default.createElement("label", null, react_1.default.createElement("span", { className: "sr-only" }, "Eintr\u00E4ge pro Seite"), react_1.default.createElement(TwTablePageSelector, { value: state.pageSize, onChange: function (e) {
            setPageSize(Number(e.target.value));
        } }, [5, 10, 25, 50, 100].map(function (pageSize) { return (react_1.default.createElement("option", { key: pageSize, value: pageSize }, pageSize)); })))), react_1.default.createElement(TwLabelSmall, { className: "italic" }, countRows != null && "".concat(countRows, " ").concat(countRows == 1 ? "Eintrag" : "Einträge")), react_1.default.createElement("div", null, react_1.default.createElement(TwTablePageNavigation, { "aria-label": "Pagination" }, react_1.default.createElement(PageButton, { className: "rounded-l-md", onClick: function () { return gotoPage(0); }, disabled: !canPreviousPage }, react_1.default.createElement("span", { className: "sr-only" }, "First"), react_1.default.createElement(ChevronDoubleLeftIcon$1, { className: "h-5 w-5", "aria-hidden": "true" })), react_1.default.createElement(PageButton, { onClick: function () { return previousPage(); }, disabled: !canPreviousPage, className: "" }, react_1.default.createElement("span", { className: "sr-only" }, "Previous"), react_1.default.createElement(ChevronLeftIcon$1, { className: "h-5 w-5", "aria-hidden": "true" })), react_1.default.createElement(PageButton, { onClick: function () { return nextPage(); }, disabled: !canNextPage, className: "" }, react_1.default.createElement("span", { className: "sr-only" }, "Next"), react_1.default.createElement(ChevronRightIcon$1, { className: "h-5 w-5", "aria-hidden": "true" })), react_1.default.createElement(PageButton, { className: "rounded-r-md", onClick: function () { return gotoPage(pageCount - 1); }, disabled: !canNextPage }, react_1.default.createElement("span", { className: "sr-only" }, "Last"), react_1.default.createElement(ChevronDoubleRightIcon$1, { className: "h-5 w-5", "aria-hidden": "true" })))))));
};
var lodash = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function (module, exports) {
    (function () {
        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
        var undefined$1;
        /** Used as the semantic version number. */
        var VERSION = '4.17.21';
        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200;
        /** Error message constants. */
        var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function', INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__';
        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500;
        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = '__lodash_placeholder__';
        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        /** Used as default options for `_.truncate`. */
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800, HOT_SPAN = 16;
        /** Used to indicate the type of lazy iteratees. */
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
            ['ary', WRAP_ARY_FLAG],
            ['bind', WRAP_BIND_FLAG],
            ['bindKey', WRAP_BIND_KEY_FLAG],
            ['curry', WRAP_CURRY_FLAG],
            ['curryRight', WRAP_CURRY_RIGHT_FLAG],
            ['flip', WRAP_FLIP_FLAG],
            ['partial', WRAP_PARTIAL_FLAG],
            ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
            ['rearg', WRAP_REARG_FLAG]
        ];
        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
        var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
        /** Used to match empty string literals in compiled template source. */
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        /** Used to match HTML entities and HTML characters. */
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        /** Used to match template delimiters. */
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        /** Used to match leading whitespace. */
        var reTrimStart = /^\s+/;
        /** Used to match a single whitespace character. */
        var reWhitespace = /\s/;
        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        /** Used to match words composed of alphanumeric characters. */
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        /**
         * Used to validate the `validate` option in `_.template` variable.
         *
         * Forbids characters which could potentially change the meaning of the function argument definition:
         * - "()," (modification of function parameters)
         * - "=" (default value)
         * - "[]{}" (destructuring of function parameters)
         * - "/" (beginning of a comment)
         * - whitespace
         */
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g;
        /**
         * Used to match
         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
         */
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/;
        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i;
        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i;
        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        /** Used to match Latin Unicode letters (excluding mathematical operators). */
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        /** Used to ensure capturing order of template delimiters. */
        var reNoMatch = /($^)/;
        /** Used to match unescaped characters in compiled string literals. */
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        /** Used to compose unicode character classes. */
        var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        /** Used to compose unicode capture groups. */
        var rsApos = "['\u2019]", rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
        /** Used to compose unicode regexes. */
        var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
        /** Used to match apostrophes. */
        var reApos = RegExp(rsApos, 'g');
        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */
        var reComboMark = RegExp(rsCombo, 'g');
        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
        var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
        /** Used to match complex or compound words. */
        var reUnicodeWord = RegExp([
            rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
            rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
            rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
            rsUpper + '+' + rsOptContrUpper,
            rsOrdUpper,
            rsOrdLower,
            rsDigits,
            rsEmoji
        ].join('|'), 'g');
        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
        var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
        /** Used to detect strings that need a more robust regexp to match words. */
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        /** Used to assign default `context` object properties. */
        var contextProps = [
            'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
            'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
            'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
            'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
            '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
        ];
        /** Used to make template sourceURLs easier to identify. */
        var templateCounter = -1;
        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                        typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                        typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                    typedArrayTags[weakMapTag] = false;
        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] =
            cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                cloneableTags[boolTag] = cloneableTags[dateTag] =
                    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                        cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                            cloneableTags[int32Tag] = cloneableTags[mapTag] =
                                cloneableTags[numberTag] = cloneableTags[objectTag] =
                                    cloneableTags[regexpTag] = cloneableTags[setTag] =
                                        cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                            cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                                cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] =
            cloneableTags[weakMapTag] = false;
        /** Used to map Latin Unicode letters to basic Latin letters. */
        var deburredLetters = {
            // Latin-1 Supplement block.
            '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
            '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
            '\xc7': 'C', '\xe7': 'c',
            '\xd0': 'D', '\xf0': 'd',
            '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
            '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
            '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
            '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
            '\xd1': 'N', '\xf1': 'n',
            '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
            '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
            '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
            '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
            '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
            '\xc6': 'Ae', '\xe6': 'ae',
            '\xde': 'Th', '\xfe': 'th',
            '\xdf': 'ss',
            // Latin Extended-A block.
            '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
            '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
            '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
            '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
            '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
            '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
            '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
            '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
            '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
            '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
            '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
            '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
            '\u0134': 'J', '\u0135': 'j',
            '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
            '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
            '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
            '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
            '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
            '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
            '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
            '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
            '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
            '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
            '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
            '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
            '\u0163': 't', '\u0165': 't', '\u0167': 't',
            '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
            '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
            '\u0174': 'W', '\u0175': 'w',
            '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
            '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
            '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
            '\u0132': 'IJ', '\u0133': 'ij',
            '\u0152': 'Oe', '\u0153': 'oe',
            '\u0149': "'n", '\u017f': 's'
        };
        /** Used to map characters to HTML entities. */
        var htmlEscapes = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
        };
        /** Used to map HTML entities to characters. */
        var htmlUnescapes = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': "'"
        };
        /** Used to escape characters for inclusion in compiled string literals. */
        var stringEscapes = {
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        };
        /** Built-in method references without a dependency on `root`. */
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        /** Detect free variable `global` from Node.js. */
        var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
        /** Detect free variable `self`. */
        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')();
        /** Detect free variable `exports`. */
        var freeExports = exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */
        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process;
        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
            try {
                // Use `util.types` for Node.js 10+.
                var types = freeModule && freeModule.require && freeModule.require('util').types;
                if (types) {
                    return types;
                }
                // Legacy `process.binding('util')` for Node.js < 10.
                return freeProcess && freeProcess.binding && freeProcess.binding('util');
            }
            catch (e) { }
        }());
        /* Node.js helper references. */
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        /*--------------------------------------------------------------------------*/
        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
            switch (args.length) {
                case 0: return func.call(thisArg);
                case 1: return func.call(thisArg, args[0]);
                case 2: return func.call(thisArg, args[0], args[1]);
                case 3: return func.call(thisArg, args[0], args[1], args[2]);
            }
            return func.apply(thisArg, args);
        }
        /**
         * A specialized version of `baseAggregator` for arrays.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function arrayAggregator(array, setter, iteratee, accumulator) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                var value = array[index];
                setter(accumulator, value, iteratee(value), array);
            }
            return accumulator;
        }
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (iteratee(array[index], index, array) === false) {
                    break;
                }
            }
            return array;
        }
        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEachRight(array, iteratee) {
            var length = array == null ? 0 : array.length;
            while (length--) {
                if (iteratee(array[length], length, array) === false) {
                    break;
                }
            }
            return array;
        }
        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (!predicate(array[index], index, array)) {
                    return false;
                }
            }
            return true;
        }
        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
            var length = array == null ? 0 : array.length;
            return !!length && baseIndexOf(array, value, 0) > -1;
        }
        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludesWith(array, value, comparator) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (comparator(value, array[index])) {
                    return true;
                }
            }
            return false;
        }
        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
            var index = -1, length = array == null ? 0 : array.length, result = Array(length);
            while (++index < length) {
                result[index] = iteratee(array[index], index, array);
            }
            return result;
        }
        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
            var index = -1, length = values.length, offset = array.length;
            while (++index < length) {
                array[offset + index] = values[index];
            }
            return array;
        }
        /**
         * A specialized version of `_.reduce` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the first element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduce(array, iteratee, accumulator, initAccum) {
            var index = -1, length = array == null ? 0 : array.length;
            if (initAccum && length) {
                accumulator = array[++index];
            }
            while (++index < length) {
                accumulator = iteratee(accumulator, array[index], index, array);
            }
            return accumulator;
        }
        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the last element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
            var length = array == null ? 0 : array.length;
            if (initAccum && length) {
                accumulator = array[--length];
            }
            while (length--) {
                accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
        }
        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
            var index = -1, length = array == null ? 0 : array.length;
            while (++index < length) {
                if (predicate(array[index], index, array)) {
                    return true;
                }
            }
            return false;
        }
        /**
         * Gets the size of an ASCII `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        var asciiSize = baseProperty('length');
        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function asciiToArray(string) {
            return string.split('');
        }
        /**
         * Splits an ASCII `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function asciiWords(string) {
            return string.match(reAsciiWord) || [];
        }
        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFindKey(collection, predicate, eachFunc) {
            var result;
            eachFunc(collection, function (value, key, collection) {
                if (predicate(value, key, collection)) {
                    result = key;
                    return false;
                }
            });
            return result;
        }
        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
            var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
            while ((fromRight ? index-- : ++index < length)) {
                if (predicate(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }
        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
            return value === value
                ? strictIndexOf(array, value, fromIndex)
                : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOfWith(array, value, fromIndex, comparator) {
            var index = fromIndex - 1, length = array.length;
            while (++index < length) {
                if (comparator(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
            return value !== value;
        }
        /**
         * The base implementation of `_.mean` and `_.meanBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the mean.
         */
        function baseMean(array, iteratee) {
            var length = array == null ? 0 : array.length;
            return length ? (baseSum(array, iteratee) / length) : NAN;
        }
        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
            return function (object) {
                return object == null ? undefined$1 : object[key];
            };
        }
        /**
         * The base implementation of `_.propertyOf` without support for deep paths.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyOf(object) {
            return function (key) {
                return object == null ? undefined$1 : object[key];
            };
        }
        /**
         * The base implementation of `_.reduce` and `_.reduceRight`, without support
         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initAccum Specify using the first or last element of
         *  `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
            eachFunc(collection, function (value, index, collection) {
                accumulator = initAccum
                    ? (initAccum = false, value)
                    : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
        }
        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
            var length = array.length;
            array.sort(comparer);
            while (length--) {
                array[length] = array[length].value;
            }
            return array;
        }
        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(array, iteratee) {
            var result, index = -1, length = array.length;
            while (++index < length) {
                var current = iteratee(array[index]);
                if (current !== undefined$1) {
                    result = result === undefined$1 ? current : (result + current);
                }
            }
            return result;
        }
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
            var index = -1, result = Array(n);
            while (++index < n) {
                result[index] = iteratee(index);
            }
            return result;
        }
        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */
        function baseToPairs(object, props) {
            return arrayMap(props, function (key) {
                return [key, object[key]];
            });
        }
        /**
         * The base implementation of `_.trim`.
         *
         * @private
         * @param {string} string The string to trim.
         * @returns {string} Returns the trimmed string.
         */
        function baseTrim(string) {
            return string
                ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
                : string;
        }
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
            return function (value) {
                return func(value);
            };
        }
        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
            return arrayMap(props, function (key) {
                return object[key];
            });
        }
        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
            return cache.has(key);
        }
        /**
         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the first unmatched string symbol.
         */
        function charsStartIndex(strSymbols, chrSymbols) {
            var index = -1, length = strSymbols.length;
            while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
            return index;
        }
        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the last unmatched string symbol.
         */
        function charsEndIndex(strSymbols, chrSymbols) {
            var index = strSymbols.length;
            while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) { }
            return index;
        }
        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
            var length = array.length, result = 0;
            while (length--) {
                if (array[length] === placeholder) {
                    ++result;
                }
            }
            return result;
        }
        /**
         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
         * letters to basic Latin letters.
         *
         * @private
         * @param {string} letter The matched letter to deburr.
         * @returns {string} Returns the deburred letter.
         */
        var deburrLetter = basePropertyOf(deburredLetters);
        /**
         * Used by `_.escape` to convert characters to HTML entities.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        /**
         * Used by `_.template` to escape characters for inclusion in compiled string literals.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        function escapeStringChar(chr) {
            return '\\' + stringEscapes[chr];
        }
        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
            return object == null ? undefined$1 : object[key];
        }
        /**
         * Checks if `string` contains Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
         */
        function hasUnicode(string) {
            return reHasUnicode.test(string);
        }
        /**
         * Checks if `string` contains a word composed of Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a word is found, else `false`.
         */
        function hasUnicodeWord(string) {
            return reHasUnicodeWord.test(string);
        }
        /**
         * Converts `iterator` to an array.
         *
         * @private
         * @param {Object} iterator The iterator to convert.
         * @returns {Array} Returns the converted array.
         */
        function iteratorToArray(iterator) {
            var data, result = [];
            while (!(data = iterator.next()).done) {
                result.push(data.value);
            }
            return result;
        }
        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
            var index = -1, result = Array(map.size);
            map.forEach(function (value, key) {
                result[++index] = [key, value];
            });
            return result;
        }
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
            return function (arg) {
                return func(transform(arg));
            };
        }
        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value === placeholder || value === PLACEHOLDER) {
                    array[index] = PLACEHOLDER;
                    result[resIndex++] = index;
                }
            }
            return result;
        }
        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
            var index = -1, result = Array(set.size);
            set.forEach(function (value) {
                result[++index] = value;
            });
            return result;
        }
        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */
        function setToPairs(set) {
            var index = -1, result = Array(set.size);
            set.forEach(function (value) {
                result[++index] = [value, value];
            });
            return result;
        }
        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
            var index = fromIndex - 1, length = array.length;
            while (++index < length) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }
        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictLastIndexOf(array, value, fromIndex) {
            var index = fromIndex + 1;
            while (index--) {
                if (array[index] === value) {
                    return index;
                }
            }
            return index;
        }
        /**
         * Gets the number of symbols in `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the string size.
         */
        function stringSize(string) {
            return hasUnicode(string)
                ? unicodeSize(string)
                : asciiSize(string);
        }
        /**
         * Converts `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function stringToArray(string) {
            return hasUnicode(string)
                ? unicodeToArray(string)
                : asciiToArray(string);
        }
        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
         * character of `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the index of the last non-whitespace character.
         */
        function trimmedEndIndex(string) {
            var index = string.length;
            while (index-- && reWhitespace.test(string.charAt(index))) { }
            return index;
        }
        /**
         * Used by `_.unescape` to convert HTML entities to characters.
         *
         * @private
         * @param {string} chr The matched character to unescape.
         * @returns {string} Returns the unescaped character.
         */
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        /**
         * Gets the size of a Unicode `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        function unicodeSize(string) {
            var result = reUnicode.lastIndex = 0;
            while (reUnicode.test(string)) {
                ++result;
            }
            return result;
        }
        /**
         * Converts a Unicode `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function unicodeToArray(string) {
            return string.match(reUnicode) || [];
        }
        /**
         * Splits a Unicode `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function unicodeWords(string) {
            return string.match(reUnicodeWord) || [];
        }
        /*--------------------------------------------------------------------------*/
        /**
         * Create a new pristine `lodash` function using the `context` object.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Util
         * @param {Object} [context=root] The context object.
         * @returns {Function} Returns a new `lodash` function.
         * @example
         *
         * _.mixin({ 'foo': _.constant('foo') });
         *
         * var lodash = _.runInContext();
         * lodash.mixin({ 'bar': lodash.constant('bar') });
         *
         * _.isFunction(_.foo);
         * // => true
         * _.isFunction(_.bar);
         * // => false
         *
         * lodash.isFunction(lodash.foo);
         * // => false
         * lodash.isFunction(lodash.bar);
         * // => true
         *
         * // Create a suped-up `defer` in Node.js.
         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
         */
        var runInContext = (function runInContext(context) {
            context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
            /** Built-in constructor references. */
            var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
            /** Used for built-in method references. */
            var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
            /** Used to detect overreaching core-js shims. */
            var coreJsData = context['__core-js_shared__'];
            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;
            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;
            /** Used to generate unique IDs. */
            var idCounter = 0;
            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function () {
                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                return uid ? ('Symbol(src)_1.' + uid) : '';
            }());
            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;
            /** Used to infer the `Object` constructor. */
            var objectCtorString = funcToString.call(Object);
            /** Used to restore the original `_` reference in `_.noConflict`. */
            var oldDash = root._;
            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
                funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
            /** Built-in value references. */
            var Buffer = moduleExports ? context.Buffer : undefined$1, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1, symIterator = Symbol ? Symbol.iterator : undefined$1, symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;
            var defineProperty = (function () {
                try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                }
                catch (e) { }
            }());
            /** Mocked built-ins. */
            var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
            /* Built-in method references that are verified to be native. */
            var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
            /** Used to store function metadata. */
            var metaMap = WeakMap && new WeakMap;
            /** Used to lookup unminified function names. */
            var realNames = {};
            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
            /*------------------------------------------------------------------------*/
            /**
             * Creates a `lodash` object which wraps `value` to enable implicit method
             * chain sequences. Methods that operate on and return arrays, collections,
             * and functions can be chained together. Methods that retrieve a single value
             * or may return a primitive value will automatically end the chain sequence
             * and return the unwrapped value. Otherwise, the value must be unwrapped
             * with `_#value`.
             *
             * Explicit chain sequences, which must be unwrapped with `_#value`, may be
             * enabled using `_.chain`.
             *
             * The execution of chained methods is lazy, that is, it's deferred until
             * `_#value` is implicitly or explicitly called.
             *
             * Lazy evaluation allows several methods to support shortcut fusion.
             * Shortcut fusion is an optimization to merge iteratee calls; this avoids
             * the creation of intermediate arrays and can greatly reduce the number of
             * iteratee executions. Sections of a chain sequence qualify for shortcut
             * fusion if the section is applied to an array and iteratees accept only
             * one argument. The heuristic for whether a section qualifies for shortcut
             * fusion is subject to change.
             *
             * Chaining is supported in custom builds as long as the `_#value` method is
             * directly or indirectly included in the build.
             *
             * In addition to lodash methods, wrappers have `Array` and `String` methods.
             *
             * The wrapper `Array` methods are:
             * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
             *
             * The wrapper `String` methods are:
             * `replace` and `split`
             *
             * The wrapper methods that support shortcut fusion are:
             * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
             * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
             * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
             *
             * The chainable wrapper methods are:
             * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
             * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
             * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
             * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
             * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
             * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
             * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
             * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
             * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
             * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
             * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
             * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
             * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
             * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
             * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
             * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
             * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
             * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
             * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
             * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
             * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
             * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
             * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
             * `zipObject`, `zipObjectDeep`, and `zipWith`
             *
             * The wrapper methods that are **not** chainable by default are:
             * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
             * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
             * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
             * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
             * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
             * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
             * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
             * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
             * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
             * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
             * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
             * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
             * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
             * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
             * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
             * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
             * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
             * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
             * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
             * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
             * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
             * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
             * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
             * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
             * `upperFirst`, `value`, and `words`
             *
             * @name _
             * @constructor
             * @category Seq
             * @param {*} value The value to wrap in a `lodash` instance.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2, 3]);
             *
             * // Returns an unwrapped value.
             * wrapped.reduce(_.add);
             * // => 6
             *
             * // Returns a wrapped value.
             * var squares = wrapped.map(square);
             *
             * _.isArray(squares);
             * // => false
             *
             * _.isArray(squares.value());
             * // => true
             */
            function lodash(value) {
                if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                    if (value instanceof LodashWrapper) {
                        return value;
                    }
                    if (hasOwnProperty.call(value, '__wrapped__')) {
                        return wrapperClone(value);
                    }
                }
                return new LodashWrapper(value);
            }
            /**
             * The base implementation of `_.create` without support for assigning
             * properties to the created object.
             *
             * @private
             * @param {Object} proto The object to inherit from.
             * @returns {Object} Returns the new object.
             */
            var baseCreate = (function () {
                function object() { }
                return function (proto) {
                    if (!isObject(proto)) {
                        return {};
                    }
                    if (objectCreate) {
                        return objectCreate(proto);
                    }
                    object.prototype = proto;
                    var result = new object;
                    object.prototype = undefined$1;
                    return result;
                };
            }());
            /**
             * The function whose prototype chain sequence wrappers inherit from.
             *
             * @private
             */
            function baseLodash() {
                // No operation performed.
            }
            /**
             * The base constructor for creating `lodash` wrapper objects.
             *
             * @private
             * @param {*} value The value to wrap.
             * @param {boolean} [chainAll] Enable explicit method chain sequences.
             */
            function LodashWrapper(value, chainAll) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__chain__ = !!chainAll;
                this.__index__ = 0;
                this.__values__ = undefined$1;
            }
            /**
             * By default, the template delimiters used by lodash are like those in
             * embedded Ruby (ERB) as well as ES2015 template strings. Change the
             * following template settings to use alternative delimiters.
             *
             * @static
             * @memberOf _
             * @type {Object}
             */
            lodash.templateSettings = {
                /**
                 * Used to detect `data` property values to be HTML-escaped.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                'escape': reEscape,
                /**
                 * Used to detect code to be evaluated.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                'evaluate': reEvaluate,
                /**
                 * Used to detect `data` property values to inject.
                 *
                 * @memberOf _.templateSettings
                 * @type {RegExp}
                 */
                'interpolate': reInterpolate,
                /**
                 * Used to reference the data object in the template text.
                 *
                 * @memberOf _.templateSettings
                 * @type {string}
                 */
                'variable': '',
                /**
                 * Used to import variables into the compiled template.
                 *
                 * @memberOf _.templateSettings
                 * @type {Object}
                 */
                'imports': {
                    /**
                     * A reference to the `lodash` function.
                     *
                     * @memberOf _.templateSettings.imports
                     * @type {Function}
                     */
                    '_': lodash
                }
            };
            // Ensure wrappers are instances of `baseLodash`.
            lodash.prototype = baseLodash.prototype;
            lodash.prototype.constructor = lodash;
            LodashWrapper.prototype = baseCreate(baseLodash.prototype);
            LodashWrapper.prototype.constructor = LodashWrapper;
            /*------------------------------------------------------------------------*/
            /**
             * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
             *
             * @private
             * @constructor
             * @param {*} value The value to wrap.
             */
            function LazyWrapper(value) {
                this.__wrapped__ = value;
                this.__actions__ = [];
                this.__dir__ = 1;
                this.__filtered__ = false;
                this.__iteratees__ = [];
                this.__takeCount__ = MAX_ARRAY_LENGTH;
                this.__views__ = [];
            }
            /**
             * Creates a clone of the lazy wrapper object.
             *
             * @private
             * @name clone
             * @memberOf LazyWrapper
             * @returns {Object} Returns the cloned `LazyWrapper` object.
             */
            function lazyClone() {
                var result = new LazyWrapper(this.__wrapped__);
                result.__actions__ = copyArray(this.__actions__);
                result.__dir__ = this.__dir__;
                result.__filtered__ = this.__filtered__;
                result.__iteratees__ = copyArray(this.__iteratees__);
                result.__takeCount__ = this.__takeCount__;
                result.__views__ = copyArray(this.__views__);
                return result;
            }
            /**
             * Reverses the direction of lazy iteration.
             *
             * @private
             * @name reverse
             * @memberOf LazyWrapper
             * @returns {Object} Returns the new reversed `LazyWrapper` object.
             */
            function lazyReverse() {
                if (this.__filtered__) {
                    var result = new LazyWrapper(this);
                    result.__dir__ = -1;
                    result.__filtered__ = true;
                }
                else {
                    result = this.clone();
                    result.__dir__ *= -1;
                }
                return result;
            }
            /**
             * Extracts the unwrapped value from its lazy wrapper.
             *
             * @private
             * @name value
             * @memberOf LazyWrapper
             * @returns {*} Returns the unwrapped value.
             */
            function lazyValue() {
                var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : (start - 1), iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
                if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                    return baseWrapperValue(array, this.__actions__);
                }
                var result = [];
                outer: while (length-- && resIndex < takeCount) {
                    index += dir;
                    var iterIndex = -1, value = array[index];
                    while (++iterIndex < iterLength) {
                        var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                        if (type == LAZY_MAP_FLAG) {
                            value = computed;
                        }
                        else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                                continue outer;
                            }
                            else {
                                break outer;
                            }
                        }
                    }
                    result[resIndex++] = value;
                }
                return result;
            }
            // Ensure `LazyWrapper` is an instance of `baseLodash`.
            LazyWrapper.prototype = baseCreate(baseLodash.prototype);
            LazyWrapper.prototype.constructor = LazyWrapper;
            /*------------------------------------------------------------------------*/
            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
                var index = -1, length = entries == null ? 0 : entries.length;
                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }
            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
            }
            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
            }
            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined$1 : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
            }
            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
                var data = this.__data__;
                return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
            }
            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
                return this;
            }
            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;
            /*------------------------------------------------------------------------*/
            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
                var index = -1, length = entries == null ? 0 : entries.length;
                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }
            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }
            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
                var data = this.__data__, index = assocIndexOf(data, key);
                if (index < 0) {
                    return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                    data.pop();
                }
                else {
                    splice.call(data, index, 1);
                }
                --this.size;
                return true;
            }
            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
                var data = this.__data__, index = assocIndexOf(data, key);
                return index < 0 ? undefined$1 : data[index][1];
            }
            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }
            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
                var data = this.__data__, index = assocIndexOf(data, key);
                if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                }
                else {
                    data[index][1] = value;
                }
                return this;
            }
            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;
            /*------------------------------------------------------------------------*/
            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
                var index = -1, length = entries == null ? 0 : entries.length;
                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }
            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                    'hash': new Hash,
                    'map': new (Map || ListCache),
                    'string': new Hash
                };
            }
            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
            }
            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
                return getMapData(this, key).get(key);
            }
            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
                return getMapData(this, key).has(key);
            }
            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
                var data = getMapData(this, key), size = data.size;
                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
            }
            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;
            /*------------------------------------------------------------------------*/
            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
                var index = -1, length = values == null ? 0 : values.length;
                this.__data__ = new MapCache;
                while (++index < length) {
                    this.add(values[index]);
                }
            }
            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
            }
            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
                return this.__data__.has(value);
            }
            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;
            /*------------------------------------------------------------------------*/
            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
                var data = this.__data__ = new ListCache(entries);
                this.size = data.size;
            }
            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
                this.__data__ = new ListCache;
                this.size = 0;
            }
            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
                var data = this.__data__, result = data['delete'](key);
                this.size = data.size;
                return result;
            }
            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
                return this.__data__.get(key);
            }
            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
                return this.__data__.has(key);
            }
            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
            }
            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;
            /*------------------------------------------------------------------------*/
            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
                for (var key in value) {
                    if ((inherited || hasOwnProperty.call(value, key)) &&
                        !(skipIndexes && (
                        // Safari 9 has enumerable `arguments.length` in strict mode.
                        key == 'length' ||
                            // Node.js 0.10 has enumerable non-index properties on buffers.
                            (isBuff && (key == 'offset' || key == 'parent')) ||
                            // PhantomJS 2 has enumerable non-index properties on typed arrays.
                            (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                            // Skip index properties.
                            isIndex(key, length)))) {
                        result.push(key);
                    }
                }
                return result;
            }
            /**
             * A specialized version of `_.sample` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @returns {*} Returns the random element.
             */
            function arraySample(array) {
                var length = array.length;
                return length ? array[baseRandom(0, length - 1)] : undefined$1;
            }
            /**
             * A specialized version of `_.sampleSize` for arrays.
             *
             * @private
             * @param {Array} array The array to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function arraySampleSize(array, n) {
                return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
            }
            /**
             * A specialized version of `_.shuffle` for arrays.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function arrayShuffle(array) {
                return shuffleSelf(copyArray(array));
            }
            /**
             * This function is like `assignValue` except that it doesn't assign
             * `undefined` values.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignMergeValue(object, key, value) {
                if ((value !== undefined$1 && !eq(object[key], value)) ||
                    (value === undefined$1 && !(key in object))) {
                    baseAssignValue(object, key, value);
                }
            }
            /**
             * Assigns `value` to `key` of `object` if the existing value is not equivalent
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function assignValue(object, key, value) {
                var objValue = object[key];
                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                    (value === undefined$1 && !(key in object))) {
                    baseAssignValue(object, key, value);
                }
            }
            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                    if (eq(array[length][0], key)) {
                        return length;
                    }
                }
                return -1;
            }
            /**
             * Aggregates elements of `collection` on `accumulator` with keys transformed
             * by `iteratee` and values set by `setter`.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform keys.
             * @param {Object} accumulator The initial aggregated object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseAggregator(collection, setter, iteratee, accumulator) {
                baseEach(collection, function (value, key, collection) {
                    setter(accumulator, value, iteratee(value), collection);
                });
                return accumulator;
            }
            /**
             * The base implementation of `_.assign` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssign(object, source) {
                return object && copyObject(source, keys(source), object);
            }
            /**
             * The base implementation of `_.assignIn` without support for multiple sources
             * or `customizer` functions.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @returns {Object} Returns `object`.
             */
            function baseAssignIn(object, source) {
                return object && copyObject(source, keysIn(source), object);
            }
            /**
             * The base implementation of `assignValue` and `assignMergeValue` without
             * value checks.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {string} key The key of the property to assign.
             * @param {*} value The value to assign.
             */
            function baseAssignValue(object, key, value) {
                if (key == '__proto__' && defineProperty) {
                    defineProperty(object, key, {
                        'configurable': true,
                        'enumerable': true,
                        'value': value,
                        'writable': true
                    });
                }
                else {
                    object[key] = value;
                }
            }
            /**
             * The base implementation of `_.at` without support for individual paths.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {string[]} paths The property paths to pick.
             * @returns {Array} Returns the picked elements.
             */
            function baseAt(object, paths) {
                var index = -1, length = paths.length, result = Array(length), skip = object == null;
                while (++index < length) {
                    result[index] = skip ? undefined$1 : get(object, paths[index]);
                }
                return result;
            }
            /**
             * The base implementation of `_.clamp` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             */
            function baseClamp(number, lower, upper) {
                if (number === number) {
                    if (upper !== undefined$1) {
                        number = number <= upper ? number : upper;
                    }
                    if (lower !== undefined$1) {
                        number = number >= lower ? number : lower;
                    }
                }
                return number;
            }
            /**
             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
             * traversed objects.
             *
             * @private
             * @param {*} value The value to clone.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Deep clone
             *  2 - Flatten inherited properties
             *  4 - Clone symbols
             * @param {Function} [customizer] The function to customize cloning.
             * @param {string} [key] The key of `value`.
             * @param {Object} [object] The parent object of `value`.
             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
             * @returns {*} Returns the cloned value.
             */
            function baseClone(value, bitmask, customizer, key, object, stack) {
                var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
                if (customizer) {
                    result = object ? customizer(value, key, object, stack) : customizer(value);
                }
                if (result !== undefined$1) {
                    return result;
                }
                if (!isObject(value)) {
                    return value;
                }
                var isArr = isArray(value);
                if (isArr) {
                    result = initCloneArray(value);
                    if (!isDeep) {
                        return copyArray(value, result);
                    }
                }
                else {
                    var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                    if (isBuffer(value)) {
                        return cloneBuffer(value, isDeep);
                    }
                    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                        result = (isFlat || isFunc) ? {} : initCloneObject(value);
                        if (!isDeep) {
                            return isFlat
                                ? copySymbolsIn(value, baseAssignIn(result, value))
                                : copySymbols(value, baseAssign(result, value));
                        }
                    }
                    else {
                        if (!cloneableTags[tag]) {
                            return object ? value : {};
                        }
                        result = initCloneByTag(value, tag, isDeep);
                    }
                }
                // Check for circular references and return its corresponding clone.
                stack || (stack = new Stack);
                var stacked = stack.get(value);
                if (stacked) {
                    return stacked;
                }
                stack.set(value, result);
                if (isSet(value)) {
                    value.forEach(function (subValue) {
                        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                    });
                }
                else if (isMap(value)) {
                    value.forEach(function (subValue, key) {
                        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                    });
                }
                var keysFunc = isFull
                    ? (isFlat ? getAllKeysIn : getAllKeys)
                    : (isFlat ? keysIn : keys);
                var props = isArr ? undefined$1 : keysFunc(value);
                arrayEach(props || value, function (subValue, key) {
                    if (props) {
                        key = subValue;
                        subValue = value[key];
                    }
                    // Recursively populate clone (susceptible to call stack limits).
                    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                });
                return result;
            }
            /**
             * The base implementation of `_.conforms` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             */
            function baseConforms(source) {
                var props = keys(source);
                return function (object) {
                    return baseConformsTo(object, source, props);
                };
            }
            /**
             * The base implementation of `_.conformsTo` which accepts `props` to check.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             */
            function baseConformsTo(object, source, props) {
                var length = props.length;
                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (length--) {
                    var key = props[length], predicate = source[key], value = object[key];
                    if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
                        return false;
                    }
                }
                return true;
            }
            /**
             * The base implementation of `_.delay` and `_.defer` which accepts `args`
             * to provide to `func`.
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {Array} args The arguments to provide to `func`.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            function baseDelay(func, wait, args) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return setTimeout(function () { func.apply(undefined$1, args); }, wait);
            }
            /**
             * The base implementation of methods like `_.difference` without support
             * for excluding multiple arrays or iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Array} values The values to exclude.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             */
            function baseDifference(array, values, iteratee, comparator) {
                var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
                if (!length) {
                    return result;
                }
                if (iteratee) {
                    values = arrayMap(values, baseUnary(iteratee));
                }
                if (comparator) {
                    includes = arrayIncludesWith;
                    isCommon = false;
                }
                else if (values.length >= LARGE_ARRAY_SIZE) {
                    includes = cacheHas;
                    isCommon = false;
                    values = new SetCache(values);
                }
                outer: while (++index < length) {
                    var value = array[index], computed = iteratee == null ? value : iteratee(value);
                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                        var valuesIndex = valuesLength;
                        while (valuesIndex--) {
                            if (values[valuesIndex] === computed) {
                                continue outer;
                            }
                        }
                        result.push(value);
                    }
                    else if (!includes(values, computed, comparator)) {
                        result.push(value);
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);
            /**
             * The base implementation of `_.forEachRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEachRight = createBaseEach(baseForOwnRight, true);
            /**
             * The base implementation of `_.every` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`
             */
            function baseEvery(collection, predicate) {
                var result = true;
                baseEach(collection, function (value, index, collection) {
                    result = !!predicate(value, index, collection);
                    return result;
                });
                return result;
            }
            /**
             * The base implementation of methods like `_.max` and `_.min` which accepts a
             * `comparator` to determine the extremum value.
             *
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} iteratee The iteratee invoked per iteration.
             * @param {Function} comparator The comparator used to compare values.
             * @returns {*} Returns the extremum value.
             */
            function baseExtremum(array, iteratee, comparator) {
                var index = -1, length = array.length;
                while (++index < length) {
                    var value = array[index], current = iteratee(value);
                    if (current != null && (computed === undefined$1
                        ? (current === current && !isSymbol(current))
                        : comparator(current, computed))) {
                        var computed = current, result = value;
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.fill` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             */
            function baseFill(array, value, start, end) {
                var length = array.length;
                start = toInteger(start);
                if (start < 0) {
                    start = -start > length ? 0 : (length + start);
                }
                end = (end === undefined$1 || end > length) ? length : toInteger(end);
                if (end < 0) {
                    end += length;
                }
                end = start > end ? 0 : toLength(end);
                while (start < end) {
                    array[start++] = value;
                }
                return array;
            }
            /**
             * The base implementation of `_.filter` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function baseFilter(collection, predicate) {
                var result = [];
                baseEach(collection, function (value, index, collection) {
                    if (predicate(value, index, collection)) {
                        result.push(value);
                    }
                });
                return result;
            }
            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
                var index = -1, length = array.length;
                predicate || (predicate = isFlattenable);
                result || (result = []);
                while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                        if (depth > 1) {
                            // Recursively flatten arrays (susceptible to call stack limits).
                            baseFlatten(value, depth - 1, predicate, isStrict, result);
                        }
                        else {
                            arrayPush(result, value);
                        }
                    }
                    else if (!isStrict) {
                        result[result.length] = value;
                    }
                }
                return result;
            }
            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();
            /**
             * This function is like `baseFor` except that it iterates over properties
             * in the opposite order.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseForRight = createBaseFor(true);
            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
                return object && baseFor(object, iteratee, keys);
            }
            /**
             * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwnRight(object, iteratee) {
                return object && baseForRight(object, iteratee, keys);
            }
            /**
             * The base implementation of `_.functions` which creates an array of
             * `object` function property names filtered from `props`.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Array} props The property names to filter.
             * @returns {Array} Returns the function names.
             */
            function baseFunctions(object, props) {
                return arrayFilter(props, function (key) {
                    return isFunction(object[key]);
                });
            }
            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
                path = castPath(path, object);
                var index = 0, length = path.length;
                while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                }
                return (index && index == length) ? object : undefined$1;
            }
            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
            }
            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
                if (value == null) {
                    return value === undefined$1 ? undefinedTag : nullTag;
                }
                return (symToStringTag && symToStringTag in Object(value))
                    ? getRawTag(value)
                    : objectToString(value);
            }
            /**
             * The base implementation of `_.gt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             */
            function baseGt(value, other) {
                return value > other;
            }
            /**
             * The base implementation of `_.has` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHas(object, key) {
                return object != null && hasOwnProperty.call(object, key);
            }
            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
                return object != null && key in Object(object);
            }
            /**
             * The base implementation of `_.inRange` which doesn't coerce arguments.
             *
             * @private
             * @param {number} number The number to check.
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             */
            function baseInRange(number, start, end) {
                return number >= nativeMin(start, end) && number < nativeMax(start, end);
            }
            /**
             * The base implementation of methods like `_.intersection`, without support
             * for iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of shared values.
             */
            function baseIntersection(arrays, iteratee, comparator) {
                var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
                while (othIndex--) {
                    var array = arrays[othIndex];
                    if (othIndex && iteratee) {
                        array = arrayMap(array, baseUnary(iteratee));
                    }
                    maxLength = nativeMin(array.length, maxLength);
                    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                        ? new SetCache(othIndex && array)
                        : undefined$1;
                }
                array = arrays[0];
                var index = -1, seen = caches[0];
                outer: while (++index < length && result.length < maxLength) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    value = (comparator || value !== 0) ? value : 0;
                    if (!(seen
                        ? cacheHas(seen, computed)
                        : includes(result, computed, comparator))) {
                        othIndex = othLength;
                        while (--othIndex) {
                            var cache = caches[othIndex];
                            if (!(cache
                                ? cacheHas(cache, computed)
                                : includes(arrays[othIndex], computed, comparator))) {
                                continue outer;
                            }
                        }
                        if (seen) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.invert` and `_.invertBy` which inverts
             * `object` with values transformed by `iteratee` and set by `setter`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} setter The function to set `accumulator` values.
             * @param {Function} iteratee The iteratee to transform values.
             * @param {Object} accumulator The initial inverted object.
             * @returns {Function} Returns `accumulator`.
             */
            function baseInverter(object, setter, iteratee, accumulator) {
                baseForOwn(object, function (value, key, object) {
                    setter(accumulator, iteratee(value), key, object);
                });
                return accumulator;
            }
            /**
             * The base implementation of `_.invoke` without support for individual
             * method arguments.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {Array} args The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             */
            function baseInvoke(object, path, args) {
                path = castPath(path, object);
                object = parent(object, path);
                var func = object == null ? object : object[toKey(last(path))];
                return func == null ? undefined$1 : apply(func, object, args);
            }
            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
            }
            /**
             * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             */
            function baseIsArrayBuffer(value) {
                return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
            }
            /**
             * The base implementation of `_.isDate` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             */
            function baseIsDate(value) {
                return isObjectLike(value) && baseGetTag(value) == dateTag;
            }
            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                    return true;
                }
                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                }
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }
            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;
                var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                        return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return (objIsArr || isTypedArray(object))
                        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                        stack || (stack = new Stack);
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) {
                    return false;
                }
                stack || (stack = new Stack);
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }
            /**
             * The base implementation of `_.isMap` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             */
            function baseIsMap(value) {
                return isObjectLike(value) && getTag(value) == mapTag;
            }
            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length, length = index, noCustomizer = !customizer;
                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if ((noCustomizer && data[2])
                        ? data[1] !== object[data[0]]
                        : !(data[0] in object)) {
                        return false;
                    }
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0], objValue = object[key], srcValue = data[1];
                    if (noCustomizer && data[2]) {
                        if (objValue === undefined$1 && !(key in object)) {
                            return false;
                        }
                    }
                    else {
                        var stack = new Stack;
                        if (customizer) {
                            var result = customizer(objValue, srcValue, key, object, source, stack);
                        }
                        if (!(result === undefined$1
                            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                            : result)) {
                            return false;
                        }
                    }
                }
                return true;
            }
            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                    return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
            }
            /**
             * The base implementation of `_.isRegExp` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             */
            function baseIsRegExp(value) {
                return isObjectLike(value) && baseGetTag(value) == regexpTag;
            }
            /**
             * The base implementation of `_.isSet` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             */
            function baseIsSet(value) {
                return isObjectLike(value) && getTag(value) == setTag;
            }
            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
                return isObjectLike(value) &&
                    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }
            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                    return value;
                }
                if (value == null) {
                    return identity;
                }
                if (typeof value == 'object') {
                    return isArray(value)
                        ? baseMatchesProperty(value[0], value[1])
                        : baseMatches(value);
                }
                return property(value);
            }
            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
                if (!isPrototype(object)) {
                    return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                        result.push(key);
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeysIn(object) {
                if (!isObject(object)) {
                    return nativeKeysIn(object);
                }
                var isProto = isPrototype(object), result = [];
                for (var key in object) {
                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                        result.push(key);
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.lt` which doesn't coerce arguments.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             */
            function baseLt(value, other) {
                return value < other;
            }
            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
                var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
                baseEach(collection, function (value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                });
                return result;
            }
            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                }
                return function (object) {
                    return object === source || baseIsMatch(object, source, matchData);
                };
            }
            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                }
                return function (object) {
                    var objValue = get(object, path);
                    return (objValue === undefined$1 && objValue === srcValue)
                        ? hasIn(object, path)
                        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
            }
            /**
             * The base implementation of `_.merge` without support for multiple sources.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} [customizer] The function to customize merged values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMerge(object, source, srcIndex, customizer, stack) {
                if (object === source) {
                    return;
                }
                baseFor(source, function (srcValue, key) {
                    stack || (stack = new Stack);
                    if (isObject(srcValue)) {
                        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                    }
                    else {
                        var newValue = customizer
                            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                            : undefined$1;
                        if (newValue === undefined$1) {
                            newValue = srcValue;
                        }
                        assignMergeValue(object, key, newValue);
                    }
                }, keysIn);
            }
            /**
             * A specialized version of `baseMerge` for arrays and objects which performs
             * deep merges and tracks traversed objects enabling objects with circular
             * references to be merged.
             *
             * @private
             * @param {Object} object The destination object.
             * @param {Object} source The source object.
             * @param {string} key The key of the value to merge.
             * @param {number} srcIndex The index of `source`.
             * @param {Function} mergeFunc The function to merge values.
             * @param {Function} [customizer] The function to customize assigned values.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             */
            function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
                if (stacked) {
                    assignMergeValue(object, key, stacked);
                    return;
                }
                var newValue = customizer
                    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                    : undefined$1;
                var isCommon = newValue === undefined$1;
                if (isCommon) {
                    var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                    newValue = srcValue;
                    if (isArr || isBuff || isTyped) {
                        if (isArray(objValue)) {
                            newValue = objValue;
                        }
                        else if (isArrayLikeObject(objValue)) {
                            newValue = copyArray(objValue);
                        }
                        else if (isBuff) {
                            isCommon = false;
                            newValue = cloneBuffer(srcValue, true);
                        }
                        else if (isTyped) {
                            isCommon = false;
                            newValue = cloneTypedArray(srcValue, true);
                        }
                        else {
                            newValue = [];
                        }
                    }
                    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                        newValue = objValue;
                        if (isArguments(objValue)) {
                            newValue = toPlainObject(objValue);
                        }
                        else if (!isObject(objValue) || isFunction(objValue)) {
                            newValue = initCloneObject(srcValue);
                        }
                    }
                    else {
                        isCommon = false;
                    }
                }
                if (isCommon) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, newValue);
                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                    stack['delete'](srcValue);
                }
                assignMergeValue(object, key, newValue);
            }
            /**
             * The base implementation of `_.nth` which doesn't coerce arguments.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {number} n The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             */
            function baseNth(array, n) {
                var length = array.length;
                if (!length) {
                    return;
                }
                n += n < 0 ? length : 0;
                return isIndex(n, length) ? array[n] : undefined$1;
            }
            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
                if (iteratees.length) {
                    iteratees = arrayMap(iteratees, function (iteratee) {
                        if (isArray(iteratee)) {
                            return function (value) {
                                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                            };
                        }
                        return iteratee;
                    });
                }
                else {
                    iteratees = [identity];
                }
                var index = -1;
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                var result = baseMap(collection, function (value, key, collection) {
                    var criteria = arrayMap(iteratees, function (iteratee) {
                        return iteratee(value);
                    });
                    return { 'criteria': criteria, 'index': ++index, 'value': value };
                });
                return baseSortBy(result, function (object, other) {
                    return compareMultiple(object, other, orders);
                });
            }
            /**
             * The base implementation of `_.pick` without support for individual
             * property identifiers.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @returns {Object} Returns the new object.
             */
            function basePick(object, paths) {
                return basePickBy(object, paths, function (value, path) {
                    return hasIn(object, path);
                });
            }
            /**
             * The base implementation of  `_.pickBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The source object.
             * @param {string[]} paths The property paths to pick.
             * @param {Function} predicate The function invoked per property.
             * @returns {Object} Returns the new object.
             */
            function basePickBy(object, paths, predicate) {
                var index = -1, length = paths.length, result = {};
                while (++index < length) {
                    var path = paths[index], value = baseGet(object, path);
                    if (predicate(value, path)) {
                        baseSet(result, castPath(path, object), value);
                    }
                }
                return result;
            }
            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
                return function (object) {
                    return baseGet(object, path);
                };
            }
            /**
             * The base implementation of `_.pullAllBy` without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             */
            function basePullAll(array, values, iteratee, comparator) {
                var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
                if (array === values) {
                    values = copyArray(values);
                }
                if (iteratee) {
                    seen = arrayMap(array, baseUnary(iteratee));
                }
                while (++index < length) {
                    var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                        if (seen !== array) {
                            splice.call(seen, fromIndex, 1);
                        }
                        splice.call(array, fromIndex, 1);
                    }
                }
                return array;
            }
            /**
             * The base implementation of `_.pullAt` without support for individual
             * indexes or capturing the removed elements.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {number[]} indexes The indexes of elements to remove.
             * @returns {Array} Returns `array`.
             */
            function basePullAt(array, indexes) {
                var length = array ? indexes.length : 0, lastIndex = length - 1;
                while (length--) {
                    var index = indexes[length];
                    if (length == lastIndex || index !== previous) {
                        var previous = index;
                        if (isIndex(index)) {
                            splice.call(array, index, 1);
                        }
                        else {
                            baseUnset(array, index);
                        }
                    }
                }
                return array;
            }
            /**
             * The base implementation of `_.random` without support for returning
             * floating-point numbers.
             *
             * @private
             * @param {number} lower The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the random number.
             */
            function baseRandom(lower, upper) {
                return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
            }
            /**
             * The base implementation of `_.range` and `_.rangeRight` which doesn't
             * coerce arguments.
             *
             * @private
             * @param {number} start The start of the range.
             * @param {number} end The end of the range.
             * @param {number} step The value to increment or decrement by.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the range of numbers.
             */
            function baseRange(start, end, step, fromRight) {
                var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
                while (length--) {
                    result[fromRight ? length : ++index] = start;
                    start += step;
                }
                return result;
            }
            /**
             * The base implementation of `_.repeat` which doesn't coerce arguments.
             *
             * @private
             * @param {string} string The string to repeat.
             * @param {number} n The number of times to repeat the string.
             * @returns {string} Returns the repeated string.
             */
            function baseRepeat(string, n) {
                var result = '';
                if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                    return result;
                }
                // Leverage the exponentiation by squaring algorithm for a faster repeat.
                // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                do {
                    if (n % 2) {
                        result += string;
                    }
                    n = nativeFloor(n / 2);
                    if (n) {
                        string += string;
                    }
                } while (n);
                return result;
            }
            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
                return setToString(overRest(func, start, identity), func + '');
            }
            /**
             * The base implementation of `_.sample`.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             */
            function baseSample(collection) {
                return arraySample(values(collection));
            }
            /**
             * The base implementation of `_.sampleSize` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to sample.
             * @param {number} n The number of elements to sample.
             * @returns {Array} Returns the random elements.
             */
            function baseSampleSize(collection, n) {
                var array = values(collection);
                return shuffleSelf(array, baseClamp(n, 0, array.length));
            }
            /**
             * The base implementation of `_.set`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseSet(object, path, value, customizer) {
                if (!isObject(object)) {
                    return object;
                }
                path = castPath(path, object);
                var index = -1, length = path.length, lastIndex = length - 1, nested = object;
                while (nested != null && ++index < length) {
                    var key = toKey(path[index]), newValue = value;
                    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
                        return object;
                    }
                    if (index != lastIndex) {
                        var objValue = nested[key];
                        newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
                        if (newValue === undefined$1) {
                            newValue = isObject(objValue)
                                ? objValue
                                : (isIndex(path[index + 1]) ? [] : {});
                        }
                    }
                    assignValue(nested, key, newValue);
                    nested = nested[key];
                }
                return object;
            }
            /**
             * The base implementation of `setData` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var baseSetData = !metaMap ? identity : function (func, data) {
                metaMap.set(func, data);
                return func;
            };
            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty ? identity : function (func, string) {
                return defineProperty(func, 'toString', {
                    'configurable': true,
                    'enumerable': false,
                    'value': constant(string),
                    'writable': true
                });
            };
            /**
             * The base implementation of `_.shuffle`.
             *
             * @private
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             */
            function baseShuffle(collection) {
                return shuffleSelf(values(collection));
            }
            /**
             * The base implementation of `_.slice` without an iteratee call guard.
             *
             * @private
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseSlice(array, start, end) {
                var index = -1, length = array.length;
                if (start < 0) {
                    start = -start > length ? 0 : (length + start);
                }
                end = end > length ? length : end;
                if (end < 0) {
                    end += length;
                }
                length = start > end ? 0 : ((end - start) >>> 0);
                start >>>= 0;
                var result = Array(length);
                while (++index < length) {
                    result[index] = array[index + start];
                }
                return result;
            }
            /**
             * The base implementation of `_.some` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function baseSome(collection, predicate) {
                var result;
                baseEach(collection, function (value, index, collection) {
                    result = predicate(value, index, collection);
                    return !result;
                });
                return !!result;
            }
            /**
             * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
             * performs a binary search of `array` to determine the index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndex(array, value, retHighest) {
                var low = 0, high = array == null ? low : array.length;
                if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                    while (low < high) {
                        var mid = (low + high) >>> 1, computed = array[mid];
                        if (computed !== null && !isSymbol(computed) &&
                            (retHighest ? (computed <= value) : (computed < value))) {
                            low = mid + 1;
                        }
                        else {
                            high = mid;
                        }
                    }
                    return high;
                }
                return baseSortedIndexBy(array, value, identity, retHighest);
            }
            /**
             * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
             * which invokes `iteratee` for `value` and each element of `array` to compute
             * their sort ranking. The iteratee is invoked with one argument; (value).
             *
             * @private
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} iteratee The iteratee invoked per element.
             * @param {boolean} [retHighest] Specify returning the highest qualified index.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             */
            function baseSortedIndexBy(array, value, iteratee, retHighest) {
                var low = 0, high = array == null ? 0 : array.length;
                if (high === 0) {
                    return 0;
                }
                value = iteratee(value);
                var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;
                while (low < high) {
                    var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                    if (valIsNaN) {
                        var setLow = retHighest || othIsReflexive;
                    }
                    else if (valIsUndefined) {
                        setLow = othIsReflexive && (retHighest || othIsDefined);
                    }
                    else if (valIsNull) {
                        setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                    }
                    else if (valIsSymbol) {
                        setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                    }
                    else if (othIsNull || othIsSymbol) {
                        setLow = false;
                    }
                    else {
                        setLow = retHighest ? (computed <= value) : (computed < value);
                    }
                    if (setLow) {
                        low = mid + 1;
                    }
                    else {
                        high = mid;
                    }
                }
                return nativeMin(high, MAX_ARRAY_INDEX);
            }
            /**
             * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
             * support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseSortedUniq(array, iteratee) {
                var index = -1, length = array.length, resIndex = 0, result = [];
                while (++index < length) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    if (!index || !eq(computed, seen)) {
                        var seen = computed;
                        result[resIndex++] = value === 0 ? 0 : value;
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.toNumber` which doesn't ensure correct
             * conversions of binary, hexadecimal, or octal string values.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             */
            function baseToNumber(value) {
                if (typeof value == 'number') {
                    return value;
                }
                if (isSymbol(value)) {
                    return NAN;
                }
                return +value;
            }
            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                    return value;
                }
                if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }
            /**
             * The base implementation of `_.uniqBy` without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             */
            function baseUniq(array, iteratee, comparator) {
                var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
                if (comparator) {
                    isCommon = false;
                    includes = arrayIncludesWith;
                }
                else if (length >= LARGE_ARRAY_SIZE) {
                    var set = iteratee ? null : createSet(array);
                    if (set) {
                        return setToArray(set);
                    }
                    isCommon = false;
                    includes = cacheHas;
                    seen = new SetCache;
                }
                else {
                    seen = iteratee ? [] : result;
                }
                outer: while (++index < length) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    value = (comparator || value !== 0) ? value : 0;
                    if (isCommon && computed === computed) {
                        var seenIndex = seen.length;
                        while (seenIndex--) {
                            if (seen[seenIndex] === computed) {
                                continue outer;
                            }
                        }
                        if (iteratee) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                    else if (!includes(seen, computed, comparator)) {
                        if (seen !== result) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
                return result;
            }
            /**
             * The base implementation of `_.unset`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The property path to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             */
            function baseUnset(object, path) {
                path = castPath(path, object);
                object = parent(object, path);
                return object == null || delete object[toKey(last(path))];
            }
            /**
             * The base implementation of `_.update`.
             *
             * @private
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to update.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize path creation.
             * @returns {Object} Returns `object`.
             */
            function baseUpdate(object, path, updater, customizer) {
                return baseSet(object, path, updater(baseGet(object, path)), customizer);
            }
            /**
             * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
             * without support for iteratee shorthands.
             *
             * @private
             * @param {Array} array The array to query.
             * @param {Function} predicate The function invoked per iteration.
             * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Array} Returns the slice of `array`.
             */
            function baseWhile(array, predicate, isDrop, fromRight) {
                var length = array.length, index = fromRight ? length : -1;
                while ((fromRight ? index-- : ++index < length) &&
                    predicate(array[index], index, array)) { }
                return isDrop
                    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
            }
            /**
             * The base implementation of `wrapperValue` which returns the result of
             * performing a sequence of actions on the unwrapped `value`, where each
             * successive action is supplied the return value of the previous.
             *
             * @private
             * @param {*} value The unwrapped value.
             * @param {Array} actions Actions to perform to resolve the unwrapped value.
             * @returns {*} Returns the resolved value.
             */
            function baseWrapperValue(value, actions) {
                var result = value;
                if (result instanceof LazyWrapper) {
                    result = result.value();
                }
                return arrayReduce(actions, function (result, action) {
                    return action.func.apply(action.thisArg, arrayPush([result], action.args));
                }, result);
            }
            /**
             * The base implementation of methods like `_.xor`, without support for
             * iteratee shorthands, that accepts an array of arrays to inspect.
             *
             * @private
             * @param {Array} arrays The arrays to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of values.
             */
            function baseXor(arrays, iteratee, comparator) {
                var length = arrays.length;
                if (length < 2) {
                    return length ? baseUniq(arrays[0]) : [];
                }
                var index = -1, result = Array(length);
                while (++index < length) {
                    var array = arrays[index], othIndex = -1;
                    while (++othIndex < length) {
                        if (othIndex != index) {
                            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                        }
                    }
                }
                return baseUniq(baseFlatten(result, 1), iteratee, comparator);
            }
            /**
             * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
             *
             * @private
             * @param {Array} props The property identifiers.
             * @param {Array} values The property values.
             * @param {Function} assignFunc The function to assign values.
             * @returns {Object} Returns the new object.
             */
            function baseZipObject(props, values, assignFunc) {
                var index = -1, length = props.length, valsLength = values.length, result = {};
                while (++index < length) {
                    var value = index < valsLength ? values[index] : undefined$1;
                    assignFunc(result, props[index], value);
                }
                return result;
            }
            /**
             * Casts `value` to an empty array if it's not an array like object.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Array|Object} Returns the cast array-like object.
             */
            function castArrayLikeObject(value) {
                return isArrayLikeObject(value) ? value : [];
            }
            /**
             * Casts `value` to `identity` if it's not a function.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {Function} Returns cast function.
             */
            function castFunction(value) {
                return typeof value == 'function' ? value : identity;
            }
            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
                if (isArray(value)) {
                    return value;
                }
                return isKey(value, object) ? [value] : stringToPath(toString(value));
            }
            /**
             * A `baseRest` alias which can be replaced with `identity` by module
             * replacement plugins.
             *
             * @private
             * @type {Function}
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            var castRest = baseRest;
            /**
             * Casts `array` to a slice if it's needed.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {number} start The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the cast slice.
             */
            function castSlice(array, start, end) {
                var length = array.length;
                end = end === undefined$1 ? length : end;
                return (!start && end >= length) ? array : baseSlice(array, start, end);
            }
            /**
             * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
             *
             * @private
             * @param {number|Object} id The timer id or timeout object of the timer to clear.
             */
            var clearTimeout = ctxClearTimeout || function (id) {
                return root.clearTimeout(id);
            };
            /**
             * Creates a clone of  `buffer`.
             *
             * @private
             * @param {Buffer} buffer The buffer to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Buffer} Returns the cloned buffer.
             */
            function cloneBuffer(buffer, isDeep) {
                if (isDeep) {
                    return buffer.slice();
                }
                var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                buffer.copy(result);
                return result;
            }
            /**
             * Creates a clone of `arrayBuffer`.
             *
             * @private
             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
             * @returns {ArrayBuffer} Returns the cloned array buffer.
             */
            function cloneArrayBuffer(arrayBuffer) {
                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                return result;
            }
            /**
             * Creates a clone of `dataView`.
             *
             * @private
             * @param {Object} dataView The data view to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned data view.
             */
            function cloneDataView(dataView, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
            }
            /**
             * Creates a clone of `regexp`.
             *
             * @private
             * @param {Object} regexp The regexp to clone.
             * @returns {Object} Returns the cloned regexp.
             */
            function cloneRegExp(regexp) {
                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                result.lastIndex = regexp.lastIndex;
                return result;
            }
            /**
             * Creates a clone of the `symbol` object.
             *
             * @private
             * @param {Object} symbol The symbol object to clone.
             * @returns {Object} Returns the cloned symbol object.
             */
            function cloneSymbol(symbol) {
                return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
            }
            /**
             * Creates a clone of `typedArray`.
             *
             * @private
             * @param {Object} typedArray The typed array to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the cloned typed array.
             */
            function cloneTypedArray(typedArray, isDeep) {
                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
            }
            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
                if (value !== other) {
                    var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                    var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                        (valIsNull && othIsDefined && othIsReflexive) ||
                        (!valIsDefined && othIsReflexive) ||
                        !valIsReflexive) {
                        return 1;
                    }
                    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                        (othIsNull && valIsDefined && valIsReflexive) ||
                        (!othIsDefined && valIsReflexive) ||
                        !othIsReflexive) {
                        return -1;
                    }
                }
                return 0;
            }
            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
                var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
                while (++index < length) {
                    var result = compareAscending(objCriteria[index], othCriteria[index]);
                    if (result) {
                        if (index >= ordersLength) {
                            return result;
                        }
                        var order = orders[index];
                        return result * (order == 'desc' ? -1 : 1);
                    }
                }
                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                // that causes it, under certain circumstances, to provide the same value for
                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                // for more details.
                //
                // This also ensures a stable sort in V8 and other engines.
                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                return object.index - other.index;
            }
            /**
             * Creates an array that is the composition of partially applied arguments,
             * placeholders, and provided arguments into a single array of arguments.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to prepend to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgs(args, partials, holders, isCurried) {
                var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
                while (++leftIndex < leftLength) {
                    result[leftIndex] = partials[leftIndex];
                }
                while (++argsIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                        result[holders[argsIndex]] = args[argsIndex];
                    }
                }
                while (rangeLength--) {
                    result[leftIndex++] = args[argsIndex++];
                }
                return result;
            }
            /**
             * This function is like `composeArgs` except that the arguments composition
             * is tailored for `_.partialRight`.
             *
             * @private
             * @param {Array} args The provided arguments.
             * @param {Array} partials The arguments to append to those provided.
             * @param {Array} holders The `partials` placeholder indexes.
             * @params {boolean} [isCurried] Specify composing for a curried function.
             * @returns {Array} Returns the new array of composed arguments.
             */
            function composeArgsRight(args, partials, holders, isCurried) {
                var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
                while (++argsIndex < rangeLength) {
                    result[argsIndex] = args[argsIndex];
                }
                var offset = argsIndex;
                while (++rightIndex < rightLength) {
                    result[offset + rightIndex] = partials[rightIndex];
                }
                while (++holdersIndex < holdersLength) {
                    if (isUncurried || argsIndex < argsLength) {
                        result[offset + holders[holdersIndex]] = args[argsIndex++];
                    }
                }
                return result;
            }
            /**
             * Copies the values of `source` to `array`.
             *
             * @private
             * @param {Array} source The array to copy values from.
             * @param {Array} [array=[]] The array to copy values to.
             * @returns {Array} Returns `array`.
             */
            function copyArray(source, array) {
                var index = -1, length = source.length;
                array || (array = Array(length));
                while (++index < length) {
                    array[index] = source[index];
                }
                return array;
            }
            /**
             * Copies properties of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy properties from.
             * @param {Array} props The property identifiers to copy.
             * @param {Object} [object={}] The object to copy properties to.
             * @param {Function} [customizer] The function to customize copied values.
             * @returns {Object} Returns `object`.
             */
            function copyObject(source, props, object, customizer) {
                var isNew = !object;
                object || (object = {});
                var index = -1, length = props.length;
                while (++index < length) {
                    var key = props[index];
                    var newValue = customizer
                        ? customizer(object[key], source[key], key, object, source)
                        : undefined$1;
                    if (newValue === undefined$1) {
                        newValue = source[key];
                    }
                    if (isNew) {
                        baseAssignValue(object, key, newValue);
                    }
                    else {
                        assignValue(object, key, newValue);
                    }
                }
                return object;
            }
            /**
             * Copies own symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbols(source, object) {
                return copyObject(source, getSymbols(source), object);
            }
            /**
             * Copies own and inherited symbols of `source` to `object`.
             *
             * @private
             * @param {Object} source The object to copy symbols from.
             * @param {Object} [object={}] The object to copy symbols to.
             * @returns {Object} Returns `object`.
             */
            function copySymbolsIn(source, object) {
                return copyObject(source, getSymbolsIn(source), object);
            }
            /**
             * Creates a function like `_.groupBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} [initializer] The accumulator object initializer.
             * @returns {Function} Returns the new aggregator function.
             */
            function createAggregator(setter, initializer) {
                return function (collection, iteratee) {
                    var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                    return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                };
            }
            /**
             * Creates a function like `_.assign`.
             *
             * @private
             * @param {Function} assigner The function to assign values.
             * @returns {Function} Returns the new assigner function.
             */
            function createAssigner(assigner) {
                return baseRest(function (object, sources) {
                    var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
                    customizer = (assigner.length > 3 && typeof customizer == 'function')
                        ? (length--, customizer)
                        : undefined$1;
                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                        customizer = length < 3 ? undefined$1 : customizer;
                        length = 1;
                    }
                    object = Object(object);
                    while (++index < length) {
                        var source = sources[index];
                        if (source) {
                            assigner(object, source, index, customizer);
                        }
                    }
                    return object;
                });
            }
            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
                return function (collection, iteratee) {
                    if (collection == null) {
                        return collection;
                    }
                    if (!isArrayLike(collection)) {
                        return eachFunc(collection, iteratee);
                    }
                    var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                    while ((fromRight ? index-- : ++index < length)) {
                        if (iteratee(iterable[index], index, iterable) === false) {
                            break;
                        }
                    }
                    return collection;
                };
            }
            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
                return function (object, iteratee, keysFunc) {
                    var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                    while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee(iterable[key], key, iterable) === false) {
                            break;
                        }
                    }
                    return object;
                };
            }
            /**
             * Creates a function that wraps `func` to invoke it with the optional `this`
             * binding of `thisArg`.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createBind(func, bitmask, thisArg) {
                var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                function wrapper() {
                    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    return fn.apply(isBind ? thisArg : this, arguments);
                }
                return wrapper;
            }
            /**
             * Creates a function like `_.lowerFirst`.
             *
             * @private
             * @param {string} methodName The name of the `String` case method to use.
             * @returns {Function} Returns the new case function.
             */
            function createCaseFirst(methodName) {
                return function (string) {
                    string = toString(string);
                    var strSymbols = hasUnicode(string)
                        ? stringToArray(string)
                        : undefined$1;
                    var chr = strSymbols
                        ? strSymbols[0]
                        : string.charAt(0);
                    var trailing = strSymbols
                        ? castSlice(strSymbols, 1).join('')
                        : string.slice(1);
                    return chr[methodName]() + trailing;
                };
            }
            /**
             * Creates a function like `_.camelCase`.
             *
             * @private
             * @param {Function} callback The function to combine each word.
             * @returns {Function} Returns the new compounder function.
             */
            function createCompounder(callback) {
                return function (string) {
                    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                };
            }
            /**
             * Creates a function that produces an instance of `Ctor` regardless of
             * whether it was invoked as part of a `new` expression or by `call` or `apply`.
             *
             * @private
             * @param {Function} Ctor The constructor to wrap.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCtor(Ctor) {
                return function () {
                    // Use a `switch` statement to work with class constructors. See
                    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                    // for more details.
                    var args = arguments;
                    switch (args.length) {
                        case 0: return new Ctor;
                        case 1: return new Ctor(args[0]);
                        case 2: return new Ctor(args[0], args[1]);
                        case 3: return new Ctor(args[0], args[1], args[2]);
                        case 4: return new Ctor(args[0], args[1], args[2], args[3]);
                        case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                        case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                        case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                    }
                    var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                    // Mimic the constructor's `return` behavior.
                    // See https://es5.github.io/#x13.2.2 for more details.
                    return isObject(result) ? result : thisBinding;
                };
            }
            /**
             * Creates a function that wraps `func` to enable currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {number} arity The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createCurry(func, bitmask, arity) {
                var Ctor = createCtor(func);
                function wrapper() {
                    var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                    while (index--) {
                        args[index] = arguments[index];
                    }
                    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                        ? []
                        : replaceHolders(args, placeholder);
                    length -= holders.length;
                    if (length < arity) {
                        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);
                    }
                    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    return apply(fn, this, args);
                }
                return wrapper;
            }
            /**
             * Creates a `_.find` or `_.findLast` function.
             *
             * @private
             * @param {Function} findIndexFunc The function to find the collection index.
             * @returns {Function} Returns the new find function.
             */
            function createFind(findIndexFunc) {
                return function (collection, predicate, fromIndex) {
                    var iterable = Object(collection);
                    if (!isArrayLike(collection)) {
                        var iteratee = getIteratee(predicate, 3);
                        collection = keys(collection);
                        predicate = function (key) { return iteratee(iterable[key], key, iterable); };
                    }
                    var index = findIndexFunc(collection, predicate, fromIndex);
                    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
                };
            }
            /**
             * Creates a `_.flow` or `_.flowRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new flow function.
             */
            function createFlow(fromRight) {
                return flatRest(function (funcs) {
                    var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                    if (fromRight) {
                        funcs.reverse();
                    }
                    while (index--) {
                        var func = funcs[index];
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                            var wrapper = new LodashWrapper([], true);
                        }
                    }
                    index = wrapper ? index : length;
                    while (++index < length) {
                        func = funcs[index];
                        var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined$1;
                        if (data && isLaziable(data[0]) &&
                            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                            !data[4].length && data[9] == 1) {
                            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                        }
                        else {
                            wrapper = (func.length == 1 && isLaziable(func))
                                ? wrapper[funcName]()
                                : wrapper.thru(func);
                        }
                    }
                    return function () {
                        var args = arguments, value = args[0];
                        if (wrapper && args.length == 1 && isArray(value)) {
                            return wrapper.plant(value).value();
                        }
                        var index = 0, result = length ? funcs[index].apply(this, args) : value;
                        while (++index < length) {
                            result = funcs[index].call(this, result);
                        }
                        return result;
                    };
                });
            }
            /**
             * Creates a function that wraps `func` to invoke it with optional `this`
             * binding of `thisArg`, partial application, and currying.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [partialsRight] The arguments to append to those provided
             *  to the new function.
             * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
                function wrapper() {
                    var length = arguments.length, args = Array(length), index = length;
                    while (index--) {
                        args[index] = arguments[index];
                    }
                    if (isCurried) {
                        var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                    }
                    if (partials) {
                        args = composeArgs(args, partials, holders, isCurried);
                    }
                    if (partialsRight) {
                        args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                    }
                    length -= holdersCount;
                    if (isCurried && length < arity) {
                        var newHolders = replaceHolders(args, placeholder);
                        return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                    }
                    var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                    length = args.length;
                    if (argPos) {
                        args = reorder(args, argPos);
                    }
                    else if (isFlip && length > 1) {
                        args.reverse();
                    }
                    if (isAry && ary < length) {
                        args.length = ary;
                    }
                    if (this && this !== root && this instanceof wrapper) {
                        fn = Ctor || createCtor(fn);
                    }
                    return fn.apply(thisBinding, args);
                }
                return wrapper;
            }
            /**
             * Creates a function like `_.invertBy`.
             *
             * @private
             * @param {Function} setter The function to set accumulator values.
             * @param {Function} toIteratee The function to resolve iteratees.
             * @returns {Function} Returns the new inverter function.
             */
            function createInverter(setter, toIteratee) {
                return function (object, iteratee) {
                    return baseInverter(object, setter, toIteratee(iteratee), {});
                };
            }
            /**
             * Creates a function that performs a mathematical operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @param {number} [defaultValue] The value used for `undefined` arguments.
             * @returns {Function} Returns the new mathematical operation function.
             */
            function createMathOperation(operator, defaultValue) {
                return function (value, other) {
                    var result;
                    if (value === undefined$1 && other === undefined$1) {
                        return defaultValue;
                    }
                    if (value !== undefined$1) {
                        result = value;
                    }
                    if (other !== undefined$1) {
                        if (result === undefined$1) {
                            return other;
                        }
                        if (typeof value == 'string' || typeof other == 'string') {
                            value = baseToString(value);
                            other = baseToString(other);
                        }
                        else {
                            value = baseToNumber(value);
                            other = baseToNumber(other);
                        }
                        result = operator(value, other);
                    }
                    return result;
                };
            }
            /**
             * Creates a function like `_.over`.
             *
             * @private
             * @param {Function} arrayFunc The function to iterate over iteratees.
             * @returns {Function} Returns the new over function.
             */
            function createOver(arrayFunc) {
                return flatRest(function (iteratees) {
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    return baseRest(function (args) {
                        var thisArg = this;
                        return arrayFunc(iteratees, function (iteratee) {
                            return apply(iteratee, thisArg, args);
                        });
                    });
                });
            }
            /**
             * Creates the padding for `string` based on `length`. The `chars` string
             * is truncated if the number of characters exceeds `length`.
             *
             * @private
             * @param {number} length The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padding for `string`.
             */
            function createPadding(length, chars) {
                chars = chars === undefined$1 ? ' ' : baseToString(chars);
                var charsLength = chars.length;
                if (charsLength < 2) {
                    return charsLength ? baseRepeat(chars, length) : chars;
                }
                var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                return hasUnicode(chars)
                    ? castSlice(stringToArray(result), 0, length).join('')
                    : result.slice(0, length);
            }
            /**
             * Creates a function that wraps `func` to invoke it with the `this` binding
             * of `thisArg` and `partials` prepended to the arguments it receives.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} partials The arguments to prepend to those provided to
             *  the new function.
             * @returns {Function} Returns the new wrapped function.
             */
            function createPartial(func, bitmask, thisArg, partials) {
                var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                function wrapper() {
                    var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                    while (++leftIndex < leftLength) {
                        args[leftIndex] = partials[leftIndex];
                    }
                    while (argsLength--) {
                        args[leftIndex++] = arguments[++argsIndex];
                    }
                    return apply(fn, isBind ? thisArg : this, args);
                }
                return wrapper;
            }
            /**
             * Creates a `_.range` or `_.rangeRight` function.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new range function.
             */
            function createRange(fromRight) {
                return function (start, end, step) {
                    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                        end = step = undefined$1;
                    }
                    // Ensure the sign of `-0` is preserved.
                    start = toFinite(start);
                    if (end === undefined$1) {
                        end = start;
                        start = 0;
                    }
                    else {
                        end = toFinite(end);
                    }
                    step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
                    return baseRange(start, end, step, fromRight);
                };
            }
            /**
             * Creates a function that performs a relational operation on two values.
             *
             * @private
             * @param {Function} operator The function to perform the operation.
             * @returns {Function} Returns the new relational operation function.
             */
            function createRelationalOperation(operator) {
                return function (value, other) {
                    if (!(typeof value == 'string' && typeof other == 'string')) {
                        value = toNumber(value);
                        other = toNumber(other);
                    }
                    return operator(value, other);
                };
            }
            /**
             * Creates a function that wraps `func` to continue currying.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @param {Function} wrapFunc The function to create the `func` wrapper.
             * @param {*} placeholder The placeholder value.
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to prepend to those provided to
             *  the new function.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
                bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
                if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                }
                var newData = [
                    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                    newHoldersRight, argPos, ary, arity
                ];
                var result = wrapFunc.apply(undefined$1, newData);
                if (isLaziable(func)) {
                    setData(result, newData);
                }
                result.placeholder = placeholder;
                return setWrapToString(result, func, bitmask);
            }
            /**
             * Creates a function like `_.round`.
             *
             * @private
             * @param {string} methodName The name of the `Math` method to use when rounding.
             * @returns {Function} Returns the new round function.
             */
            function createRound(methodName) {
                var func = Math[methodName];
                return function (number, precision) {
                    number = toNumber(number);
                    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                    if (precision && nativeIsFinite(number)) {
                        // Shift with exponential notation to avoid floating-point issues.
                        // See [MDN](https://mdn.io/round#Examples) for more details.
                        var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                        pair = (toString(value) + 'e').split('e');
                        return +(pair[0] + 'e' + (+pair[1] - precision));
                    }
                    return func(number);
                };
            }
            /**
             * Creates a set object of `values`.
             *
             * @private
             * @param {Array} values The values to add to the set.
             * @returns {Object} Returns the new set.
             */
            var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
                return new Set(values);
            };
            /**
             * Creates a `_.toPairs` or `_.toPairsIn` function.
             *
             * @private
             * @param {Function} keysFunc The function to get the keys of a given object.
             * @returns {Function} Returns the new pairs function.
             */
            function createToPairs(keysFunc) {
                return function (object) {
                    var tag = getTag(object);
                    if (tag == mapTag) {
                        return mapToArray(object);
                    }
                    if (tag == setTag) {
                        return setToPairs(object);
                    }
                    return baseToPairs(object, keysFunc(object));
                };
            }
            /**
             * Creates a function that either curries or invokes `func` with optional
             * `this` binding and partially applied arguments.
             *
             * @private
             * @param {Function|string} func The function or method name to wrap.
             * @param {number} bitmask The bitmask flags.
             *    1 - `_.bind`
             *    2 - `_.bindKey`
             *    4 - `_.curry` or `_.curryRight` of a bound function
             *    8 - `_.curry`
             *   16 - `_.curryRight`
             *   32 - `_.partial`
             *   64 - `_.partialRight`
             *  128 - `_.rearg`
             *  256 - `_.ary`
             *  512 - `_.flip`
             * @param {*} [thisArg] The `this` binding of `func`.
             * @param {Array} [partials] The arguments to be partially applied.
             * @param {Array} [holders] The `partials` placeholder indexes.
             * @param {Array} [argPos] The argument positions of the new function.
             * @param {number} [ary] The arity cap of `func`.
             * @param {number} [arity] The arity of `func`.
             * @returns {Function} Returns the new wrapped function.
             */
            function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                if (!isBindKey && typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var length = partials ? partials.length : 0;
                if (!length) {
                    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                    partials = holders = undefined$1;
                }
                ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
                arity = arity === undefined$1 ? arity : toInteger(arity);
                length -= holders ? holders.length : 0;
                if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                    var partialsRight = partials, holdersRight = holders;
                    partials = holders = undefined$1;
                }
                var data = isBindKey ? undefined$1 : getData(func);
                var newData = [
                    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                    argPos, ary, arity
                ];
                if (data) {
                    mergeData(newData, data);
                }
                func = newData[0];
                bitmask = newData[1];
                thisArg = newData[2];
                partials = newData[3];
                holders = newData[4];
                arity = newData[9] = newData[9] === undefined$1
                    ? (isBindKey ? 0 : func.length)
                    : nativeMax(newData[9] - length, 0);
                if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                }
                if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                    var result = createBind(func, bitmask, thisArg);
                }
                else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                    result = createCurry(func, bitmask, arity);
                }
                else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                    result = createPartial(func, bitmask, thisArg, partials);
                }
                else {
                    result = createHybrid.apply(undefined$1, newData);
                }
                var setter = data ? baseSetData : setData;
                return setWrapToString(setter(result, newData), func, bitmask);
            }
            /**
             * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
             * of source objects to the destination object for all destination properties
             * that resolve to `undefined`.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to assign.
             * @param {Object} object The parent object of `objValue`.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsAssignIn(objValue, srcValue, key, object) {
                if (objValue === undefined$1 ||
                    (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                    return srcValue;
                }
                return objValue;
            }
            /**
             * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
             * objects into destination objects that are passed thru.
             *
             * @private
             * @param {*} objValue The destination value.
             * @param {*} srcValue The source value.
             * @param {string} key The key of the property to merge.
             * @param {Object} object The parent object of `objValue`.
             * @param {Object} source The parent object of `srcValue`.
             * @param {Object} [stack] Tracks traversed source values and their merged
             *  counterparts.
             * @returns {*} Returns the value to assign.
             */
            function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                if (isObject(objValue) && isObject(srcValue)) {
                    // Recursively merge objects and arrays (susceptible to call stack limits).
                    stack.set(srcValue, objValue);
                    baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
                    stack['delete'](srcValue);
                }
                return objValue;
            }
            /**
             * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
             * objects.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {string} key The key of the property to inspect.
             * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
             */
            function customOmitClone(value) {
                return isPlainObject(value) ? undefined$1 : value;
            }
            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                }
                // Check that cyclic values are equal.
                var arrStacked = stack.get(array);
                var othStacked = stack.get(other);
                if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                }
                var index = -1, result = true, seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;
                stack.set(array, other);
                stack.set(other, array);
                // Ignore non-index properties.
                while (++index < arrLength) {
                    var arrValue = array[index], othValue = other[index];
                    if (customizer) {
                        var compared = isPartial
                            ? customizer(othValue, arrValue, index, other, array, stack)
                            : customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined$1) {
                        if (compared) {
                            continue;
                        }
                        result = false;
                        break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                        if (!arraySome(other, function (othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) &&
                                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                return seen.push(othIndex);
                            }
                        })) {
                            result = false;
                            break;
                        }
                    }
                    else if (!(arrValue === othValue ||
                        equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                        result = false;
                        break;
                    }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
            }
            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                switch (tag) {
                    case dataViewTag:
                        if ((object.byteLength != other.byteLength) ||
                            (object.byteOffset != other.byteOffset)) {
                            return false;
                        }
                        object = object.buffer;
                        other = other.buffer;
                    case arrayBufferTag:
                        if ((object.byteLength != other.byteLength) ||
                            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                            return false;
                        }
                        return true;
                    case boolTag:
                    case dateTag:
                    case numberTag:
                        // Coerce booleans to `1` or `0` and dates to milliseconds.
                        // Invalid dates are coerced to `NaN`.
                        return eq(+object, +other);
                    case errorTag:
                        return object.name == other.name && object.message == other.message;
                    case regexpTag:
                    case stringTag:
                        // Coerce regexes to strings and treat strings, primitives and objects,
                        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                        // for more details.
                        return object == (other + '');
                    case mapTag:
                        var convert = mapToArray;
                    case setTag:
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                        convert || (convert = setToArray);
                        if (object.size != other.size && !isPartial) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked) {
                            return stacked == other;
                        }
                        bitmask |= COMPARE_UNORDERED_FLAG;
                        // Recursively compare objects (susceptible to call stack limits).
                        stack.set(object, other);
                        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                        stack['delete'](object);
                        return result;
                    case symbolTag:
                        if (symbolValueOf) {
                            return symbolValueOf.call(object) == symbolValueOf.call(other);
                        }
                }
                return false;
            }
            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
                if (objLength != othLength && !isPartial) {
                    return false;
                }
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                        return false;
                    }
                }
                // Check that cyclic values are equal.
                var objStacked = stack.get(object);
                var othStacked = stack.get(other);
                if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);
                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key], othValue = other[key];
                    if (customizer) {
                        var compared = isPartial
                            ? customizer(othValue, objValue, key, other, object, stack)
                            : customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined$1
                        ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                        : compared)) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor, othCtor = other.constructor;
                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor &&
                        ('constructor' in object && 'constructor' in other) &&
                        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                        result = false;
                    }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
            }
            /**
             * A specialized version of `baseRest` which flattens the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @returns {Function} Returns the new function.
             */
            function flatRest(func) {
                return setToString(overRest(func, undefined$1, flatten), func + '');
            }
            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
            }
            /**
             * Creates an array of own and inherited enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeysIn(object) {
                return baseGetAllKeys(object, keysIn, getSymbolsIn);
            }
            /**
             * Gets metadata for `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {*} Returns the metadata for `func`.
             */
            var getData = !metaMap ? noop : function (func) {
                return metaMap.get(func);
            };
            /**
             * Gets the name of `func`.
             *
             * @private
             * @param {Function} func The function to query.
             * @returns {string} Returns the function name.
             */
            function getFuncName(func) {
                var result = (func.name + ''), array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
                while (length--) {
                    var data = array[length], otherFunc = data.func;
                    if (otherFunc == null || otherFunc == func) {
                        return data.name;
                    }
                }
                return result;
            }
            /**
             * Gets the argument placeholder value for `func`.
             *
             * @private
             * @param {Function} func The function to inspect.
             * @returns {*} Returns the placeholder value.
             */
            function getHolder(func) {
                var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                return object.placeholder;
            }
            /**
             * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
             * this function returns the custom method, otherwise it returns `baseIteratee`.
             * If arguments are provided, the chosen function is invoked with them and
             * its result is returned.
             *
             * @private
             * @param {*} [value] The value to convert to an iteratee.
             * @param {number} [arity] The arity of the created iteratee.
             * @returns {Function} Returns the chosen function or its result.
             */
            function getIteratee() {
                var result = lodash.iteratee || iteratee;
                result = result === iteratee ? baseIteratee : result;
                return arguments.length ? result(arguments[0], arguments[1]) : result;
            }
            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key)
                    ? data[typeof key == 'string' ? 'string' : 'hash']
                    : data.map;
            }
            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
                var result = keys(object), length = result.length;
                while (length--) {
                    var key = result[length], value = object[key];
                    result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
            }
            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined$1;
            }
            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
                try {
                    value[symToStringTag] = undefined$1;
                    var unmasked = true;
                }
                catch (e) { }
                var result = nativeObjectToString.call(value);
                if (unmasked) {
                    if (isOwn) {
                        value[symToStringTag] = tag;
                    }
                    else {
                        delete value[symToStringTag];
                    }
                }
                return result;
            }
            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
                if (object == null) {
                    return [];
                }
                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function (symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                });
            };
            /**
             * Creates an array of the own and inherited enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
                var result = [];
                while (object) {
                    arrayPush(result, getSymbols(object));
                    object = getPrototype(object);
                }
                return result;
            };
            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;
            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                (Map && getTag(new Map) != mapTag) ||
                (Promise && getTag(Promise.resolve()) != promiseTag) ||
                (Set && getTag(new Set) != setTag) ||
                (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                getTag = function (value) {
                    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : '';
                    if (ctorString) {
                        switch (ctorString) {
                            case dataViewCtorString: return dataViewTag;
                            case mapCtorString: return mapTag;
                            case promiseCtorString: return promiseTag;
                            case setCtorString: return setTag;
                            case weakMapCtorString: return weakMapTag;
                        }
                    }
                    return result;
                };
            }
            /**
             * Gets the view, applying any `transforms` to the `start` and `end` positions.
             *
             * @private
             * @param {number} start The start of the view.
             * @param {number} end The end of the view.
             * @param {Array} transforms The transformations to apply to the view.
             * @returns {Object} Returns an object containing the `start` and `end`
             *  positions of the view.
             */
            function getView(start, end, transforms) {
                var index = -1, length = transforms.length;
                while (++index < length) {
                    var data = transforms[index], size = data.size;
                    switch (data.type) {
                        case 'drop':
                            start += size;
                            break;
                        case 'dropRight':
                            end -= size;
                            break;
                        case 'take':
                            end = nativeMin(end, start + size);
                            break;
                        case 'takeRight':
                            start = nativeMax(start, end - size);
                            break;
                    }
                }
                return { 'start': start, 'end': end };
            }
            /**
             * Extracts wrapper details from the `source` body comment.
             *
             * @private
             * @param {string} source The source to inspect.
             * @returns {Array} Returns the wrapper details.
             */
            function getWrapDetails(source) {
                var match = source.match(reWrapDetails);
                return match ? match[1].split(reSplitDetails) : [];
            }
            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
                path = castPath(path, object);
                var index = -1, length = path.length, result = false;
                while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                        break;
                    }
                    object = object[key];
                }
                if (result || ++index != length) {
                    return result;
                }
                length = object == null ? 0 : object.length;
                return !!length && isLength(length) && isIndex(key, length) &&
                    (isArray(object) || isArguments(object));
            }
            /**
             * Initializes an array clone.
             *
             * @private
             * @param {Array} array The array to clone.
             * @returns {Array} Returns the initialized clone.
             */
            function initCloneArray(array) {
                var length = array.length, result = new array.constructor(length);
                // Add properties assigned by `RegExp#exec`.
                if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                    result.index = array.index;
                    result.input = array.input;
                }
                return result;
            }
            /**
             * Initializes an object clone.
             *
             * @private
             * @param {Object} object The object to clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneObject(object) {
                return (typeof object.constructor == 'function' && !isPrototype(object))
                    ? baseCreate(getPrototype(object))
                    : {};
            }
            /**
             * Initializes an object clone based on its `toStringTag`.
             *
             * **Note:** This function only supports cloning values with tags of
             * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
             *
             * @private
             * @param {Object} object The object to clone.
             * @param {string} tag The `toStringTag` of the object to clone.
             * @param {boolean} [isDeep] Specify a deep clone.
             * @returns {Object} Returns the initialized clone.
             */
            function initCloneByTag(object, tag, isDeep) {
                var Ctor = object.constructor;
                switch (tag) {
                    case arrayBufferTag:
                        return cloneArrayBuffer(object);
                    case boolTag:
                    case dateTag:
                        return new Ctor(+object);
                    case dataViewTag:
                        return cloneDataView(object, isDeep);
                    case float32Tag:
                    case float64Tag:
                    case int8Tag:
                    case int16Tag:
                    case int32Tag:
                    case uint8Tag:
                    case uint8ClampedTag:
                    case uint16Tag:
                    case uint32Tag:
                        return cloneTypedArray(object, isDeep);
                    case mapTag:
                        return new Ctor;
                    case numberTag:
                    case stringTag:
                        return new Ctor(object);
                    case regexpTag:
                        return cloneRegExp(object);
                    case setTag:
                        return new Ctor;
                    case symbolTag:
                        return cloneSymbol(object);
                }
            }
            /**
             * Inserts wrapper `details` in a comment at the top of the `source` body.
             *
             * @private
             * @param {string} source The source to modify.
             * @returns {Array} details The details to insert.
             * @returns {string} Returns the modified source.
             */
            function insertWrapDetails(source, details) {
                var length = details.length;
                if (!length) {
                    return source;
                }
                var lastIndex = length - 1;
                details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                details = details.join(length > 2 ? ', ' : ' ');
                return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
            }
            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
                return isArray(value) || isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol]);
            }
            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
                var type = typeof value;
                length = length == null ? MAX_SAFE_INTEGER : length;
                return !!length &&
                    (type == 'number' ||
                        (type != 'symbol' && reIsUint.test(value))) &&
                    (value > -1 && value % 1 == 0 && value < length);
            }
            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
                if (!isObject(object)) {
                    return false;
                }
                var type = typeof index;
                if (type == 'number'
                    ? (isArrayLike(object) && isIndex(index, object.length))
                    : (type == 'string' && index in object)) {
                    return eq(object[index], value);
                }
                return false;
            }
            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
                if (isArray(value)) {
                    return false;
                }
                var type = typeof value;
                if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                    value == null || isSymbol(value)) {
                    return true;
                }
                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object));
            }
            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
                var type = typeof value;
                return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                    ? (value !== '__proto__')
                    : (value === null);
            }
            /**
             * Checks if `func` has a lazy counterpart.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
             *  else `false`.
             */
            function isLaziable(func) {
                var funcName = getFuncName(func), other = lodash[funcName];
                if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                    return false;
                }
                if (func === other) {
                    return true;
                }
                var data = getData(other);
                return !!data && func === data[0];
            }
            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
                return !!maskSrcKey && (maskSrcKey in func);
            }
            /**
             * Checks if `func` is capable of being masked.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
             */
            var isMaskable = coreJsData ? isFunction : stubFalse;
            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
                var Ctor = value && value.constructor, proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
                return value === proto;
            }
            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }
            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
                return function (object) {
                    if (object == null) {
                        return false;
                    }
                    return object[key] === srcValue &&
                        (srcValue !== undefined$1 || (key in Object(object)));
                };
            }
            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
                var result = memoize(func, function (key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                    }
                    return key;
                });
                var cache = result.cache;
                return result;
            }
            /**
             * Merges the function metadata of `source` into `data`.
             *
             * Merging metadata reduces the number of wrappers used to invoke a function.
             * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
             * may be applied regardless of execution order. Methods like `_.ary` and
             * `_.rearg` modify function arguments, making the order in which they are
             * executed important, preventing the merging of metadata. However, we make
             * an exception for a safe combined case where curried functions have `_.ary`
             * and or `_.rearg` applied.
             *
             * @private
             * @param {Array} data The destination metadata.
             * @param {Array} source The source metadata.
             * @returns {Array} Returns `data`.
             */
            function mergeData(data, source) {
                var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
                var isCombo = ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
                // Exit early if metadata can't be merged.
                if (!(isCommon || isCombo)) {
                    return data;
                }
                // Use source `thisArg` if available.
                if (srcBitmask & WRAP_BIND_FLAG) {
                    data[2] = source[2];
                    // Set when currying a bound function.
                    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                }
                // Compose partial arguments.
                var value = source[3];
                if (value) {
                    var partials = data[3];
                    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                }
                // Compose partial right arguments.
                value = source[5];
                if (value) {
                    partials = data[5];
                    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                }
                // Use source `argPos` if available.
                value = source[7];
                if (value) {
                    data[7] = value;
                }
                // Use source `ary` if it's smaller.
                if (srcBitmask & WRAP_ARY_FLAG) {
                    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                }
                // Use source `arity` if one is not provided.
                if (data[9] == null) {
                    data[9] = source[9];
                }
                // Use source `func` and merge bitmasks.
                data[0] = source[0];
                data[1] = newBitmask;
                return data;
            }
            /**
             * This function is like
             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * except that it includes inherited enumerable properties.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function nativeKeysIn(object) {
                var result = [];
                if (object != null) {
                    for (var key in Object(object)) {
                        result.push(key);
                    }
                }
                return result;
            }
            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }
            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
                start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
                return function () {
                    var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                    while (++index < length) {
                        array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                        otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                };
            }
            /**
             * Gets the parent value at `path` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array} path The path to get the parent value of.
             * @returns {*} Returns the parent value.
             */
            function parent(object, path) {
                return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
            }
            /**
             * Reorder `array` according to the specified indexes where the element at
             * the first index is assigned as the first element, the element at
             * the second index is assigned as the second element, and so on.
             *
             * @private
             * @param {Array} array The array to reorder.
             * @param {Array} indexes The arranged array indexes.
             * @returns {Array} Returns `array`.
             */
            function reorder(array, indexes) {
                var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
                while (length--) {
                    var index = indexes[length];
                    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
                }
                return array;
            }
            /**
             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function safeGet(object, key) {
                if (key === 'constructor' && typeof object[key] === 'function') {
                    return;
                }
                if (key == '__proto__') {
                    return;
                }
                return object[key];
            }
            /**
             * Sets metadata for `func`.
             *
             * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
             * period of time, it will trip its breaker and transition to an identity
             * function to avoid garbage collection pauses in V8. See
             * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
             * for more details.
             *
             * @private
             * @param {Function} func The function to associate metadata with.
             * @param {*} data The metadata.
             * @returns {Function} Returns `func`.
             */
            var setData = shortOut(baseSetData);
            /**
             * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
             *
             * @private
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @returns {number|Object} Returns the timer id or timeout object.
             */
            var setTimeout = ctxSetTimeout || function (func, wait) {
                return root.setTimeout(func, wait);
            };
            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);
            /**
             * Sets the `toString` method of `wrapper` to mimic the source of `reference`
             * with wrapper details in a comment at the top of the source body.
             *
             * @private
             * @param {Function} wrapper The function to modify.
             * @param {Function} reference The reference function.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Function} Returns `wrapper`.
             */
            function setWrapToString(wrapper, reference, bitmask) {
                var source = (reference + '');
                return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
            }
            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
                var count = 0, lastCalled = 0;
                return function () {
                    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                    lastCalled = stamp;
                    if (remaining > 0) {
                        if (++count >= HOT_COUNT) {
                            return arguments[0];
                        }
                    }
                    else {
                        count = 0;
                    }
                    return func.apply(undefined$1, arguments);
                };
            }
            /**
             * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
             *
             * @private
             * @param {Array} array The array to shuffle.
             * @param {number} [size=array.length] The size of `array`.
             * @returns {Array} Returns `array`.
             */
            function shuffleSelf(array, size) {
                var index = -1, length = array.length, lastIndex = length - 1;
                size = size === undefined$1 ? length : size;
                while (++index < size) {
                    var rand = baseRandom(index, lastIndex), value = array[rand];
                    array[rand] = array[index];
                    array[index] = value;
                }
                array.length = size;
                return array;
            }
            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function (string) {
                var result = [];
                if (string.charCodeAt(0) === 46 /* . */) {
                    result.push('');
                }
                string.replace(rePropName, function (match, number, quote, subString) {
                    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                });
                return result;
            });
            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }
            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
                if (func != null) {
                    try {
                        return funcToString.call(func);
                    }
                    catch (e) { }
                    try {
                        return (func + '');
                    }
                    catch (e) { }
                }
                return '';
            }
            /**
             * Updates wrapper `details` based on `bitmask` flags.
             *
             * @private
             * @returns {Array} details The details to modify.
             * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
             * @returns {Array} Returns `details`.
             */
            function updateWrapDetails(details, bitmask) {
                arrayEach(wrapFlags, function (pair) {
                    var value = '_.' + pair[0];
                    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                        details.push(value);
                    }
                });
                return details.sort();
            }
            /**
             * Creates a clone of `wrapper`.
             *
             * @private
             * @param {Object} wrapper The wrapper to clone.
             * @returns {Object} Returns the cloned wrapper.
             */
            function wrapperClone(wrapper) {
                if (wrapper instanceof LazyWrapper) {
                    return wrapper.clone();
                }
                var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                result.__actions__ = copyArray(wrapper.__actions__);
                result.__index__ = wrapper.__index__;
                result.__values__ = wrapper.__values__;
                return result;
            }
            /*------------------------------------------------------------------------*/
            /**
             * Creates an array of elements split into groups the length of `size`.
             * If `array` can't be split evenly, the final chunk will be the remaining
             * elements.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to process.
             * @param {number} [size=1] The length of each chunk
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the new array of chunks.
             * @example
             *
             * _.chunk(['a', 'b', 'c', 'd'], 2);
             * // => [['a', 'b'], ['c', 'd']]
             *
             * _.chunk(['a', 'b', 'c', 'd'], 3);
             * // => [['a', 'b', 'c'], ['d']]
             */
            function chunk(array, size, guard) {
                if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
                    size = 1;
                }
                else {
                    size = nativeMax(toInteger(size), 0);
                }
                var length = array == null ? 0 : array.length;
                if (!length || size < 1) {
                    return [];
                }
                var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
                while (index < length) {
                    result[resIndex++] = baseSlice(array, index, (index += size));
                }
                return result;
            }
            /**
             * Creates an array with all falsey values removed. The values `false`, `null`,
             * `0`, `""`, `undefined`, and `NaN` are falsey.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to compact.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.compact([0, 1, false, 2, '', 3]);
             * // => [1, 2, 3]
             */
            function compact(array) {
                var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
                while (++index < length) {
                    var value = array[index];
                    if (value) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }
            /**
             * Creates a new array concatenating `array` with any additional arrays
             * and/or values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to concatenate.
             * @param {...*} [values] The values to concatenate.
             * @returns {Array} Returns the new concatenated array.
             * @example
             *
             * var array = [1];
             * var other = _.concat(array, 2, [3], [[4]]);
             *
             * console.log(other);
             * // => [1, 2, 3, [4]]
             *
             * console.log(array);
             * // => [1]
             */
            function concat() {
                var length = arguments.length;
                if (!length) {
                    return [];
                }
                var args = Array(length - 1), array = arguments[0], index = length;
                while (index--) {
                    args[index - 1] = arguments[index];
                }
                return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
            }
            /**
             * Creates an array of `array` values not included in the other given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * **Note:** Unlike `_.pullAll`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.without, _.xor
             * @example
             *
             * _.difference([2, 1], [2, 3]);
             * // => [1]
             */
            var difference = baseRest(function (array, values) {
                return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                    : [];
            });
            /**
             * This method is like `_.difference` except that it accepts `iteratee` which
             * is invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var differenceBy = baseRest(function (array, values) {
                var iteratee = last(values);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                    : [];
            });
            /**
             * This method is like `_.difference` except that it accepts `comparator`
             * which is invoked to compare elements of `array` to `values`. The order and
             * references of result values are determined by the first array. The comparator
             * is invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...Array} [values] The values to exclude.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             *
             * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }]
             */
            var differenceWith = baseRest(function (array, values) {
                var comparator = last(values);
                if (isArrayLikeObject(comparator)) {
                    comparator = undefined$1;
                }
                return isArrayLikeObject(array)
                    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
                    : [];
            });
            /**
             * Creates a slice of `array` with `n` elements dropped from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.drop([1, 2, 3]);
             * // => [2, 3]
             *
             * _.drop([1, 2, 3], 2);
             * // => [3]
             *
             * _.drop([1, 2, 3], 5);
             * // => []
             *
             * _.drop([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function drop(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = (guard || n === undefined$1) ? 1 : toInteger(n);
                return baseSlice(array, n < 0 ? 0 : n, length);
            }
            /**
             * Creates a slice of `array` with `n` elements dropped from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to drop.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.dropRight([1, 2, 3]);
             * // => [1, 2]
             *
             * _.dropRight([1, 2, 3], 2);
             * // => [1]
             *
             * _.dropRight([1, 2, 3], 5);
             * // => []
             *
             * _.dropRight([1, 2, 3], 0);
             * // => [1, 2, 3]
             */
            function dropRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = (guard || n === undefined$1) ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, 0, n < 0 ? 0 : n);
            }
            /**
             * Creates a slice of `array` excluding elements dropped from the end.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.dropRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropRightWhile(users, ['active', false]);
             * // => objects for ['barney']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropRightWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropRightWhile(array, predicate) {
                return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), true, true)
                    : [];
            }
            /**
             * Creates a slice of `array` excluding elements dropped from the beginning.
             * Elements are dropped until `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.dropWhile(users, function(o) { return !o.active; });
             * // => objects for ['pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.dropWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.dropWhile(users, ['active', false]);
             * // => objects for ['pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.dropWhile(users, 'active');
             * // => objects for ['barney', 'fred', 'pebbles']
             */
            function dropWhile(array, predicate) {
                return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), true)
                    : [];
            }
            /**
             * Fills elements of `array` with `value` from `start` up to, but not
             * including, `end`.
             *
             * **Note:** This method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Array
             * @param {Array} array The array to fill.
             * @param {*} value The value to fill `array` with.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.fill(array, 'a');
             * console.log(array);
             * // => ['a', 'a', 'a']
             *
             * _.fill(Array(3), 2);
             * // => [2, 2, 2]
             *
             * _.fill([4, 6, 8, 10], '*', 1, 3);
             * // => [4, '*', '*', 10]
             */
            function fill(array, value, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                    start = 0;
                    end = length;
                }
                return baseFill(array, value, start, end);
            }
            /**
             * This method is like `_.find` except that it returns the index of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.findIndex(users, function(o) { return o.user == 'barney'; });
             * // => 0
             *
             * // The `_.matches` iteratee shorthand.
             * _.findIndex(users, { 'user': 'fred', 'active': false });
             * // => 1
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findIndex(users, ['active', false]);
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.findIndex(users, 'active');
             * // => 2
             */
            function findIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                    index = nativeMax(length + index, 0);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index);
            }
            /**
             * This method is like `_.findIndex` except that it iterates over elements
             * of `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the found element, else `-1`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
             * // => 2
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastIndex(users, { 'user': 'barney', 'active': true });
             * // => 0
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastIndex(users, ['active', false]);
             * // => 2
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastIndex(users, 'active');
             * // => 0
             */
            function findLastIndex(array, predicate, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = length - 1;
                if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index = fromIndex < 0
                        ? nativeMax(length + index, 0)
                        : nativeMin(index, length - 1);
                }
                return baseFindIndex(array, getIteratee(predicate, 3), index, true);
            }
            /**
             * Flattens `array` a single level deep.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flatten([1, [2, [3, [4]], 5]]);
             * // => [1, 2, [3, [4]], 5]
             */
            function flatten(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, 1) : [];
            }
            /**
             * Recursively flattens `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * _.flattenDeep([1, [2, [3, [4]], 5]]);
             * // => [1, 2, 3, 4, 5]
             */
            function flattenDeep(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseFlatten(array, INFINITY) : [];
            }
            /**
             * Recursively flatten `array` up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Array
             * @param {Array} array The array to flatten.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * var array = [1, [2, [3, [4]], 5]];
             *
             * _.flattenDepth(array, 1);
             * // => [1, 2, [3, [4]], 5]
             *
             * _.flattenDepth(array, 2);
             * // => [1, 2, 3, [4], 5]
             */
            function flattenDepth(array, depth) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                depth = depth === undefined$1 ? 1 : toInteger(depth);
                return baseFlatten(array, depth);
            }
            /**
             * The inverse of `_.toPairs`; this method returns an object composed
             * from key-value `pairs`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} pairs The key-value pairs.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.fromPairs([['a', 1], ['b', 2]]);
             * // => { 'a': 1, 'b': 2 }
             */
            function fromPairs(pairs) {
                var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
                while (++index < length) {
                    var pair = pairs[index];
                    result[pair[0]] = pair[1];
                }
                return result;
            }
            /**
             * Gets the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias first
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the first element of `array`.
             * @example
             *
             * _.head([1, 2, 3]);
             * // => 1
             *
             * _.head([]);
             * // => undefined
             */
            function head(array) {
                return (array && array.length) ? array[0] : undefined$1;
            }
            /**
             * Gets the index at which the first occurrence of `value` is found in `array`
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. If `fromIndex` is negative, it's used as the
             * offset from the end of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.indexOf([1, 2, 1, 2], 2);
             * // => 1
             *
             * // Search from the `fromIndex`.
             * _.indexOf([1, 2, 1, 2], 2, 2);
             * // => 3
             */
            function indexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = fromIndex == null ? 0 : toInteger(fromIndex);
                if (index < 0) {
                    index = nativeMax(length + index, 0);
                }
                return baseIndexOf(array, value, index);
            }
            /**
             * Gets all but the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.initial([1, 2, 3]);
             * // => [1, 2]
             */
            function initial(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 0, -1) : [];
            }
            /**
             * Creates an array of unique values that are included in all given arrays
             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons. The order and references of result values are
             * determined by the first array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersection([2, 1], [2, 3]);
             * // => [2]
             */
            var intersection = baseRest(function (arrays) {
                var mapped = arrayMap(arrays, castArrayLikeObject);
                return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped)
                    : [];
            });
            /**
             * This method is like `_.intersection` except that it accepts `iteratee`
             * which is invoked for each element of each `arrays` to generate the criterion
             * by which they're compared. The order and references of result values are
             * determined by the first array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [2.1]
             *
             * // The `_.property` iteratee shorthand.
             * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }]
             */
            var intersectionBy = baseRest(function (arrays) {
                var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                if (iteratee === last(mapped)) {
                    iteratee = undefined$1;
                }
                else {
                    mapped.pop();
                }
                return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped, getIteratee(iteratee, 2))
                    : [];
            });
            /**
             * This method is like `_.intersection` except that it accepts `comparator`
             * which is invoked to compare elements of `arrays`. The order and references
             * of result values are determined by the first array. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of intersecting values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.intersectionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }]
             */
            var intersectionWith = baseRest(function (arrays) {
                var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                if (comparator) {
                    mapped.pop();
                }
                return (mapped.length && mapped[0] === arrays[0])
                    ? baseIntersection(mapped, undefined$1, comparator)
                    : [];
            });
            /**
             * Converts all elements in `array` into a string separated by `separator`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to convert.
             * @param {string} [separator=','] The element separator.
             * @returns {string} Returns the joined string.
             * @example
             *
             * _.join(['a', 'b', 'c'], '~');
             * // => 'a~b~c'
             */
            function join(array, separator) {
                return array == null ? '' : nativeJoin.call(array, separator);
            }
            /**
             * Gets the last element of `array`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {*} Returns the last element of `array`.
             * @example
             *
             * _.last([1, 2, 3]);
             * // => 3
             */
            function last(array) {
                var length = array == null ? 0 : array.length;
                return length ? array[length - 1] : undefined$1;
            }
            /**
             * This method is like `_.indexOf` except that it iterates over elements of
             * `array` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=array.length-1] The index to search from.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.lastIndexOf([1, 2, 1, 2], 2);
             * // => 3
             *
             * // Search from the `fromIndex`.
             * _.lastIndexOf([1, 2, 1, 2], 2, 2);
             * // => 1
             */
            function lastIndexOf(array, value, fromIndex) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return -1;
                }
                var index = length;
                if (fromIndex !== undefined$1) {
                    index = toInteger(fromIndex);
                    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                }
                return value === value
                    ? strictLastIndexOf(array, value, index)
                    : baseFindIndex(array, baseIsNaN, index, true);
            }
            /**
             * Gets the element at index `n` of `array`. If `n` is negative, the nth
             * element from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.11.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=0] The index of the element to return.
             * @returns {*} Returns the nth element of `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             *
             * _.nth(array, 1);
             * // => 'b'
             *
             * _.nth(array, -2);
             * // => 'c';
             */
            function nth(array, n) {
                return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
            }
            /**
             * Removes all given values from `array` using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
             * to remove elements from an array by predicate.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...*} [values] The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pull(array, 'a', 'c');
             * console.log(array);
             * // => ['b', 'b']
             */
            var pull = baseRest(pullAll);
            /**
             * This method is like `_.pull` except that it accepts an array of values to remove.
             *
             * **Note:** Unlike `_.difference`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
             *
             * _.pullAll(array, ['a', 'c']);
             * console.log(array);
             * // => ['b', 'b']
             */
            function pullAll(array, values) {
                return (array && array.length && values && values.length)
                    ? basePullAll(array, values)
                    : array;
            }
            /**
             * This method is like `_.pullAll` except that it accepts `iteratee` which is
             * invoked for each element of `array` and `values` to generate the criterion
             * by which they're compared. The iteratee is invoked with one argument: (value).
             *
             * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
             *
             * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
             * console.log(array);
             * // => [{ 'x': 2 }]
             */
            function pullAllBy(array, values, iteratee) {
                return (array && array.length && values && values.length)
                    ? basePullAll(array, values, getIteratee(iteratee, 2))
                    : array;
            }
            /**
             * This method is like `_.pullAll` except that it accepts `comparator` which
             * is invoked to compare elements of `array` to `values`. The comparator is
             * invoked with two arguments: (arrVal, othVal).
             *
             * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Array} values The values to remove.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
             *
             * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
             * console.log(array);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
             */
            function pullAllWith(array, values, comparator) {
                return (array && array.length && values && values.length)
                    ? basePullAll(array, values, undefined$1, comparator)
                    : array;
            }
            /**
             * Removes elements from `array` corresponding to `indexes` and returns an
             * array of removed elements.
             *
             * **Note:** Unlike `_.at`, this method mutates `array`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {...(number|number[])} [indexes] The indexes of elements to remove.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = ['a', 'b', 'c', 'd'];
             * var pulled = _.pullAt(array, [1, 3]);
             *
             * console.log(array);
             * // => ['a', 'c']
             *
             * console.log(pulled);
             * // => ['b', 'd']
             */
            var pullAt = flatRest(function (array, indexes) {
                var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
                basePullAt(array, arrayMap(indexes, function (index) {
                    return isIndex(index, length) ? +index : index;
                }).sort(compareAscending));
                return result;
            });
            /**
             * Removes all elements from `array` that `predicate` returns truthy for
             * and returns an array of the removed elements. The predicate is invoked
             * with three arguments: (value, index, array).
             *
             * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
             * to pull elements from an array by value.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new array of removed elements.
             * @example
             *
             * var array = [1, 2, 3, 4];
             * var evens = _.remove(array, function(n) {
             *   return n % 2 == 0;
             * });
             *
             * console.log(array);
             * // => [1, 3]
             *
             * console.log(evens);
             * // => [2, 4]
             */
            function remove(array, predicate) {
                var result = [];
                if (!(array && array.length)) {
                    return result;
                }
                var index = -1, indexes = [], length = array.length;
                predicate = getIteratee(predicate, 3);
                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result.push(value);
                        indexes.push(index);
                    }
                }
                basePullAt(array, indexes);
                return result;
            }
            /**
             * Reverses `array` so that the first element becomes the last, the second
             * element becomes the second to last, and so on.
             *
             * **Note:** This method mutates `array` and is based on
             * [`Array#reverse`](https://mdn.io/Array/reverse).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to modify.
             * @returns {Array} Returns `array`.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _.reverse(array);
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function reverse(array) {
                return array == null ? array : nativeReverse.call(array);
            }
            /**
             * Creates a slice of `array` from `start` up to, but not including, `end`.
             *
             * **Note:** This method is used instead of
             * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
             * returned.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to slice.
             * @param {number} [start=0] The start position.
             * @param {number} [end=array.length] The end position.
             * @returns {Array} Returns the slice of `array`.
             */
            function slice(array, start, end) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                    start = 0;
                    end = length;
                }
                else {
                    start = start == null ? 0 : toInteger(start);
                    end = end === undefined$1 ? length : toInteger(end);
                }
                return baseSlice(array, start, end);
            }
            /**
             * Uses a binary search to determine the lowest index at which `value`
             * should be inserted into `array` in order to maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedIndex([30, 50], 40);
             * // => 1
             */
            function sortedIndex(array, value) {
                return baseSortedIndex(array, value);
            }
            /**
             * This method is like `_.sortedIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 0
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
             * // => 0
             */
            function sortedIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
            }
            /**
             * This method is like `_.indexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
             * // => 1
             */
            function sortedIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                    var index = baseSortedIndex(array, value);
                    if (index < length && eq(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }
            /**
             * This method is like `_.sortedIndex` except that it returns the highest
             * index at which `value` should be inserted into `array` in order to
             * maintain its sort order.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
             * // => 4
             */
            function sortedLastIndex(array, value) {
                return baseSortedIndex(array, value, true);
            }
            /**
             * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
             * which is invoked for `value` and each element of `array` to compute their
             * sort ranking. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The sorted array to inspect.
             * @param {*} value The value to evaluate.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the index at which `value` should be inserted
             *  into `array`.
             * @example
             *
             * var objects = [{ 'x': 4 }, { 'x': 5 }];
             *
             * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
             * // => 1
             *
             * // The `_.property` iteratee shorthand.
             * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
             * // => 1
             */
            function sortedLastIndexBy(array, value, iteratee) {
                return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
            }
            /**
             * This method is like `_.lastIndexOf` except that it performs a binary
             * search on a sorted `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {*} value The value to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             * @example
             *
             * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
             * // => 3
             */
            function sortedLastIndexOf(array, value) {
                var length = array == null ? 0 : array.length;
                if (length) {
                    var index = baseSortedIndex(array, value, true) - 1;
                    if (eq(array[index], value)) {
                        return index;
                    }
                }
                return -1;
            }
            /**
             * This method is like `_.uniq` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniq([1, 1, 2]);
             * // => [1, 2]
             */
            function sortedUniq(array) {
                return (array && array.length)
                    ? baseSortedUniq(array)
                    : [];
            }
            /**
             * This method is like `_.uniqBy` except that it's designed and optimized
             * for sorted arrays.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
             * // => [1.1, 2.3]
             */
            function sortedUniqBy(array, iteratee) {
                return (array && array.length)
                    ? baseSortedUniq(array, getIteratee(iteratee, 2))
                    : [];
            }
            /**
             * Gets all but the first element of `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.tail([1, 2, 3]);
             * // => [2, 3]
             */
            function tail(array) {
                var length = array == null ? 0 : array.length;
                return length ? baseSlice(array, 1, length) : [];
            }
            /**
             * Creates a slice of `array` with `n` elements taken from the beginning.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.take([1, 2, 3]);
             * // => [1]
             *
             * _.take([1, 2, 3], 2);
             * // => [1, 2]
             *
             * _.take([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.take([1, 2, 3], 0);
             * // => []
             */
            function take(array, n, guard) {
                if (!(array && array.length)) {
                    return [];
                }
                n = (guard || n === undefined$1) ? 1 : toInteger(n);
                return baseSlice(array, 0, n < 0 ? 0 : n);
            }
            /**
             * Creates a slice of `array` with `n` elements taken from the end.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {number} [n=1] The number of elements to take.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * _.takeRight([1, 2, 3]);
             * // => [3]
             *
             * _.takeRight([1, 2, 3], 2);
             * // => [2, 3]
             *
             * _.takeRight([1, 2, 3], 5);
             * // => [1, 2, 3]
             *
             * _.takeRight([1, 2, 3], 0);
             * // => []
             */
            function takeRight(array, n, guard) {
                var length = array == null ? 0 : array.length;
                if (!length) {
                    return [];
                }
                n = (guard || n === undefined$1) ? 1 : toInteger(n);
                n = length - n;
                return baseSlice(array, n < 0 ? 0 : n, length);
            }
            /**
             * Creates a slice of `array` with elements taken from the end. Elements are
             * taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': true },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': false }
             * ];
             *
             * _.takeRightWhile(users, function(o) { return !o.active; });
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
             * // => objects for ['pebbles']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeRightWhile(users, ['active', false]);
             * // => objects for ['fred', 'pebbles']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeRightWhile(users, 'active');
             * // => []
             */
            function takeRightWhile(array, predicate) {
                return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3), false, true)
                    : [];
            }
            /**
             * Creates a slice of `array` with elements taken from the beginning. Elements
             * are taken until `predicate` returns falsey. The predicate is invoked with
             * three arguments: (value, index, array).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Array
             * @param {Array} array The array to query.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the slice of `array`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'active': false },
             *   { 'user': 'fred',    'active': false },
             *   { 'user': 'pebbles', 'active': true }
             * ];
             *
             * _.takeWhile(users, function(o) { return !o.active; });
             * // => objects for ['barney', 'fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.takeWhile(users, { 'user': 'barney', 'active': false });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.takeWhile(users, ['active', false]);
             * // => objects for ['barney', 'fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.takeWhile(users, 'active');
             * // => []
             */
            function takeWhile(array, predicate) {
                return (array && array.length)
                    ? baseWhile(array, getIteratee(predicate, 3))
                    : [];
            }
            /**
             * Creates an array of unique values, in order, from all given arrays using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.union([2], [1, 2]);
             * // => [2, 1]
             */
            var union = baseRest(function (arrays) {
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
            });
            /**
             * This method is like `_.union` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which uniqueness is computed. Result values are chosen from the first
             * array in which the value occurs. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * _.unionBy([2.1], [1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            var unionBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
            });
            /**
             * This method is like `_.union` except that it accepts `comparator` which
             * is invoked to compare elements of `arrays`. Result values are chosen from
             * the first array in which the value occurs. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of combined values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.unionWith(objects, others, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var unionWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
            });
            /**
             * Creates a duplicate-free version of an array, using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons, in which only the first occurrence of each element
             * is kept. The order of result values is determined by the order they occur
             * in the array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniq([2, 1, 2]);
             * // => [2, 1]
             */
            function uniq(array) {
                return (array && array.length) ? baseUniq(array) : [];
            }
            /**
             * This method is like `_.uniq` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * uniqueness is computed. The order of result values is determined by the
             * order they occur in the array. The iteratee is invoked with one argument:
             * (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
             * // => [2.1, 1.2]
             *
             * // The `_.property` iteratee shorthand.
             * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 1 }, { 'x': 2 }]
             */
            function uniqBy(array, iteratee) {
                return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
            }
            /**
             * This method is like `_.uniq` except that it accepts `comparator` which
             * is invoked to compare elements of `array`. The order of result values is
             * determined by the order they occur in the array.The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new duplicate free array.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.uniqWith(objects, _.isEqual);
             * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
             */
            function uniqWith(array, comparator) {
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
            }
            /**
             * This method is like `_.zip` except that it accepts an array of grouped
             * elements and creates an array regrouping the elements to their pre-zip
             * configuration.
             *
             * @static
             * @memberOf _
             * @since 1.2.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             *
             * _.unzip(zipped);
             * // => [['a', 'b'], [1, 2], [true, false]]
             */
            function unzip(array) {
                if (!(array && array.length)) {
                    return [];
                }
                var length = 0;
                array = arrayFilter(array, function (group) {
                    if (isArrayLikeObject(group)) {
                        length = nativeMax(group.length, length);
                        return true;
                    }
                });
                return baseTimes(length, function (index) {
                    return arrayMap(array, baseProperty(index));
                });
            }
            /**
             * This method is like `_.unzip` except that it accepts `iteratee` to specify
             * how regrouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {Array} array The array of grouped elements to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  regrouped values.
             * @returns {Array} Returns the new array of regrouped elements.
             * @example
             *
             * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
             * // => [[1, 10, 100], [2, 20, 200]]
             *
             * _.unzipWith(zipped, _.add);
             * // => [3, 30, 300]
             */
            function unzipWith(array, iteratee) {
                if (!(array && array.length)) {
                    return [];
                }
                var result = unzip(array);
                if (iteratee == null) {
                    return result;
                }
                return arrayMap(result, function (group) {
                    return apply(iteratee, undefined$1, group);
                });
            }
            /**
             * Creates an array excluding all given values using
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * for equality comparisons.
             *
             * **Note:** Unlike `_.pull`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {Array} array The array to inspect.
             * @param {...*} [values] The values to exclude.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.xor
             * @example
             *
             * _.without([2, 1, 2, 3], 1, 2);
             * // => [3]
             */
            var without = baseRest(function (array, values) {
                return isArrayLikeObject(array)
                    ? baseDifference(array, values)
                    : [];
            });
            /**
             * Creates an array of unique values that is the
             * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
             * of the given arrays. The order of result values is determined by the order
             * they occur in the arrays.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @returns {Array} Returns the new array of filtered values.
             * @see _.difference, _.without
             * @example
             *
             * _.xor([2, 1], [2, 3]);
             * // => [1, 3]
             */
            var xor = baseRest(function (arrays) {
                return baseXor(arrayFilter(arrays, isArrayLikeObject));
            });
            /**
             * This method is like `_.xor` except that it accepts `iteratee` which is
             * invoked for each element of each `arrays` to generate the criterion by
             * which by which they're compared. The order of result values is determined
             * by the order they occur in the arrays. The iteratee is invoked with one
             * argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
             * // => [1.2, 3.4]
             *
             * // The `_.property` iteratee shorthand.
             * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
             * // => [{ 'x': 2 }]
             */
            var xorBy = baseRest(function (arrays) {
                var iteratee = last(arrays);
                if (isArrayLikeObject(iteratee)) {
                    iteratee = undefined$1;
                }
                return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
            });
            /**
             * This method is like `_.xor` except that it accepts `comparator` which is
             * invoked to compare elements of `arrays`. The order of result values is
             * determined by the order they occur in the arrays. The comparator is invoked
             * with two arguments: (arrVal, othVal).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Array
             * @param {...Array} [arrays] The arrays to inspect.
             * @param {Function} [comparator] The comparator invoked per element.
             * @returns {Array} Returns the new array of filtered values.
             * @example
             *
             * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
             * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
             *
             * _.xorWith(objects, others, _.isEqual);
             * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
             */
            var xorWith = baseRest(function (arrays) {
                var comparator = last(arrays);
                comparator = typeof comparator == 'function' ? comparator : undefined$1;
                return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
            });
            /**
             * Creates an array of grouped elements, the first of which contains the
             * first elements of the given arrays, the second of which contains the
             * second elements of the given arrays, and so on.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zip(['a', 'b'], [1, 2], [true, false]);
             * // => [['a', 1, true], ['b', 2, false]]
             */
            var zip = baseRest(unzip);
            /**
             * This method is like `_.fromPairs` except that it accepts two arrays,
             * one of property identifiers and one of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 0.4.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObject(['a', 'b'], [1, 2]);
             * // => { 'a': 1, 'b': 2 }
             */
            function zipObject(props, values) {
                return baseZipObject(props || [], values || [], assignValue);
            }
            /**
             * This method is like `_.zipObject` except that it supports property paths.
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Array
             * @param {Array} [props=[]] The property identifiers.
             * @param {Array} [values=[]] The property values.
             * @returns {Object} Returns the new object.
             * @example
             *
             * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
             * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
             */
            function zipObjectDeep(props, values) {
                return baseZipObject(props || [], values || [], baseSet);
            }
            /**
             * This method is like `_.zip` except that it accepts `iteratee` to specify
             * how grouped values should be combined. The iteratee is invoked with the
             * elements of each group: (...group).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Array
             * @param {...Array} [arrays] The arrays to process.
             * @param {Function} [iteratee=_.identity] The function to combine
             *  grouped values.
             * @returns {Array} Returns the new array of grouped elements.
             * @example
             *
             * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
             *   return a + b + c;
             * });
             * // => [111, 222]
             */
            var zipWith = baseRest(function (arrays) {
                var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined$1;
                iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
                return unzipWith(arrays, iteratee);
            });
            /*------------------------------------------------------------------------*/
            /**
             * Creates a `lodash` wrapper instance that wraps `value` with explicit method
             * chain sequences enabled. The result of such sequences must be unwrapped
             * with `_#value`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Seq
             * @param {*} value The value to wrap.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36 },
             *   { 'user': 'fred',    'age': 40 },
             *   { 'user': 'pebbles', 'age': 1 }
             * ];
             *
             * var youngest = _
             *   .chain(users)
             *   .sortBy('age')
             *   .map(function(o) {
             *     return o.user + ' is ' + o.age;
             *   })
             *   .head()
             *   .value();
             * // => 'pebbles is 1'
             */
            function chain(value) {
                var result = lodash(value);
                result.__chain__ = true;
                return result;
            }
            /**
             * This method invokes `interceptor` and returns `value`. The interceptor
             * is invoked with one argument; (value). The purpose of this method is to
             * "tap into" a method chain sequence in order to modify intermediate results.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns `value`.
             * @example
             *
             * _([1, 2, 3])
             *  .tap(function(array) {
             *    // Mutate input array.
             *    array.pop();
             *  })
             *  .reverse()
             *  .value();
             * // => [2, 1]
             */
            function tap(value, interceptor) {
                interceptor(value);
                return value;
            }
            /**
             * This method is like `_.tap` except that it returns the result of `interceptor`.
             * The purpose of this method is to "pass thru" values replacing intermediate
             * results in a method chain sequence.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Seq
             * @param {*} value The value to provide to `interceptor`.
             * @param {Function} interceptor The function to invoke.
             * @returns {*} Returns the result of `interceptor`.
             * @example
             *
             * _('  abc  ')
             *  .chain()
             *  .trim()
             *  .thru(function(value) {
             *    return [value];
             *  })
             *  .value();
             * // => ['abc']
             */
            function thru(value, interceptor) {
                return interceptor(value);
            }
            /**
             * This method is the wrapper version of `_.at`.
             *
             * @name at
             * @memberOf _
             * @since 1.0.0
             * @category Seq
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _(object).at(['a[0].b.c', 'a[1]']).value();
             * // => [3, 4]
             */
            var wrapperAt = flatRest(function (paths) {
                var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function (object) { return baseAt(object, paths); };
                if (length > 1 || this.__actions__.length ||
                    !(value instanceof LazyWrapper) || !isIndex(start)) {
                    return this.thru(interceptor);
                }
                value = value.slice(start, +start + (length ? 1 : 0));
                value.__actions__.push({
                    'func': thru,
                    'args': [interceptor],
                    'thisArg': undefined$1
                });
                return new LodashWrapper(value, this.__chain__).thru(function (array) {
                    if (length && !array.length) {
                        array.push(undefined$1);
                    }
                    return array;
                });
            });
            /**
             * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
             *
             * @name chain
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 40 }
             * ];
             *
             * // A sequence without explicit chaining.
             * _(users).head();
             * // => { 'user': 'barney', 'age': 36 }
             *
             * // A sequence with explicit chaining.
             * _(users)
             *   .chain()
             *   .head()
             *   .pick('user')
             *   .value();
             * // => { 'user': 'barney' }
             */
            function wrapperChain() {
                return chain(this);
            }
            /**
             * Executes the chain sequence and returns the wrapped result.
             *
             * @name commit
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2];
             * var wrapped = _(array).push(3);
             *
             * console.log(array);
             * // => [1, 2]
             *
             * wrapped = wrapped.commit();
             * console.log(array);
             * // => [1, 2, 3]
             *
             * wrapped.last();
             * // => 3
             *
             * console.log(array);
             * // => [1, 2, 3]
             */
            function wrapperCommit() {
                return new LodashWrapper(this.value(), this.__chain__);
            }
            /**
             * Gets the next value on a wrapped object following the
             * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
             *
             * @name next
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the next iterator value.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 1 }
             *
             * wrapped.next();
             * // => { 'done': false, 'value': 2 }
             *
             * wrapped.next();
             * // => { 'done': true, 'value': undefined }
             */
            function wrapperNext() {
                if (this.__values__ === undefined$1) {
                    this.__values__ = toArray(this.value());
                }
                var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
                return { 'done': done, 'value': value };
            }
            /**
             * Enables the wrapper to be iterable.
             *
             * @name Symbol.iterator
             * @memberOf _
             * @since 4.0.0
             * @category Seq
             * @returns {Object} Returns the wrapper object.
             * @example
             *
             * var wrapped = _([1, 2]);
             *
             * wrapped[Symbol.iterator]() === wrapped;
             * // => true
             *
             * Array.from(wrapped);
             * // => [1, 2]
             */
            function wrapperToIterator() {
                return this;
            }
            /**
             * Creates a clone of the chain sequence planting `value` as the wrapped value.
             *
             * @name plant
             * @memberOf _
             * @since 3.2.0
             * @category Seq
             * @param {*} value The value to plant.
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var wrapped = _([1, 2]).map(square);
             * var other = wrapped.plant([3, 4]);
             *
             * other.value();
             * // => [9, 16]
             *
             * wrapped.value();
             * // => [1, 4]
             */
            function wrapperPlant(value) {
                var result, parent = this;
                while (parent instanceof baseLodash) {
                    var clone = wrapperClone(parent);
                    clone.__index__ = 0;
                    clone.__values__ = undefined$1;
                    if (result) {
                        previous.__wrapped__ = clone;
                    }
                    else {
                        result = clone;
                    }
                    var previous = clone;
                    parent = parent.__wrapped__;
                }
                previous.__wrapped__ = value;
                return result;
            }
            /**
             * This method is the wrapper version of `_.reverse`.
             *
             * **Note:** This method mutates the wrapped array.
             *
             * @name reverse
             * @memberOf _
             * @since 0.1.0
             * @category Seq
             * @returns {Object} Returns the new `lodash` wrapper instance.
             * @example
             *
             * var array = [1, 2, 3];
             *
             * _(array).reverse().value()
             * // => [3, 2, 1]
             *
             * console.log(array);
             * // => [3, 2, 1]
             */
            function wrapperReverse() {
                var value = this.__wrapped__;
                if (value instanceof LazyWrapper) {
                    var wrapped = value;
                    if (this.__actions__.length) {
                        wrapped = new LazyWrapper(this);
                    }
                    wrapped = wrapped.reverse();
                    wrapped.__actions__.push({
                        'func': thru,
                        'args': [reverse],
                        'thisArg': undefined$1
                    });
                    return new LodashWrapper(wrapped, this.__chain__);
                }
                return this.thru(reverse);
            }
            /**
             * Executes the chain sequence to resolve the unwrapped value.
             *
             * @name value
             * @memberOf _
             * @since 0.1.0
             * @alias toJSON, valueOf
             * @category Seq
             * @returns {*} Returns the resolved unwrapped value.
             * @example
             *
             * _([1, 2, 3]).value();
             * // => [1, 2, 3]
             */
            function wrapperValue() {
                return baseWrapperValue(this.__wrapped__, this.__actions__);
            }
            /*------------------------------------------------------------------------*/
            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the number of times the key was returned by `iteratee`. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.countBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': 1, '6': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.countBy(['one', 'two', 'three'], 'length');
             * // => { '3': 2, '5': 1 }
             */
            var countBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                    ++result[key];
                }
                else {
                    baseAssignValue(result, key, 1);
                }
            });
            /**
             * Checks if `predicate` returns truthy for **all** elements of `collection`.
             * Iteration is stopped once `predicate` returns falsey. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * **Note:** This method returns `true` for
             * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
             * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
             * elements of empty collections.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if all elements pass the predicate check,
             *  else `false`.
             * @example
             *
             * _.every([true, 1, null, 'yes'], Boolean);
             * // => false
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.every(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.every(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.every(users, 'active');
             * // => false
             */
            function every(collection, predicate, guard) {
                var func = isArray(collection) ? arrayEvery : baseEvery;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                }
                return func(collection, getIteratee(predicate, 3));
            }
            /**
             * Iterates over elements of `collection`, returning an array of all elements
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * **Note:** Unlike `_.remove`, this method returns a new array.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.reject
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * _.filter(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, { 'age': 36, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.filter(users, 'active');
             * // => objects for ['barney']
             *
             * // Combining several predicates using `_.overEvery` or `_.overSome`.
             * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
             * // => objects for ['fred', 'barney']
             */
            function filter(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, getIteratee(predicate, 3));
            }
            /**
             * Iterates over elements of `collection`, returning the first element
             * `predicate` returns truthy for. The predicate is invoked with three
             * arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=0] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': true },
             *   { 'user': 'fred',    'age': 40, 'active': false },
             *   { 'user': 'pebbles', 'age': 1,  'active': true }
             * ];
             *
             * _.find(users, function(o) { return o.age < 40; });
             * // => object for 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.find(users, { 'age': 1, 'active': true });
             * // => object for 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.find(users, ['active', false]);
             * // => object for 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.find(users, 'active');
             * // => object for 'barney'
             */
            var find = createFind(findIndex);
            /**
             * This method is like `_.find` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param {number} [fromIndex=collection.length-1] The index to search from.
             * @returns {*} Returns the matched element, else `undefined`.
             * @example
             *
             * _.findLast([1, 2, 3, 4], function(n) {
             *   return n % 2 == 1;
             * });
             * // => 3
             */
            var findLast = createFind(findLastIndex);
            /**
             * Creates a flattened array of values by running each element in `collection`
             * thru `iteratee` and flattening the mapped results. The iteratee is invoked
             * with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [n, n];
             * }
             *
             * _.flatMap([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMap(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), 1);
            }
            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDeep([1, 2], duplicate);
             * // => [1, 1, 2, 2]
             */
            function flatMapDeep(collection, iteratee) {
                return baseFlatten(map(collection, iteratee), INFINITY);
            }
            /**
             * This method is like `_.flatMap` except that it recursively flattens the
             * mapped results up to `depth` times.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {number} [depth=1] The maximum recursion depth.
             * @returns {Array} Returns the new flattened array.
             * @example
             *
             * function duplicate(n) {
             *   return [[[n, n]]];
             * }
             *
             * _.flatMapDepth([1, 2], duplicate, 2);
             * // => [[1, 1], [2, 2]]
             */
            function flatMapDepth(collection, iteratee, depth) {
                depth = depth === undefined$1 ? 1 : toInteger(depth);
                return baseFlatten(map(collection, iteratee), depth);
            }
            /**
             * Iterates over elements of `collection` and invokes `iteratee` for each element.
             * The iteratee is invoked with three arguments: (value, index|key, collection).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * **Note:** As with other "Collections" methods, objects with a "length"
             * property are iterated like arrays. To avoid this behavior use `_.forIn`
             * or `_.forOwn` for object iteration.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @alias each
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEachRight
             * @example
             *
             * _.forEach([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `1` then `2`.
             *
             * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forEach(collection, iteratee) {
                var func = isArray(collection) ? arrayEach : baseEach;
                return func(collection, getIteratee(iteratee, 3));
            }
            /**
             * This method is like `_.forEach` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @alias eachRight
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             * @see _.forEach
             * @example
             *
             * _.forEachRight([1, 2], function(value) {
             *   console.log(value);
             * });
             * // => Logs `2` then `1`.
             */
            function forEachRight(collection, iteratee) {
                var func = isArray(collection) ? arrayEachRight : baseEachRight;
                return func(collection, getIteratee(iteratee, 3));
            }
            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The order of grouped values
             * is determined by the order they occur in `collection`. The corresponding
             * value of each key is an array of elements responsible for generating the
             * key. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * _.groupBy([6.1, 4.2, 6.3], Math.floor);
             * // => { '4': [4.2], '6': [6.1, 6.3] }
             *
             * // The `_.property` iteratee shorthand.
             * _.groupBy(['one', 'two', 'three'], 'length');
             * // => { '3': ['one', 'two'], '5': ['three'] }
             */
            var groupBy = createAggregator(function (result, value, key) {
                if (hasOwnProperty.call(result, key)) {
                    result[key].push(value);
                }
                else {
                    baseAssignValue(result, key, [value]);
                }
            });
            /**
             * Checks if `value` is in `collection`. If `collection` is a string, it's
             * checked for a substring of `value`, otherwise
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * is used for equality comparisons. If `fromIndex` is negative, it's used as
             * the offset from the end of `collection`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @param {*} value The value to search for.
             * @param {number} [fromIndex=0] The index to search from.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {boolean} Returns `true` if `value` is found, else `false`.
             * @example
             *
             * _.includes([1, 2, 3], 1);
             * // => true
             *
             * _.includes([1, 2, 3], 1, 2);
             * // => false
             *
             * _.includes({ 'a': 1, 'b': 2 }, 1);
             * // => true
             *
             * _.includes('abcd', 'bc');
             * // => true
             */
            function includes(collection, value, fromIndex, guard) {
                collection = isArrayLike(collection) ? collection : values(collection);
                fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
                var length = collection.length;
                if (fromIndex < 0) {
                    fromIndex = nativeMax(length + fromIndex, 0);
                }
                return isString(collection)
                    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
            }
            /**
             * Invokes the method at `path` of each element in `collection`, returning
             * an array of the results of each invoked method. Any additional arguments
             * are provided to each invoked method. If `path` is a function, it's invoked
             * for, and `this` bound to, each element in `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array|Function|string} path The path of the method to invoke or
             *  the function invoked per iteration.
             * @param {...*} [args] The arguments to invoke each method with.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
             * // => [[1, 5, 7], [1, 2, 3]]
             *
             * _.invokeMap([123, 456], String.prototype.split, '');
             * // => [['1', '2', '3'], ['4', '5', '6']]
             */
            var invokeMap = baseRest(function (collection, path, args) {
                var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
                baseEach(collection, function (value) {
                    result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                });
                return result;
            });
            /**
             * Creates an object composed of keys generated from the results of running
             * each element of `collection` thru `iteratee`. The corresponding value of
             * each key is the last element responsible for generating the key. The
             * iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
             * @returns {Object} Returns the composed aggregate object.
             * @example
             *
             * var array = [
             *   { 'dir': 'left', 'code': 97 },
             *   { 'dir': 'right', 'code': 100 }
             * ];
             *
             * _.keyBy(array, function(o) {
             *   return String.fromCharCode(o.code);
             * });
             * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
             *
             * _.keyBy(array, 'dir');
             * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
             */
            var keyBy = createAggregator(function (result, value, key) {
                baseAssignValue(result, key, value);
            });
            /**
             * Creates an array of values by running each element in `collection` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
             *
             * The guarded methods are:
             * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
             * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
             * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
             * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * _.map([4, 8], square);
             * // => [16, 64]
             *
             * _.map({ 'a': 4, 'b': 8 }, square);
             * // => [16, 64] (iteration order is not guaranteed)
             *
             * var users = [
             *   { 'user': 'barney' },
             *   { 'user': 'fred' }
             * ];
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, 'user');
             * // => ['barney', 'fred']
             */
            function map(collection, iteratee) {
                var func = isArray(collection) ? arrayMap : baseMap;
                return func(collection, getIteratee(iteratee, 3));
            }
            /**
             * This method is like `_.sortBy` except that it allows specifying the sort
             * orders of the iteratees to sort by. If `orders` is unspecified, all values
             * are sorted in ascending order. Otherwise, specify an order of "desc" for
             * descending or "asc" for ascending sort order of corresponding values.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @param {string[]} [orders] The sort orders of `iteratees`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 34 },
             *   { 'user': 'fred',   'age': 40 },
             *   { 'user': 'barney', 'age': 36 }
             * ];
             *
             * // Sort by `user` in ascending order and by `age` in descending order.
             * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
             */
            function orderBy(collection, iteratees, orders, guard) {
                if (collection == null) {
                    return [];
                }
                if (!isArray(iteratees)) {
                    iteratees = iteratees == null ? [] : [iteratees];
                }
                orders = guard ? undefined$1 : orders;
                if (!isArray(orders)) {
                    orders = orders == null ? [] : [orders];
                }
                return baseOrderBy(collection, iteratees, orders);
            }
            /**
             * Creates an array of elements split into two groups, the first of which
             * contains elements `predicate` returns truthy for, the second of which
             * contains elements `predicate` returns falsey for. The predicate is
             * invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of grouped elements.
             * @example
             *
             * var users = [
             *   { 'user': 'barney',  'age': 36, 'active': false },
             *   { 'user': 'fred',    'age': 40, 'active': true },
             *   { 'user': 'pebbles', 'age': 1,  'active': false }
             * ];
             *
             * _.partition(users, function(o) { return o.active; });
             * // => objects for [['fred'], ['barney', 'pebbles']]
             *
             * // The `_.matches` iteratee shorthand.
             * _.partition(users, { 'age': 1, 'active': false });
             * // => objects for [['pebbles'], ['barney', 'fred']]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.partition(users, ['active', false]);
             * // => objects for [['barney', 'pebbles'], ['fred']]
             *
             * // The `_.property` iteratee shorthand.
             * _.partition(users, 'active');
             * // => objects for [['fred'], ['barney', 'pebbles']]
             */
            var partition = createAggregator(function (result, value, key) {
                result[key ? 0 : 1].push(value);
            }, function () { return [[], []]; });
            /**
             * Reduces `collection` to a value which is the accumulated result of running
             * each element in `collection` thru `iteratee`, where each successive
             * invocation is supplied the return value of the previous. If `accumulator`
             * is not given, the first element of `collection` is used as the initial
             * value. The iteratee is invoked with four arguments:
             * (accumulator, value, index|key, collection).
             *
             * Many lodash methods are guarded to work as iteratees for methods like
             * `_.reduce`, `_.reduceRight`, and `_.transform`.
             *
             * The guarded methods are:
             * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
             * and `sortBy`
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduceRight
             * @example
             *
             * _.reduce([1, 2], function(sum, n) {
             *   return sum + n;
             * }, 0);
             * // => 3
             *
             * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             *   return result;
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
             */
            function reduce(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
            }
            /**
             * This method is like `_.reduce` except that it iterates over elements of
             * `collection` from right to left.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The initial value.
             * @returns {*} Returns the accumulated value.
             * @see _.reduce
             * @example
             *
             * var array = [[0, 1], [2, 3], [4, 5]];
             *
             * _.reduceRight(array, function(flattened, other) {
             *   return flattened.concat(other);
             * }, []);
             * // => [4, 5, 2, 3, 0, 1]
             */
            function reduceRight(collection, iteratee, accumulator) {
                var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
                return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
            }
            /**
             * The opposite of `_.filter`; this method returns the elements of `collection`
             * that `predicate` does **not** return truthy for.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             * @see _.filter
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': false },
             *   { 'user': 'fred',   'age': 40, 'active': true }
             * ];
             *
             * _.reject(users, function(o) { return !o.active; });
             * // => objects for ['fred']
             *
             * // The `_.matches` iteratee shorthand.
             * _.reject(users, { 'age': 40, 'active': true });
             * // => objects for ['barney']
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.reject(users, ['active', false]);
             * // => objects for ['fred']
             *
             * // The `_.property` iteratee shorthand.
             * _.reject(users, 'active');
             * // => objects for ['barney']
             */
            function reject(collection, predicate) {
                var func = isArray(collection) ? arrayFilter : baseFilter;
                return func(collection, negate(getIteratee(predicate, 3)));
            }
            /**
             * Gets a random element from `collection`.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @returns {*} Returns the random element.
             * @example
             *
             * _.sample([1, 2, 3, 4]);
             * // => 2
             */
            function sample(collection) {
                var func = isArray(collection) ? arraySample : baseSample;
                return func(collection);
            }
            /**
             * Gets `n` random elements at unique keys from `collection` up to the
             * size of `collection`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Collection
             * @param {Array|Object} collection The collection to sample.
             * @param {number} [n=1] The number of elements to sample.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the random elements.
             * @example
             *
             * _.sampleSize([1, 2, 3], 2);
             * // => [3, 1]
             *
             * _.sampleSize([1, 2, 3], 4);
             * // => [2, 3, 1]
             */
            function sampleSize(collection, n, guard) {
                if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
                    n = 1;
                }
                else {
                    n = toInteger(n);
                }
                var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                return func(collection, n);
            }
            /**
             * Creates an array of shuffled values, using a version of the
             * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to shuffle.
             * @returns {Array} Returns the new shuffled array.
             * @example
             *
             * _.shuffle([1, 2, 3, 4]);
             * // => [4, 1, 3, 2]
             */
            function shuffle(collection) {
                var func = isArray(collection) ? arrayShuffle : baseShuffle;
                return func(collection);
            }
            /**
             * Gets the size of `collection` by returning its length for array-like
             * values or the number of own enumerable string keyed properties for objects.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object|string} collection The collection to inspect.
             * @returns {number} Returns the collection size.
             * @example
             *
             * _.size([1, 2, 3]);
             * // => 3
             *
             * _.size({ 'a': 1, 'b': 2 });
             * // => 2
             *
             * _.size('pebbles');
             * // => 7
             */
            function size(collection) {
                if (collection == null) {
                    return 0;
                }
                if (isArrayLike(collection)) {
                    return isString(collection) ? stringSize(collection) : collection.length;
                }
                var tag = getTag(collection);
                if (tag == mapTag || tag == setTag) {
                    return collection.size;
                }
                return baseKeys(collection).length;
            }
            /**
             * Checks if `predicate` returns truthy for **any** element of `collection`.
             * Iteration is stopped once `predicate` returns truthy. The predicate is
             * invoked with three arguments: (value, index|key, collection).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             * @example
             *
             * _.some([null, 0, 'yes', false], Boolean);
             * // => true
             *
             * var users = [
             *   { 'user': 'barney', 'active': true },
             *   { 'user': 'fred',   'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.some(users, { 'user': 'barney', 'active': false });
             * // => false
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.some(users, ['active', false]);
             * // => true
             *
             * // The `_.property` iteratee shorthand.
             * _.some(users, 'active');
             * // => true
             */
            function some(collection, predicate, guard) {
                var func = isArray(collection) ? arraySome : baseSome;
                if (guard && isIterateeCall(collection, predicate, guard)) {
                    predicate = undefined$1;
                }
                return func(collection, getIteratee(predicate, 3));
            }
            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function (collection, iteratees) {
                if (collection == null) {
                    return [];
                }
                var length = iteratees.length;
                if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                    iteratees = [];
                }
                else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                    iteratees = [iteratees[0]];
                }
                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });
            /*------------------------------------------------------------------------*/
            /**
             * Gets the timestamp of the number of milliseconds that have elapsed since
             * the Unix epoch (1 January 1970 00:00:00 UTC).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Date
             * @returns {number} Returns the timestamp.
             * @example
             *
             * _.defer(function(stamp) {
             *   console.log(_.now() - stamp);
             * }, _.now());
             * // => Logs the number of milliseconds it took for the deferred invocation.
             */
            var now = ctxNow || function () {
                return root.Date.now();
            };
            /*------------------------------------------------------------------------*/
            /**
             * The opposite of `_.before`; this method creates a function that invokes
             * `func` once it's called `n` or more times.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {number} n The number of calls before `func` is invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var saves = ['profile', 'settings'];
             *
             * var done = _.after(saves.length, function() {
             *   console.log('done saving!');
             * });
             *
             * _.forEach(saves, function(type) {
             *   asyncSave({ 'type': type, 'complete': done });
             * });
             * // => Logs 'done saving!' after the two async saves have completed.
             */
            function after(n, func) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                    if (--n < 1) {
                        return func.apply(this, arguments);
                    }
                };
            }
            /**
             * Creates a function that invokes `func`, with up to `n` arguments,
             * ignoring any additional arguments.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @param {number} [n=func.length] The arity cap.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.ary(parseInt, 1));
             * // => [6, 8, 10]
             */
            function ary(func, n, guard) {
                n = guard ? undefined$1 : n;
                n = (func && n == null) ? func.length : n;
                return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
            }
            /**
             * Creates a function that invokes `func`, with the `this` binding and arguments
             * of the created function, while it's called less than `n` times. Subsequent
             * calls to the created function return the result of the last `func` invocation.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {number} n The number of calls at which `func` is no longer invoked.
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * jQuery(element).on('click', _.before(5, addContactToList));
             * // => Allows adding up to 4 contacts to the list.
             */
            function before(n, func) {
                var result;
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                n = toInteger(n);
                return function () {
                    if (--n > 0) {
                        result = func.apply(this, arguments);
                    }
                    if (n <= 1) {
                        func = undefined$1;
                    }
                    return result;
                };
            }
            /**
             * Creates a function that invokes `func` with the `this` binding of `thisArg`
             * and `partials` prepended to the arguments it receives.
             *
             * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for partially applied arguments.
             *
             * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
             * property of bound functions.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to bind.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * function greet(greeting, punctuation) {
             *   return greeting + ' ' + this.user + punctuation;
             * }
             *
             * var object = { 'user': 'fred' };
             *
             * var bound = _.bind(greet, object, 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bind(greet, object, _, '!');
             * bound('hi');
             * // => 'hi fred!'
             */
            var bind = baseRest(function (func, thisArg, partials) {
                var bitmask = WRAP_BIND_FLAG;
                if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bind));
                    bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(func, bitmask, thisArg, partials, holders);
            });
            /**
             * Creates a function that invokes the method at `object[key]` with `partials`
             * prepended to the arguments it receives.
             *
             * This method differs from `_.bind` by allowing bound functions to reference
             * methods that may be redefined or don't yet exist. See
             * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
             * for more details.
             *
             * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Function
             * @param {Object} object The object to invoke the method on.
             * @param {string} key The key of the method.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new bound function.
             * @example
             *
             * var object = {
             *   'user': 'fred',
             *   'greet': function(greeting, punctuation) {
             *     return greeting + ' ' + this.user + punctuation;
             *   }
             * };
             *
             * var bound = _.bindKey(object, 'greet', 'hi');
             * bound('!');
             * // => 'hi fred!'
             *
             * object.greet = function(greeting, punctuation) {
             *   return greeting + 'ya ' + this.user + punctuation;
             * };
             *
             * bound('!');
             * // => 'hiya fred!'
             *
             * // Bound with placeholders.
             * var bound = _.bindKey(object, 'greet', _, '!');
             * bound('hi');
             * // => 'hiya fred!'
             */
            var bindKey = baseRest(function (object, key, partials) {
                var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                if (partials.length) {
                    var holders = replaceHolders(partials, getHolder(bindKey));
                    bitmask |= WRAP_PARTIAL_FLAG;
                }
                return createWrap(key, bitmask, object, partials, holders);
            });
            /**
             * Creates a function that accepts arguments of `func` and either invokes
             * `func` returning its result, if at least `arity` number of arguments have
             * been provided, or returns a function that accepts the remaining `func`
             * arguments, and so on. The arity of `func` may be specified if `func.length`
             * is not sufficient.
             *
             * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
             * may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curry(abc);
             *
             * curried(1)(2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2)(3);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(1)(_, 3)(2);
             * // => [1, 2, 3]
             */
            function curry(func, arity, guard) {
                arity = guard ? undefined$1 : arity;
                var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
                result.placeholder = curry.placeholder;
                return result;
            }
            /**
             * This method is like `_.curry` except that arguments are applied to `func`
             * in the manner of `_.partialRight` instead of `_.partial`.
             *
             * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for provided arguments.
             *
             * **Note:** This method doesn't set the "length" property of curried functions.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to curry.
             * @param {number} [arity=func.length] The arity of `func`.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the new curried function.
             * @example
             *
             * var abc = function(a, b, c) {
             *   return [a, b, c];
             * };
             *
             * var curried = _.curryRight(abc);
             *
             * curried(3)(2)(1);
             * // => [1, 2, 3]
             *
             * curried(2, 3)(1);
             * // => [1, 2, 3]
             *
             * curried(1, 2, 3);
             * // => [1, 2, 3]
             *
             * // Curried with placeholders.
             * curried(3)(1, _)(2);
             * // => [1, 2, 3]
             */
            function curryRight(func, arity, guard) {
                arity = guard ? undefined$1 : arity;
                var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
                result.placeholder = curryRight.placeholder;
                return result;
            }
            /**
             * Creates a debounced function that delays invoking `func` until after `wait`
             * milliseconds have elapsed since the last time the debounced function was
             * invoked. The debounced function comes with a `cancel` method to cancel
             * delayed `func` invocations and a `flush` method to immediately invoke them.
             * Provide `options` to indicate whether `func` should be invoked on the
             * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
             * with the last arguments provided to the debounced function. Subsequent
             * calls to the debounced function return the result of the last `func`
             * invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the debounced function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.debounce` and `_.throttle`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to debounce.
             * @param {number} [wait=0] The number of milliseconds to delay.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=false]
             *  Specify invoking on the leading edge of the timeout.
             * @param {number} [options.maxWait]
             *  The maximum time `func` is allowed to be delayed before it's invoked.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new debounced function.
             * @example
             *
             * // Avoid costly calculations while the window size is in flux.
             * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
             *
             * // Invoke `sendMail` when clicked, debouncing subsequent calls.
             * jQuery(element).on('click', _.debounce(sendMail, 300, {
             *   'leading': true,
             *   'trailing': false
             * }));
             *
             * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
             * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
             * var source = new EventSource('/stream');
             * jQuery(source).on('message', debounced);
             *
             * // Cancel the trailing debounced invocation.
             * jQuery(window).on('popstate', debounced.cancel);
             */
            function debounce(func, wait, options) {
                var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                wait = toNumber(wait) || 0;
                if (isObject(options)) {
                    leading = !!options.leading;
                    maxing = 'maxWait' in options;
                    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                }
                function invokeFunc(time) {
                    var args = lastArgs, thisArg = lastThis;
                    lastArgs = lastThis = undefined$1;
                    lastInvokeTime = time;
                    result = func.apply(thisArg, args);
                    return result;
                }
                function leadingEdge(time) {
                    // Reset any `maxWait` timer.
                    lastInvokeTime = time;
                    // Start the timer for the trailing edge.
                    timerId = setTimeout(timerExpired, wait);
                    // Invoke the leading edge.
                    return leading ? invokeFunc(time) : result;
                }
                function remainingWait(time) {
                    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                    return maxing
                        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                        : timeWaiting;
                }
                function shouldInvoke(time) {
                    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                    // Either this is the first call, activity has stopped and we're at the
                    // trailing edge, the system time has gone backwards and we're treating
                    // it as the trailing edge, or we've hit the `maxWait` limit.
                    return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
                        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                }
                function timerExpired() {
                    var time = now();
                    if (shouldInvoke(time)) {
                        return trailingEdge(time);
                    }
                    // Restart the timer.
                    timerId = setTimeout(timerExpired, remainingWait(time));
                }
                function trailingEdge(time) {
                    timerId = undefined$1;
                    // Only invoke if we have `lastArgs` which means `func` has been
                    // debounced at least once.
                    if (trailing && lastArgs) {
                        return invokeFunc(time);
                    }
                    lastArgs = lastThis = undefined$1;
                    return result;
                }
                function cancel() {
                    if (timerId !== undefined$1) {
                        clearTimeout(timerId);
                    }
                    lastInvokeTime = 0;
                    lastArgs = lastCallTime = lastThis = timerId = undefined$1;
                }
                function flush() {
                    return timerId === undefined$1 ? result : trailingEdge(now());
                }
                function debounced() {
                    var time = now(), isInvoking = shouldInvoke(time);
                    lastArgs = arguments;
                    lastThis = this;
                    lastCallTime = time;
                    if (isInvoking) {
                        if (timerId === undefined$1) {
                            return leadingEdge(lastCallTime);
                        }
                        if (maxing) {
                            // Handle invocations in a tight loop.
                            clearTimeout(timerId);
                            timerId = setTimeout(timerExpired, wait);
                            return invokeFunc(lastCallTime);
                        }
                    }
                    if (timerId === undefined$1) {
                        timerId = setTimeout(timerExpired, wait);
                    }
                    return result;
                }
                debounced.cancel = cancel;
                debounced.flush = flush;
                return debounced;
            }
            /**
             * Defers invoking the `func` until the current call stack has cleared. Any
             * additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to defer.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.defer(function(text) {
             *   console.log(text);
             * }, 'deferred');
             * // => Logs 'deferred' after one millisecond.
             */
            var defer = baseRest(function (func, args) {
                return baseDelay(func, 1, args);
            });
            /**
             * Invokes `func` after `wait` milliseconds. Any additional arguments are
             * provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to delay.
             * @param {number} wait The number of milliseconds to delay invocation.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {number} Returns the timer id.
             * @example
             *
             * _.delay(function(text) {
             *   console.log(text);
             * }, 1000, 'later');
             * // => Logs 'later' after one second.
             */
            var delay = baseRest(function (func, wait, args) {
                return baseDelay(func, toNumber(wait) || 0, args);
            });
            /**
             * Creates a function that invokes `func` with arguments reversed.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to flip arguments for.
             * @returns {Function} Returns the new flipped function.
             * @example
             *
             * var flipped = _.flip(function() {
             *   return _.toArray(arguments);
             * });
             *
             * flipped('a', 'b', 'c', 'd');
             * // => ['d', 'c', 'b', 'a']
             */
            function flip(func) {
                return createWrap(func, WRAP_FLIP_FLAG);
            }
            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function () {
                    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                    if (cache.has(key)) {
                        return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                };
                memoized.cache = new (memoize.Cache || MapCache);
                return memoized;
            }
            // Expose `MapCache`.
            memoize.Cache = MapCache;
            /**
             * Creates a function that negates the result of the predicate `func`. The
             * `func` predicate is invoked with the `this` binding and arguments of the
             * created function.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} predicate The predicate to negate.
             * @returns {Function} Returns the new negated function.
             * @example
             *
             * function isEven(n) {
             *   return n % 2 == 0;
             * }
             *
             * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
             * // => [1, 3, 5]
             */
            function negate(predicate) {
                if (typeof predicate != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return function () {
                    var args = arguments;
                    switch (args.length) {
                        case 0: return !predicate.call(this);
                        case 1: return !predicate.call(this, args[0]);
                        case 2: return !predicate.call(this, args[0], args[1]);
                        case 3: return !predicate.call(this, args[0], args[1], args[2]);
                    }
                    return !predicate.apply(this, args);
                };
            }
            /**
             * Creates a function that is restricted to invoking `func` once. Repeat calls
             * to the function return the value of the first invocation. The `func` is
             * invoked with the `this` binding and arguments of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new restricted function.
             * @example
             *
             * var initialize = _.once(createApplication);
             * initialize();
             * initialize();
             * // => `createApplication` is invoked once
             */
            function once(func) {
                return before(2, func);
            }
            /**
             * Creates a function that invokes `func` with its arguments transformed.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Function
             * @param {Function} func The function to wrap.
             * @param {...(Function|Function[])} [transforms=[_.identity]]
             *  The argument transforms.
             * @returns {Function} Returns the new function.
             * @example
             *
             * function doubled(n) {
             *   return n * 2;
             * }
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var func = _.overArgs(function(x, y) {
             *   return [x, y];
             * }, [square, doubled]);
             *
             * func(9, 3);
             * // => [81, 6]
             *
             * func(10, 5);
             * // => [100, 10]
             */
            var overArgs = castRest(function (func, transforms) {
                transforms = (transforms.length == 1 && isArray(transforms[0]))
                    ? arrayMap(transforms[0], baseUnary(getIteratee()))
                    : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
                var funcsLength = transforms.length;
                return baseRest(function (args) {
                    var index = -1, length = nativeMin(args.length, funcsLength);
                    while (++index < length) {
                        args[index] = transforms[index].call(this, args[index]);
                    }
                    return apply(func, this, args);
                });
            });
            /**
             * Creates a function that invokes `func` with `partials` prepended to the
             * arguments it receives. This method is like `_.bind` except it does **not**
             * alter the `this` binding.
             *
             * The `_.partial.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 0.2.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var sayHelloTo = _.partial(greet, 'hello');
             * sayHelloTo('fred');
             * // => 'hello fred'
             *
             * // Partially applied with placeholders.
             * var greetFred = _.partial(greet, _, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             */
            var partial = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partial));
                return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
            });
            /**
             * This method is like `_.partial` except that partially applied arguments
             * are appended to the arguments it receives.
             *
             * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
             * builds, may be used as a placeholder for partially applied arguments.
             *
             * **Note:** This method doesn't set the "length" property of partially
             * applied functions.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Function
             * @param {Function} func The function to partially apply arguments to.
             * @param {...*} [partials] The arguments to be partially applied.
             * @returns {Function} Returns the new partially applied function.
             * @example
             *
             * function greet(greeting, name) {
             *   return greeting + ' ' + name;
             * }
             *
             * var greetFred = _.partialRight(greet, 'fred');
             * greetFred('hi');
             * // => 'hi fred'
             *
             * // Partially applied with placeholders.
             * var sayHelloTo = _.partialRight(greet, 'hello', _);
             * sayHelloTo('fred');
             * // => 'hello fred'
             */
            var partialRight = baseRest(function (func, partials) {
                var holders = replaceHolders(partials, getHolder(partialRight));
                return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
            });
            /**
             * Creates a function that invokes `func` with arguments arranged according
             * to the specified `indexes` where the argument value at the first index is
             * provided as the first argument, the argument value at the second index is
             * provided as the second argument, and so on.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Function
             * @param {Function} func The function to rearrange arguments for.
             * @param {...(number|number[])} indexes The arranged argument indexes.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var rearged = _.rearg(function(a, b, c) {
             *   return [a, b, c];
             * }, [2, 0, 1]);
             *
             * rearged('b', 'c', 'a')
             * // => ['a', 'b', 'c']
             */
            var rearg = flatRest(function (func, indexes) {
                return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
            });
            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * created function and arguments from `start` and beyond provided as
             * an array.
             *
             * **Note:** This method is based on the
             * [rest parameter](https://mdn.io/rest_parameters).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.rest(function(what, names) {
             *   return what + ' ' + _.initial(names).join(', ') +
             *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
             * });
             *
             * say('hello', 'fred', 'barney', 'pebbles');
             * // => 'hello fred, barney, & pebbles'
             */
            function rest(func, start) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start === undefined$1 ? start : toInteger(start);
                return baseRest(func, start);
            }
            /**
             * Creates a function that invokes `func` with the `this` binding of the
             * create function and an array of arguments much like
             * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
             *
             * **Note:** This method is based on the
             * [spread operator](https://mdn.io/spread_operator).
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Function
             * @param {Function} func The function to spread arguments over.
             * @param {number} [start=0] The start position of the spread.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var say = _.spread(function(who, what) {
             *   return who + ' says ' + what;
             * });
             *
             * say(['fred', 'hello']);
             * // => 'fred says hello'
             *
             * var numbers = Promise.all([
             *   Promise.resolve(40),
             *   Promise.resolve(36)
             * ]);
             *
             * numbers.then(_.spread(function(x, y) {
             *   return x + y;
             * }));
             * // => a Promise of 76
             */
            function spread(func, start) {
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                start = start == null ? 0 : nativeMax(toInteger(start), 0);
                return baseRest(function (args) {
                    var array = args[start], otherArgs = castSlice(args, 0, start);
                    if (array) {
                        arrayPush(otherArgs, array);
                    }
                    return apply(func, this, otherArgs);
                });
            }
            /**
             * Creates a throttled function that only invokes `func` at most once per
             * every `wait` milliseconds. The throttled function comes with a `cancel`
             * method to cancel delayed `func` invocations and a `flush` method to
             * immediately invoke them. Provide `options` to indicate whether `func`
             * should be invoked on the leading and/or trailing edge of the `wait`
             * timeout. The `func` is invoked with the last arguments provided to the
             * throttled function. Subsequent calls to the throttled function return the
             * result of the last `func` invocation.
             *
             * **Note:** If `leading` and `trailing` options are `true`, `func` is
             * invoked on the trailing edge of the timeout only if the throttled function
             * is invoked more than once during the `wait` timeout.
             *
             * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
             * until to the next tick, similar to `setTimeout` with a timeout of `0`.
             *
             * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
             * for details over the differences between `_.throttle` and `_.debounce`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to throttle.
             * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.leading=true]
             *  Specify invoking on the leading edge of the timeout.
             * @param {boolean} [options.trailing=true]
             *  Specify invoking on the trailing edge of the timeout.
             * @returns {Function} Returns the new throttled function.
             * @example
             *
             * // Avoid excessively updating the position while scrolling.
             * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
             *
             * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
             * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
             * jQuery(element).on('click', throttled);
             *
             * // Cancel the trailing throttled invocation.
             * jQuery(window).on('popstate', throttled.cancel);
             */
            function throttle(func, wait, options) {
                var leading = true, trailing = true;
                if (typeof func != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                if (isObject(options)) {
                    leading = 'leading' in options ? !!options.leading : leading;
                    trailing = 'trailing' in options ? !!options.trailing : trailing;
                }
                return debounce(func, wait, {
                    'leading': leading,
                    'maxWait': wait,
                    'trailing': trailing
                });
            }
            /**
             * Creates a function that accepts up to one argument, ignoring any
             * additional arguments.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Function
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             * @example
             *
             * _.map(['6', '8', '10'], _.unary(parseInt));
             * // => [6, 8, 10]
             */
            function unary(func) {
                return ary(func, 1);
            }
            /**
             * Creates a function that provides `value` to `wrapper` as its first
             * argument. Any additional arguments provided to the function are appended
             * to those provided to the `wrapper`. The wrapper is invoked with the `this`
             * binding of the created function.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {*} value The value to wrap.
             * @param {Function} [wrapper=identity] The wrapper function.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var p = _.wrap(_.escape, function(func, text) {
             *   return '<p>' + func(text) + '</p>';
             * });
             *
             * p('fred, barney, & pebbles');
             * // => '<p>fred, barney, &amp; pebbles</p>'
             */
            function wrap(value, wrapper) {
                return partial(castFunction(wrapper), value);
            }
            /*------------------------------------------------------------------------*/
            /**
             * Casts `value` as an array if it's not one.
             *
             * @static
             * @memberOf _
             * @since 4.4.0
             * @category Lang
             * @param {*} value The value to inspect.
             * @returns {Array} Returns the cast array.
             * @example
             *
             * _.castArray(1);
             * // => [1]
             *
             * _.castArray({ 'a': 1 });
             * // => [{ 'a': 1 }]
             *
             * _.castArray('abc');
             * // => ['abc']
             *
             * _.castArray(null);
             * // => [null]
             *
             * _.castArray(undefined);
             * // => [undefined]
             *
             * _.castArray();
             * // => []
             *
             * var array = [1, 2, 3];
             * console.log(_.castArray(array) === array);
             * // => true
             */
            function castArray() {
                if (!arguments.length) {
                    return [];
                }
                var value = arguments[0];
                return isArray(value) ? value : [value];
            }
            /**
             * Creates a shallow clone of `value`.
             *
             * **Note:** This method is loosely based on the
             * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
             * and supports cloning arrays, array buffers, booleans, date objects, maps,
             * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
             * arrays. The own enumerable properties of `arguments` objects are cloned
             * as plain objects. An empty object is returned for uncloneable values such
             * as error objects, functions, DOM nodes, and WeakMaps.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to clone.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeep
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var shallow = _.clone(objects);
             * console.log(shallow[0] === objects[0]);
             * // => true
             */
            function clone(value) {
                return baseClone(value, CLONE_SYMBOLS_FLAG);
            }
            /**
             * This method is like `_.clone` except that it accepts `customizer` which
             * is invoked to produce the cloned value. If `customizer` returns `undefined`,
             * cloning is handled by the method instead. The `customizer` is invoked with
             * up to four arguments; (value [, index|key, object, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the cloned value.
             * @see _.cloneDeepWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(false);
             *   }
             * }
             *
             * var el = _.cloneWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 0
             */
            function cloneWith(value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
            }
            /**
             * This method is like `_.clone` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @returns {*} Returns the deep cloned value.
             * @see _.clone
             * @example
             *
             * var objects = [{ 'a': 1 }, { 'b': 2 }];
             *
             * var deep = _.cloneDeep(objects);
             * console.log(deep[0] === objects[0]);
             * // => false
             */
            function cloneDeep(value) {
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
            }
            /**
             * This method is like `_.cloneWith` except that it recursively clones `value`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to recursively clone.
             * @param {Function} [customizer] The function to customize cloning.
             * @returns {*} Returns the deep cloned value.
             * @see _.cloneWith
             * @example
             *
             * function customizer(value) {
             *   if (_.isElement(value)) {
             *     return value.cloneNode(true);
             *   }
             * }
             *
             * var el = _.cloneDeepWith(document.body, customizer);
             *
             * console.log(el === document.body);
             * // => false
             * console.log(el.nodeName);
             * // => 'BODY'
             * console.log(el.childNodes.length);
             * // => 20
             */
            function cloneDeepWith(value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
            }
            /**
             * Checks if `object` conforms to `source` by invoking the predicate
             * properties of `source` with the corresponding property values of `object`.
             *
             * **Note:** This method is equivalent to `_.conforms` when `source` is
             * partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property predicates to conform to.
             * @returns {boolean} Returns `true` if `object` conforms, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
             * // => true
             *
             * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
             * // => false
             */
            function conformsTo(object, source) {
                return source == null || baseConformsTo(object, source, keys(source));
            }
            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
                return value === other || (value !== value && other !== other);
            }
            /**
             * Checks if `value` is greater than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than `other`,
             *  else `false`.
             * @see _.lt
             * @example
             *
             * _.gt(3, 1);
             * // => true
             *
             * _.gt(3, 3);
             * // => false
             *
             * _.gt(1, 3);
             * // => false
             */
            var gt = createRelationalOperation(baseGt);
            /**
             * Checks if `value` is greater than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is greater than or equal to
             *  `other`, else `false`.
             * @see _.lte
             * @example
             *
             * _.gte(3, 1);
             * // => true
             *
             * _.gte(3, 3);
             * // => true
             *
             * _.gte(1, 3);
             * // => false
             */
            var gte = createRelationalOperation(function (value, other) {
                return value >= other;
            });
            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(function () { return arguments; }()) ? baseIsArguments : function (value) {
                return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                    !propertyIsEnumerable.call(value, 'callee');
            };
            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;
            /**
             * Checks if `value` is classified as an `ArrayBuffer` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
             * @example
             *
             * _.isArrayBuffer(new ArrayBuffer(2));
             * // => true
             *
             * _.isArrayBuffer(new Array(2));
             * // => false
             */
            var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
                return value != null && isLength(value.length) && !isFunction(value);
            }
            /**
             * This method is like `_.isArrayLike` except that it also checks if `value`
             * is an object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array-like object,
             *  else `false`.
             * @example
             *
             * _.isArrayLikeObject([1, 2, 3]);
             * // => true
             *
             * _.isArrayLikeObject(document.body.children);
             * // => true
             *
             * _.isArrayLikeObject('abc');
             * // => false
             *
             * _.isArrayLikeObject(_.noop);
             * // => false
             */
            function isArrayLikeObject(value) {
                return isObjectLike(value) && isArrayLike(value);
            }
            /**
             * Checks if `value` is classified as a boolean primitive or object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
             * @example
             *
             * _.isBoolean(false);
             * // => true
             *
             * _.isBoolean(null);
             * // => false
             */
            function isBoolean(value) {
                return value === true || value === false ||
                    (isObjectLike(value) && baseGetTag(value) == boolTag);
            }
            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;
            /**
             * Checks if `value` is classified as a `Date` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
             * @example
             *
             * _.isDate(new Date);
             * // => true
             *
             * _.isDate('Mon April 23 2012');
             * // => false
             */
            var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
            /**
             * Checks if `value` is likely a DOM element.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
             * @example
             *
             * _.isElement(document.body);
             * // => true
             *
             * _.isElement('<body>');
             * // => false
             */
            function isElement(value) {
                return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
            }
            /**
             * Checks if `value` is an empty object, collection, map, or set.
             *
             * Objects are considered empty if they have no own enumerable string keyed
             * properties.
             *
             * Array-like values such as `arguments` objects, arrays, buffers, strings, or
             * jQuery-like collections are considered empty if they have a `length` of `0`.
             * Similarly, maps and sets are considered empty if they have a `size` of `0`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is empty, else `false`.
             * @example
             *
             * _.isEmpty(null);
             * // => true
             *
             * _.isEmpty(true);
             * // => true
             *
             * _.isEmpty(1);
             * // => true
             *
             * _.isEmpty([1, 2, 3]);
             * // => false
             *
             * _.isEmpty({ 'a': 1 });
             * // => false
             */
            function isEmpty(value) {
                if (value == null) {
                    return true;
                }
                if (isArrayLike(value) &&
                    (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                    return !value.length;
                }
                var tag = getTag(value);
                if (tag == mapTag || tag == setTag) {
                    return !value.size;
                }
                if (isPrototype(value)) {
                    return !baseKeys(value).length;
                }
                for (var key in value) {
                    if (hasOwnProperty.call(value, key)) {
                        return false;
                    }
                }
                return true;
            }
            /**
             * Performs a deep comparison between two values to determine if they are
             * equivalent.
             *
             * **Note:** This method supports comparing arrays, array buffers, booleans,
             * date objects, error objects, maps, numbers, `Object` objects, regexes,
             * sets, strings, symbols, and typed arrays. `Object` objects are compared
             * by their own, not inherited, enumerable properties. Functions and DOM
             * nodes are compared by strict equality, i.e. `===`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.isEqual(object, other);
             * // => true
             *
             * object === other;
             * // => false
             */
            function isEqual(value, other) {
                return baseIsEqual(value, other);
            }
            /**
             * This method is like `_.isEqual` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with up to
             * six arguments: (objValue, othValue [, index|key, object, other, stack]).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, othValue) {
             *   if (isGreeting(objValue) && isGreeting(othValue)) {
             *     return true;
             *   }
             * }
             *
             * var array = ['hello', 'goodbye'];
             * var other = ['hi', 'goodbye'];
             *
             * _.isEqualWith(array, other, customizer);
             * // => true
             */
            function isEqualWith(value, other, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                var result = customizer ? customizer(value, other) : undefined$1;
                return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
            }
            /**
             * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
             * `SyntaxError`, `TypeError`, or `URIError` object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
             * @example
             *
             * _.isError(new Error);
             * // => true
             *
             * _.isError(Error);
             * // => false
             */
            function isError(value) {
                if (!isObjectLike(value)) {
                    return false;
                }
                var tag = baseGetTag(value);
                return tag == errorTag || tag == domExcTag ||
                    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
            }
            /**
             * Checks if `value` is a finite primitive number.
             *
             * **Note:** This method is based on
             * [`Number.isFinite`](https://mdn.io/Number/isFinite).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
             * @example
             *
             * _.isFinite(3);
             * // => true
             *
             * _.isFinite(Number.MIN_VALUE);
             * // => true
             *
             * _.isFinite(Infinity);
             * // => false
             *
             * _.isFinite('3');
             * // => false
             */
            function isFinite(value) {
                return typeof value == 'number' && nativeIsFinite(value);
            }
            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
                if (!isObject(value)) {
                    return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }
            /**
             * Checks if `value` is an integer.
             *
             * **Note:** This method is based on
             * [`Number.isInteger`](https://mdn.io/Number/isInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
             * @example
             *
             * _.isInteger(3);
             * // => true
             *
             * _.isInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isInteger(Infinity);
             * // => false
             *
             * _.isInteger('3');
             * // => false
             */
            function isInteger(value) {
                return typeof value == 'number' && value == toInteger(value);
            }
            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
                return typeof value == 'number' &&
                    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }
            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
                var type = typeof value;
                return value != null && (type == 'object' || type == 'function');
            }
            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
                return value != null && typeof value == 'object';
            }
            /**
             * Checks if `value` is classified as a `Map` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a map, else `false`.
             * @example
             *
             * _.isMap(new Map);
             * // => true
             *
             * _.isMap(new WeakMap);
             * // => false
             */
            var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
            /**
             * Performs a partial deep comparison between `object` and `source` to
             * determine if `object` contains equivalent property values.
             *
             * **Note:** This method is equivalent to `_.matches` when `source` is
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             *
             * _.isMatch(object, { 'b': 2 });
             * // => true
             *
             * _.isMatch(object, { 'b': 1 });
             * // => false
             */
            function isMatch(object, source) {
                return object === source || baseIsMatch(object, source, getMatchData(source));
            }
            /**
             * This method is like `_.isMatch` except that it accepts `customizer` which
             * is invoked to compare values. If `customizer` returns `undefined`, comparisons
             * are handled by the method instead. The `customizer` is invoked with five
             * arguments: (objValue, srcValue, index|key, object, source).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             * @example
             *
             * function isGreeting(value) {
             *   return /^h(?:i|ello)$/.test(value);
             * }
             *
             * function customizer(objValue, srcValue) {
             *   if (isGreeting(objValue) && isGreeting(srcValue)) {
             *     return true;
             *   }
             * }
             *
             * var object = { 'greeting': 'hello' };
             * var source = { 'greeting': 'hi' };
             *
             * _.isMatchWith(object, source, customizer);
             * // => true
             */
            function isMatchWith(object, source, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return baseIsMatch(object, source, getMatchData(source), customizer);
            }
            /**
             * Checks if `value` is `NaN`.
             *
             * **Note:** This method is based on
             * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
             * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
             * `undefined` and other non-number values.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
             * @example
             *
             * _.isNaN(NaN);
             * // => true
             *
             * _.isNaN(new Number(NaN));
             * // => true
             *
             * isNaN(undefined);
             * // => true
             *
             * _.isNaN(undefined);
             * // => false
             */
            function isNaN(value) {
                // An `NaN` primitive is the only value that is not equal to itself.
                // Perform the `toStringTag` check first to avoid errors with some
                // ActiveX objects in IE.
                return isNumber(value) && value != +value;
            }
            /**
             * Checks if `value` is a pristine native function.
             *
             * **Note:** This method can't reliably detect native functions in the presence
             * of the core-js package because core-js circumvents this kind of detection.
             * Despite multiple requests, the core-js maintainer has made it clear: any
             * attempt to fix the detection will be obstructed. As a result, we're left
             * with little choice but to throw an error. Unfortunately, this also affects
             * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
             * which rely on core-js.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             * @example
             *
             * _.isNative(Array.prototype.push);
             * // => true
             *
             * _.isNative(_);
             * // => false
             */
            function isNative(value) {
                if (isMaskable(value)) {
                    throw new Error(CORE_ERROR_TEXT);
                }
                return baseIsNative(value);
            }
            /**
             * Checks if `value` is `null`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
             * @example
             *
             * _.isNull(null);
             * // => true
             *
             * _.isNull(void 0);
             * // => false
             */
            function isNull(value) {
                return value === null;
            }
            /**
             * Checks if `value` is `null` or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
             * @example
             *
             * _.isNil(null);
             * // => true
             *
             * _.isNil(void 0);
             * // => true
             *
             * _.isNil(NaN);
             * // => false
             */
            function isNil(value) {
                return value == null;
            }
            /**
             * Checks if `value` is classified as a `Number` primitive or object.
             *
             * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
             * classified as numbers, use the `_.isFinite` method.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a number, else `false`.
             * @example
             *
             * _.isNumber(3);
             * // => true
             *
             * _.isNumber(Number.MIN_VALUE);
             * // => true
             *
             * _.isNumber(Infinity);
             * // => true
             *
             * _.isNumber('3');
             * // => false
             */
            function isNumber(value) {
                return typeof value == 'number' ||
                    (isObjectLike(value) && baseGetTag(value) == numberTag);
            }
            /**
             * Checks if `value` is a plain object, that is, an object created by the
             * `Object` constructor or one with a `[[Prototype]]` of `null`.
             *
             * @static
             * @memberOf _
             * @since 0.8.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * _.isPlainObject(new Foo);
             * // => false
             *
             * _.isPlainObject([1, 2, 3]);
             * // => false
             *
             * _.isPlainObject({ 'x': 0, 'y': 0 });
             * // => true
             *
             * _.isPlainObject(Object.create(null));
             * // => true
             */
            function isPlainObject(value) {
                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                    return false;
                }
                var proto = getPrototype(value);
                if (proto === null) {
                    return true;
                }
                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                    funcToString.call(Ctor) == objectCtorString;
            }
            /**
             * Checks if `value` is classified as a `RegExp` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
             * @example
             *
             * _.isRegExp(/abc/);
             * // => true
             *
             * _.isRegExp('/abc/');
             * // => false
             */
            var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
            /**
             * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
             * double precision number which isn't the result of a rounded unsafe integer.
             *
             * **Note:** This method is based on
             * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
             * @example
             *
             * _.isSafeInteger(3);
             * // => true
             *
             * _.isSafeInteger(Number.MIN_VALUE);
             * // => false
             *
             * _.isSafeInteger(Infinity);
             * // => false
             *
             * _.isSafeInteger('3');
             * // => false
             */
            function isSafeInteger(value) {
                return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
            }
            /**
             * Checks if `value` is classified as a `Set` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a set, else `false`.
             * @example
             *
             * _.isSet(new Set);
             * // => true
             *
             * _.isSet(new WeakSet);
             * // => false
             */
            var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
            /**
             * Checks if `value` is classified as a `String` primitive or object.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a string, else `false`.
             * @example
             *
             * _.isString('abc');
             * // => true
             *
             * _.isString(1);
             * // => false
             */
            function isString(value) {
                return typeof value == 'string' ||
                    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
            }
            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
                return typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag);
            }
            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
            /**
             * Checks if `value` is `undefined`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
             * @example
             *
             * _.isUndefined(void 0);
             * // => true
             *
             * _.isUndefined(null);
             * // => false
             */
            function isUndefined(value) {
                return value === undefined$1;
            }
            /**
             * Checks if `value` is classified as a `WeakMap` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
             * @example
             *
             * _.isWeakMap(new WeakMap);
             * // => true
             *
             * _.isWeakMap(new Map);
             * // => false
             */
            function isWeakMap(value) {
                return isObjectLike(value) && getTag(value) == weakMapTag;
            }
            /**
             * Checks if `value` is classified as a `WeakSet` object.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
             * @example
             *
             * _.isWeakSet(new WeakSet);
             * // => true
             *
             * _.isWeakSet(new Set);
             * // => false
             */
            function isWeakSet(value) {
                return isObjectLike(value) && baseGetTag(value) == weakSetTag;
            }
            /**
             * Checks if `value` is less than `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than `other`,
             *  else `false`.
             * @see _.gt
             * @example
             *
             * _.lt(1, 3);
             * // => true
             *
             * _.lt(3, 3);
             * // => false
             *
             * _.lt(3, 1);
             * // => false
             */
            var lt = createRelationalOperation(baseLt);
            /**
             * Checks if `value` is less than or equal to `other`.
             *
             * @static
             * @memberOf _
             * @since 3.9.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if `value` is less than or equal to
             *  `other`, else `false`.
             * @see _.gte
             * @example
             *
             * _.lte(1, 3);
             * // => true
             *
             * _.lte(3, 3);
             * // => true
             *
             * _.lte(3, 1);
             * // => false
             */
            var lte = createRelationalOperation(function (value, other) {
                return value <= other;
            });
            /**
             * Converts `value` to an array.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Array} Returns the converted array.
             * @example
             *
             * _.toArray({ 'a': 1, 'b': 2 });
             * // => [1, 2]
             *
             * _.toArray('abc');
             * // => ['a', 'b', 'c']
             *
             * _.toArray(1);
             * // => []
             *
             * _.toArray(null);
             * // => []
             */
            function toArray(value) {
                if (!value) {
                    return [];
                }
                if (isArrayLike(value)) {
                    return isString(value) ? stringToArray(value) : copyArray(value);
                }
                if (symIterator && value[symIterator]) {
                    return iteratorToArray(value[symIterator]());
                }
                var tag = getTag(value), func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
                return func(value);
            }
            /**
             * Converts `value` to a finite number.
             *
             * @static
             * @memberOf _
             * @since 4.12.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted number.
             * @example
             *
             * _.toFinite(3.2);
             * // => 3.2
             *
             * _.toFinite(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toFinite(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toFinite('3.2');
             * // => 3.2
             */
            function toFinite(value) {
                if (!value) {
                    return value === 0 ? value : 0;
                }
                value = toNumber(value);
                if (value === INFINITY || value === -INFINITY) {
                    var sign = (value < 0 ? -1 : 1);
                    return sign * MAX_INTEGER;
                }
                return value === value ? value : 0;
            }
            /**
             * Converts `value` to an integer.
             *
             * **Note:** This method is loosely based on
             * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toInteger(3.2);
             * // => 3
             *
             * _.toInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toInteger(Infinity);
             * // => 1.7976931348623157e+308
             *
             * _.toInteger('3.2');
             * // => 3
             */
            function toInteger(value) {
                var result = toFinite(value), remainder = result % 1;
                return result === result ? (remainder ? result - remainder : result) : 0;
            }
            /**
             * Converts `value` to an integer suitable for use as the length of an
             * array-like object.
             *
             * **Note:** This method is based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toLength(3.2);
             * // => 3
             *
             * _.toLength(Number.MIN_VALUE);
             * // => 0
             *
             * _.toLength(Infinity);
             * // => 4294967295
             *
             * _.toLength('3.2');
             * // => 3
             */
            function toLength(value) {
                return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
            }
            /**
             * Converts `value` to a number.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to process.
             * @returns {number} Returns the number.
             * @example
             *
             * _.toNumber(3.2);
             * // => 3.2
             *
             * _.toNumber(Number.MIN_VALUE);
             * // => 5e-324
             *
             * _.toNumber(Infinity);
             * // => Infinity
             *
             * _.toNumber('3.2');
             * // => 3.2
             */
            function toNumber(value) {
                if (typeof value == 'number') {
                    return value;
                }
                if (isSymbol(value)) {
                    return NAN;
                }
                if (isObject(value)) {
                    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                    value = isObject(other) ? (other + '') : other;
                }
                if (typeof value != 'string') {
                    return value === 0 ? value : +value;
                }
                value = baseTrim(value);
                var isBinary = reIsBinary.test(value);
                return (isBinary || reIsOctal.test(value))
                    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                    : (reIsBadHex.test(value) ? NAN : +value);
            }
            /**
             * Converts `value` to a plain object flattening inherited enumerable string
             * keyed properties of `value` to own properties of the plain object.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {Object} Returns the converted plain object.
             * @example
             *
             * function Foo() {
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.assign({ 'a': 1 }, new Foo);
             * // => { 'a': 1, 'b': 2 }
             *
             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
             * // => { 'a': 1, 'b': 2, 'c': 3 }
             */
            function toPlainObject(value) {
                return copyObject(value, keysIn(value));
            }
            /**
             * Converts `value` to a safe integer. A safe integer can be compared and
             * represented correctly.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.toSafeInteger(3.2);
             * // => 3
             *
             * _.toSafeInteger(Number.MIN_VALUE);
             * // => 0
             *
             * _.toSafeInteger(Infinity);
             * // => 9007199254740991
             *
             * _.toSafeInteger('3.2');
             * // => 3
             */
            function toSafeInteger(value) {
                return value
                    ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                    : (value === 0 ? value : 0);
            }
            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
                return value == null ? '' : baseToString(value);
            }
            /*------------------------------------------------------------------------*/
            /**
             * Assigns own enumerable string keyed properties of source objects to the
             * destination object. Source objects are applied from left to right.
             * Subsequent sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object` and is loosely based on
             * [`Object.assign`](https://mdn.io/Object/assign).
             *
             * @static
             * @memberOf _
             * @since 0.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assignIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assign({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'c': 3 }
             */
            var assign = createAssigner(function (object, source) {
                if (isPrototype(source) || isArrayLike(source)) {
                    copyObject(source, keys(source), object);
                    return;
                }
                for (var key in source) {
                    if (hasOwnProperty.call(source, key)) {
                        assignValue(object, key, source[key]);
                    }
                }
            });
            /**
             * This method is like `_.assign` except that it iterates over own and
             * inherited source properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extend
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.assign
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             * }
             *
             * function Bar() {
             *   this.c = 3;
             * }
             *
             * Foo.prototype.b = 2;
             * Bar.prototype.d = 4;
             *
             * _.assignIn({ 'a': 0 }, new Foo, new Bar);
             * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
             */
            var assignIn = createAssigner(function (object, source) {
                copyObject(source, keysIn(source), object);
            });
            /**
             * This method is like `_.assignIn` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias extendWith
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignInWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                copyObject(source, keysIn(source), object, customizer);
            });
            /**
             * This method is like `_.assign` except that it accepts `customizer`
             * which is invoked to produce the assigned values. If `customizer` returns
             * `undefined`, assignment is handled by the method instead. The `customizer`
             * is invoked with five arguments: (objValue, srcValue, key, object, source).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @see _.assignInWith
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   return _.isUndefined(objValue) ? srcValue : objValue;
             * }
             *
             * var defaults = _.partialRight(_.assignWith, customizer);
             *
             * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                copyObject(source, keys(source), object, customizer);
            });
            /**
             * Creates an array of values corresponding to `paths` of `object`.
             *
             * @static
             * @memberOf _
             * @since 1.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Array} Returns the picked values.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
             *
             * _.at(object, ['a[0].b.c', 'a[1]']);
             * // => [3, 4]
             */
            var at = flatRest(baseAt);
            /**
             * Creates an object that inherits from the `prototype` object. If a
             * `properties` object is given, its own enumerable string keyed properties
             * are assigned to the created object.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Object
             * @param {Object} prototype The object to inherit from.
             * @param {Object} [properties] The properties to assign to the object.
             * @returns {Object} Returns the new object.
             * @example
             *
             * function Shape() {
             *   this.x = 0;
             *   this.y = 0;
             * }
             *
             * function Circle() {
             *   Shape.call(this);
             * }
             *
             * Circle.prototype = _.create(Shape.prototype, {
             *   'constructor': Circle
             * });
             *
             * var circle = new Circle;
             * circle instanceof Circle;
             * // => true
             *
             * circle instanceof Shape;
             * // => true
             */
            function create(prototype, properties) {
                var result = baseCreate(prototype);
                return properties == null ? result : baseAssign(result, properties);
            }
            /**
             * Assigns own and inherited enumerable string keyed properties of source
             * objects to the destination object for all destination properties that
             * resolve to `undefined`. Source objects are applied from left to right.
             * Once a property is set, additional values of the same property are ignored.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaultsDeep
             * @example
             *
             * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
             * // => { 'a': 1, 'b': 2 }
             */
            var defaults = baseRest(function (object, sources) {
                object = Object(object);
                var index = -1;
                var length = sources.length;
                var guard = length > 2 ? sources[2] : undefined$1;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    length = 1;
                }
                while (++index < length) {
                    var source = sources[index];
                    var props = keysIn(source);
                    var propsIndex = -1;
                    var propsLength = props.length;
                    while (++propsIndex < propsLength) {
                        var key = props[propsIndex];
                        var value = object[key];
                        if (value === undefined$1 ||
                            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                            object[key] = source[key];
                        }
                    }
                }
                return object;
            });
            /**
             * This method is like `_.defaults` except that it recursively assigns
             * default properties.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @see _.defaults
             * @example
             *
             * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
             * // => { 'a': { 'b': 2, 'c': 3 } }
             */
            var defaultsDeep = baseRest(function (args) {
                args.push(undefined$1, customDefaultsMerge);
                return apply(mergeWith, undefined$1, args);
            });
            /**
             * This method is like `_.find` except that it returns the key of the first
             * element `predicate` returns truthy for instead of the element itself.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findKey(users, function(o) { return o.age < 40; });
             * // => 'barney' (iteration order is not guaranteed)
             *
             * // The `_.matches` iteratee shorthand.
             * _.findKey(users, { 'age': 1, 'active': true });
             * // => 'pebbles'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findKey(users, 'active');
             * // => 'barney'
             */
            function findKey(object, predicate) {
                return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
            }
            /**
             * This method is like `_.findKey` except that it iterates over elements of
             * a collection in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @param {Function} [predicate=_.identity] The function invoked per iteration.
             * @returns {string|undefined} Returns the key of the matched element,
             *  else `undefined`.
             * @example
             *
             * var users = {
             *   'barney':  { 'age': 36, 'active': true },
             *   'fred':    { 'age': 40, 'active': false },
             *   'pebbles': { 'age': 1,  'active': true }
             * };
             *
             * _.findLastKey(users, function(o) { return o.age < 40; });
             * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
             *
             * // The `_.matches` iteratee shorthand.
             * _.findLastKey(users, { 'age': 36, 'active': true });
             * // => 'barney'
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.findLastKey(users, ['active', false]);
             * // => 'fred'
             *
             * // The `_.property` iteratee shorthand.
             * _.findLastKey(users, 'active');
             * // => 'pebbles'
             */
            function findLastKey(object, predicate) {
                return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
            }
            /**
             * Iterates over own and inherited enumerable string keyed properties of an
             * object and invokes `iteratee` for each property. The iteratee is invoked
             * with three arguments: (value, key, object). Iteratee functions may exit
             * iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forInRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forIn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
             */
            function forIn(object, iteratee) {
                return object == null
                    ? object
                    : baseFor(object, getIteratee(iteratee, 3), keysIn);
            }
            /**
             * This method is like `_.forIn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forIn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forInRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
             */
            function forInRight(object, iteratee) {
                return object == null
                    ? object
                    : baseForRight(object, getIteratee(iteratee, 3), keysIn);
            }
            /**
             * Iterates over own enumerable string keyed properties of an object and
             * invokes `iteratee` for each property. The iteratee is invoked with three
             * arguments: (value, key, object). Iteratee functions may exit iteration
             * early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 0.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwnRight
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwn(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'a' then 'b' (iteration order is not guaranteed).
             */
            function forOwn(object, iteratee) {
                return object && baseForOwn(object, getIteratee(iteratee, 3));
            }
            /**
             * This method is like `_.forOwn` except that it iterates over properties of
             * `object` in the opposite order.
             *
             * @static
             * @memberOf _
             * @since 2.0.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns `object`.
             * @see _.forOwn
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.forOwnRight(new Foo, function(value, key) {
             *   console.log(key);
             * });
             * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
             */
            function forOwnRight(object, iteratee) {
                return object && baseForOwnRight(object, getIteratee(iteratee, 3));
            }
            /**
             * Creates an array of function property names from own enumerable properties
             * of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functionsIn
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functions(new Foo);
             * // => ['a', 'b']
             */
            function functions(object) {
                return object == null ? [] : baseFunctions(object, keys(object));
            }
            /**
             * Creates an array of function property names from own and inherited
             * enumerable properties of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to inspect.
             * @returns {Array} Returns the function names.
             * @see _.functions
             * @example
             *
             * function Foo() {
             *   this.a = _.constant('a');
             *   this.b = _.constant('b');
             * }
             *
             * Foo.prototype.c = _.constant('c');
             *
             * _.functionsIn(new Foo);
             * // => ['a', 'b', 'c']
             */
            function functionsIn(object) {
                return object == null ? [] : baseFunctions(object, keysIn(object));
            }
            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
                var result = object == null ? undefined$1 : baseGet(object, path);
                return result === undefined$1 ? defaultValue : result;
            }
            /**
             * Checks if `path` is a direct property of `object`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = { 'a': { 'b': 2 } };
             * var other = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.has(object, 'a');
             * // => true
             *
             * _.has(object, 'a.b');
             * // => true
             *
             * _.has(object, ['a', 'b']);
             * // => true
             *
             * _.has(other, 'a');
             * // => false
             */
            function has(object, path) {
                return object != null && hasPath(object, path, baseHas);
            }
            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
            }
            /**
             * Creates an object composed of the inverted keys and values of `object`.
             * If `object` contains duplicate values, subsequent values overwrite
             * property assignments of previous values.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Object
             * @param {Object} object The object to invert.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invert(object);
             * // => { '1': 'c', '2': 'b' }
             */
            var invert = createInverter(function (result, value, key) {
                if (value != null &&
                    typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                }
                result[value] = key;
            }, constant(identity));
            /**
             * This method is like `_.invert` except that the inverted object is generated
             * from the results of running each element of `object` thru `iteratee`. The
             * corresponding inverted value of each inverted key is an array of keys
             * responsible for generating the inverted value. The iteratee is invoked
             * with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.1.0
             * @category Object
             * @param {Object} object The object to invert.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {Object} Returns the new inverted object.
             * @example
             *
             * var object = { 'a': 1, 'b': 2, 'c': 1 };
             *
             * _.invertBy(object);
             * // => { '1': ['a', 'c'], '2': ['b'] }
             *
             * _.invertBy(object, function(value) {
             *   return 'group' + value;
             * });
             * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
             */
            var invertBy = createInverter(function (result, value, key) {
                if (value != null &&
                    typeof value.toString != 'function') {
                    value = nativeObjectToString.call(value);
                }
                if (hasOwnProperty.call(result, value)) {
                    result[value].push(key);
                }
                else {
                    result[value] = [key];
                }
            }, getIteratee);
            /**
             * Invokes the method at `path` of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {*} Returns the result of the invoked method.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
             *
             * _.invoke(object, 'a[0].b.c.slice', 1, 3);
             * // => [2, 3]
             */
            var invoke = baseRest(baseInvoke);
            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }
            /**
             * Creates an array of the own and inherited enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keysIn(new Foo);
             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
             */
            function keysIn(object) {
                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
            }
            /**
             * The opposite of `_.mapValues`; this method creates an object with the
             * same values as `object` and keys generated by running each own enumerable
             * string keyed property of `object` thru `iteratee`. The iteratee is invoked
             * with three arguments: (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 3.8.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapValues
             * @example
             *
             * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
             *   return key + value;
             * });
             * // => { 'a1': 1, 'b2': 2 }
             */
            function mapKeys(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);
                baseForOwn(object, function (value, key, object) {
                    baseAssignValue(result, iteratee(value, key, object), value);
                });
                return result;
            }
            /**
             * Creates an object with the same keys as `object` and values generated
             * by running each own enumerable string keyed property of `object` thru
             * `iteratee`. The iteratee is invoked with three arguments:
             * (value, key, object).
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Object} Returns the new mapped object.
             * @see _.mapKeys
             * @example
             *
             * var users = {
             *   'fred':    { 'user': 'fred',    'age': 40 },
             *   'pebbles': { 'user': 'pebbles', 'age': 1 }
             * };
             *
             * _.mapValues(users, function(o) { return o.age; });
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             *
             * // The `_.property` iteratee shorthand.
             * _.mapValues(users, 'age');
             * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
             */
            function mapValues(object, iteratee) {
                var result = {};
                iteratee = getIteratee(iteratee, 3);
                baseForOwn(object, function (value, key, object) {
                    baseAssignValue(result, key, iteratee(value, key, object));
                });
                return result;
            }
            /**
             * This method is like `_.assign` except that it recursively merges own and
             * inherited enumerable string keyed properties of source objects into the
             * destination object. Source properties that resolve to `undefined` are
             * skipped if a destination value exists. Array and plain object properties
             * are merged recursively. Other objects and value types are overridden by
             * assignment. Source objects are applied from left to right. Subsequent
             * sources overwrite property assignments of previous sources.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 0.5.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} [sources] The source objects.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {
             *   'a': [{ 'b': 2 }, { 'd': 4 }]
             * };
             *
             * var other = {
             *   'a': [{ 'c': 3 }, { 'e': 5 }]
             * };
             *
             * _.merge(object, other);
             * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
             */
            var merge = createAssigner(function (object, source, srcIndex) {
                baseMerge(object, source, srcIndex);
            });
            /**
             * This method is like `_.merge` except that it accepts `customizer` which
             * is invoked to produce the merged values of the destination and source
             * properties. If `customizer` returns `undefined`, merging is handled by the
             * method instead. The `customizer` is invoked with six arguments:
             * (objValue, srcValue, key, object, source, stack).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The destination object.
             * @param {...Object} sources The source objects.
             * @param {Function} customizer The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * function customizer(objValue, srcValue) {
             *   if (_.isArray(objValue)) {
             *     return objValue.concat(srcValue);
             *   }
             * }
             *
             * var object = { 'a': [1], 'b': [2] };
             * var other = { 'a': [3], 'b': [4] };
             *
             * _.mergeWith(object, other, customizer);
             * // => { 'a': [1, 3], 'b': [2, 4] }
             */
            var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                baseMerge(object, source, srcIndex, customizer);
            });
            /**
             * The opposite of `_.pick`; this method creates an object composed of the
             * own and inherited enumerable property paths of `object` that are not omitted.
             *
             * **Note:** This method is considerably slower than `_.pick`.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to omit.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omit(object, ['a', 'c']);
             * // => { 'b': '2' }
             */
            var omit = flatRest(function (object, paths) {
                var result = {};
                if (object == null) {
                    return result;
                }
                var isDeep = false;
                paths = arrayMap(paths, function (path) {
                    path = castPath(path, object);
                    isDeep || (isDeep = path.length > 1);
                    return path;
                });
                copyObject(object, getAllKeysIn(object), result);
                if (isDeep) {
                    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                }
                var length = paths.length;
                while (length--) {
                    baseUnset(result, paths[length]);
                }
                return result;
            });
            /**
             * The opposite of `_.pickBy`; this method creates an object composed of
             * the own and inherited enumerable string keyed properties of `object` that
             * `predicate` doesn't return truthy for. The predicate is invoked with two
             * arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.omitBy(object, _.isNumber);
             * // => { 'b': '2' }
             */
            function omitBy(object, predicate) {
                return pickBy(object, negate(getIteratee(predicate)));
            }
            /**
             * Creates an object composed of the picked `object` properties.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The source object.
             * @param {...(string|string[])} [paths] The property paths to pick.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pick(object, ['a', 'c']);
             * // => { 'a': 1, 'c': 3 }
             */
            var pick = flatRest(function (object, paths) {
                return object == null ? {} : basePick(object, paths);
            });
            /**
             * Creates an object composed of the `object` properties `predicate` returns
             * truthy for. The predicate is invoked with two arguments: (value, key).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The source object.
             * @param {Function} [predicate=_.identity] The function invoked per property.
             * @returns {Object} Returns the new object.
             * @example
             *
             * var object = { 'a': 1, 'b': '2', 'c': 3 };
             *
             * _.pickBy(object, _.isNumber);
             * // => { 'a': 1, 'c': 3 }
             */
            function pickBy(object, predicate) {
                if (object == null) {
                    return {};
                }
                var props = arrayMap(getAllKeysIn(object), function (prop) {
                    return [prop];
                });
                predicate = getIteratee(predicate);
                return basePickBy(object, props, function (value, path) {
                    return predicate(value, path[0]);
                });
            }
            /**
             * This method is like `_.get` except that if the resolved value is a
             * function it's invoked with the `this` binding of its parent object and
             * its result is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to resolve.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
             *
             * _.result(object, 'a[0].b.c1');
             * // => 3
             *
             * _.result(object, 'a[0].b.c2');
             * // => 4
             *
             * _.result(object, 'a[0].b.c3', 'default');
             * // => 'default'
             *
             * _.result(object, 'a[0].b.c3', _.constant('default'));
             * // => 'default'
             */
            function result(object, path, defaultValue) {
                path = castPath(path, object);
                var index = -1, length = path.length;
                // Ensure the loop is entered when path is empty.
                if (!length) {
                    length = 1;
                    object = undefined$1;
                }
                while (++index < length) {
                    var value = object == null ? undefined$1 : object[toKey(path[index])];
                    if (value === undefined$1) {
                        index = length;
                        value = defaultValue;
                    }
                    object = isFunction(value) ? value.call(object) : value;
                }
                return object;
            }
            /**
             * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
             * it's created. Arrays are created for missing index properties while objects
             * are created for all other missing properties. Use `_.setWith` to customize
             * `path` creation.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.set(object, 'a[0].b.c', 4);
             * console.log(object.a[0].b.c);
             * // => 4
             *
             * _.set(object, ['x', '0', 'y', 'z'], 5);
             * console.log(object.x[0].y.z);
             * // => 5
             */
            function set(object, path, value) {
                return object == null ? object : baseSet(object, path, value);
            }
            /**
             * This method is like `_.set` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {*} value The value to set.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.setWith(object, '[0][1]', 'a', Object);
             * // => { '0': { '1': 'a' } }
             */
            function setWith(object, path, value, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return object == null ? object : baseSet(object, path, value, customizer);
            }
            /**
             * Creates an array of own enumerable string keyed-value pairs for `object`
             * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
             * entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entries
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairs(new Foo);
             * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
             */
            var toPairs = createToPairs(keys);
            /**
             * Creates an array of own and inherited enumerable string keyed-value pairs
             * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
             * or set, its entries are returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @alias entriesIn
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the key-value pairs.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.toPairsIn(new Foo);
             * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
             */
            var toPairsIn = createToPairs(keysIn);
            /**
             * An alternative to `_.reduce`; this method transforms `object` to a new
             * `accumulator` object which is the result of running each of its own
             * enumerable string keyed properties thru `iteratee`, with each invocation
             * potentially mutating the `accumulator` object. If `accumulator` is not
             * provided, a new object with the same `[[Prototype]]` will be used. The
             * iteratee is invoked with four arguments: (accumulator, value, key, object).
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @static
             * @memberOf _
             * @since 1.3.0
             * @category Object
             * @param {Object} object The object to iterate over.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @param {*} [accumulator] The custom accumulator value.
             * @returns {*} Returns the accumulated value.
             * @example
             *
             * _.transform([2, 3, 4], function(result, n) {
             *   result.push(n *= n);
             *   return n % 2 == 0;
             * }, []);
             * // => [4, 9]
             *
             * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
             *   (result[value] || (result[value] = [])).push(key);
             * }, {});
             * // => { '1': ['a', 'c'], '2': ['b'] }
             */
            function transform(object, iteratee, accumulator) {
                var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
                iteratee = getIteratee(iteratee, 4);
                if (accumulator == null) {
                    var Ctor = object && object.constructor;
                    if (isArrLike) {
                        accumulator = isArr ? new Ctor : [];
                    }
                    else if (isObject(object)) {
                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                    }
                    else {
                        accumulator = {};
                    }
                }
                (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                    return iteratee(accumulator, value, index, object);
                });
                return accumulator;
            }
            /**
             * Removes the property at `path` of `object`.
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to unset.
             * @returns {boolean} Returns `true` if the property is deleted, else `false`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 7 } }] };
             * _.unset(object, 'a[0].b.c');
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             *
             * _.unset(object, ['a', '0', 'b', 'c']);
             * // => true
             *
             * console.log(object);
             * // => { 'a': [{ 'b': {} }] };
             */
            function unset(object, path) {
                return object == null ? true : baseUnset(object, path);
            }
            /**
             * This method is like `_.set` except that accepts `updater` to produce the
             * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
             * is invoked with one argument: (value).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.update(object, 'a[0].b.c', function(n) { return n * n; });
             * console.log(object.a[0].b.c);
             * // => 9
             *
             * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
             * console.log(object.x[0].y.z);
             * // => 0
             */
            function update(object, path, updater) {
                return object == null ? object : baseUpdate(object, path, castFunction(updater));
            }
            /**
             * This method is like `_.update` except that it accepts `customizer` which is
             * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
             * path creation is handled by the method instead. The `customizer` is invoked
             * with three arguments: (nsValue, key, nsObject).
             *
             * **Note:** This method mutates `object`.
             *
             * @static
             * @memberOf _
             * @since 4.6.0
             * @category Object
             * @param {Object} object The object to modify.
             * @param {Array|string} path The path of the property to set.
             * @param {Function} updater The function to produce the updated value.
             * @param {Function} [customizer] The function to customize assigned values.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var object = {};
             *
             * _.updateWith(object, '[0][1]', _.constant('a'), Object);
             * // => { '0': { '1': 'a' } }
             */
            function updateWith(object, path, updater, customizer) {
                customizer = typeof customizer == 'function' ? customizer : undefined$1;
                return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
            }
            /**
             * Creates an array of the own enumerable string keyed property values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.values(new Foo);
             * // => [1, 2] (iteration order is not guaranteed)
             *
             * _.values('hi');
             * // => ['h', 'i']
             */
            function values(object) {
                return object == null ? [] : baseValues(object, keys(object));
            }
            /**
             * Creates an array of the own and inherited enumerable string keyed property
             * values of `object`.
             *
             * **Note:** Non-object values are coerced to objects.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property values.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.valuesIn(new Foo);
             * // => [1, 2, 3] (iteration order is not guaranteed)
             */
            function valuesIn(object) {
                return object == null ? [] : baseValues(object, keysIn(object));
            }
            /*------------------------------------------------------------------------*/
            /**
             * Clamps `number` within the inclusive `lower` and `upper` bounds.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Number
             * @param {number} number The number to clamp.
             * @param {number} [lower] The lower bound.
             * @param {number} upper The upper bound.
             * @returns {number} Returns the clamped number.
             * @example
             *
             * _.clamp(-10, -5, 5);
             * // => -5
             *
             * _.clamp(10, -5, 5);
             * // => 5
             */
            function clamp(number, lower, upper) {
                if (upper === undefined$1) {
                    upper = lower;
                    lower = undefined$1;
                }
                if (upper !== undefined$1) {
                    upper = toNumber(upper);
                    upper = upper === upper ? upper : 0;
                }
                if (lower !== undefined$1) {
                    lower = toNumber(lower);
                    lower = lower === lower ? lower : 0;
                }
                return baseClamp(toNumber(number), lower, upper);
            }
            /**
             * Checks if `n` is between `start` and up to, but not including, `end`. If
             * `end` is not specified, it's set to `start` with `start` then set to `0`.
             * If `start` is greater than `end` the params are swapped to support
             * negative ranges.
             *
             * @static
             * @memberOf _
             * @since 3.3.0
             * @category Number
             * @param {number} number The number to check.
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
             * @see _.range, _.rangeRight
             * @example
             *
             * _.inRange(3, 2, 4);
             * // => true
             *
             * _.inRange(4, 8);
             * // => true
             *
             * _.inRange(4, 2);
             * // => false
             *
             * _.inRange(2, 2);
             * // => false
             *
             * _.inRange(1.2, 2);
             * // => true
             *
             * _.inRange(5.2, 4);
             * // => false
             *
             * _.inRange(-3, -2, -6);
             * // => true
             */
            function inRange(number, start, end) {
                start = toFinite(start);
                if (end === undefined$1) {
                    end = start;
                    start = 0;
                }
                else {
                    end = toFinite(end);
                }
                number = toNumber(number);
                return baseInRange(number, start, end);
            }
            /**
             * Produces a random number between the inclusive `lower` and `upper` bounds.
             * If only one argument is provided a number between `0` and the given number
             * is returned. If `floating` is `true`, or either `lower` or `upper` are
             * floats, a floating-point number is returned instead of an integer.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @memberOf _
             * @since 0.7.0
             * @category Number
             * @param {number} [lower=0] The lower bound.
             * @param {number} [upper=1] The upper bound.
             * @param {boolean} [floating] Specify returning a floating-point number.
             * @returns {number} Returns the random number.
             * @example
             *
             * _.random(0, 5);
             * // => an integer between 0 and 5
             *
             * _.random(5);
             * // => also an integer between 0 and 5
             *
             * _.random(5, true);
             * // => a floating-point number between 0 and 5
             *
             * _.random(1.2, 5.2);
             * // => a floating-point number between 1.2 and 5.2
             */
            function random(lower, upper, floating) {
                if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                    upper = floating = undefined$1;
                }
                if (floating === undefined$1) {
                    if (typeof upper == 'boolean') {
                        floating = upper;
                        upper = undefined$1;
                    }
                    else if (typeof lower == 'boolean') {
                        floating = lower;
                        lower = undefined$1;
                    }
                }
                if (lower === undefined$1 && upper === undefined$1) {
                    lower = 0;
                    upper = 1;
                }
                else {
                    lower = toFinite(lower);
                    if (upper === undefined$1) {
                        upper = lower;
                        lower = 0;
                    }
                    else {
                        upper = toFinite(upper);
                    }
                }
                if (lower > upper) {
                    var temp = lower;
                    lower = upper;
                    upper = temp;
                }
                if (floating || lower % 1 || upper % 1) {
                    var rand = nativeRandom();
                    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                }
                return baseRandom(lower, upper);
            }
            /*------------------------------------------------------------------------*/
            /**
             * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the camel cased string.
             * @example
             *
             * _.camelCase('Foo Bar');
             * // => 'fooBar'
             *
             * _.camelCase('--foo-bar--');
             * // => 'fooBar'
             *
             * _.camelCase('__FOO_BAR__');
             * // => 'fooBar'
             */
            var camelCase = createCompounder(function (result, word, index) {
                word = word.toLowerCase();
                return result + (index ? capitalize(word) : word);
            });
            /**
             * Converts the first character of `string` to upper case and the remaining
             * to lower case.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to capitalize.
             * @returns {string} Returns the capitalized string.
             * @example
             *
             * _.capitalize('FRED');
             * // => 'Fred'
             */
            function capitalize(string) {
                return upperFirst(toString(string).toLowerCase());
            }
            /**
             * Deburrs `string` by converting
             * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
             * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
             * letters to basic Latin letters and removing
             * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to deburr.
             * @returns {string} Returns the deburred string.
             * @example
             *
             * _.deburr('déjà vu');
             * // => 'deja vu'
             */
            function deburr(string) {
                string = toString(string);
                return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
            }
            /**
             * Checks if `string` ends with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=string.length] The position to search up to.
             * @returns {boolean} Returns `true` if `string` ends with `target`,
             *  else `false`.
             * @example
             *
             * _.endsWith('abc', 'c');
             * // => true
             *
             * _.endsWith('abc', 'b');
             * // => false
             *
             * _.endsWith('abc', 'b', 2);
             * // => true
             */
            function endsWith(string, target, position) {
                string = toString(string);
                target = baseToString(target);
                var length = string.length;
                position = position === undefined$1
                    ? length
                    : baseClamp(toInteger(position), 0, length);
                var end = position;
                position -= target.length;
                return position >= 0 && string.slice(position, end) == target;
            }
            /**
             * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
             * corresponding HTML entities.
             *
             * **Note:** No other characters are escaped. To escape additional
             * characters use a third-party library like [_he_](https://mths.be/he).
             *
             * Though the ">" character is escaped for symmetry, characters like
             * ">" and "/" don't need escaping in HTML and have no special meaning
             * unless they're part of a tag or unquoted attribute value. See
             * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
             * (under "semi-related fun fact") for more details.
             *
             * When working with HTML you should always
             * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
             * XSS vectors.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escape('fred, barney, & pebbles');
             * // => 'fred, barney, &amp; pebbles'
             */
            function escape(string) {
                string = toString(string);
                return (string && reHasUnescapedHtml.test(string))
                    ? string.replace(reUnescapedHtml, escapeHtmlChar)
                    : string;
            }
            /**
             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to escape.
             * @returns {string} Returns the escaped string.
             * @example
             *
             * _.escapeRegExp('[lodash](https://lodash.com/)');
             * // => '\[lodash\]\(https://lodash\.com/\)'
             */
            function escapeRegExp(string) {
                string = toString(string);
                return (string && reHasRegExpChar.test(string))
                    ? string.replace(reRegExpChar, '\\$&')
                    : string;
            }
            /**
             * Converts `string` to
             * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the kebab cased string.
             * @example
             *
             * _.kebabCase('Foo Bar');
             * // => 'foo-bar'
             *
             * _.kebabCase('fooBar');
             * // => 'foo-bar'
             *
             * _.kebabCase('__FOO_BAR__');
             * // => 'foo-bar'
             */
            var kebabCase = createCompounder(function (result, word, index) {
                return result + (index ? '-' : '') + word.toLowerCase();
            });
            /**
             * Converts `string`, as space separated words, to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.lowerCase('--Foo-Bar--');
             * // => 'foo bar'
             *
             * _.lowerCase('fooBar');
             * // => 'foo bar'
             *
             * _.lowerCase('__FOO_BAR__');
             * // => 'foo bar'
             */
            var lowerCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toLowerCase();
            });
            /**
             * Converts the first character of `string` to lower case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.lowerFirst('Fred');
             * // => 'fred'
             *
             * _.lowerFirst('FRED');
             * // => 'fRED'
             */
            var lowerFirst = createCaseFirst('toLowerCase');
            /**
             * Pads `string` on the left and right sides if it's shorter than `length`.
             * Padding characters are truncated if they can't be evenly divided by `length`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.pad('abc', 8);
             * // => '  abc   '
             *
             * _.pad('abc', 8, '_-');
             * // => '_-abc_-_'
             *
             * _.pad('abc', 3);
             * // => 'abc'
             */
            function pad(string, length, chars) {
                string = toString(string);
                length = toInteger(length);
                var strLength = length ? stringSize(string) : 0;
                if (!length || strLength >= length) {
                    return string;
                }
                var mid = (length - strLength) / 2;
                return (createPadding(nativeFloor(mid), chars) +
                    string +
                    createPadding(nativeCeil(mid), chars));
            }
            /**
             * Pads `string` on the right side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padEnd('abc', 6);
             * // => 'abc   '
             *
             * _.padEnd('abc', 6, '_-');
             * // => 'abc_-_'
             *
             * _.padEnd('abc', 3);
             * // => 'abc'
             */
            function padEnd(string, length, chars) {
                string = toString(string);
                length = toInteger(length);
                var strLength = length ? stringSize(string) : 0;
                return (length && strLength < length)
                    ? (string + createPadding(length - strLength, chars))
                    : string;
            }
            /**
             * Pads `string` on the left side if it's shorter than `length`. Padding
             * characters are truncated if they exceed `length`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to pad.
             * @param {number} [length=0] The padding length.
             * @param {string} [chars=' '] The string used as padding.
             * @returns {string} Returns the padded string.
             * @example
             *
             * _.padStart('abc', 6);
             * // => '   abc'
             *
             * _.padStart('abc', 6, '_-');
             * // => '_-_abc'
             *
             * _.padStart('abc', 3);
             * // => 'abc'
             */
            function padStart(string, length, chars) {
                string = toString(string);
                length = toInteger(length);
                var strLength = length ? stringSize(string) : 0;
                return (length && strLength < length)
                    ? (createPadding(length - strLength, chars) + string)
                    : string;
            }
            /**
             * Converts `string` to an integer of the specified radix. If `radix` is
             * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
             * hexadecimal, in which case a `radix` of `16` is used.
             *
             * **Note:** This method aligns with the
             * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
             *
             * @static
             * @memberOf _
             * @since 1.1.0
             * @category String
             * @param {string} string The string to convert.
             * @param {number} [radix=10] The radix to interpret `value` by.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {number} Returns the converted integer.
             * @example
             *
             * _.parseInt('08');
             * // => 8
             *
             * _.map(['6', '08', '10'], _.parseInt);
             * // => [6, 8, 10]
             */
            function parseInt(string, radix, guard) {
                if (guard || radix == null) {
                    radix = 0;
                }
                else if (radix) {
                    radix = +radix;
                }
                return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
            }
            /**
             * Repeats the given string `n` times.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to repeat.
             * @param {number} [n=1] The number of times to repeat the string.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the repeated string.
             * @example
             *
             * _.repeat('*', 3);
             * // => '***'
             *
             * _.repeat('abc', 2);
             * // => 'abcabc'
             *
             * _.repeat('abc', 0);
             * // => ''
             */
            function repeat(string, n, guard) {
                if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
                    n = 1;
                }
                else {
                    n = toInteger(n);
                }
                return baseRepeat(toString(string), n);
            }
            /**
             * Replaces matches for `pattern` in `string` with `replacement`.
             *
             * **Note:** This method is based on
             * [`String#replace`](https://mdn.io/String/replace).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to modify.
             * @param {RegExp|string} pattern The pattern to replace.
             * @param {Function|string} replacement The match replacement.
             * @returns {string} Returns the modified string.
             * @example
             *
             * _.replace('Hi Fred', 'Fred', 'Barney');
             * // => 'Hi Barney'
             */
            function replace() {
                var args = arguments, string = toString(args[0]);
                return args.length < 3 ? string : string.replace(args[1], args[2]);
            }
            /**
             * Converts `string` to
             * [snake case](https://en.wikipedia.org/wiki/Snake_case).
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the snake cased string.
             * @example
             *
             * _.snakeCase('Foo Bar');
             * // => 'foo_bar'
             *
             * _.snakeCase('fooBar');
             * // => 'foo_bar'
             *
             * _.snakeCase('--FOO-BAR--');
             * // => 'foo_bar'
             */
            var snakeCase = createCompounder(function (result, word, index) {
                return result + (index ? '_' : '') + word.toLowerCase();
            });
            /**
             * Splits `string` by `separator`.
             *
             * **Note:** This method is based on
             * [`String#split`](https://mdn.io/String/split).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to split.
             * @param {RegExp|string} separator The separator pattern to split by.
             * @param {number} [limit] The length to truncate results to.
             * @returns {Array} Returns the string segments.
             * @example
             *
             * _.split('a-b-c', '-', 2);
             * // => ['a', 'b']
             */
            function split(string, separator, limit) {
                if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                    separator = limit = undefined$1;
                }
                limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
                if (!limit) {
                    return [];
                }
                string = toString(string);
                if (string && (typeof separator == 'string' ||
                    (separator != null && !isRegExp(separator)))) {
                    separator = baseToString(separator);
                    if (!separator && hasUnicode(string)) {
                        return castSlice(stringToArray(string), 0, limit);
                    }
                }
                return string.split(separator, limit);
            }
            /**
             * Converts `string` to
             * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
             *
             * @static
             * @memberOf _
             * @since 3.1.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the start cased string.
             * @example
             *
             * _.startCase('--foo-bar--');
             * // => 'Foo Bar'
             *
             * _.startCase('fooBar');
             * // => 'Foo Bar'
             *
             * _.startCase('__FOO_BAR__');
             * // => 'FOO BAR'
             */
            var startCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + upperFirst(word);
            });
            /**
             * Checks if `string` starts with the given target string.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {string} [target] The string to search for.
             * @param {number} [position=0] The position to search from.
             * @returns {boolean} Returns `true` if `string` starts with `target`,
             *  else `false`.
             * @example
             *
             * _.startsWith('abc', 'a');
             * // => true
             *
             * _.startsWith('abc', 'b');
             * // => false
             *
             * _.startsWith('abc', 'b', 1);
             * // => true
             */
            function startsWith(string, target, position) {
                string = toString(string);
                position = position == null
                    ? 0
                    : baseClamp(toInteger(position), 0, string.length);
                target = baseToString(target);
                return string.slice(position, position + target.length) == target;
            }
            /**
             * Creates a compiled template function that can interpolate data properties
             * in "interpolate" delimiters, HTML-escape interpolated data properties in
             * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
             * properties may be accessed as free variables in the template. If a setting
             * object is given, it takes precedence over `_.templateSettings` values.
             *
             * **Note:** In the development build `_.template` utilizes
             * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
             * for easier debugging.
             *
             * For more information on precompiling templates see
             * [lodash's custom builds documentation](https://lodash.com/custom-builds).
             *
             * For more information on Chrome extension sandboxes see
             * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category String
             * @param {string} [string=''] The template string.
             * @param {Object} [options={}] The options object.
             * @param {RegExp} [options.escape=_.templateSettings.escape]
             *  The HTML "escape" delimiter.
             * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
             *  The "evaluate" delimiter.
             * @param {Object} [options.imports=_.templateSettings.imports]
             *  An object to import into the template as free variables.
             * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
             *  The "interpolate" delimiter.
             * @param {string} [options.sourceURL='lodash.templateSources[n]']
             *  The sourceURL of the compiled template.
             * @param {string} [options.variable='obj']
             *  The data object variable name.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Function} Returns the compiled template function.
             * @example
             *
             * // Use the "interpolate" delimiter to create a compiled template.
             * var compiled = _.template('hello <%= user %>!');
             * compiled({ 'user': 'fred' });
             * // => 'hello fred!'
             *
             * // Use the HTML "escape" delimiter to escape data property values.
             * var compiled = _.template('<b><%- value %></b>');
             * compiled({ 'value': '<script>' });
             * // => '<b>&lt;script&gt;</b>'
             *
             * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
             * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the internal `print` function in "evaluate" delimiters.
             * var compiled = _.template('<% print("hello " + user); %>!');
             * compiled({ 'user': 'barney' });
             * // => 'hello barney!'
             *
             * // Use the ES template literal delimiter as an "interpolate" delimiter.
             * // Disable support by replacing the "interpolate" delimiter.
             * var compiled = _.template('hello ${ user }!');
             * compiled({ 'user': 'pebbles' });
             * // => 'hello pebbles!'
             *
             * // Use backslashes to treat delimiters as plain text.
             * var compiled = _.template('<%= "\\<%- value %\\>" %>');
             * compiled({ 'value': 'ignored' });
             * // => '<%- value %>'
             *
             * // Use the `imports` option to import `jQuery` as `jq`.
             * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
             * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
             * compiled({ 'users': ['fred', 'barney'] });
             * // => '<li>fred</li><li>barney</li>'
             *
             * // Use the `sourceURL` option to specify a custom sourceURL for the template.
             * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
             * compiled(data);
             * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
             *
             * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
             * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
             * compiled.source;
             * // => function(data) {
             * //   var __t, __p = '';
             * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
             * //   return __p;
             * // }
             *
             * // Use custom template delimiters.
             * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
             * var compiled = _.template('hello {{ user }}!');
             * compiled({ 'user': 'mustache' });
             * // => 'hello mustache!'
             *
             * // Use the `source` property to inline compiled templates for meaningful
             * // line numbers in error messages and stack traces.
             * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
             *   var JST = {\
             *     "main": ' + _.template(mainText).source + '\
             *   };\
             * ');
             */
            function template(string, options, guard) {
                // Based on John Resig's `tmpl` implementation
                // (http://ejohn.org/blog/javascript-micro-templating/)
                // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                var settings = lodash.templateSettings;
                if (guard && isIterateeCall(string, options, guard)) {
                    options = undefined$1;
                }
                string = toString(string);
                options = assignInWith({}, options, settings, customDefaultsAssignIn);
                var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
                var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
                // Compile the regexp to match each delimiter.
                var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' +
                    interpolate.source + '|' +
                    (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                    (options.evaluate || reNoMatch).source + '|$', 'g');
                // Use a sourceURL for easier debugging.
                // The sourceURL gets injected into the source that's eval-ed, so be careful
                // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
                // and escape the comment, thus injecting code that gets evaled.
                var sourceURL = '//# sourceURL=' +
                    (hasOwnProperty.call(options, 'sourceURL')
                        ? (options.sourceURL + '').replace(/\s/g, ' ')
                        : ('lodash.templateSources[' + (++templateCounter) + ']')) + '\n';
                string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                    interpolateValue || (interpolateValue = esTemplateValue);
                    // Escape characters that can't be included in string literals.
                    source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                    // Replace delimiters with snippets.
                    if (escapeValue) {
                        isEscaping = true;
                        source += "' +\n__e(" + escapeValue + ") +\n'";
                    }
                    if (evaluateValue) {
                        isEvaluating = true;
                        source += "';\n" + evaluateValue + ";\n__p += '";
                    }
                    if (interpolateValue) {
                        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                    }
                    index = offset + match.length;
                    // The JS engine embedded in Adobe products needs `match` returned in
                    // order to produce the correct `offset` value.
                    return match;
                });
                source += "';\n";
                // If `variable` is not specified wrap a with-statement around the generated
                // code to add the data object to the top of the scope chain.
                var variable = hasOwnProperty.call(options, 'variable') && options.variable;
                if (!variable) {
                    source = 'with (obj) {\n' + source + '\n}\n';
                }
                // Throw an error if a forbidden character was found in `variable`, to prevent
                // potential command injection attacks.
                else if (reForbiddenIdentifierChars.test(variable)) {
                    throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
                }
                // Cleanup code by stripping empty strings.
                source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                    .replace(reEmptyStringMiddle, '$1')
                    .replace(reEmptyStringTrailing, '$1;');
                // Frame code as the function body.
                source = 'function(' + (variable || 'obj') + ') {\n' +
                    (variable
                        ? ''
                        : 'obj || (obj = {});\n') +
                    "var __t, __p = ''" +
                    (isEscaping
                        ? ', __e = _.escape'
                        : '') +
                    (isEvaluating
                        ? ', __j = Array.prototype.join;\n' +
                            "function print() { __p += __j.call(arguments, '') }\n"
                        : ';\n') +
                    source +
                    'return __p\n}';
                var result = attempt(function () {
                    return Function(importsKeys, sourceURL + 'return ' + source)
                        .apply(undefined$1, importsValues);
                });
                // Provide the compiled function's source by its `toString` method or
                // the `source` property as a convenience for inlining compiled templates.
                result.source = source;
                if (isError(result)) {
                    throw result;
                }
                return result;
            }
            /**
             * Converts `string`, as a whole, to lower case just like
             * [String#toLowerCase](https://mdn.io/toLowerCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the lower cased string.
             * @example
             *
             * _.toLower('--Foo-Bar--');
             * // => '--foo-bar--'
             *
             * _.toLower('fooBar');
             * // => 'foobar'
             *
             * _.toLower('__FOO_BAR__');
             * // => '__foo_bar__'
             */
            function toLower(value) {
                return toString(value).toLowerCase();
            }
            /**
             * Converts `string`, as a whole, to upper case just like
             * [String#toUpperCase](https://mdn.io/toUpperCase).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.toUpper('--foo-bar--');
             * // => '--FOO-BAR--'
             *
             * _.toUpper('fooBar');
             * // => 'FOOBAR'
             *
             * _.toUpper('__foo_bar__');
             * // => '__FOO_BAR__'
             */
            function toUpper(value) {
                return toString(value).toUpperCase();
            }
            /**
             * Removes leading and trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trim('  abc  ');
             * // => 'abc'
             *
             * _.trim('-_-abc-_-', '_-');
             * // => 'abc'
             *
             * _.map(['  foo  ', '  bar  '], _.trim);
             * // => ['foo', 'bar']
             */
            function trim(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return baseTrim(string);
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
                return castSlice(strSymbols, start, end).join('');
            }
            /**
             * Removes trailing whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimEnd('  abc  ');
             * // => '  abc'
             *
             * _.trimEnd('-_-abc-_-', '_-');
             * // => '-_-abc'
             */
            function trimEnd(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.slice(0, trimmedEndIndex(string) + 1);
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
                return castSlice(strSymbols, 0, end).join('');
            }
            /**
             * Removes leading whitespace or specified characters from `string`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to trim.
             * @param {string} [chars=whitespace] The characters to trim.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {string} Returns the trimmed string.
             * @example
             *
             * _.trimStart('  abc  ');
             * // => 'abc  '
             *
             * _.trimStart('-_-abc-_-', '_-');
             * // => 'abc-_-'
             */
            function trimStart(string, chars, guard) {
                string = toString(string);
                if (string && (guard || chars === undefined$1)) {
                    return string.replace(reTrimStart, '');
                }
                if (!string || !(chars = baseToString(chars))) {
                    return string;
                }
                var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
                return castSlice(strSymbols, start).join('');
            }
            /**
             * Truncates `string` if it's longer than the given maximum string length.
             * The last characters of the truncated string are replaced with the omission
             * string which defaults to "...".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to truncate.
             * @param {Object} [options={}] The options object.
             * @param {number} [options.length=30] The maximum string length.
             * @param {string} [options.omission='...'] The string to indicate text is omitted.
             * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
             * @returns {string} Returns the truncated string.
             * @example
             *
             * _.truncate('hi-diddly-ho there, neighborino');
             * // => 'hi-diddly-ho there, neighbo...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': ' '
             * });
             * // => 'hi-diddly-ho there,...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'length': 24,
             *   'separator': /,? +/
             * });
             * // => 'hi-diddly-ho there...'
             *
             * _.truncate('hi-diddly-ho there, neighborino', {
             *   'omission': ' [...]'
             * });
             * // => 'hi-diddly-ho there, neig [...]'
             */
            function truncate(string, options) {
                var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
                if (isObject(options)) {
                    var separator = 'separator' in options ? options.separator : separator;
                    length = 'length' in options ? toInteger(options.length) : length;
                    omission = 'omission' in options ? baseToString(options.omission) : omission;
                }
                string = toString(string);
                var strLength = string.length;
                if (hasUnicode(string)) {
                    var strSymbols = stringToArray(string);
                    strLength = strSymbols.length;
                }
                if (length >= strLength) {
                    return string;
                }
                var end = length - stringSize(omission);
                if (end < 1) {
                    return omission;
                }
                var result = strSymbols
                    ? castSlice(strSymbols, 0, end).join('')
                    : string.slice(0, end);
                if (separator === undefined$1) {
                    return result + omission;
                }
                if (strSymbols) {
                    end += (result.length - end);
                }
                if (isRegExp(separator)) {
                    if (string.slice(end).search(separator)) {
                        var match, substring = result;
                        if (!separator.global) {
                            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                        }
                        separator.lastIndex = 0;
                        while ((match = separator.exec(substring))) {
                            var newEnd = match.index;
                        }
                        result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
                    }
                }
                else if (string.indexOf(baseToString(separator), end) != end) {
                    var index = result.lastIndexOf(separator);
                    if (index > -1) {
                        result = result.slice(0, index);
                    }
                }
                return result + omission;
            }
            /**
             * The inverse of `_.escape`; this method converts the HTML entities
             * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
             * their corresponding characters.
             *
             * **Note:** No other HTML entities are unescaped. To unescape additional
             * HTML entities use a third-party library like [_he_](https://mths.be/he).
             *
             * @static
             * @memberOf _
             * @since 0.6.0
             * @category String
             * @param {string} [string=''] The string to unescape.
             * @returns {string} Returns the unescaped string.
             * @example
             *
             * _.unescape('fred, barney, &amp; pebbles');
             * // => 'fred, barney, & pebbles'
             */
            function unescape(string) {
                string = toString(string);
                return (string && reHasEscapedHtml.test(string))
                    ? string.replace(reEscapedHtml, unescapeHtmlChar)
                    : string;
            }
            /**
             * Converts `string`, as space separated words, to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the upper cased string.
             * @example
             *
             * _.upperCase('--foo-bar');
             * // => 'FOO BAR'
             *
             * _.upperCase('fooBar');
             * // => 'FOO BAR'
             *
             * _.upperCase('__foo_bar__');
             * // => 'FOO BAR'
             */
            var upperCase = createCompounder(function (result, word, index) {
                return result + (index ? ' ' : '') + word.toUpperCase();
            });
            /**
             * Converts the first character of `string` to upper case.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category String
             * @param {string} [string=''] The string to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.upperFirst('fred');
             * // => 'Fred'
             *
             * _.upperFirst('FRED');
             * // => 'FRED'
             */
            var upperFirst = createCaseFirst('toUpperCase');
            /**
             * Splits `string` into an array of its words.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category String
             * @param {string} [string=''] The string to inspect.
             * @param {RegExp|string} [pattern] The pattern to match words.
             * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
             * @returns {Array} Returns the words of `string`.
             * @example
             *
             * _.words('fred, barney, & pebbles');
             * // => ['fred', 'barney', 'pebbles']
             *
             * _.words('fred, barney, & pebbles', /[^, ]+/g);
             * // => ['fred', 'barney', '&', 'pebbles']
             */
            function words(string, pattern, guard) {
                string = toString(string);
                pattern = guard ? undefined$1 : pattern;
                if (pattern === undefined$1) {
                    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                }
                return string.match(pattern) || [];
            }
            /*------------------------------------------------------------------------*/
            /**
             * Attempts to invoke `func`, returning either the result or the caught error
             * object. Any additional arguments are provided to `func` when it's invoked.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Function} func The function to attempt.
             * @param {...*} [args] The arguments to invoke `func` with.
             * @returns {*} Returns the `func` result or error object.
             * @example
             *
             * // Avoid throwing errors for invalid selectors.
             * var elements = _.attempt(function(selector) {
             *   return document.querySelectorAll(selector);
             * }, '>_>');
             *
             * if (_.isError(elements)) {
             *   elements = [];
             * }
             */
            var attempt = baseRest(function (func, args) {
                try {
                    return apply(func, undefined$1, args);
                }
                catch (e) {
                    return isError(e) ? e : new Error(e);
                }
            });
            /**
             * Binds methods of an object to the object itself, overwriting the existing
             * method.
             *
             * **Note:** This method doesn't set the "length" property of bound functions.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Object} object The object to bind and assign the bound methods to.
             * @param {...(string|string[])} methodNames The object method names to bind.
             * @returns {Object} Returns `object`.
             * @example
             *
             * var view = {
             *   'label': 'docs',
             *   'click': function() {
             *     console.log('clicked ' + this.label);
             *   }
             * };
             *
             * _.bindAll(view, ['click']);
             * jQuery(element).on('click', view.click);
             * // => Logs 'clicked docs' when clicked.
             */
            var bindAll = flatRest(function (object, methodNames) {
                arrayEach(methodNames, function (key) {
                    key = toKey(key);
                    baseAssignValue(object, key, bind(object[key], object));
                });
                return object;
            });
            /**
             * Creates a function that iterates over `pairs` and invokes the corresponding
             * function of the first predicate to return truthy. The predicate-function
             * pairs are invoked with the `this` binding and arguments of the created
             * function.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Array} pairs The predicate-function pairs.
             * @returns {Function} Returns the new composite function.
             * @example
             *
             * var func = _.cond([
             *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
             *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
             *   [_.stubTrue,                      _.constant('no match')]
             * ]);
             *
             * func({ 'a': 1, 'b': 2 });
             * // => 'matches A'
             *
             * func({ 'a': 0, 'b': 1 });
             * // => 'matches B'
             *
             * func({ 'a': '1', 'b': '2' });
             * // => 'no match'
             */
            function cond(pairs) {
                var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
                pairs = !length ? [] : arrayMap(pairs, function (pair) {
                    if (typeof pair[1] != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    return [toIteratee(pair[0]), pair[1]];
                });
                return baseRest(function (args) {
                    var index = -1;
                    while (++index < length) {
                        var pair = pairs[index];
                        if (apply(pair[0], this, args)) {
                            return apply(pair[1], this, args);
                        }
                    }
                });
            }
            /**
             * Creates a function that invokes the predicate properties of `source` with
             * the corresponding property values of a given object, returning `true` if
             * all predicates return truthy, else `false`.
             *
             * **Note:** The created function is equivalent to `_.conformsTo` with
             * `source` partially applied.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {Object} source The object of property predicates to conform to.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 2, 'b': 1 },
             *   { 'a': 1, 'b': 2 }
             * ];
             *
             * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
             * // => [{ 'a': 1, 'b': 2 }]
             */
            function conforms(source) {
                return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
            }
            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
                return function () {
                    return value;
                };
            }
            /**
             * Checks `value` to determine whether a default value should be returned in
             * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
             * or `undefined`.
             *
             * @static
             * @memberOf _
             * @since 4.14.0
             * @category Util
             * @param {*} value The value to check.
             * @param {*} defaultValue The default value.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * _.defaultTo(1, 10);
             * // => 1
             *
             * _.defaultTo(undefined, 10);
             * // => 10
             */
            function defaultTo(value, defaultValue) {
                return (value == null || value !== value) ? defaultValue : value;
            }
            /**
             * Creates a function that returns the result of invoking the given functions
             * with the `this` binding of the created function, where each successive
             * invocation is supplied the return value of the previous.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flowRight
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flow([_.add, square]);
             * addSquare(1, 2);
             * // => 9
             */
            var flow = createFlow();
            /**
             * This method is like `_.flow` except that it creates a function that
             * invokes the given functions from right to left.
             *
             * @static
             * @since 3.0.0
             * @memberOf _
             * @category Util
             * @param {...(Function|Function[])} [funcs] The functions to invoke.
             * @returns {Function} Returns the new composite function.
             * @see _.flow
             * @example
             *
             * function square(n) {
             *   return n * n;
             * }
             *
             * var addSquare = _.flowRight([square, _.add]);
             * addSquare(1, 2);
             * // => 9
             */
            var flowRight = createFlow(true);
            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
                return value;
            }
            /**
             * Creates a function that invokes `func` with the arguments of the created
             * function. If `func` is a property name, the created function returns the
             * property value for a given element. If `func` is an array or object, the
             * created function returns `true` for elements that contain the equivalent
             * source properties, otherwise it returns `false`.
             *
             * @static
             * @since 4.0.0
             * @memberOf _
             * @category Util
             * @param {*} [func=_.identity] The value to convert to a callback.
             * @returns {Function} Returns the callback.
             * @example
             *
             * var users = [
             *   { 'user': 'barney', 'age': 36, 'active': true },
             *   { 'user': 'fred',   'age': 40, 'active': false }
             * ];
             *
             * // The `_.matches` iteratee shorthand.
             * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
             * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
             *
             * // The `_.matchesProperty` iteratee shorthand.
             * _.filter(users, _.iteratee(['user', 'fred']));
             * // => [{ 'user': 'fred', 'age': 40 }]
             *
             * // The `_.property` iteratee shorthand.
             * _.map(users, _.iteratee('user'));
             * // => ['barney', 'fred']
             *
             * // Create custom iteratee shorthands.
             * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
             *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
             *     return func.test(string);
             *   };
             * });
             *
             * _.filter(['abc', 'def'], /ef/);
             * // => ['def']
             */
            function iteratee(func) {
                return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
            }
            /**
             * Creates a function that performs a partial deep comparison between a given
             * object and `source`, returning `true` if the given object has equivalent
             * property values, else `false`.
             *
             * **Note:** The created function is equivalent to `_.isMatch` with `source`
             * partially applied.
             *
             * Partial comparisons will match empty array and empty object `source`
             * values against any array or object value, respectively. See `_.isEqual`
             * for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
             * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matches(source) {
                return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
            }
            /**
             * Creates a function that performs a partial deep comparison between the
             * value at `path` of a given object to `srcValue`, returning `true` if the
             * object value is equivalent, else `false`.
             *
             * **Note:** Partial comparisons will match empty array and empty object
             * `srcValue` values against any array or object value, respectively. See
             * `_.isEqual` for a list of supported value comparisons.
             *
             * **Note:** Multiple values can be checked by combining several matchers
             * using `_.overSome`
             *
             * @static
             * @memberOf _
             * @since 3.2.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             * @example
             *
             * var objects = [
             *   { 'a': 1, 'b': 2, 'c': 3 },
             *   { 'a': 4, 'b': 5, 'c': 6 }
             * ];
             *
             * _.find(objects, _.matchesProperty('a', 4));
             * // => { 'a': 4, 'b': 5, 'c': 6 }
             *
             * // Checking for several possible values
             * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
             * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
             */
            function matchesProperty(path, srcValue) {
                return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
            }
            /**
             * Creates a function that invokes the method at `path` of a given object.
             * Any additional arguments are provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Array|string} path The path of the method to invoke.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': _.constant(2) } },
             *   { 'a': { 'b': _.constant(1) } }
             * ];
             *
             * _.map(objects, _.method('a.b'));
             * // => [2, 1]
             *
             * _.map(objects, _.method(['a', 'b']));
             * // => [2, 1]
             */
            var method = baseRest(function (path, args) {
                return function (object) {
                    return baseInvoke(object, path, args);
                };
            });
            /**
             * The opposite of `_.method`; this method creates a function that invokes
             * the method at a given path of `object`. Any additional arguments are
             * provided to the invoked method.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Util
             * @param {Object} object The object to query.
             * @param {...*} [args] The arguments to invoke the method with.
             * @returns {Function} Returns the new invoker function.
             * @example
             *
             * var array = _.times(3, _.constant),
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.methodOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
             * // => [2, 0]
             */
            var methodOf = baseRest(function (object, args) {
                return function (path) {
                    return baseInvoke(object, path, args);
                };
            });
            /**
             * Adds all own enumerable string keyed function properties of a source
             * object to the destination object. If `object` is a function, then methods
             * are added to its prototype as well.
             *
             * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
             * avoid conflicts caused by modifying the original.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {Function|Object} [object=lodash] The destination object.
             * @param {Object} source The object of functions to add.
             * @param {Object} [options={}] The options object.
             * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
             * @returns {Function|Object} Returns `object`.
             * @example
             *
             * function vowels(string) {
             *   return _.filter(string, function(v) {
             *     return /[aeiou]/i.test(v);
             *   });
             * }
             *
             * _.mixin({ 'vowels': vowels });
             * _.vowels('fred');
             * // => ['e']
             *
             * _('fred').vowels().value();
             * // => ['e']
             *
             * _.mixin({ 'vowels': vowels }, { 'chain': false });
             * _('fred').vowels();
             * // => ['e']
             */
            function mixin(object, source, options) {
                var props = keys(source), methodNames = baseFunctions(source, props);
                if (options == null &&
                    !(isObject(source) && (methodNames.length || !props.length))) {
                    options = source;
                    source = object;
                    object = this;
                    methodNames = baseFunctions(source, keys(source));
                }
                var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
                arrayEach(methodNames, function (methodName) {
                    var func = source[methodName];
                    object[methodName] = func;
                    if (isFunc) {
                        object.prototype[methodName] = function () {
                            var chainAll = this.__chain__;
                            if (chain || chainAll) {
                                var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                                result.__chain__ = chainAll;
                                return result;
                            }
                            return func.apply(object, arrayPush([this.value()], arguments));
                        };
                    }
                });
                return object;
            }
            /**
             * Reverts the `_` variable to its previous value and returns a reference to
             * the `lodash` function.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @returns {Function} Returns the `lodash` function.
             * @example
             *
             * var lodash = _.noConflict();
             */
            function noConflict() {
                if (root._ === this) {
                    root._ = oldDash;
                }
                return this;
            }
            /**
             * This method returns `undefined`.
             *
             * @static
             * @memberOf _
             * @since 2.3.0
             * @category Util
             * @example
             *
             * _.times(2, _.noop);
             * // => [undefined, undefined]
             */
            function noop() {
                // No operation performed.
            }
            /**
             * Creates a function that gets the argument at index `n`. If `n` is negative,
             * the nth argument from the end is returned.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [n=0] The index of the argument to return.
             * @returns {Function} Returns the new pass-thru function.
             * @example
             *
             * var func = _.nthArg(1);
             * func('a', 'b', 'c', 'd');
             * // => 'b'
             *
             * var func = _.nthArg(-2);
             * func('a', 'b', 'c', 'd');
             * // => 'c'
             */
            function nthArg(n) {
                n = toInteger(n);
                return baseRest(function (args) {
                    return baseNth(args, n);
                });
            }
            /**
             * Creates a function that invokes `iteratees` with the arguments it receives
             * and returns their results.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to invoke.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.over([Math.max, Math.min]);
             *
             * func(1, 2, 3, 4);
             * // => [4, 1]
             */
            var over = createOver(arrayMap);
            /**
             * Creates a function that checks if **all** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overEvery([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => false
             *
             * func(NaN);
             * // => false
             */
            var overEvery = createOver(arrayEvery);
            /**
             * Creates a function that checks if **any** of the `predicates` return
             * truthy when invoked with the arguments it receives.
             *
             * Following shorthands are possible for providing predicates.
             * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
             * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {...(Function|Function[])} [predicates=[_.identity]]
             *  The predicates to check.
             * @returns {Function} Returns the new function.
             * @example
             *
             * var func = _.overSome([Boolean, isFinite]);
             *
             * func('1');
             * // => true
             *
             * func(null);
             * // => true
             *
             * func(NaN);
             * // => false
             *
             * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
             * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
             */
            var overSome = createOver(arraySome);
            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }
            /**
             * The opposite of `_.property`; this method creates a function that returns
             * the value at a given path of `object`.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Util
             * @param {Object} object The object to query.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var array = [0, 1, 2],
             *     object = { 'a': array, 'b': array, 'c': array };
             *
             * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
             * // => [2, 0]
             *
             * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
             * // => [2, 0]
             */
            function propertyOf(object) {
                return function (path) {
                    return object == null ? undefined$1 : baseGet(object, path);
                };
            }
            /**
             * Creates an array of numbers (positive and/or negative) progressing from
             * `start` up to, but not including, `end`. A step of `-1` is used if a negative
             * `start` is specified without an `end` or `step`. If `end` is not specified,
             * it's set to `start` with `start` then set to `0`.
             *
             * **Note:** JavaScript follows the IEEE-754 standard for resolving
             * floating-point values which can produce unexpected results.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.rangeRight
             * @example
             *
             * _.range(4);
             * // => [0, 1, 2, 3]
             *
             * _.range(-4);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 5);
             * // => [1, 2, 3, 4]
             *
             * _.range(0, 20, 5);
             * // => [0, 5, 10, 15]
             *
             * _.range(0, -4, -1);
             * // => [0, -1, -2, -3]
             *
             * _.range(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.range(0);
             * // => []
             */
            var range = createRange();
            /**
             * This method is like `_.range` except that it populates values in
             * descending order.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {number} [start=0] The start of the range.
             * @param {number} end The end of the range.
             * @param {number} [step=1] The value to increment or decrement by.
             * @returns {Array} Returns the range of numbers.
             * @see _.inRange, _.range
             * @example
             *
             * _.rangeRight(4);
             * // => [3, 2, 1, 0]
             *
             * _.rangeRight(-4);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 5);
             * // => [4, 3, 2, 1]
             *
             * _.rangeRight(0, 20, 5);
             * // => [15, 10, 5, 0]
             *
             * _.rangeRight(0, -4, -1);
             * // => [-3, -2, -1, 0]
             *
             * _.rangeRight(1, 4, 0);
             * // => [1, 1, 1]
             *
             * _.rangeRight(0);
             * // => []
             */
            var rangeRight = createRange(true);
            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
                return [];
            }
            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
                return false;
            }
            /**
             * This method returns a new empty object.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Object} Returns the new empty object.
             * @example
             *
             * var objects = _.times(2, _.stubObject);
             *
             * console.log(objects);
             * // => [{}, {}]
             *
             * console.log(objects[0] === objects[1]);
             * // => false
             */
            function stubObject() {
                return {};
            }
            /**
             * This method returns an empty string.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {string} Returns the empty string.
             * @example
             *
             * _.times(2, _.stubString);
             * // => ['', '']
             */
            function stubString() {
                return '';
            }
            /**
             * This method returns `true`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `true`.
             * @example
             *
             * _.times(2, _.stubTrue);
             * // => [true, true]
             */
            function stubTrue() {
                return true;
            }
            /**
             * Invokes the iteratee `n` times, returning an array of the results of
             * each invocation. The iteratee is invoked with one argument; (index).
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} [iteratee=_.identity] The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             * @example
             *
             * _.times(3, String);
             * // => ['0', '1', '2']
             *
             *  _.times(4, _.constant(0));
             * // => [0, 0, 0, 0]
             */
            function times(n, iteratee) {
                n = toInteger(n);
                if (n < 1 || n > MAX_SAFE_INTEGER) {
                    return [];
                }
                var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
                iteratee = getIteratee(iteratee);
                n -= MAX_ARRAY_LENGTH;
                var result = baseTimes(length, iteratee);
                while (++index < n) {
                    iteratee(index);
                }
                return result;
            }
            /**
             * Converts `value` to a property path array.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Util
             * @param {*} value The value to convert.
             * @returns {Array} Returns the new property path array.
             * @example
             *
             * _.toPath('a.b.c');
             * // => ['a', 'b', 'c']
             *
             * _.toPath('a[0].b.c');
             * // => ['a', '0', 'b', 'c']
             */
            function toPath(value) {
                if (isArray(value)) {
                    return arrayMap(value, toKey);
                }
                return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
            }
            /**
             * Generates a unique ID. If `prefix` is given, the ID is appended to it.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {string} [prefix=''] The value to prefix the ID with.
             * @returns {string} Returns the unique ID.
             * @example
             *
             * _.uniqueId('contact_');
             * // => 'contact_104'
             *
             * _.uniqueId();
             * // => '105'
             */
            function uniqueId(prefix) {
                var id = ++idCounter;
                return toString(prefix) + id;
            }
            /*------------------------------------------------------------------------*/
            /**
             * Adds two numbers.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {number} augend The first number in an addition.
             * @param {number} addend The second number in an addition.
             * @returns {number} Returns the total.
             * @example
             *
             * _.add(6, 4);
             * // => 10
             */
            var add = createMathOperation(function (augend, addend) {
                return augend + addend;
            }, 0);
            /**
             * Computes `number` rounded up to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round up.
             * @param {number} [precision=0] The precision to round up to.
             * @returns {number} Returns the rounded up number.
             * @example
             *
             * _.ceil(4.006);
             * // => 5
             *
             * _.ceil(6.004, 2);
             * // => 6.01
             *
             * _.ceil(6040, -2);
             * // => 6100
             */
            var ceil = createRound('ceil');
            /**
             * Divide two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} dividend The first number in a division.
             * @param {number} divisor The second number in a division.
             * @returns {number} Returns the quotient.
             * @example
             *
             * _.divide(6, 4);
             * // => 1.5
             */
            var divide = createMathOperation(function (dividend, divisor) {
                return dividend / divisor;
            }, 1);
            /**
             * Computes `number` rounded down to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round down.
             * @param {number} [precision=0] The precision to round down to.
             * @returns {number} Returns the rounded down number.
             * @example
             *
             * _.floor(4.006);
             * // => 4
             *
             * _.floor(0.046, 2);
             * // => 0.04
             *
             * _.floor(4060, -2);
             * // => 4000
             */
            var floor = createRound('floor');
            /**
             * Computes the maximum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * _.max([4, 2, 8, 6]);
             * // => 8
             *
             * _.max([]);
             * // => undefined
             */
            function max(array) {
                return (array && array.length)
                    ? baseExtremum(array, identity, baseGt)
                    : undefined$1;
            }
            /**
             * This method is like `_.max` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the maximum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.maxBy(objects, function(o) { return o.n; });
             * // => { 'n': 2 }
             *
             * // The `_.property` iteratee shorthand.
             * _.maxBy(objects, 'n');
             * // => { 'n': 2 }
             */
            function maxBy(array, iteratee) {
                return (array && array.length)
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                    : undefined$1;
            }
            /**
             * Computes the mean of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the mean.
             * @example
             *
             * _.mean([4, 2, 8, 6]);
             * // => 5
             */
            function mean(array) {
                return baseMean(array, identity);
            }
            /**
             * This method is like `_.mean` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be averaged.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the mean.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.meanBy(objects, function(o) { return o.n; });
             * // => 5
             *
             * // The `_.property` iteratee shorthand.
             * _.meanBy(objects, 'n');
             * // => 5
             */
            function meanBy(array, iteratee) {
                return baseMean(array, getIteratee(iteratee, 2));
            }
            /**
             * Computes the minimum value of `array`. If `array` is empty or falsey,
             * `undefined` is returned.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * _.min([4, 2, 8, 6]);
             * // => 2
             *
             * _.min([]);
             * // => undefined
             */
            function min(array) {
                return (array && array.length)
                    ? baseExtremum(array, identity, baseLt)
                    : undefined$1;
            }
            /**
             * This method is like `_.min` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the criterion by which
             * the value is ranked. The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {*} Returns the minimum value.
             * @example
             *
             * var objects = [{ 'n': 1 }, { 'n': 2 }];
             *
             * _.minBy(objects, function(o) { return o.n; });
             * // => { 'n': 1 }
             *
             * // The `_.property` iteratee shorthand.
             * _.minBy(objects, 'n');
             * // => { 'n': 1 }
             */
            function minBy(array, iteratee) {
                return (array && array.length)
                    ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                    : undefined$1;
            }
            /**
             * Multiply two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.7.0
             * @category Math
             * @param {number} multiplier The first number in a multiplication.
             * @param {number} multiplicand The second number in a multiplication.
             * @returns {number} Returns the product.
             * @example
             *
             * _.multiply(6, 4);
             * // => 24
             */
            var multiply = createMathOperation(function (multiplier, multiplicand) {
                return multiplier * multiplicand;
            }, 1);
            /**
             * Computes `number` rounded to `precision`.
             *
             * @static
             * @memberOf _
             * @since 3.10.0
             * @category Math
             * @param {number} number The number to round.
             * @param {number} [precision=0] The precision to round to.
             * @returns {number} Returns the rounded number.
             * @example
             *
             * _.round(4.006);
             * // => 4
             *
             * _.round(4.006, 2);
             * // => 4.01
             *
             * _.round(4060, -2);
             * // => 4100
             */
            var round = createRound('round');
            /**
             * Subtract two numbers.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {number} minuend The first number in a subtraction.
             * @param {number} subtrahend The second number in a subtraction.
             * @returns {number} Returns the difference.
             * @example
             *
             * _.subtract(6, 4);
             * // => 2
             */
            var subtract = createMathOperation(function (minuend, subtrahend) {
                return minuend - subtrahend;
            }, 0);
            /**
             * Computes the sum of the values in `array`.
             *
             * @static
             * @memberOf _
             * @since 3.4.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @returns {number} Returns the sum.
             * @example
             *
             * _.sum([4, 2, 8, 6]);
             * // => 20
             */
            function sum(array) {
                return (array && array.length)
                    ? baseSum(array, identity)
                    : 0;
            }
            /**
             * This method is like `_.sum` except that it accepts `iteratee` which is
             * invoked for each element in `array` to generate the value to be summed.
             * The iteratee is invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Math
             * @param {Array} array The array to iterate over.
             * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
             * @returns {number} Returns the sum.
             * @example
             *
             * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
             *
             * _.sumBy(objects, function(o) { return o.n; });
             * // => 20
             *
             * // The `_.property` iteratee shorthand.
             * _.sumBy(objects, 'n');
             * // => 20
             */
            function sumBy(array, iteratee) {
                return (array && array.length)
                    ? baseSum(array, getIteratee(iteratee, 2))
                    : 0;
            }
            /*------------------------------------------------------------------------*/
            // Add methods that return wrapped values in chain sequences.
            lodash.after = after;
            lodash.ary = ary;
            lodash.assign = assign;
            lodash.assignIn = assignIn;
            lodash.assignInWith = assignInWith;
            lodash.assignWith = assignWith;
            lodash.at = at;
            lodash.before = before;
            lodash.bind = bind;
            lodash.bindAll = bindAll;
            lodash.bindKey = bindKey;
            lodash.castArray = castArray;
            lodash.chain = chain;
            lodash.chunk = chunk;
            lodash.compact = compact;
            lodash.concat = concat;
            lodash.cond = cond;
            lodash.conforms = conforms;
            lodash.constant = constant;
            lodash.countBy = countBy;
            lodash.create = create;
            lodash.curry = curry;
            lodash.curryRight = curryRight;
            lodash.debounce = debounce;
            lodash.defaults = defaults;
            lodash.defaultsDeep = defaultsDeep;
            lodash.defer = defer;
            lodash.delay = delay;
            lodash.difference = difference;
            lodash.differenceBy = differenceBy;
            lodash.differenceWith = differenceWith;
            lodash.drop = drop;
            lodash.dropRight = dropRight;
            lodash.dropRightWhile = dropRightWhile;
            lodash.dropWhile = dropWhile;
            lodash.fill = fill;
            lodash.filter = filter;
            lodash.flatMap = flatMap;
            lodash.flatMapDeep = flatMapDeep;
            lodash.flatMapDepth = flatMapDepth;
            lodash.flatten = flatten;
            lodash.flattenDeep = flattenDeep;
            lodash.flattenDepth = flattenDepth;
            lodash.flip = flip;
            lodash.flow = flow;
            lodash.flowRight = flowRight;
            lodash.fromPairs = fromPairs;
            lodash.functions = functions;
            lodash.functionsIn = functionsIn;
            lodash.groupBy = groupBy;
            lodash.initial = initial;
            lodash.intersection = intersection;
            lodash.intersectionBy = intersectionBy;
            lodash.intersectionWith = intersectionWith;
            lodash.invert = invert;
            lodash.invertBy = invertBy;
            lodash.invokeMap = invokeMap;
            lodash.iteratee = iteratee;
            lodash.keyBy = keyBy;
            lodash.keys = keys;
            lodash.keysIn = keysIn;
            lodash.map = map;
            lodash.mapKeys = mapKeys;
            lodash.mapValues = mapValues;
            lodash.matches = matches;
            lodash.matchesProperty = matchesProperty;
            lodash.memoize = memoize;
            lodash.merge = merge;
            lodash.mergeWith = mergeWith;
            lodash.method = method;
            lodash.methodOf = methodOf;
            lodash.mixin = mixin;
            lodash.negate = negate;
            lodash.nthArg = nthArg;
            lodash.omit = omit;
            lodash.omitBy = omitBy;
            lodash.once = once;
            lodash.orderBy = orderBy;
            lodash.over = over;
            lodash.overArgs = overArgs;
            lodash.overEvery = overEvery;
            lodash.overSome = overSome;
            lodash.partial = partial;
            lodash.partialRight = partialRight;
            lodash.partition = partition;
            lodash.pick = pick;
            lodash.pickBy = pickBy;
            lodash.property = property;
            lodash.propertyOf = propertyOf;
            lodash.pull = pull;
            lodash.pullAll = pullAll;
            lodash.pullAllBy = pullAllBy;
            lodash.pullAllWith = pullAllWith;
            lodash.pullAt = pullAt;
            lodash.range = range;
            lodash.rangeRight = rangeRight;
            lodash.rearg = rearg;
            lodash.reject = reject;
            lodash.remove = remove;
            lodash.rest = rest;
            lodash.reverse = reverse;
            lodash.sampleSize = sampleSize;
            lodash.set = set;
            lodash.setWith = setWith;
            lodash.shuffle = shuffle;
            lodash.slice = slice;
            lodash.sortBy = sortBy;
            lodash.sortedUniq = sortedUniq;
            lodash.sortedUniqBy = sortedUniqBy;
            lodash.split = split;
            lodash.spread = spread;
            lodash.tail = tail;
            lodash.take = take;
            lodash.takeRight = takeRight;
            lodash.takeRightWhile = takeRightWhile;
            lodash.takeWhile = takeWhile;
            lodash.tap = tap;
            lodash.throttle = throttle;
            lodash.thru = thru;
            lodash.toArray = toArray;
            lodash.toPairs = toPairs;
            lodash.toPairsIn = toPairsIn;
            lodash.toPath = toPath;
            lodash.toPlainObject = toPlainObject;
            lodash.transform = transform;
            lodash.unary = unary;
            lodash.union = union;
            lodash.unionBy = unionBy;
            lodash.unionWith = unionWith;
            lodash.uniq = uniq;
            lodash.uniqBy = uniqBy;
            lodash.uniqWith = uniqWith;
            lodash.unset = unset;
            lodash.unzip = unzip;
            lodash.unzipWith = unzipWith;
            lodash.update = update;
            lodash.updateWith = updateWith;
            lodash.values = values;
            lodash.valuesIn = valuesIn;
            lodash.without = without;
            lodash.words = words;
            lodash.wrap = wrap;
            lodash.xor = xor;
            lodash.xorBy = xorBy;
            lodash.xorWith = xorWith;
            lodash.zip = zip;
            lodash.zipObject = zipObject;
            lodash.zipObjectDeep = zipObjectDeep;
            lodash.zipWith = zipWith;
            // Add aliases.
            lodash.entries = toPairs;
            lodash.entriesIn = toPairsIn;
            lodash.extend = assignIn;
            lodash.extendWith = assignInWith;
            // Add methods to `lodash.prototype`.
            mixin(lodash, lodash);
            /*------------------------------------------------------------------------*/
            // Add methods that return unwrapped values in chain sequences.
            lodash.add = add;
            lodash.attempt = attempt;
            lodash.camelCase = camelCase;
            lodash.capitalize = capitalize;
            lodash.ceil = ceil;
            lodash.clamp = clamp;
            lodash.clone = clone;
            lodash.cloneDeep = cloneDeep;
            lodash.cloneDeepWith = cloneDeepWith;
            lodash.cloneWith = cloneWith;
            lodash.conformsTo = conformsTo;
            lodash.deburr = deburr;
            lodash.defaultTo = defaultTo;
            lodash.divide = divide;
            lodash.endsWith = endsWith;
            lodash.eq = eq;
            lodash.escape = escape;
            lodash.escapeRegExp = escapeRegExp;
            lodash.every = every;
            lodash.find = find;
            lodash.findIndex = findIndex;
            lodash.findKey = findKey;
            lodash.findLast = findLast;
            lodash.findLastIndex = findLastIndex;
            lodash.findLastKey = findLastKey;
            lodash.floor = floor;
            lodash.forEach = forEach;
            lodash.forEachRight = forEachRight;
            lodash.forIn = forIn;
            lodash.forInRight = forInRight;
            lodash.forOwn = forOwn;
            lodash.forOwnRight = forOwnRight;
            lodash.get = get;
            lodash.gt = gt;
            lodash.gte = gte;
            lodash.has = has;
            lodash.hasIn = hasIn;
            lodash.head = head;
            lodash.identity = identity;
            lodash.includes = includes;
            lodash.indexOf = indexOf;
            lodash.inRange = inRange;
            lodash.invoke = invoke;
            lodash.isArguments = isArguments;
            lodash.isArray = isArray;
            lodash.isArrayBuffer = isArrayBuffer;
            lodash.isArrayLike = isArrayLike;
            lodash.isArrayLikeObject = isArrayLikeObject;
            lodash.isBoolean = isBoolean;
            lodash.isBuffer = isBuffer;
            lodash.isDate = isDate;
            lodash.isElement = isElement;
            lodash.isEmpty = isEmpty;
            lodash.isEqual = isEqual;
            lodash.isEqualWith = isEqualWith;
            lodash.isError = isError;
            lodash.isFinite = isFinite;
            lodash.isFunction = isFunction;
            lodash.isInteger = isInteger;
            lodash.isLength = isLength;
            lodash.isMap = isMap;
            lodash.isMatch = isMatch;
            lodash.isMatchWith = isMatchWith;
            lodash.isNaN = isNaN;
            lodash.isNative = isNative;
            lodash.isNil = isNil;
            lodash.isNull = isNull;
            lodash.isNumber = isNumber;
            lodash.isObject = isObject;
            lodash.isObjectLike = isObjectLike;
            lodash.isPlainObject = isPlainObject;
            lodash.isRegExp = isRegExp;
            lodash.isSafeInteger = isSafeInteger;
            lodash.isSet = isSet;
            lodash.isString = isString;
            lodash.isSymbol = isSymbol;
            lodash.isTypedArray = isTypedArray;
            lodash.isUndefined = isUndefined;
            lodash.isWeakMap = isWeakMap;
            lodash.isWeakSet = isWeakSet;
            lodash.join = join;
            lodash.kebabCase = kebabCase;
            lodash.last = last;
            lodash.lastIndexOf = lastIndexOf;
            lodash.lowerCase = lowerCase;
            lodash.lowerFirst = lowerFirst;
            lodash.lt = lt;
            lodash.lte = lte;
            lodash.max = max;
            lodash.maxBy = maxBy;
            lodash.mean = mean;
            lodash.meanBy = meanBy;
            lodash.min = min;
            lodash.minBy = minBy;
            lodash.stubArray = stubArray;
            lodash.stubFalse = stubFalse;
            lodash.stubObject = stubObject;
            lodash.stubString = stubString;
            lodash.stubTrue = stubTrue;
            lodash.multiply = multiply;
            lodash.nth = nth;
            lodash.noConflict = noConflict;
            lodash.noop = noop;
            lodash.now = now;
            lodash.pad = pad;
            lodash.padEnd = padEnd;
            lodash.padStart = padStart;
            lodash.parseInt = parseInt;
            lodash.random = random;
            lodash.reduce = reduce;
            lodash.reduceRight = reduceRight;
            lodash.repeat = repeat;
            lodash.replace = replace;
            lodash.result = result;
            lodash.round = round;
            lodash.runInContext = runInContext;
            lodash.sample = sample;
            lodash.size = size;
            lodash.snakeCase = snakeCase;
            lodash.some = some;
            lodash.sortedIndex = sortedIndex;
            lodash.sortedIndexBy = sortedIndexBy;
            lodash.sortedIndexOf = sortedIndexOf;
            lodash.sortedLastIndex = sortedLastIndex;
            lodash.sortedLastIndexBy = sortedLastIndexBy;
            lodash.sortedLastIndexOf = sortedLastIndexOf;
            lodash.startCase = startCase;
            lodash.startsWith = startsWith;
            lodash.subtract = subtract;
            lodash.sum = sum;
            lodash.sumBy = sumBy;
            lodash.template = template;
            lodash.times = times;
            lodash.toFinite = toFinite;
            lodash.toInteger = toInteger;
            lodash.toLength = toLength;
            lodash.toLower = toLower;
            lodash.toNumber = toNumber;
            lodash.toSafeInteger = toSafeInteger;
            lodash.toString = toString;
            lodash.toUpper = toUpper;
            lodash.trim = trim;
            lodash.trimEnd = trimEnd;
            lodash.trimStart = trimStart;
            lodash.truncate = truncate;
            lodash.unescape = unescape;
            lodash.uniqueId = uniqueId;
            lodash.upperCase = upperCase;
            lodash.upperFirst = upperFirst;
            // Add aliases.
            lodash.each = forEach;
            lodash.eachRight = forEachRight;
            lodash.first = head;
            mixin(lodash, (function () {
                var source = {};
                baseForOwn(lodash, function (func, methodName) {
                    if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                        source[methodName] = func;
                    }
                });
                return source;
            }()), { 'chain': false });
            /*------------------------------------------------------------------------*/
            /**
             * The semantic version number.
             *
             * @static
             * @memberOf _
             * @type {string}
             */
            lodash.VERSION = VERSION;
            // Assign default placeholders.
            arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
                lodash[methodName].placeholder = lodash;
            });
            // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
            arrayEach(['drop', 'take'], function (methodName, index) {
                LazyWrapper.prototype[methodName] = function (n) {
                    n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);
                    var result = (this.__filtered__ && !index)
                        ? new LazyWrapper(this)
                        : this.clone();
                    if (result.__filtered__) {
                        result.__takeCount__ = nativeMin(n, result.__takeCount__);
                    }
                    else {
                        result.__views__.push({
                            'size': nativeMin(n, MAX_ARRAY_LENGTH),
                            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                        });
                    }
                    return result;
                };
                LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                    return this.reverse()[methodName](n).reverse();
                };
            });
            // Add `LazyWrapper` methods that accept an `iteratee` value.
            arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
                LazyWrapper.prototype[methodName] = function (iteratee) {
                    var result = this.clone();
                    result.__iteratees__.push({
                        'iteratee': getIteratee(iteratee, 3),
                        'type': type
                    });
                    result.__filtered__ = result.__filtered__ || isFilter;
                    return result;
                };
            });
            // Add `LazyWrapper` methods for `_.head` and `_.last`.
            arrayEach(['head', 'last'], function (methodName, index) {
                var takeName = 'take' + (index ? 'Right' : '');
                LazyWrapper.prototype[methodName] = function () {
                    return this[takeName](1).value()[0];
                };
            });
            // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
            arrayEach(['initial', 'tail'], function (methodName, index) {
                var dropName = 'drop' + (index ? '' : 'Right');
                LazyWrapper.prototype[methodName] = function () {
                    return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                };
            });
            LazyWrapper.prototype.compact = function () {
                return this.filter(identity);
            };
            LazyWrapper.prototype.find = function (predicate) {
                return this.filter(predicate).head();
            };
            LazyWrapper.prototype.findLast = function (predicate) {
                return this.reverse().find(predicate);
            };
            LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                if (typeof path == 'function') {
                    return new LazyWrapper(this);
                }
                return this.map(function (value) {
                    return baseInvoke(value, path, args);
                });
            });
            LazyWrapper.prototype.reject = function (predicate) {
                return this.filter(negate(getIteratee(predicate)));
            };
            LazyWrapper.prototype.slice = function (start, end) {
                start = toInteger(start);
                var result = this;
                if (result.__filtered__ && (start > 0 || end < 0)) {
                    return new LazyWrapper(result);
                }
                if (start < 0) {
                    result = result.takeRight(-start);
                }
                else if (start) {
                    result = result.drop(start);
                }
                if (end !== undefined$1) {
                    end = toInteger(end);
                    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                }
                return result;
            };
            LazyWrapper.prototype.takeRightWhile = function (predicate) {
                return this.reverse().takeWhile(predicate).reverse();
            };
            LazyWrapper.prototype.toArray = function () {
                return this.take(MAX_ARRAY_LENGTH);
            };
            // Add `LazyWrapper` methods to `lodash.prototype`.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
                if (!lodashFunc) {
                    return;
                }
                lodash.prototype[methodName] = function () {
                    var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                    var interceptor = function (value) {
                        var result = lodashFunc.apply(lodash, arrayPush([value], args));
                        return (isTaker && chainAll) ? result[0] : result;
                    };
                    if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                        // Avoid lazy use if the iteratee has a "length" value other than `1`.
                        isLazy = useLazy = false;
                    }
                    var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                    if (!retUnwrapped && useLazy) {
                        value = onlyLazy ? value : new LazyWrapper(this);
                        var result = func.apply(value, args);
                        result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
                        return new LodashWrapper(result, chainAll);
                    }
                    if (isUnwrapped && onlyLazy) {
                        return func.apply(this, args);
                    }
                    result = this.thru(interceptor);
                    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                };
            });
            // Add `Array` methods to `lodash.prototype`.
            arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
                lodash.prototype[methodName] = function () {
                    var args = arguments;
                    if (retUnwrapped && !this.__chain__) {
                        var value = this.value();
                        return func.apply(isArray(value) ? value : [], args);
                    }
                    return this[chainName](function (value) {
                        return func.apply(isArray(value) ? value : [], args);
                    });
                };
            });
            // Map minified method names to their real names.
            baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                var lodashFunc = lodash[methodName];
                if (lodashFunc) {
                    var key = lodashFunc.name + '';
                    if (!hasOwnProperty.call(realNames, key)) {
                        realNames[key] = [];
                    }
                    realNames[key].push({ 'name': methodName, 'func': lodashFunc });
                }
            });
            realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
                    'name': 'wrapper',
                    'func': undefined$1
                }];
            // Add methods to `LazyWrapper`.
            LazyWrapper.prototype.clone = lazyClone;
            LazyWrapper.prototype.reverse = lazyReverse;
            LazyWrapper.prototype.value = lazyValue;
            // Add chain sequence methods to the `lodash` wrapper.
            lodash.prototype.at = wrapperAt;
            lodash.prototype.chain = wrapperChain;
            lodash.prototype.commit = wrapperCommit;
            lodash.prototype.next = wrapperNext;
            lodash.prototype.plant = wrapperPlant;
            lodash.prototype.reverse = wrapperReverse;
            lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
            // Add lazy aliases.
            lodash.prototype.first = lodash.prototype.head;
            if (symIterator) {
                lodash.prototype[symIterator] = wrapperToIterator;
            }
            return lodash;
        });
        /*--------------------------------------------------------------------------*/
        // Export lodash.
        var _ = runInContext();
        // Some AMD build optimizers, like r.js, check for condition patterns like:
        if (freeModule) {
            // Export for Node.js.
            (freeModule.exports = _)._ = _;
            // Export for CommonJS support.
            freeExports._ = _;
        }
        else {
            // Export to the global object.
            root._ = _;
        }
    }.call(commonjsGlobal));
}(lodash, lodash.exports));
var _ = lodash.exports;
function FilterIcon(props, svgRef) {
    return /*#__PURE__*/ React$4.createElement("svg", Object.assign({
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 20 20",
        fill: "currentColor",
        "aria-hidden": "true",
        ref: svgRef
    }, props), /*#__PURE__*/ React$4.createElement("path", {
        fillRule: "evenodd",
        d: "M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z",
        clipRule: "evenodd"
    }));
}
const ForwardRef = React$4.forwardRef(FilterIcon);
var FilterIcon$1 = ForwardRef;
function ownKeys$1(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2$1(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {
            _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _typeof$1(obj) {
    "@babel/helpers - typeof";
    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
            descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
        _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _defineProperty$1(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
}
function _toConsumableArray$1(arr) {
    return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
}
function _arrayWithoutHoles$1(arr) {
    if (Array.isArray(arr))
        return _arrayLikeToArray$1(arr);
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
        return arr;
}
function _iterableToArray$1(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null)
        return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
                break;
        }
    }
    catch (err) {
        _d = true;
        _e = err;
    }
    finally {
        try {
            if (!_n && _i["return"] != null)
                _i["return"]();
        }
        finally {
            if (_d)
                throw _e;
        }
    }
    return _arr;
}
function _unsupportedIterableToArray$1(o, minLen) {
    if (!o)
        return;
    if (typeof o === "string")
        return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
        n = o.constructor.name;
    if (n === "Map" || n === "Set")
        return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length)
        len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
    return arr2;
}
function _nonIterableSpread$1() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var noop$1 = function noop() { };
var _WINDOW = {};
var _DOCUMENT = {};
var _MUTATION_OBSERVER = null;
var _PERFORMANCE = {
    mark: noop$1,
    measure: noop$1
};
try {
    if (typeof window !== 'undefined')
        _WINDOW = window;
    if (typeof document !== 'undefined')
        _DOCUMENT = document;
    if (typeof MutationObserver !== 'undefined')
        _MUTATION_OBSERVER = MutationObserver;
    if (typeof performance !== 'undefined')
        _PERFORMANCE = performance;
}
catch (e) { }
var _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;
var WINDOW = _WINDOW;
var DOCUMENT = _DOCUMENT;
var MUTATION_OBSERVER = _MUTATION_OBSERVER;
var PERFORMANCE = _PERFORMANCE;
!!WINDOW.document;
var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');
var _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;
var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
var UNITS_IN_GRID = 16;
var DEFAULT_CSS_PREFIX = 'fa';
var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
var DATA_FA_I2SVG = 'data-fa-i2svg';
var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
var DATA_PREFIX = 'data-prefix';
var DATA_ICON = 'data-icon';
var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
var MUTATION_APPROACH_ASYNC = 'async';
var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];
var PRODUCTION$1 = function () {
    try {
        return process.env.NODE_ENV === 'production';
    }
    catch (e) {
        return false;
    }
}();
var FAMILY_CLASSIC = 'classic';
var FAMILY_SHARP = 'sharp';
var FAMILIES = [FAMILY_CLASSIC, FAMILY_SHARP];
function familyProxy(obj) {
    // Defaults to the classic family if family is not available
    return new Proxy(obj, {
        get: function get(target, prop) {
            return prop in target ? target[prop] : target[FAMILY_CLASSIC];
        }
    });
}
var PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty$1(_familyProxy, FAMILY_CLASSIC, {
    'fa': 'solid',
    'fas': 'solid',
    'fa-solid': 'solid',
    'far': 'regular',
    'fa-regular': 'regular',
    'fal': 'light',
    'fa-light': 'light',
    'fat': 'thin',
    'fa-thin': 'thin',
    'fad': 'duotone',
    'fa-duotone': 'duotone',
    'fab': 'brands',
    'fa-brands': 'brands',
    'fak': 'kit',
    'fa-kit': 'kit'
}), _defineProperty$1(_familyProxy, FAMILY_SHARP, {
    'fa': 'solid',
    'fass': 'solid',
    'fa-solid': 'solid',
    'fasr': 'regular',
    'fa-regular': 'regular',
    'fasl': 'light',
    'fa-light': 'light'
}), _familyProxy));
var STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty$1(_familyProxy2, FAMILY_CLASSIC, {
    'solid': 'fas',
    'regular': 'far',
    'light': 'fal',
    'thin': 'fat',
    'duotone': 'fad',
    'brands': 'fab',
    'kit': 'fak'
}), _defineProperty$1(_familyProxy2, FAMILY_SHARP, {
    'solid': 'fass',
    'regular': 'fasr',
    'light': 'fasl'
}), _familyProxy2));
var PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty$1(_familyProxy3, FAMILY_CLASSIC, {
    'fab': 'fa-brands',
    'fad': 'fa-duotone',
    'fak': 'fa-kit',
    'fal': 'fa-light',
    'far': 'fa-regular',
    'fas': 'fa-solid',
    'fat': 'fa-thin'
}), _defineProperty$1(_familyProxy3, FAMILY_SHARP, {
    'fass': 'fa-solid',
    'fasr': 'fa-regular',
    'fasl': 'fa-light'
}), _familyProxy3));
var LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty$1(_familyProxy4, FAMILY_CLASSIC, {
    'fa-brands': 'fab',
    'fa-duotone': 'fad',
    'fa-kit': 'fak',
    'fa-light': 'fal',
    'fa-regular': 'far',
    'fa-solid': 'fas',
    'fa-thin': 'fat'
}), _defineProperty$1(_familyProxy4, FAMILY_SHARP, {
    'fa-solid': 'fass',
    'fa-regular': 'fasr',
    'fa-light': 'fasl'
}), _familyProxy4));
var ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss|sr|sl)?[\-\ ]/; // eslint-disable-line no-useless-escape
var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
var FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i;
var FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty$1(_familyProxy5, FAMILY_CLASSIC, {
    '900': 'fas',
    '400': 'far',
    'normal': 'far',
    '300': 'fal',
    '100': 'fat'
}), _defineProperty$1(_familyProxy5, FAMILY_SHARP, {
    '900': 'fass',
    '400': 'fasr',
    '300': 'fasl'
}), _familyProxy5));
var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
var ATTRIBUTES_WATCHED_FOR_MUTATION = ['class', 'data-prefix', 'data-icon', 'data-fa-transform', 'data-fa-mask'];
var DUOTONE_CLASSES = {
    GROUP: 'duotone-group',
    SWAP_OPACITY: 'swap-opacity',
    PRIMARY: 'primary',
    SECONDARY: 'secondary'
};
var prefixes = new Set();
Object.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));
Object.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));
var RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray$1(prefixes), ['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', 'beat', 'border', 'fade', 'beat-fade', 'bounce', 'flip-both', 'flip-horizontal', 'flip-vertical', 'flip', 'fw', 'inverse', 'layers-counter', 'layers-text', 'layers', 'li', 'pull-left', 'pull-right', 'pulse', 'rotate-180', 'rotate-270', 'rotate-90', 'rotate-by', 'shake', 'spin-pulse', 'spin-reverse', 'spin', 'stack-1x', 'stack-2x', 'stack', 'ul', DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY]).concat(oneToTen.map(function (n) {
    return "".concat(n, "x");
})).concat(oneToTwenty.map(function (n) {
    return "w-".concat(n);
}));
var initial = WINDOW.FontAwesomeConfig || {};
function getAttrConfig(attr) {
    var element = DOCUMENT.querySelector('script[' + attr + ']');
    if (element) {
        return element.getAttribute(attr);
    }
}
function coerce(val) {
    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
    // We'll assume that this is an indication that it should be toggled to true
    if (val === '')
        return true;
    if (val === 'false')
        return false;
    if (val === 'true')
        return true;
    return val;
}
if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
    var attrs = [['data-family-prefix', 'familyPrefix'], ['data-css-prefix', 'cssPrefix'], ['data-family-default', 'familyDefault'], ['data-style-default', 'styleDefault'], ['data-replacement-class', 'replacementClass'], ['data-auto-replace-svg', 'autoReplaceSvg'], ['data-auto-add-css', 'autoAddCss'], ['data-auto-a11y', 'autoA11y'], ['data-search-pseudo-elements', 'searchPseudoElements'], ['data-observe-mutations', 'observeMutations'], ['data-mutate-approach', 'mutateApproach'], ['data-keep-original-source', 'keepOriginalSource'], ['data-measure-performance', 'measurePerformance'], ['data-show-missing-icons', 'showMissingIcons']];
    attrs.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2), attr = _ref2[0], key = _ref2[1];
        var val = coerce(getAttrConfig(attr));
        if (val !== undefined && val !== null) {
            initial[key] = val;
        }
    });
}
var _default = {
    styleDefault: 'solid',
    familyDefault: 'classic',
    cssPrefix: DEFAULT_CSS_PREFIX,
    replacementClass: DEFAULT_REPLACEMENT_CLASS,
    autoReplaceSvg: true,
    autoAddCss: true,
    autoA11y: true,
    searchPseudoElements: false,
    observeMutations: true,
    mutateApproach: 'async',
    keepOriginalSource: true,
    measurePerformance: false,
    showMissingIcons: true
}; // familyPrefix is deprecated but we must still support it if present
if (initial.familyPrefix) {
    initial.cssPrefix = initial.familyPrefix;
}
var _config = _objectSpread2$1(_objectSpread2$1({}, _default), initial);
if (!_config.autoReplaceSvg)
    _config.observeMutations = false;
var config = {};
Object.keys(_default).forEach(function (key) {
    Object.defineProperty(config, key, {
        enumerable: true,
        set: function set(val) {
            _config[key] = val;
            _onChangeCb.forEach(function (cb) {
                return cb(config);
            });
        },
        get: function get() {
            return _config[key];
        }
    });
}); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0
Object.defineProperty(config, 'familyPrefix', {
    enumerable: true,
    set: function set(val) {
        _config.cssPrefix = val;
        _onChangeCb.forEach(function (cb) {
            return cb(config);
        });
    },
    get: function get() {
        return _config.cssPrefix;
    }
});
WINDOW.FontAwesomeConfig = config;
var _onChangeCb = [];
function onChange(cb) {
    _onChangeCb.push(cb);
    return function () {
        _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);
    };
}
var d = UNITS_IN_GRID;
var meaninglessTransform = {
    size: 16,
    x: 0,
    y: 0,
    rotate: 0,
    flipX: false,
    flipY: false
};
function insertCss(css) {
    if (!css || !IS_DOM) {
        return;
    }
    var style = DOCUMENT.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    var headChildren = DOCUMENT.head.childNodes;
    var beforeChild = null;
    for (var i = headChildren.length - 1; i > -1; i--) {
        var child = headChildren[i];
        var tagName = (child.tagName || '').toUpperCase();
        if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
            beforeChild = child;
        }
    }
    DOCUMENT.head.insertBefore(style, beforeChild);
    return css;
}
var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
function nextUniqueId() {
    var size = 12;
    var id = '';
    while (size-- > 0) {
        id += idPool[Math.random() * 62 | 0];
    }
    return id;
}
function toArray(obj) {
    var array = [];
    for (var i = (obj || []).length >>> 0; i--;) {
        array[i] = obj[i];
    }
    return array;
}
function classArray(node) {
    if (node.classList) {
        return toArray(node.classList);
    }
    else {
        return (node.getAttribute('class') || '').split(' ').filter(function (i) {
            return i;
        });
    }
}
function htmlEscape(str) {
    return "".concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
function joinAttributes(attributes) {
    return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
        return acc + "".concat(attributeName, "=\"").concat(htmlEscape(attributes[attributeName]), "\" ");
    }, '').trim();
}
function joinStyles(styles) {
    return Object.keys(styles || {}).reduce(function (acc, styleName) {
        return acc + "".concat(styleName, ": ").concat(styles[styleName].trim(), ";");
    }, '');
}
function transformIsMeaningful(transform) {
    return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
}
function transformForSvg(_ref) {
    var transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;
    var outer = {
        transform: "translate(".concat(containerWidth / 2, " 256)")
    };
    var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
    var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
    var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
    var inner = {
        transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
    };
    var path = {
        transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
    };
    return {
        outer: outer,
        inner: inner,
        path: path
    };
}
function transformForCss(_ref2) {
    var transform = _ref2.transform, _ref2$width = _ref2.width, width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width, _ref2$height = _ref2.height, height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height, _ref2$startCentered = _ref2.startCentered, startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
    var val = '';
    if (startCentered && IS_IE) {
        val += "translate(".concat(transform.x / d - width / 2, "em, ").concat(transform.y / d - height / 2, "em) ");
    }
    else if (startCentered) {
        val += "translate(calc(-50% + ".concat(transform.x / d, "em), calc(-50% + ").concat(transform.y / d, "em)) ");
    }
    else {
        val += "translate(".concat(transform.x / d, "em, ").concat(transform.y / d, "em) ");
    }
    val += "scale(".concat(transform.size / d * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d * (transform.flipY ? -1 : 1), ") ");
    val += "rotate(".concat(transform.rotate, "deg) ");
    return val;
}
var baseStyles = ":root, :host {\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\n          transform: scale(var(--fa-counter-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(var(--fa-li-width, 2em) * -1);\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  -webkit-animation-name: fa-beat;\n          animation-name: fa-beat;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  -webkit-animation-name: fa-bounce;\n          animation-name: fa-bounce;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  -webkit-animation-name: fa-fade;\n          animation-name: fa-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  -webkit-animation-name: fa-beat-fade;\n          animation-name: fa-beat-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  -webkit-animation-name: fa-flip;\n          animation-name: fa-flip;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  -webkit-animation-name: fa-shake;\n          animation-name: fa-shake;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\n          animation-duration: var(--fa-animation-duration, 2s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\n          animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    -webkit-animation-delay: -1ms;\n            animation-delay: -1ms;\n    -webkit-animation-duration: 1ms;\n            animation-duration: 1ms;\n    -webkit-animation-iteration-count: 1;\n            animation-iteration-count: 1;\n    -webkit-transition-delay: 0s;\n            transition-delay: 0s;\n    -webkit-transition-duration: 0s;\n            transition-duration: 0s;\n  }\n}\n@-webkit-keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@-webkit-keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@-webkit-keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@-webkit-keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@-webkit-keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@-webkit-keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\n          transform: rotate(var(--fa-rotate-angle, none));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}";
function css() {
    var dcp = DEFAULT_CSS_PREFIX;
    var drc = DEFAULT_REPLACEMENT_CLASS;
    var fp = config.cssPrefix;
    var rc = config.replacementClass;
    var s = baseStyles;
    if (fp !== dcp || rc !== drc) {
        var dPatt = new RegExp("\\.".concat(dcp, "\\-"), 'g');
        var customPropPatt = new RegExp("\\--".concat(dcp, "\\-"), 'g');
        var rPatt = new RegExp("\\.".concat(drc), 'g');
        s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
    }
    return s;
}
var _cssInserted = false;
function ensureCss() {
    if (config.autoAddCss && !_cssInserted) {
        insertCss(css());
        _cssInserted = true;
    }
}
var InjectCSS = {
    mixout: function mixout() {
        return {
            dom: {
                css: css,
                insertCss: ensureCss
            }
        };
    },
    hooks: function hooks() {
        return {
            beforeDOMElementCreation: function beforeDOMElementCreation() {
                ensureCss();
            },
            beforeI2svg: function beforeI2svg() {
                ensureCss();
            }
        };
    }
};
var w = WINDOW || {};
if (!w[NAMESPACE_IDENTIFIER])
    w[NAMESPACE_IDENTIFIER] = {};
if (!w[NAMESPACE_IDENTIFIER].styles)
    w[NAMESPACE_IDENTIFIER].styles = {};
if (!w[NAMESPACE_IDENTIFIER].hooks)
    w[NAMESPACE_IDENTIFIER].hooks = {};
if (!w[NAMESPACE_IDENTIFIER].shims)
    w[NAMESPACE_IDENTIFIER].shims = [];
var namespace = w[NAMESPACE_IDENTIFIER];
var functions$1 = [];
var listener = function listener() {
    DOCUMENT.removeEventListener('DOMContentLoaded', listener);
    loaded = 1;
    functions$1.map(function (fn) {
        return fn();
    });
};
var loaded = false;
if (IS_DOM) {
    loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
    if (!loaded)
        DOCUMENT.addEventListener('DOMContentLoaded', listener);
}
function domready(fn) {
    if (!IS_DOM)
        return;
    loaded ? setTimeout(fn, 0) : functions$1.push(fn);
}
function toHtml(abstractNodes) {
    var tag = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;
    if (typeof abstractNodes === 'string') {
        return htmlEscape(abstractNodes);
    }
    else {
        return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(''), "</").concat(tag, ">");
    }
}
function iconFromMapping(mapping, prefix, iconName) {
    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
        return {
            prefix: prefix,
            iconName: iconName,
            icon: mapping[prefix][iconName]
        };
    }
}
/**
 * Internal helper to bind a function known to have 4 arguments
 * to a given context.
 */
var bindInternal4 = function bindInternal4(func, thisContext) {
    return function (a, b, c, d) {
        return func.call(thisContext, a, b, c, d);
    };
};
/**
 * # Reduce
 *
 * A fast object `.reduce()` implementation.
 *
 * @param  {Object}   subject      The object to reduce over.
 * @param  {Function} fn           The reducer function.
 * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
 * @param  {Object}   thisContext  The context for the reducer.
 * @return {mixed}                 The final result.
 */
var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
    var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn, i, key, result;
    if (initialValue === undefined) {
        i = 1;
        result = subject[keys[0]];
    }
    else {
        i = 0;
        result = initialValue;
    }
    for (; i < length; i++) {
        key = keys[i];
        result = iterator(result, subject[key], key, subject);
    }
    return result;
};
/**
 * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT
 *
 * Copyright Mathias Bynens <https://mathiasbynens.be/>

 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:

 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    while (counter < length) {
        var value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 0xFC00) == 0xDC00) {
                // eslint-disable-line eqeqeq
                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            }
            else {
                output.push(value);
                counter--;
            }
        }
        else {
            output.push(value);
        }
    }
    return output;
}
function toHex(unicode) {
    var decoded = ucs2decode(unicode);
    return decoded.length === 1 ? decoded[0].toString(16) : null;
}
function codePointAt(string, index) {
    var size = string.length;
    var first = string.charCodeAt(index);
    var second;
    if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
        second = string.charCodeAt(index + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
            return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
    }
    return first;
}
function normalizeIcons(icons) {
    return Object.keys(icons).reduce(function (acc, iconName) {
        var icon = icons[iconName];
        var expanded = !!icon.icon;
        if (expanded) {
            acc[icon.iconName] = icon.icon;
        }
        else {
            acc[iconName] = icon;
        }
        return acc;
    }, {});
}
function defineIcons(prefix, icons) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = normalizeIcons(icons);
    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
        namespace.hooks.addPack(prefix, normalizeIcons(icons));
    }
    else {
        namespace.styles[prefix] = _objectSpread2$1(_objectSpread2$1({}, namespace.styles[prefix] || {}), normalized);
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll ease the upgrade process for our users by automatically defining
     * this as well.
     */
    if (prefix === 'fas') {
        defineIcons('fa', icons);
    }
}
var _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;
var styles = namespace.styles, shims = namespace.shims;
var LONG_STYLE = (_LONG_STYLE = {}, _defineProperty$1(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty$1(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);
var _defaultUsablePrefix = null;
var _byUnicode = {};
var _byLigature = {};
var _byOldName = {};
var _byOldUnicode = {};
var _byAlias = {};
var PREFIXES = (_PREFIXES = {}, _defineProperty$1(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty$1(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);
function isReserved(name) {
    return ~RESERVED_CLASSES.indexOf(name);
}
function getIconName(cssPrefix, cls) {
    var parts = cls.split('-');
    var prefix = parts[0];
    var iconName = parts.slice(1).join('-');
    if (prefix === cssPrefix && iconName !== '' && !isReserved(iconName)) {
        return iconName;
    }
    else {
        return null;
    }
}
var build = function build() {
    var lookup = function lookup(reducer) {
        return reduce(styles, function (o, style, prefix) {
            o[prefix] = reduce(style, reducer, {});
            return o;
        }, {});
    };
    _byUnicode = lookup(function (acc, icon, iconName) {
        if (icon[3]) {
            acc[icon[3]] = iconName;
        }
        if (icon[2]) {
            var aliases = icon[2].filter(function (a) {
                return typeof a === 'number';
            });
            aliases.forEach(function (alias) {
                acc[alias.toString(16)] = iconName;
            });
        }
        return acc;
    });
    _byLigature = lookup(function (acc, icon, iconName) {
        acc[iconName] = iconName;
        if (icon[2]) {
            var aliases = icon[2].filter(function (a) {
                return typeof a === 'string';
            });
            aliases.forEach(function (alias) {
                acc[alias] = iconName;
            });
        }
        return acc;
    });
    _byAlias = lookup(function (acc, icon, iconName) {
        var aliases = icon[2];
        acc[iconName] = iconName;
        aliases.forEach(function (alias) {
            acc[alias] = iconName;
        });
        return acc;
    }); // If we have a Kit, we can't determine if regular is available since we
    // could be auto-fetching it. We'll have to assume that it is available.
    var hasRegular = 'far' in styles || config.autoFetchSvg;
    var shimLookups = reduce(shims, function (acc, shim) {
        var maybeNameMaybeUnicode = shim[0];
        var prefix = shim[1];
        var iconName = shim[2];
        if (prefix === 'far' && !hasRegular) {
            prefix = 'fas';
        }
        if (typeof maybeNameMaybeUnicode === 'string') {
            acc.names[maybeNameMaybeUnicode] = {
                prefix: prefix,
                iconName: iconName
            };
        }
        if (typeof maybeNameMaybeUnicode === 'number') {
            acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {
                prefix: prefix,
                iconName: iconName
            };
        }
        return acc;
    }, {
        names: {},
        unicodes: {}
    });
    _byOldName = shimLookups.names;
    _byOldUnicode = shimLookups.unicodes;
    _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {
        family: config.familyDefault
    });
};
onChange(function (c) {
    _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {
        family: config.familyDefault
    });
});
build();
function byUnicode(prefix, unicode) {
    return (_byUnicode[prefix] || {})[unicode];
}
function byLigature(prefix, ligature) {
    return (_byLigature[prefix] || {})[ligature];
}
function byAlias(prefix, alias) {
    return (_byAlias[prefix] || {})[alias];
}
function byOldName(name) {
    return _byOldName[name] || {
        prefix: null,
        iconName: null
    };
}
function byOldUnicode(unicode) {
    var oldUnicode = _byOldUnicode[unicode];
    var newUnicode = byUnicode('fas', unicode);
    return oldUnicode || (newUnicode ? {
        prefix: 'fas',
        iconName: newUnicode
    } : null) || {
        prefix: null,
        iconName: null
    };
}
function getDefaultUsablePrefix() {
    return _defaultUsablePrefix;
}
var emptyCanonicalIcon = function emptyCanonicalIcon() {
    return {
        prefix: null,
        iconName: null,
        rest: []
    };
};
function getCanonicalPrefix(styleOrPrefix) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$family = params.family, family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;
    var style = PREFIX_TO_STYLE[family][styleOrPrefix];
    var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];
    var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;
    return prefix || defined || null;
}
var PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty$1(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty$1(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);
function getCanonicalIcon(values) {
    var _famProps;
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$skipLookups = params.skipLookups, skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;
    var famProps = (_famProps = {}, _defineProperty$1(_famProps, FAMILY_CLASSIC, "".concat(config.cssPrefix, "-").concat(FAMILY_CLASSIC)), _defineProperty$1(_famProps, FAMILY_SHARP, "".concat(config.cssPrefix, "-").concat(FAMILY_SHARP)), _famProps);
    var givenPrefix = null;
    var family = FAMILY_CLASSIC;
    if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function (v) {
        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);
    })) {
        family = FAMILY_CLASSIC;
    }
    if (values.includes(famProps[FAMILY_SHARP]) || values.some(function (v) {
        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);
    })) {
        family = FAMILY_SHARP;
    }
    var canonical = values.reduce(function (acc, cls) {
        var iconName = getIconName(config.cssPrefix, cls);
        if (styles[cls]) {
            cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;
            givenPrefix = cls;
            acc.prefix = cls;
        }
        else if (PREFIXES[family].indexOf(cls) > -1) {
            givenPrefix = cls;
            acc.prefix = getCanonicalPrefix(cls, {
                family: family
            });
        }
        else if (iconName) {
            acc.iconName = iconName;
        }
        else if (cls !== config.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {
            acc.rest.push(cls);
        }
        if (!skipLookups && acc.prefix && acc.iconName) {
            var shim = givenPrefix === 'fa' ? byOldName(acc.iconName) : {};
            var aliasIconName = byAlias(acc.prefix, acc.iconName);
            if (shim.prefix) {
                givenPrefix = null;
            }
            acc.iconName = shim.iconName || aliasIconName || acc.iconName;
            acc.prefix = shim.prefix || acc.prefix;
            if (acc.prefix === 'far' && !styles['far'] && styles['fas'] && !config.autoFetchSvg) {
                // Allow a fallback from the regular style to solid if regular is not available
                // but only if we aren't auto-fetching SVGs
                acc.prefix = 'fas';
            }
        }
        return acc;
    }, emptyCanonicalIcon());
    if (values.includes('fa-brands') || values.includes('fab')) {
        canonical.prefix = 'fab';
    }
    if (values.includes('fa-duotone') || values.includes('fad')) {
        canonical.prefix = 'fad';
    }
    if (!canonical.prefix && family === FAMILY_SHARP && (styles['fass'] || config.autoFetchSvg)) {
        canonical.prefix = 'fass';
        canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;
    }
    if (canonical.prefix === 'fa' || givenPrefix === 'fa') {
        // The fa prefix is not canonical. So if it has made it through until this point
        // we will shift it to the correct prefix.
        canonical.prefix = getDefaultUsablePrefix() || 'fas';
    }
    return canonical;
}
var Library = /*#__PURE__*/ function () {
    function Library() {
        _classCallCheck(this, Library);
        this.definitions = {};
    }
    _createClass(Library, [{
            key: "add",
            value: function add() {
                var _this = this;
                for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
                    definitions[_key] = arguments[_key];
                }
                var additions = definitions.reduce(this._pullDefinitions, {});
                Object.keys(additions).forEach(function (key) {
                    _this.definitions[key] = _objectSpread2$1(_objectSpread2$1({}, _this.definitions[key] || {}), additions[key]);
                    defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change
                    var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];
                    if (longPrefix)
                        defineIcons(longPrefix, additions[key]);
                    build();
                });
            }
        }, {
            key: "reset",
            value: function reset() {
                this.definitions = {};
            }
        }, {
            key: "_pullDefinitions",
            value: function _pullDefinitions(additions, definition) {
                var normalized = definition.prefix && definition.iconName && definition.icon ? {
                    0: definition
                } : definition;
                Object.keys(normalized).map(function (key) {
                    var _normalized$key = normalized[key], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon = _normalized$key.icon;
                    var aliases = icon[2];
                    if (!additions[prefix])
                        additions[prefix] = {};
                    if (aliases.length > 0) {
                        aliases.forEach(function (alias) {
                            if (typeof alias === 'string') {
                                additions[prefix][alias] = icon;
                            }
                        });
                    }
                    additions[prefix][iconName] = icon;
                });
                return additions;
            }
        }]);
    return Library;
}();
var _plugins = [];
var _hooks = {};
var providers = {};
var defaultProviderKeys = Object.keys(providers);
function registerPlugins(nextPlugins, _ref) {
    var obj = _ref.mixoutsTo;
    _plugins = nextPlugins;
    _hooks = {};
    Object.keys(providers).forEach(function (k) {
        if (defaultProviderKeys.indexOf(k) === -1) {
            delete providers[k];
        }
    });
    _plugins.forEach(function (plugin) {
        var mixout = plugin.mixout ? plugin.mixout() : {};
        Object.keys(mixout).forEach(function (tk) {
            if (typeof mixout[tk] === 'function') {
                obj[tk] = mixout[tk];
            }
            if (_typeof$1(mixout[tk]) === 'object') {
                Object.keys(mixout[tk]).forEach(function (sk) {
                    if (!obj[tk]) {
                        obj[tk] = {};
                    }
                    obj[tk][sk] = mixout[tk][sk];
                });
            }
        });
        if (plugin.hooks) {
            var hooks = plugin.hooks();
            Object.keys(hooks).forEach(function (hook) {
                if (!_hooks[hook]) {
                    _hooks[hook] = [];
                }
                _hooks[hook].push(hooks[hook]);
            });
        }
        if (plugin.provides) {
            plugin.provides(providers);
        }
    });
    return obj;
}
function chainHooks(hook, accumulator) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
    }
    var hookFns = _hooks[hook] || [];
    hookFns.forEach(function (hookFn) {
        accumulator = hookFn.apply(null, [accumulator].concat(args)); // eslint-disable-line no-useless-call
    });
    return accumulator;
}
function callHooks(hook) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
    }
    var hookFns = _hooks[hook] || [];
    hookFns.forEach(function (hookFn) {
        hookFn.apply(null, args);
    });
    return undefined;
}
function callProvided() {
    var hook = arguments[0];
    var args = Array.prototype.slice.call(arguments, 1);
    return providers[hook] ? providers[hook].apply(null, args) : undefined;
}
function findIconDefinition(iconLookup) {
    if (iconLookup.prefix === 'fa') {
        iconLookup.prefix = 'fas';
    }
    var iconName = iconLookup.iconName;
    var prefix = iconLookup.prefix || getDefaultUsablePrefix();
    if (!iconName)
        return;
    iconName = byAlias(prefix, iconName) || iconName;
    return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
}
var library = new Library();
var noAuto = function noAuto() {
    config.autoReplaceSvg = false;
    config.observeMutations = false;
    callHooks('noAuto');
};
var dom = {
    i2svg: function i2svg() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (IS_DOM) {
            callHooks('beforeI2svg', params);
            callProvided('pseudoElements2svg', params);
            return callProvided('i2svg', params);
        }
        else {
            return Promise.reject('Operation requires a DOM of some kind.');
        }
    },
    watch: function watch() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var autoReplaceSvgRoot = params.autoReplaceSvgRoot;
        if (config.autoReplaceSvg === false) {
            config.autoReplaceSvg = true;
        }
        config.observeMutations = true;
        domready(function () {
            autoReplace({
                autoReplaceSvgRoot: autoReplaceSvgRoot
            });
            callHooks('watch', params);
        });
    }
};
var parse$1 = {
    icon: function icon(_icon) {
        if (_icon === null) {
            return null;
        }
        if (_typeof$1(_icon) === 'object' && _icon.prefix && _icon.iconName) {
            return {
                prefix: _icon.prefix,
                iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName
            };
        }
        if (Array.isArray(_icon) && _icon.length === 2) {
            var iconName = _icon[1].indexOf('fa-') === 0 ? _icon[1].slice(3) : _icon[1];
            var prefix = getCanonicalPrefix(_icon[0]);
            return {
                prefix: prefix,
                iconName: byAlias(prefix, iconName) || iconName
            };
        }
        if (typeof _icon === 'string' && (_icon.indexOf("".concat(config.cssPrefix, "-")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {
            var canonicalIcon = getCanonicalIcon(_icon.split(' '), {
                skipLookups: true
            });
            return {
                prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),
                iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName
            };
        }
        if (typeof _icon === 'string') {
            var _prefix = getDefaultUsablePrefix();
            return {
                prefix: _prefix,
                iconName: byAlias(_prefix, _icon) || _icon
            };
        }
    }
};
var api = {
    noAuto: noAuto,
    config: config,
    dom: dom,
    parse: parse$1,
    library: library,
    findIconDefinition: findIconDefinition,
    toHtml: toHtml
};
var autoReplace = function autoReplace() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _params$autoReplaceSv = params.autoReplaceSvgRoot, autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
    if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg)
        api.dom.i2svg({
            node: autoReplaceSvgRoot
        });
};
function domVariants(val, abstractCreator) {
    Object.defineProperty(val, 'abstract', {
        get: abstractCreator
    });
    Object.defineProperty(val, 'html', {
        get: function get() {
            return val.abstract.map(function (a) {
                return toHtml(a);
            });
        }
    });
    Object.defineProperty(val, 'node', {
        get: function get() {
            if (!IS_DOM)
                return;
            var container = DOCUMENT.createElement('div');
            container.innerHTML = val.html;
            return container.children;
        }
    });
    return val;
}
function asIcon(_ref) {
    var children = _ref.children, main = _ref.main, mask = _ref.mask, attributes = _ref.attributes, styles = _ref.styles, transform = _ref.transform;
    if (transformIsMeaningful(transform) && main.found && !mask.found) {
        var width = main.width, height = main.height;
        var offset = {
            x: width / height / 2,
            y: 0.5
        };
        attributes['style'] = joinStyles(_objectSpread2$1(_objectSpread2$1({}, styles), {}, {
            'transform-origin': "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
        }));
    }
    return [{
            tag: 'svg',
            attributes: attributes,
            children: children
        }];
}
function asSymbol(_ref) {
    var prefix = _ref.prefix, iconName = _ref.iconName, children = _ref.children, attributes = _ref.attributes, symbol = _ref.symbol;
    var id = symbol === true ? "".concat(prefix, "-").concat(config.cssPrefix, "-").concat(iconName) : symbol;
    return [{
            tag: 'svg',
            attributes: {
                style: 'display: none;'
            },
            children: [{
                    tag: 'symbol',
                    attributes: _objectSpread2$1(_objectSpread2$1({}, attributes), {}, {
                        id: id
                    }),
                    children: children
                }]
        }];
}
function makeInlineSvgAbstract(params) {
    var _params$icons = params.icons, main = _params$icons.main, mask = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform = params.transform, symbol = params.symbol, title = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;
    var _ref = mask.found ? mask : main, width = _ref.width, height = _ref.height;
    var isUploadedIcon = prefix === 'fak';
    var attrClass = [config.replacementClass, iconName ? "".concat(config.cssPrefix, "-").concat(iconName) : ''].filter(function (c) {
        return extra.classes.indexOf(c) === -1;
    }).filter(function (c) {
        return c !== '' || !!c;
    }).concat(extra.classes).join(' ');
    var content = {
        children: [],
        attributes: _objectSpread2$1(_objectSpread2$1({}, extra.attributes), {}, {
            'data-prefix': prefix,
            'data-icon': iconName,
            'class': attrClass,
            'role': extra.attributes.role || 'img',
            'xmlns': 'http://www.w3.org/2000/svg',
            'viewBox': "0 0 ".concat(width, " ").concat(height)
        })
    };
    var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf('fa-fw') ? {
        width: "".concat(width / height * 16 * 0.0625, "em")
    } : {};
    if (watchable) {
        content.attributes[DATA_FA_I2SVG] = '';
    }
    if (title) {
        content.children.push({
            tag: 'title',
            attributes: {
                id: content.attributes['aria-labelledby'] || "title-".concat(titleId || nextUniqueId())
            },
            children: [title]
        });
        delete content.attributes.title;
    }
    var args = _objectSpread2$1(_objectSpread2$1({}, content), {}, {
        prefix: prefix,
        iconName: iconName,
        main: main,
        mask: mask,
        maskId: maskId,
        transform: transform,
        symbol: symbol,
        styles: _objectSpread2$1(_objectSpread2$1({}, uploadedIconWidthStyle), extra.styles)
    });
    var _ref2 = mask.found && main.found ? callProvided('generateAbstractMask', args) || {
        children: [],
        attributes: {}
    } : callProvided('generateAbstractIcon', args) || {
        children: [],
        attributes: {}
    }, children = _ref2.children, attributes = _ref2.attributes;
    args.children = children;
    args.attributes = attributes;
    if (symbol) {
        return asSymbol(args);
    }
    else {
        return asIcon(args);
    }
}
function makeLayersTextAbstract(params) {
    var content = params.content, width = params.width, height = params.height, transform = params.transform, title = params.title, extra = params.extra, _params$watchable2 = params.watchable, watchable = _params$watchable2 === void 0 ? false : _params$watchable2;
    var attributes = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, extra.attributes), title ? {
        'title': title
    } : {}), {}, {
        'class': extra.classes.join(' ')
    });
    if (watchable) {
        attributes[DATA_FA_I2SVG] = '';
    }
    var styles = _objectSpread2$1({}, extra.styles);
    if (transformIsMeaningful(transform)) {
        styles['transform'] = transformForCss({
            transform: transform,
            startCentered: true,
            width: width,
            height: height
        });
        styles['-webkit-transform'] = styles['transform'];
    }
    var styleString = joinStyles(styles);
    if (styleString.length > 0) {
        attributes['style'] = styleString;
    }
    var val = [];
    val.push({
        tag: 'span',
        attributes: attributes,
        children: [content]
    });
    if (title) {
        val.push({
            tag: 'span',
            attributes: {
                class: 'sr-only'
            },
            children: [title]
        });
    }
    return val;
}
function makeLayersCounterAbstract(params) {
    var content = params.content, title = params.title, extra = params.extra;
    var attributes = _objectSpread2$1(_objectSpread2$1(_objectSpread2$1({}, extra.attributes), title ? {
        'title': title
    } : {}), {}, {
        'class': extra.classes.join(' ')
    });
    var styleString = joinStyles(extra.styles);
    if (styleString.length > 0) {
        attributes['style'] = styleString;
    }
    var val = [];
    val.push({
        tag: 'span',
        attributes: attributes,
        children: [content]
    });
    if (title) {
        val.push({
            tag: 'span',
            attributes: {
                class: 'sr-only'
            },
            children: [title]
        });
    }
    return val;
}
var styles$1 = namespace.styles;
function asFoundIcon(icon) {
    var width = icon[0];
    var height = icon[1];
    var _icon$slice = icon.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];
    var element = null;
    if (Array.isArray(vectorData)) {
        element = {
            tag: 'g',
            attributes: {
                class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
            },
            children: [{
                    tag: 'path',
                    attributes: {
                        class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
                        fill: 'currentColor',
                        d: vectorData[0]
                    }
                }, {
                    tag: 'path',
                    attributes: {
                        class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
                        fill: 'currentColor',
                        d: vectorData[1]
                    }
                }]
        };
    }
    else {
        element = {
            tag: 'path',
            attributes: {
                fill: 'currentColor',
                d: vectorData
            }
        };
    }
    return {
        found: true,
        width: width,
        height: height,
        icon: element
    };
}
var missingIconResolutionMixin = {
    found: false,
    width: 512,
    height: 512
};
function maybeNotifyMissing(iconName, prefix) {
    if (!PRODUCTION$1 && !config.showMissingIcons && iconName) {
        console.error("Icon with name \"".concat(iconName, "\" and prefix \"").concat(prefix, "\" is missing."));
    }
}
function findIcon(iconName, prefix) {
    var givenPrefix = prefix;
    if (prefix === 'fa' && config.styleDefault !== null) {
        prefix = getDefaultUsablePrefix();
    }
    return new Promise(function (resolve, reject) {
        ({
            found: false,
            width: 512,
            height: 512,
            icon: callProvided('missingIconAbstract') || {}
        });
        if (givenPrefix === 'fa') {
            var shim = byOldName(iconName) || {};
            iconName = shim.iconName || iconName;
            prefix = shim.prefix || prefix;
        }
        if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {
            var icon = styles$1[prefix][iconName];
            return resolve(asFoundIcon(icon));
        }
        maybeNotifyMissing(iconName, prefix);
        resolve(_objectSpread2$1(_objectSpread2$1({}, missingIconResolutionMixin), {}, {
            icon: config.showMissingIcons && iconName ? callProvided('missingIconAbstract') || {} : {}
        }));
    });
}
var noop$1$1 = function noop() { };
var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
    mark: noop$1$1,
    measure: noop$1$1
};
var preamble = "FA \"6.4.2\"";
var begin = function begin(name) {
    p.mark("".concat(preamble, " ").concat(name, " begins"));
    return function () {
        return end$1(name);
    };
};
var end$1 = function end(name) {
    p.mark("".concat(preamble, " ").concat(name, " ends"));
    p.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
};
var perf = {
    begin: begin,
    end: end$1
};
var noop$2 = function noop() { };
function isWatched(node) {
    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
    return typeof i2svg === 'string';
}
function hasPrefixAndIcon(node) {
    var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;
    var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;
    return prefix && icon;
}
function hasBeenReplaced(node) {
    return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);
}
function getMutator() {
    if (config.autoReplaceSvg === true) {
        return mutators.replace;
    }
    var mutator = mutators[config.autoReplaceSvg];
    return mutator || mutators.replace;
}
function createElementNS(tag) {
    return DOCUMENT.createElementNS('http://www.w3.org/2000/svg', tag);
}
function createElement(tag) {
    return DOCUMENT.createElement(tag);
}
function convertSVG(abstractObj) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$ceFn = params.ceFn, ceFn = _params$ceFn === void 0 ? abstractObj.tag === 'svg' ? createElementNS : createElement : _params$ceFn;
    if (typeof abstractObj === 'string') {
        return DOCUMENT.createTextNode(abstractObj);
    }
    var tag = ceFn(abstractObj.tag);
    Object.keys(abstractObj.attributes || []).forEach(function (key) {
        tag.setAttribute(key, abstractObj.attributes[key]);
    });
    var children = abstractObj.children || [];
    children.forEach(function (child) {
        tag.appendChild(convertSVG(child, {
            ceFn: ceFn
        }));
    });
    return tag;
}
function nodeAsComment(node) {
    var comment = " ".concat(node.outerHTML, " ");
    /* BEGIN.ATTRIBUTION */
    comment = "".concat(comment, "Font Awesome fontawesome.com ");
    /* END.ATTRIBUTION */
    return comment;
}
var mutators = {
    replace: function replace(mutation) {
        var node = mutation[0];
        if (node.parentNode) {
            mutation[1].forEach(function (_abstract) {
                node.parentNode.insertBefore(convertSVG(_abstract), node);
            });
            if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {
                var comment = DOCUMENT.createComment(nodeAsComment(node));
                node.parentNode.replaceChild(comment, node);
            }
            else {
                node.remove();
            }
        }
    },
    nest: function nest(mutation) {
        var node = mutation[0];
        var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
        // Short-circuit to the standard replacement
        if (~classArray(node).indexOf(config.replacementClass)) {
            return mutators.replace(mutation);
        }
        var forSvg = new RegExp("".concat(config.cssPrefix, "-.*"));
        delete _abstract2[0].attributes.id;
        if (_abstract2[0].attributes.class) {
            var splitClasses = _abstract2[0].attributes.class.split(' ').reduce(function (acc, cls) {
                if (cls === config.replacementClass || cls.match(forSvg)) {
                    acc.toSvg.push(cls);
                }
                else {
                    acc.toNode.push(cls);
                }
                return acc;
            }, {
                toNode: [],
                toSvg: []
            });
            _abstract2[0].attributes.class = splitClasses.toSvg.join(' ');
            if (splitClasses.toNode.length === 0) {
                node.removeAttribute('class');
            }
            else {
                node.setAttribute('class', splitClasses.toNode.join(' '));
            }
        }
        var newInnerHTML = _abstract2.map(function (a) {
            return toHtml(a);
        }).join('\n');
        node.setAttribute(DATA_FA_I2SVG, '');
        node.innerHTML = newInnerHTML;
    }
};
function performOperationSync(op) {
    op();
}
function perform(mutations, callback) {
    var callbackFunction = typeof callback === 'function' ? callback : noop$2;
    if (mutations.length === 0) {
        callbackFunction();
    }
    else {
        var frame = performOperationSync;
        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
            frame = WINDOW.requestAnimationFrame || performOperationSync;
        }
        frame(function () {
            var mutator = getMutator();
            var mark = perf.begin('mutate');
            mutations.map(mutator);
            mark();
            callbackFunction();
        });
    }
}
var disabled = false;
function disableObservation() {
    disabled = true;
}
function enableObservation() {
    disabled = false;
}
var mo = null;
function observe(options) {
    if (!MUTATION_OBSERVER) {
        return;
    }
    if (!config.observeMutations) {
        return;
    }
    var _options$treeCallback = options.treeCallback, treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback, _options$nodeCallback = options.nodeCallback, nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback, _options$pseudoElemen = options.pseudoElementsCallback, pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen, _options$observeMutat = options.observeMutationsRoot, observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
    mo = new MUTATION_OBSERVER(function (objects) {
        if (disabled)
            return;
        var defaultPrefix = getDefaultUsablePrefix();
        toArray(objects).forEach(function (mutationRecord) {
            if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
                if (config.searchPseudoElements) {
                    pseudoElementsCallback(mutationRecord.target);
                }
                treeCallback(mutationRecord.target);
            }
            if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config.searchPseudoElements) {
                pseudoElementsCallback(mutationRecord.target.parentNode);
            }
            if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
                if (mutationRecord.attributeName === 'class' && hasPrefixAndIcon(mutationRecord.target)) {
                    var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)), prefix = _getCanonicalIcon.prefix, iconName = _getCanonicalIcon.iconName;
                    mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);
                    if (iconName)
                        mutationRecord.target.setAttribute(DATA_ICON, iconName);
                }
                else if (hasBeenReplaced(mutationRecord.target)) {
                    nodeCallback(mutationRecord.target);
                }
            }
        });
    });
    if (!IS_DOM)
        return;
    mo.observe(observeMutationsRoot, {
        childList: true,
        attributes: true,
        characterData: true,
        subtree: true
    });
}
function disconnect() {
    if (!mo)
        return;
    mo.disconnect();
}
function styleParser(node) {
    var style = node.getAttribute('style');
    var val = [];
    if (style) {
        val = style.split(';').reduce(function (acc, style) {
            var styles = style.split(':');
            var prop = styles[0];
            var value = styles.slice(1);
            if (prop && value.length > 0) {
                acc[prop] = value.join(':').trim();
            }
            return acc;
        }, {});
    }
    return val;
}
function classParser(node) {
    var existingPrefix = node.getAttribute('data-prefix');
    var existingIconName = node.getAttribute('data-icon');
    var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
    var val = getCanonicalIcon(classArray(node));
    if (!val.prefix) {
        val.prefix = getDefaultUsablePrefix();
    }
    if (existingPrefix && existingIconName) {
        val.prefix = existingPrefix;
        val.iconName = existingIconName;
    }
    if (val.iconName && val.prefix) {
        return val;
    }
    if (val.prefix && innerText.length > 0) {
        val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));
    }
    if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {
        val.iconName = node.firstChild.data;
    }
    return val;
}
function attributesParser(node) {
    var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
        if (acc.name !== 'class' && acc.name !== 'style') {
            acc[attr.name] = attr.value;
        }
        return acc;
    }, {});
    var title = node.getAttribute('title');
    var titleId = node.getAttribute('data-fa-title-id');
    if (config.autoA11y) {
        if (title) {
            extraAttributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
        }
        else {
            extraAttributes['aria-hidden'] = 'true';
            extraAttributes['focusable'] = 'false';
        }
    }
    return extraAttributes;
}
function blankMeta() {
    return {
        iconName: null,
        title: null,
        titleId: null,
        prefix: null,
        transform: meaninglessTransform,
        symbol: false,
        mask: {
            iconName: null,
            prefix: null,
            rest: []
        },
        maskId: null,
        extra: {
            classes: [],
            styles: {},
            attributes: {}
        }
    };
}
function parseMeta(node) {
    var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        styleParser: true
    };
    var _classParser = classParser(node), iconName = _classParser.iconName, prefix = _classParser.prefix, extraClasses = _classParser.rest;
    var extraAttributes = attributesParser(node);
    var pluginMeta = chainHooks('parseNodeAttributes', {}, node);
    var extraStyles = parser.styleParser ? styleParser(node) : [];
    return _objectSpread2$1({
        iconName: iconName,
        title: node.getAttribute('title'),
        titleId: node.getAttribute('data-fa-title-id'),
        prefix: prefix,
        transform: meaninglessTransform,
        mask: {
            iconName: null,
            prefix: null,
            rest: []
        },
        maskId: null,
        symbol: false,
        extra: {
            classes: extraClasses,
            styles: extraStyles,
            attributes: extraAttributes
        }
    }, pluginMeta);
}
var styles$2 = namespace.styles;
function generateMutation(node) {
    var nodeMeta = config.autoReplaceSvg === 'nest' ? parseMeta(node, {
        styleParser: false
    }) : parseMeta(node);
    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
        return callProvided('generateLayersText', node, nodeMeta);
    }
    else {
        return callProvided('generateSvgReplacementMutation', node, nodeMeta);
    }
}
var knownPrefixes = new Set();
FAMILIES.map(function (family) {
    knownPrefixes.add("fa-".concat(family));
});
Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));
Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));
knownPrefixes = _toConsumableArray$1(knownPrefixes);
function onTree(root) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (!IS_DOM)
        return Promise.resolve();
    var htmlClassList = DOCUMENT.documentElement.classList;
    var hclAdd = function hclAdd(suffix) {
        return htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
    };
    var hclRemove = function hclRemove(suffix) {
        return htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
    };
    var prefixes = config.autoFetchSvg ? knownPrefixes : FAMILIES.map(function (f) {
        return "fa-".concat(f);
    }).concat(Object.keys(styles$2));
    if (!prefixes.includes('fa')) {
        prefixes.push('fa');
    }
    var prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes.map(function (p) {
        return ".".concat(p, ":not([").concat(DATA_FA_I2SVG, "])");
    })).join(', ');
    if (prefixesDomQuery.length === 0) {
        return Promise.resolve();
    }
    var candidates = [];
    try {
        candidates = toArray(root.querySelectorAll(prefixesDomQuery));
    }
    catch (e) { // noop
    }
    if (candidates.length > 0) {
        hclAdd('pending');
        hclRemove('complete');
    }
    else {
        return Promise.resolve();
    }
    var mark = perf.begin('onTree');
    var mutations = candidates.reduce(function (acc, node) {
        try {
            var mutation = generateMutation(node);
            if (mutation) {
                acc.push(mutation);
            }
        }
        catch (e) {
            if (!PRODUCTION$1) {
                if (e.name === 'MissingIcon') {
                    console.error(e);
                }
            }
        }
        return acc;
    }, []);
    return new Promise(function (resolve, reject) {
        Promise.all(mutations).then(function (resolvedMutations) {
            perform(resolvedMutations, function () {
                hclAdd('active');
                hclAdd('complete');
                hclRemove('pending');
                if (typeof callback === 'function')
                    callback();
                mark();
                resolve();
            });
        }).catch(function (e) {
            mark();
            reject(e);
        });
    });
}
function onNode(node) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    generateMutation(node).then(function (mutation) {
        if (mutation) {
            perform([mutation], callback);
        }
    });
}
function resolveIcons(next) {
    return function (maybeIconDefinition) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
        var mask = params.mask;
        if (mask) {
            mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
        }
        return next(iconDefinition, _objectSpread2$1(_objectSpread2$1({}, params), {}, {
            mask: mask
        }));
    };
}
var render = function render(iconDefinition) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;
    if (!iconDefinition)
        return;
    var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon = iconDefinition.icon;
    return domVariants(_objectSpread2$1({
        type: 'icon'
    }, iconDefinition), function () {
        callHooks('beforeDOMElementCreation', {
            iconDefinition: iconDefinition,
            params: params
        });
        if (config.autoA11y) {
            if (title) {
                attributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
            }
            else {
                attributes['aria-hidden'] = 'true';
                attributes['focusable'] = 'false';
            }
        }
        return makeInlineSvgAbstract({
            icons: {
                main: asFoundIcon(icon),
                mask: mask ? asFoundIcon(mask.icon) : {
                    found: false,
                    width: null,
                    height: null,
                    icon: {}
                }
            },
            prefix: prefix,
            iconName: iconName,
            transform: _objectSpread2$1(_objectSpread2$1({}, meaninglessTransform), transform),
            symbol: symbol,
            title: title,
            maskId: maskId,
            titleId: titleId,
            extra: {
                attributes: attributes,
                styles: styles,
                classes: classes
            }
        });
    });
};
var ReplaceElements = {
    mixout: function mixout() {
        return {
            icon: resolveIcons(render)
        };
    },
    hooks: function hooks() {
        return {
            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {
                accumulator.treeCallback = onTree;
                accumulator.nodeCallback = onNode;
                return accumulator;
            }
        };
    },
    provides: function provides(providers$$1) {
        providers$$1.i2svg = function (params) {
            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node, _params$callback = params.callback, callback = _params$callback === void 0 ? function () { } : _params$callback;
            return onTree(node, callback);
        };
        providers$$1.generateSvgReplacementMutation = function (node, nodeMeta) {
            var iconName = nodeMeta.iconName, title = nodeMeta.title, titleId = nodeMeta.titleId, prefix = nodeMeta.prefix, transform = nodeMeta.transform, symbol = nodeMeta.symbol, mask = nodeMeta.mask, maskId = nodeMeta.maskId, extra = nodeMeta.extra;
            return new Promise(function (resolve, reject) {
                Promise.all([findIcon(iconName, prefix), mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({
                        found: false,
                        width: 512,
                        height: 512,
                        icon: {}
                    })]).then(function (_ref) {
                    var _ref2 = _slicedToArray(_ref, 2), main = _ref2[0], mask = _ref2[1];
                    resolve([node, makeInlineSvgAbstract({
                            icons: {
                                main: main,
                                mask: mask
                            },
                            prefix: prefix,
                            iconName: iconName,
                            transform: transform,
                            symbol: symbol,
                            maskId: maskId,
                            title: title,
                            titleId: titleId,
                            extra: extra,
                            watchable: true
                        })]);
                }).catch(reject);
            });
        };
        providers$$1.generateAbstractIcon = function (_ref3) {
            var children = _ref3.children, attributes = _ref3.attributes, main = _ref3.main, transform = _ref3.transform, styles = _ref3.styles;
            var styleString = joinStyles(styles);
            if (styleString.length > 0) {
                attributes['style'] = styleString;
            }
            var nextChild;
            if (transformIsMeaningful(transform)) {
                nextChild = callProvided('generateAbstractTransformGrouping', {
                    main: main,
                    transform: transform,
                    containerWidth: main.width,
                    iconWidth: main.width
                });
            }
            children.push(nextChild || main.icon);
            return {
                children: children,
                attributes: attributes
            };
        };
    }
};
var Layers = {
    mixout: function mixout() {
        return {
            layer: function layer(assembler) {
                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes;
                return domVariants({
                    type: 'layer'
                }, function () {
                    callHooks('beforeDOMElementCreation', {
                        assembler: assembler,
                        params: params
                    });
                    var children = [];
                    assembler(function (args) {
                        Array.isArray(args) ? args.map(function (a) {
                            children = children.concat(a.abstract);
                        }) : children = children.concat(args.abstract);
                    });
                    return [{
                            tag: 'span',
                            attributes: {
                                class: ["".concat(config.cssPrefix, "-layers")].concat(_toConsumableArray$1(classes)).join(' ')
                            },
                            children: children
                        }];
                });
            }
        };
    }
};
var LayersCounter = {
    mixout: function mixout() {
        return {
            counter: function counter(content) {
                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;
                return domVariants({
                    type: 'counter',
                    content: content
                }, function () {
                    callHooks('beforeDOMElementCreation', {
                        content: content,
                        params: params
                    });
                    return makeLayersCounterAbstract({
                        content: content.toString(),
                        title: title,
                        extra: {
                            attributes: attributes,
                            styles: styles,
                            classes: ["".concat(config.cssPrefix, "-layers-counter")].concat(_toConsumableArray$1(classes))
                        }
                    });
                });
            }
        };
    }
};
var LayersText = {
    mixout: function mixout() {
        return {
            text: function text(content) {
                var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var _params$transform = params.transform, transform = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$title = params.title, title = _params$title === void 0 ? null : _params$title, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles = _params$styles === void 0 ? {} : _params$styles;
                return domVariants({
                    type: 'text',
                    content: content
                }, function () {
                    callHooks('beforeDOMElementCreation', {
                        content: content,
                        params: params
                    });
                    return makeLayersTextAbstract({
                        content: content,
                        transform: _objectSpread2$1(_objectSpread2$1({}, meaninglessTransform), transform),
                        title: title,
                        extra: {
                            attributes: attributes,
                            styles: styles,
                            classes: ["".concat(config.cssPrefix, "-layers-text")].concat(_toConsumableArray$1(classes))
                        }
                    });
                });
            }
        };
    },
    provides: function provides(providers$$1) {
        providers$$1.generateLayersText = function (node, nodeMeta) {
            var title = nodeMeta.title, transform = nodeMeta.transform, extra = nodeMeta.extra;
            var width = null;
            var height = null;
            if (IS_IE) {
                var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
                var boundingClientRect = node.getBoundingClientRect();
                width = boundingClientRect.width / computedFontSize;
                height = boundingClientRect.height / computedFontSize;
            }
            if (config.autoA11y && !title) {
                extra.attributes['aria-hidden'] = 'true';
            }
            return Promise.resolve([node, makeLayersTextAbstract({
                    content: node.innerHTML,
                    width: width,
                    height: height,
                    transform: transform,
                    title: title,
                    extra: extra,
                    watchable: true
                })]);
        };
    }
};
var CLEAN_CONTENT_PATTERN = new RegExp("\"", 'ug');
var SECONDARY_UNICODE_RANGE = [1105920, 1112319];
function hexValueFromContent(content) {
    var cleaned = content.replace(CLEAN_CONTENT_PATTERN, '');
    var codePoint = codePointAt(cleaned, 0);
    var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];
    var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;
    return {
        value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),
        isSecondary: isPrependTen || isDoubled
    };
}
function replaceForPosition(node, position) {
    var pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
    return new Promise(function (resolve, reject) {
        if (node.getAttribute(pendingAttribute) !== null) {
            // This node is already being processed
            return resolve();
        }
        var children = toArray(node.children);
        var alreadyProcessedPseudoElement = children.filter(function (c) {
            return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
        })[0];
        var styles = WINDOW.getComputedStyle(node, position);
        var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
        var fontWeight = styles.getPropertyValue('font-weight');
        var content = styles.getPropertyValue('content');
        if (alreadyProcessedPseudoElement && !fontFamily) {
            // If we've already processed it but the current computed style does not result in a font-family,
            // that probably means that a class name that was previously present to make the icon has been
            // removed. So we now should delete the icon.
            node.removeChild(alreadyProcessedPseudoElement);
            return resolve();
        }
        else if (fontFamily && content !== 'none' && content !== '') {
            var _content = styles.getPropertyValue('content');
            var family = ~['Sharp'].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;
            var prefix = ~['Solid', 'Regular', 'Light', 'Thin', 'Duotone', 'Brands', 'Kit'].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];
            var _hexValueFromContent = hexValueFromContent(_content), hexValue = _hexValueFromContent.value, isSecondary = _hexValueFromContent.isSecondary;
            var isV4 = fontFamily[0].startsWith('FontAwesome');
            var iconName = byUnicode(prefix, hexValue);
            var iconIdentifier = iconName;
            if (isV4) {
                var iconName4 = byOldUnicode(hexValue);
                if (iconName4.iconName && iconName4.prefix) {
                    iconName = iconName4.iconName;
                    prefix = iconName4.prefix;
                }
            } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't
            // already done so with the same prefix and iconName
            if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
                node.setAttribute(pendingAttribute, iconIdentifier);
                if (alreadyProcessedPseudoElement) {
                    // Delete the old one, since we're replacing it with a new one
                    node.removeChild(alreadyProcessedPseudoElement);
                }
                var meta = blankMeta();
                var extra = meta.extra;
                extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
                findIcon(iconName, prefix).then(function (main) {
                    var _abstract = makeInlineSvgAbstract(_objectSpread2$1(_objectSpread2$1({}, meta), {}, {
                        icons: {
                            main: main,
                            mask: emptyCanonicalIcon()
                        },
                        prefix: prefix,
                        iconName: iconIdentifier,
                        extra: extra,
                        watchable: true
                    }));
                    var element = DOCUMENT.createElementNS('http://www.w3.org/2000/svg', 'svg');
                    if (position === '::before') {
                        node.insertBefore(element, node.firstChild);
                    }
                    else {
                        node.appendChild(element);
                    }
                    element.outerHTML = _abstract.map(function (a) {
                        return toHtml(a);
                    }).join('\n');
                    node.removeAttribute(pendingAttribute);
                    resolve();
                }).catch(reject);
            }
            else {
                resolve();
            }
        }
        else {
            resolve();
        }
    });
}
function replace(node) {
    return Promise.all([replaceForPosition(node, '::before'), replaceForPosition(node, '::after')]);
}
function processable(node) {
    return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
}
function searchPseudoElements(root) {
    if (!IS_DOM)
        return;
    return new Promise(function (resolve, reject) {
        var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
        var end = perf.begin('searchPseudoElements');
        disableObservation();
        Promise.all(operations).then(function () {
            end();
            enableObservation();
            resolve();
        }).catch(function () {
            end();
            enableObservation();
            reject();
        });
    });
}
var PseudoElements = {
    hooks: function hooks() {
        return {
            mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {
                accumulator.pseudoElementsCallback = searchPseudoElements;
                return accumulator;
            }
        };
    },
    provides: function provides(providers$$1) {
        providers$$1.pseudoElements2svg = function (params) {
            var _params$node = params.node, node = _params$node === void 0 ? DOCUMENT : _params$node;
            if (config.searchPseudoElements) {
                searchPseudoElements(node);
            }
        };
    }
};
var _unwatched = false;
var MutationObserver$1 = {
    mixout: function mixout() {
        return {
            dom: {
                unwatch: function unwatch() {
                    disableObservation();
                    _unwatched = true;
                }
            }
        };
    },
    hooks: function hooks() {
        return {
            bootstrap: function bootstrap() {
                observe(chainHooks('mutationObserverCallbacks', {}));
            },
            noAuto: function noAuto() {
                disconnect();
            },
            watch: function watch(params) {
                var observeMutationsRoot = params.observeMutationsRoot;
                if (_unwatched) {
                    enableObservation();
                }
                else {
                    observe(chainHooks('mutationObserverCallbacks', {
                        observeMutationsRoot: observeMutationsRoot
                    }));
                }
            }
        };
    }
};
var parseTransformString = function parseTransformString(transformString) {
    var transform = {
        size: 16,
        x: 0,
        y: 0,
        flipX: false,
        flipY: false,
        rotate: 0
    };
    return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
        var parts = n.toLowerCase().split('-');
        var first = parts[0];
        var rest = parts.slice(1).join('-');
        if (first && rest === 'h') {
            acc.flipX = true;
            return acc;
        }
        if (first && rest === 'v') {
            acc.flipY = true;
            return acc;
        }
        rest = parseFloat(rest);
        if (isNaN(rest)) {
            return acc;
        }
        switch (first) {
            case 'grow':
                acc.size = acc.size + rest;
                break;
            case 'shrink':
                acc.size = acc.size - rest;
                break;
            case 'left':
                acc.x = acc.x - rest;
                break;
            case 'right':
                acc.x = acc.x + rest;
                break;
            case 'up':
                acc.y = acc.y - rest;
                break;
            case 'down':
                acc.y = acc.y + rest;
                break;
            case 'rotate':
                acc.rotate = acc.rotate + rest;
                break;
        }
        return acc;
    }, transform);
};
var PowerTransforms = {
    mixout: function mixout() {
        return {
            parse: {
                transform: function transform(transformString) {
                    return parseTransformString(transformString);
                }
            }
        };
    },
    hooks: function hooks() {
        return {
            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
                var transformString = node.getAttribute('data-fa-transform');
                if (transformString) {
                    accumulator.transform = parseTransformString(transformString);
                }
                return accumulator;
            }
        };
    },
    provides: function provides(providers) {
        providers.generateAbstractTransformGrouping = function (_ref) {
            var main = _ref.main, transform = _ref.transform, containerWidth = _ref.containerWidth, iconWidth = _ref.iconWidth;
            var outer = {
                transform: "translate(".concat(containerWidth / 2, " 256)")
            };
            var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
            var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
            var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
            var inner = {
                transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
            };
            var path = {
                transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
            };
            var operations = {
                outer: outer,
                inner: inner,
                path: path
            };
            return {
                tag: 'g',
                attributes: _objectSpread2$1({}, operations.outer),
                children: [{
                        tag: 'g',
                        attributes: _objectSpread2$1({}, operations.inner),
                        children: [{
                                tag: main.icon.tag,
                                children: main.icon.children,
                                attributes: _objectSpread2$1(_objectSpread2$1({}, main.icon.attributes), operations.path)
                            }]
                    }]
            };
        };
    }
};
var ALL_SPACE = {
    x: 0,
    y: 0,
    width: '100%',
    height: '100%'
};
function fillBlack(_abstract) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    if (_abstract.attributes && (_abstract.attributes.fill || force)) {
        _abstract.attributes.fill = 'black';
    }
    return _abstract;
}
function deGroup(_abstract2) {
    if (_abstract2.tag === 'g') {
        return _abstract2.children;
    }
    else {
        return [_abstract2];
    }
}
var Masks = {
    hooks: function hooks() {
        return {
            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
                var maskData = node.getAttribute('data-fa-mask');
                var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(' ').map(function (i) {
                    return i.trim();
                }));
                if (!mask.prefix) {
                    mask.prefix = getDefaultUsablePrefix();
                }
                accumulator.mask = mask;
                accumulator.maskId = node.getAttribute('data-fa-mask-id');
                return accumulator;
            }
        };
    },
    provides: function provides(providers) {
        providers.generateAbstractMask = function (_ref) {
            var children = _ref.children, attributes = _ref.attributes, main = _ref.main, mask = _ref.mask, explicitMaskId = _ref.maskId, transform = _ref.transform;
            var mainWidth = main.width, mainPath = main.icon;
            var maskWidth = mask.width, maskPath = mask.icon;
            var trans = transformForSvg({
                transform: transform,
                containerWidth: maskWidth,
                iconWidth: mainWidth
            });
            var maskRect = {
                tag: 'rect',
                attributes: _objectSpread2$1(_objectSpread2$1({}, ALL_SPACE), {}, {
                    fill: 'white'
                })
            };
            var maskInnerGroupChildrenMixin = mainPath.children ? {
                children: mainPath.children.map(fillBlack)
            } : {};
            var maskInnerGroup = {
                tag: 'g',
                attributes: _objectSpread2$1({}, trans.inner),
                children: [fillBlack(_objectSpread2$1({
                        tag: mainPath.tag,
                        attributes: _objectSpread2$1(_objectSpread2$1({}, mainPath.attributes), trans.path)
                    }, maskInnerGroupChildrenMixin))]
            };
            var maskOuterGroup = {
                tag: 'g',
                attributes: _objectSpread2$1({}, trans.outer),
                children: [maskInnerGroup]
            };
            var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
            var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
            var maskTag = {
                tag: 'mask',
                attributes: _objectSpread2$1(_objectSpread2$1({}, ALL_SPACE), {}, {
                    id: maskId,
                    maskUnits: 'userSpaceOnUse',
                    maskContentUnits: 'userSpaceOnUse'
                }),
                children: [maskRect, maskOuterGroup]
            };
            var defs = {
                tag: 'defs',
                children: [{
                        tag: 'clipPath',
                        attributes: {
                            id: clipId
                        },
                        children: deGroup(maskPath)
                    }, maskTag]
            };
            children.push(defs, {
                tag: 'rect',
                attributes: _objectSpread2$1({
                    fill: 'currentColor',
                    'clip-path': "url(#".concat(clipId, ")"),
                    mask: "url(#".concat(maskId, ")")
                }, ALL_SPACE)
            });
            return {
                children: children,
                attributes: attributes
            };
        };
    }
};
var MissingIconIndicator = {
    provides: function provides(providers) {
        var reduceMotion = false;
        if (WINDOW.matchMedia) {
            reduceMotion = WINDOW.matchMedia('(prefers-reduced-motion: reduce)').matches;
        }
        providers.missingIconAbstract = function () {
            var gChildren = [];
            var FILL = {
                fill: 'currentColor'
            };
            var ANIMATION_BASE = {
                attributeType: 'XML',
                repeatCount: 'indefinite',
                dur: '2s'
            }; // Ring
            gChildren.push({
                tag: 'path',
                attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
                    d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z'
                })
            });
            var OPACITY_ANIMATE = _objectSpread2$1(_objectSpread2$1({}, ANIMATION_BASE), {}, {
                attributeName: 'opacity'
            });
            var dot = {
                tag: 'circle',
                attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
                    cx: '256',
                    cy: '364',
                    r: '28'
                }),
                children: []
            };
            if (!reduceMotion) {
                dot.children.push({
                    tag: 'animate',
                    attributes: _objectSpread2$1(_objectSpread2$1({}, ANIMATION_BASE), {}, {
                        attributeName: 'r',
                        values: '28;14;28;28;14;28;'
                    })
                }, {
                    tag: 'animate',
                    attributes: _objectSpread2$1(_objectSpread2$1({}, OPACITY_ANIMATE), {}, {
                        values: '1;0;1;1;0;1;'
                    })
                });
            }
            gChildren.push(dot);
            gChildren.push({
                tag: 'path',
                attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
                    opacity: '1',
                    d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
                }),
                children: reduceMotion ? [] : [{
                        tag: 'animate',
                        attributes: _objectSpread2$1(_objectSpread2$1({}, OPACITY_ANIMATE), {}, {
                            values: '1;0;0;0;0;1;'
                        })
                    }]
            });
            if (!reduceMotion) {
                // Exclamation
                gChildren.push({
                    tag: 'path',
                    attributes: _objectSpread2$1(_objectSpread2$1({}, FILL), {}, {
                        opacity: '0',
                        d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
                    }),
                    children: [{
                            tag: 'animate',
                            attributes: _objectSpread2$1(_objectSpread2$1({}, OPACITY_ANIMATE), {}, {
                                values: '0;0;1;1;0;0;'
                            })
                        }]
                });
            }
            return {
                tag: 'g',
                attributes: {
                    'class': 'missing'
                },
                children: gChildren
            };
        };
    }
};
var SvgSymbols = {
    hooks: function hooks() {
        return {
            parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
                var symbolData = node.getAttribute('data-fa-symbol');
                var symbol = symbolData === null ? false : symbolData === '' ? true : symbolData;
                accumulator['symbol'] = symbol;
                return accumulator;
            }
        };
    }
};
var plugins = [InjectCSS, ReplaceElements, Layers, LayersCounter, LayersText, PseudoElements, MutationObserver$1, PowerTransforms, Masks, MissingIconIndicator, SvgSymbols];
registerPlugins(plugins, {
    mixoutsTo: api
});
api.noAuto;
api.config;
api.library;
api.dom;
var parse$1$1 = api.parse;
api.findIconDefinition;
api.toHtml;
var icon = api.icon;
api.layer;
api.text;
api.counter;
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    }
    else {
        obj[key] = value;
    }
    return obj;
}
function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null)
        return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
            continue;
        target[key] = source[key];
    }
    return target;
}
function _objectWithoutProperties(source, excluded) {
    if (source == null)
        return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0)
                continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key))
                continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
        return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o)
        return;
    if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
        n = o.constructor.name;
    if (n === "Map" || n === "Set")
        return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
        len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
    return arr2;
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
// Get CSS class list from a props object
function classList(props) {
    var _classes;
    var beat = props.beat, fade = props.fade, beatFade = props.beatFade, bounce = props.bounce, shake = props.shake, flash = props.flash, spin = props.spin, spinPulse = props.spinPulse, spinReverse = props.spinReverse, pulse = props.pulse, fixedWidth = props.fixedWidth, inverse = props.inverse, border = props.border, listItem = props.listItem, flip = props.flip, size = props.size, rotation = props.rotation, pull = props.pull; // map of CSS class names to properties
    var classes = (_classes = {
        'fa-beat': beat,
        'fa-fade': fade,
        'fa-beat-fade': beatFade,
        'fa-bounce': bounce,
        'fa-shake': shake,
        'fa-flash': flash,
        'fa-spin': spin,
        'fa-spin-reverse': spinReverse,
        'fa-spin-pulse': spinPulse,
        'fa-pulse': pulse,
        'fa-fw': fixedWidth,
        'fa-inverse': inverse,
        'fa-border': border,
        'fa-li': listItem,
        'fa-flip': flip === true,
        'fa-flip-horizontal': flip === 'horizontal' || flip === 'both',
        'fa-flip-vertical': flip === 'vertical' || flip === 'both'
    }, _defineProperty(_classes, "fa-".concat(size), typeof size !== 'undefined' && size !== null), _defineProperty(_classes, "fa-rotate-".concat(rotation), typeof rotation !== 'undefined' && rotation !== null && rotation !== 0), _defineProperty(_classes, "fa-pull-".concat(pull), typeof pull !== 'undefined' && pull !== null), _defineProperty(_classes, 'fa-swap-opacity', props.swapOpacity), _classes); // map over all the keys in the classes object
    // return an array of the keys where the value for the key is not null
    return Object.keys(classes).map(function (key) {
        return classes[key] ? key : null;
    }).filter(function (key) {
        return key;
    });
}
// Camelize taken from humps
// humps is copyright © 2012+ Dom Christie
// Released under the MIT license.
// Performant way to determine if object coerces to a number
function _isNumerical(obj) {
    obj = obj - 0; // eslint-disable-next-line no-self-compare
    return obj === obj;
}
function camelize(string) {
    if (_isNumerical(string)) {
        return string;
    } // eslint-disable-next-line no-useless-escape
    string = string.replace(/[\-_\s]+(.)?/g, function (match, chr) {
        return chr ? chr.toUpperCase() : '';
    }); // Ensure 1st char is always lowercase
    return string.substr(0, 1).toLowerCase() + string.substr(1);
}
var _excluded$3 = ["style"];
function capitalize(val) {
    return val.charAt(0).toUpperCase() + val.slice(1);
}
function styleToObject(style) {
    return style.split(';').map(function (s) {
        return s.trim();
    }).filter(function (s) {
        return s;
    }).reduce(function (acc, pair) {
        var i = pair.indexOf(':');
        var prop = camelize(pair.slice(0, i));
        var value = pair.slice(i + 1).trim();
        prop.startsWith('webkit') ? acc[capitalize(prop)] = value : acc[prop] = value;
        return acc;
    }, {});
}
function convert(createElement, element) {
    var extraProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (typeof element === 'string') {
        return element;
    }
    var children = (element.children || []).map(function (child) {
        return convert(createElement, child);
    });
    /* eslint-disable dot-notation */
    var mixins = Object.keys(element.attributes || {}).reduce(function (acc, key) {
        var val = element.attributes[key];
        switch (key) {
            case 'class':
                acc.attrs['className'] = val;
                delete element.attributes['class'];
                break;
            case 'style':
                acc.attrs['style'] = styleToObject(val);
                break;
            default:
                if (key.indexOf('aria-') === 0 || key.indexOf('data-') === 0) {
                    acc.attrs[key.toLowerCase()] = val;
                }
                else {
                    acc.attrs[camelize(key)] = val;
                }
        }
        return acc;
    }, {
        attrs: {}
    });
    var _extraProps$style = extraProps.style, existingStyle = _extraProps$style === void 0 ? {} : _extraProps$style, remaining = _objectWithoutProperties(extraProps, _excluded$3);
    mixins.attrs['style'] = _objectSpread2(_objectSpread2({}, mixins.attrs['style']), existingStyle);
    /* eslint-enable */
    return createElement.apply(void 0, [element.tag, _objectSpread2(_objectSpread2({}, mixins.attrs), remaining)].concat(_toConsumableArray(children)));
}
var PRODUCTION = false;
try {
    PRODUCTION = process.env.NODE_ENV === 'production';
}
catch (e) { }
function log() {
    if (!PRODUCTION && console && typeof console.error === 'function') {
        var _console;
        (_console = console).error.apply(_console, arguments);
    }
}
function normalizeIconArgs(icon) {
    // this has everything that it needs to be rendered which means it was probably imported
    // directly from an icon svg package
    if (icon && _typeof(icon) === 'object' && icon.prefix && icon.iconName && icon.icon) {
        return icon;
    }
    if (parse$1$1.icon) {
        return parse$1$1.icon(icon);
    } // if the icon is null, there's nothing to do
    if (icon === null) {
        return null;
    } // if the icon is an object and has a prefix and an icon name, return it
    if (icon && _typeof(icon) === 'object' && icon.prefix && icon.iconName) {
        return icon;
    } // if it's an array with length of two
    if (Array.isArray(icon) && icon.length === 2) {
        // use the first item as prefix, second as icon name
        return {
            prefix: icon[0],
            iconName: icon[1]
        };
    } // if it's a string, use it as the icon name
    if (typeof icon === 'string') {
        return {
            prefix: 'fas',
            iconName: icon
        };
    }
}
// creates an object with a key of key
// and a value of value
// if certain conditions are met
function objectWithKey(key, value) {
    // if the value is a non-empty array
    // or it's not an array but it is truthy
    // then create the object with the key and the value
    // if not, return an empty array
    return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty({}, key, value) : {};
}
var FontAwesomeIcon = /*#__PURE__*/ react_1.default.forwardRef(function (props, ref) {
    var iconArgs = props.icon, maskArgs = props.mask, symbol = props.symbol, className = props.className, title = props.title, titleId = props.titleId, maskId = props.maskId;
    var iconLookup = normalizeIconArgs(iconArgs);
    var classes = objectWithKey('classes', [].concat(_toConsumableArray(classList(props)), _toConsumableArray(className.split(' '))));
    var transform = objectWithKey('transform', typeof props.transform === 'string' ? parse$1$1.transform(props.transform) : props.transform);
    var mask = objectWithKey('mask', normalizeIconArgs(maskArgs));
    var renderedIcon = icon(iconLookup, _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, classes), transform), mask), {}, {
        symbol: symbol,
        title: title,
        titleId: titleId,
        maskId: maskId
    }));
    if (!renderedIcon) {
        log('Could not find icon', iconLookup);
        return null;
    }
    var abstract = renderedIcon.abstract;
    var extraProps = {
        ref: ref
    };
    Object.keys(props).forEach(function (key) {
        // eslint-disable-next-line no-prototype-builtins
        if (!FontAwesomeIcon.defaultProps.hasOwnProperty(key)) {
            extraProps[key] = props[key];
        }
    });
    return convertCurry(abstract[0], extraProps);
});
FontAwesomeIcon.displayName = 'FontAwesomeIcon';
FontAwesomeIcon.propTypes = {
    beat: PropTypes.bool,
    border: PropTypes.bool,
    beatFade: PropTypes.bool,
    bounce: PropTypes.bool,
    className: PropTypes.string,
    fade: PropTypes.bool,
    flash: PropTypes.bool,
    mask: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),
    maskId: PropTypes.string,
    fixedWidth: PropTypes.bool,
    inverse: PropTypes.bool,
    flip: PropTypes.oneOf([true, false, 'horizontal', 'vertical', 'both']),
    icon: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.string]),
    listItem: PropTypes.bool,
    pull: PropTypes.oneOf(['right', 'left']),
    pulse: PropTypes.bool,
    rotation: PropTypes.oneOf([0, 90, 180, 270]),
    shake: PropTypes.bool,
    size: PropTypes.oneOf(['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', '1x', '2x', '3x', '4x', '5x', '6x', '7x', '8x', '9x', '10x']),
    spin: PropTypes.bool,
    spinPulse: PropTypes.bool,
    spinReverse: PropTypes.bool,
    symbol: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
    title: PropTypes.string,
    titleId: PropTypes.string,
    transform: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
    swapOpacity: PropTypes.bool
};
FontAwesomeIcon.defaultProps = {
    border: false,
    className: '',
    mask: null,
    maskId: null,
    fixedWidth: false,
    inverse: false,
    flip: false,
    icon: null,
    listItem: false,
    pull: null,
    pulse: false,
    rotation: null,
    size: null,
    spin: false,
    spinPulse: false,
    spinReverse: false,
    beat: false,
    fade: false,
    beatFade: false,
    bounce: false,
    shake: false,
    symbol: false,
    title: '',
    titleId: null,
    transform: null,
    swapOpacity: false
};
var convertCurry = convert.bind(null, react_1.default.createElement);
var faArrowDownAZ = {
    prefix: 'fas',
    iconName: 'arrow-down-a-z',
    icon: [576, 512, ["sort-alpha-asc", "sort-alpha-down"], "f15d", "M183.6 469.6C177.5 476.2 169 480 160 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L128 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 320c0-17.7 14.3-32 32-32H480c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9L429.3 416H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H352c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9L402.7 352H352c-17.7 0-32-14.3-32-32zM416 32c12.1 0 23.2 6.8 28.6 17.7l64 128 16 32c7.9 15.8 1.5 35-14.3 42.9s-35 1.5-42.9-14.3L460.2 224H371.8l-7.2 14.3c-7.9 15.8-27.1 22.2-42.9 14.3s-22.2-27.1-14.3-42.9l16-32 64-128C392.8 38.8 403.9 32 416 32zM395.8 176h40.4L416 135.6 395.8 176z"]
};
var faSortAlphaDown = faArrowDownAZ;
var faDownload = {
    prefix: 'fas',
    iconName: 'download',
    icon: [512, 512, [], "f019", "M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V274.7l-73.4-73.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l128-128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L288 274.7V32zM64 352c-35.3 0-64 28.7-64 64v32c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V416c0-35.3-28.7-64-64-64H346.5l-45.3 45.3c-25 25-65.5 25-90.5 0L165.5 352H64zm368 56a24 24 0 1 1 0 48 24 24 0 1 1 0-48z"]
};
var faArrowRightArrowLeft = {
    prefix: 'fas',
    iconName: 'arrow-right-arrow-left',
    icon: [448, 512, [8644, "exchange"], "f0ec", "M438.6 150.6c12.5-12.5 12.5-32.8 0-45.3l-96-96c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.7 96 32 96C14.3 96 0 110.3 0 128s14.3 32 32 32l306.7 0-41.4 41.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l96-96zm-333.3 352c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 416 416 416c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0 41.4-41.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-96 96c-12.5 12.5-12.5 32.8 0 45.3l96 96z"]
};
var faClockRotateLeft = {
    prefix: 'fas',
    iconName: 'clock-rotate-left',
    icon: [512, 512, ["history"], "f1da", "M75 75L41 41C25.9 25.9 0 36.6 0 57.9V168c0 13.3 10.7 24 24 24H134.1c21.4 0 32.1-25.9 17-41l-30.8-30.8C155 85.5 203 64 256 64c106 0 192 86 192 192s-86 192-192 192c-40.8 0-78.6-12.7-109.7-34.4c-14.5-10.1-34.4-6.6-44.6 7.9s-6.6 34.4 7.9 44.6C151.2 495 201.7 512 256 512c141.4 0 256-114.6 256-256S397.4 0 256 0C185.3 0 121.3 28.7 75 75zm181 53c-13.3 0-24 10.7-24 24V256c0 6.4 2.5 12.5 7 17l72 72c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-65-65V152c0-13.3-10.7-24-24-24z"]
};
var faHistory = faClockRotateLeft;
var faArrowUpZA = {
    prefix: 'fas',
    iconName: 'arrow-up-z-a',
    icon: [576, 512, ["sort-alpha-up-alt"], "f882", "M183.6 42.4C177.5 35.8 169 32 160 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L128 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 64c0 17.7 14.3 32 32 32h50.7l-73.4 73.4c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H429.3l73.4-73.4c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8H352c-17.7 0-32 14.3-32 32zm96 192c-12.1 0-23.2 6.8-28.6 17.7l-64 128-16 32c-7.9 15.8-1.5 35 14.3 42.9s35 1.5 42.9-14.3l7.2-14.3h88.4l7.2 14.3c7.9 15.8 27.1 22.2 42.9 14.3s22.2-27.1 14.3-42.9l-16-32-64-128C439.2 262.8 428.1 256 416 256zM395.8 400L416 359.6 436.2 400H395.8z"]
};
var showColumn = function (isColumnVisible, col) {
    return isColumnVisible ? isColumnVisible(col.Header) : true;
};
var SortArrows = function (_a) {
    var col = _a.col, _b = _a.isTableSortable, isTableSortable = _b === void 0 ? false : _b, _c = _a.isColumnVisible, isColumnVisible = _c === void 0 ? null : _c;
    return isTableSortable && showColumn(isColumnVisible, col) && col.id !== "actions" ? (react_1.default.createElement("span", { className: "mt-2 mb-2" }, react_1.default.createElement("div", { className: "".concat(col.isSorted && !col.isSortedDesc ? "text-ibb-dark" : "text-gray-800"), onClick: function () { return col.toggleSortBy(false); } }, react_1.default.createElement(FontAwesomeIcon, { icon: faSortAlphaDown, className: "mr-2" }), "von A bis Z sortieren"), react_1.default.createElement("div", { className: "".concat(col.isSorted && col.isSortedDesc ? "text-ibb-dark" : "text-gray-800"), onClick: function () { return col.toggleSortBy(true); } }, react_1.default.createElement(FontAwesomeIcon, { icon: faArrowUpZA, className: "mr-2" }), "von Z bis A sortieren"), react_1.default.createElement("div", { className: classNames$1("ml-0.5 ".concat(!col.isSorted ? "text-ibb-dark" : "text-gray-800")), style: { marginLeft: "2px" } }, react_1.default.createElement(FontAwesomeIcon, { icon: faArrowRightArrowLeft, rotation: 90, className: "mr-2", onClick: function () { return col.clearSortBy(); } }), "keine Sortierung"))) : (react_1.default.createElement(react_1.default.Fragment, null));
};
var ColumnActionsButton = function (props) {
    var column = props.column, isTableSortable = props.isTableSortable, isTableColumnsFilterable = props.isTableColumnsFilterable, isColumnVisible = props.isColumnVisible, toggleFilterActions = props.toggleFilterActions, isOverlayVisible = props.isOverlayVisible;
    var ref = (0, react_1.useRef)(null);
    return (isColumnVisible ? isColumnVisible(column.Header) : true) && (isTableSortable || isTableColumnsFilterable) && column.id !== "actions" ? (react_1.default.createElement("div", { className: "align-middle px-2 relative", title: "Sortieren/filtern", ref: ref }, react_1.default.createElement("div", { onClick: toggleFilterActions }, column.filterValue ? (react_1.default.createElement(FilterIcon$1, { height: "18", className: "text-ibb-dark" })) : (react_1.default.createElement(DotsVerticalIcon$1, { height: "18", className: "".concat(isOverlayVisible ? "text-ibb-dark" : "text-gray-800") }))), isOverlayVisible && react_1.default.createElement(ColumnActionsOverlay, __assign$1({}, props, { onClickOutside: toggleFilterActions, buttonRef: ref })))) : (react_1.default.createElement(react_1.default.Fragment, null));
};
var ColumnActionsOverlay = function (_a) {
    var column = _a.column, buttonRef = _a.buttonRef, isTableSortable = _a.isTableSortable, isTableColumnsFilterable = _a.isTableColumnsFilterable, onClickOutside = _a.onClickOutside;
    (0, react_1.useEffect)(function () {
        var handleClickOutside = function (event) {
            if (buttonRef.current && !buttonRef.current.contains(event.target)) {
                onClickOutside && onClickOutside();
            }
        };
        document.addEventListener("click", handleClickOutside, true);
        return function () {
            document.removeEventListener("click", handleClickOutside, true);
        };
    }, [onClickOutside]);
    return (react_1.default.createElement("div", { className: "absolute border p-2 bg-white border-gray-400 top-4 z-10", style: { minWidth: "225px" } }, isTableSortable && react_1.default.createElement(SortArrows, { col: column, isTableSortable: isTableSortable }), isTableColumnsFilterable &&
        column.Filter && [
        react_1.default.createElement("hr", { className: "mt-4 mb-4" }),
        react_1.default.createElement("div", { className: classNames$1("mb-1 ".concat(column.filterValue ? "text-ibb-dark" : "text-gray-800")) }, react_1.default.createElement(FilterIcon$1, { height: "18", className: "inline mr-1" }), " Filtern"),
        column.render("Filter"),
    ]));
};
var ColumnCollapseButton = function (_a) {
    var column = _a.column, toggleColumn = _a.toggleColumn, isColumnVisible = _a.isColumnVisible, title = _a.title;
    return (react_1.default.createElement("div", { onClick: function () { return toggleColumn(column.Header); }, title: title }, isColumnVisible(column.Header) ? react_1.default.createElement(MinusCircleIcon$1, { width: "18", color: "#a0aec0" }) : react_1.default.createElement(PlusCircleIcon$1, { width: "18", color: "#a0aec0" })));
};
var TableActions;
(function (TableActions) {
    TableActions["all"] = "alle";
    TableActions["delete"] = "l\u00F6schen";
    TableActions["create"] = "erstellen";
    TableActions["update"] = "bearbeiten";
})(TableActions || (TableActions = {}));
var SAVED_TABLE_FILTER_KEY = "savedTableFilter";
window.addEventListener("unload", function (event) {
    sessionStorage.removeItem(SAVED_TABLE_FILTER_KEY);
});
var TableAdvanced = function (_a) {
    var title = _a.title, getTableProps = _a.getTableProps, getTableBodyProps = _a.getTableBodyProps, headerGroups = _a.headerGroups, columns = _a.columns, page = _a.page, prepareRow = _a.prepareRow, isTableSortable = _a.isTableSortable, isTableColumnsFilterable = _a.isTableColumnsFilterable, preGlobalFilteredRows = _a.preGlobalFilteredRows, setGlobalFilter = _a.setGlobalFilter, globalFilter = _a.globalFilter, state = _a.state, filterPlaceholder = _a.filterPlaceholder, canPreviousPage = _a.canPreviousPage, canNextPage = _a.canNextPage, pageOptions = _a.pageOptions, pageCount = _a.pageCount, gotoPage = _a.gotoPage, nextPage = _a.nextPage, previousPage = _a.previousPage, setPageSize = _a.setPageSize, onClickAction = _a.onClickAction;
    var _b = __read((0, react_1.useState)(null), 2), currentShownFilter = _b[0], setCurrentShownFilter = _b[1];
    var tableElementRef = (0, react_1.useRef)(null);
    var toggleFilterActions = function (header) {
        if (currentShownFilter == header) {
            setCurrentShownFilter(null);
        }
        else {
            setCurrentShownFilter(header);
        }
    };
    var getFooterRow = function (columns) {
        return columns.find(function (c) { return c.Footer; });
    };
    var isFooterShown = getFooterRow(columns);
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwHeadRowContainer, null, title && react_1.default.createElement(TwTableTitle, null, title), react_1.default.createElement(TwFilterContainer, null, react_1.default.createElement(GlobalFilter, { preGlobalFilteredRows: preGlobalFilteredRows, globalFilter: globalFilter, setGlobalFilter: setGlobalFilter, placeholder: filterPlaceholder }))), react_1.default.createElement(TwTableContainer$1, null, react_1.default.createElement(TwTableInnerContainer$1, null, react_1.default.createElement(TwTable$1, __assign$1({}, getTableProps(), { ref: tableElementRef }), react_1.default.createElement(TwTableHead, null, headerGroups.map(function (headerGroup, i) {
        return (react_1.default.createElement("tr", __assign$1({}, headerGroup.getHeaderGroupProps(), { key: i }), headerGroup.headers.map(function (column, j) {
            return (react_1.default.createElement(TwTableHeader$1, { scope: "col", key: j, "aria-label": column.Header, className: (column.id === "actions" || column.id.toLowerCase() === TableActions.update) && "w-1" }, react_1.default.createElement(TwHeaderCell, { className: classNames$1("".concat(column.id === "actions" ? "space-y-1" : "")) }, react_1.default.createElement("div", { className: "px-2 w-full" }, column.render("Header")), react_1.default.createElement(ColumnActionsButton, { column: column, isTableSortable: isTableSortable, isColumnVisible: null, isTableColumnsFilterable: isTableColumnsFilterable, toggleFilterActions: function () { return toggleFilterActions(column.Header); }, isOverlayVisible: currentShownFilter == column.Header }))));
        })));
    })), react_1.default.createElement(TwTableBody$1, __assign$1({}, getTableBodyProps()), page.map(function (row, i) {
        prepareRow(row);
        return (react_1.default.createElement(TwTableBodyRow$1, __assign$1({ key: i }, row.getRowProps(), { even: i == 0 || i % 2 == 0 ? true : false, onClickEvent: function () { return (onClickAction ? onClickAction(row) : null); } }), row.cells.map(function (cell) {
            return (react_1.default.createElement(TwTableBodyCell$1, __assign$1({}, cell.getCellProps(), { role: "cell" }), react_1.default.createElement(TwTableBodyCellContent$1, { className: cell.column.id === "actions" ? "flex flex-col content-between space-y-1" : "whitespace-pre-wrap" }, cell.render("Cell"))));
        })));
    })), isFooterShown && (react_1.default.createElement(TwTableFoot, null, headerGroups.map(function (headerGroup, i) {
        return (react_1.default.createElement("tr", { key: i }, headerGroup.headers.map(function (column) {
            return (react_1.default.createElement(TwTableFooter$1, { scope: "col" }, react_1.default.createElement(TwHeaderCell, { className: classNames$1("flex-column-header ".concat(column.id === "actions" ? "space-y-1" : "")) }, column.render("Footer"))));
        })));
    })))))), react_1.default.createElement(IbbTablePagination, { state: state, canPreviousPage: canPreviousPage, canNextPage: canNextPage, previousPage: previousPage, nextPage: nextPage, gotoPage: gotoPage, setPageSize: setPageSize, pageOptions: pageOptions, pageCount: pageCount, countRows: preGlobalFilteredRows === null || preGlobalFilteredRows === void 0 ? void 0 : preGlobalFilteredRows.length })));
};
var IbbTableAdvanced = function (_a) {
    var title = _a.title, columns = _a.columns, data = _a.data, tablePageSize = _a.tablePageSize, onClickAction = _a.onClickAction, filterPlaceholder = _a.filterPlaceholder, filterField = _a.filterField;
    _a.isTableFilterable;
    var isTableColumnsFilterable = _a.isTableColumnsFilterable, isTableSortable = _a.isTableSortable;
    _a.defaultFilterValue;
    var defaultFilter = sessionStorage.getItem(SAVED_TABLE_FILTER_KEY);
    var initialState = react_1.default.useMemo(function () {
        return ({
            filters: [{ id: filterField, value: !lodash.exports.isEmpty(defaultFilter) ? defaultFilter : "" }],
        });
    }, []);
    // Use the state and functions returned from useTable to build your UI
    var _b = reactTable.exports.useTable({
        columns: columns,
        data: data,
        initialState: initialState,
        globalFilter: function (rows, columnIds, filterValue) { return customTableFilter(rows, columnIds, filterValue); },
        autoResetAll: false,
        autoResetPage: false,
        autoResetExpanded: false,
        autoResetGroupBy: false,
        autoResetSelectedRows: false,
        autoResetSortBy: false,
        autoResetFilters: false,
        autoResetRowState: false,
    }, reactTable.exports.useFilters, reactTable.exports.useGlobalFilter, reactTable.exports.useSortBy, reactTable.exports.usePagination), getTableProps = _b.getTableProps, getTableBodyProps = _b.getTableBodyProps, headerGroups = _b.headerGroups;
    _b.footer;
    _b.rows;
    var prepareRow = _b.prepareRow, page = _b.page, // Instead of using 'rows', we'll use page, which has only the rows for the active page
    canPreviousPage = _b.canPreviousPage, canNextPage = _b.canNextPage, pageOptions = _b.pageOptions, pageCount = _b.pageCount, gotoPage = _b.gotoPage, nextPage = _b.nextPage, previousPage = _b.previousPage, setPageSize = _b.setPageSize, state = _b.state, preGlobalFilteredRows = _b.preGlobalFilteredRows, setGlobalFilter = _b.setGlobalFilter, globalFilter = _b.state.globalFilter;
    (0, react_1.useEffect)(function () {
        setPageSize(tablePageSize ? tablePageSize : 25);
    }, []);
    var props = {
        title: title,
        getTableProps: getTableProps,
        getTableBodyProps: getTableBodyProps,
        headerGroups: headerGroups,
        columns: columns,
        page: page,
        prepareRow: prepareRow,
        isTableSortable: isTableSortable,
        isTableColumnsFilterable: isTableColumnsFilterable,
        preGlobalFilteredRows: preGlobalFilteredRows,
        setGlobalFilter: setGlobalFilter,
        globalFilter: globalFilter,
        state: state,
        filterPlaceholder: filterPlaceholder,
        canPreviousPage: canPreviousPage,
        canNextPage: canNextPage,
        pageOptions: pageOptions,
        pageCount: pageCount,
        gotoPage: gotoPage,
        nextPage: nextPage,
        previousPage: previousPage,
        setPageSize: setPageSize,
        onClickAction: onClickAction,
    };
    return react_1.default.createElement(TableAdvanced, __assign$1({}, props));
};
exports.IbbTableAdvanced = IbbTableAdvanced;
var TwTableTitle = F$3.h3(templateObject_1$a || (templateObject_1$a = __makeTemplateObject(["px-4 text-gray-800 uppercase text-bold tracking-wide font-semibold h-5/6 flex items-center"], ["px-4 text-gray-800 uppercase text-bold tracking-wide font-semibold h-5/6 flex items-center"])));
var TwHeadRowContainer = F$3.div(templateObject_2$8 || (templateObject_2$8 = __makeTemplateObject(["flex justify-between gap-x-2 mb-2"], ["flex justify-between gap-x-2 mb-2"])));
var TwFilterContainer = F$3.div(templateObject_3$6 || (templateObject_3$6 = __makeTemplateObject(["flex flex-row-reverse gap-x-2"], ["flex flex-row-reverse gap-x-2"])));
var TwTableContainer$1 = F$3.div(templateObject_4$3 || (templateObject_4$3 = __makeTemplateObject(["flex flex-col"], ["flex flex-col"])));
var TwTableInnerContainer$1 = F$3.div(templateObject_5$2 || (templateObject_5$2 = __makeTemplateObject(["-my-2 overflow-x-auto py-2 align-middle inline-block min-w-full overflow-visible"], ["-my-2 overflow-x-auto py-2 align-middle inline-block min-w-full overflow-visible"])));
var TwTable$1 = F$3.table(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject(["min-w-full divide-y divide-white"], ["min-w-full divide-y divide-white"])));
var TwTableHead = F$3.thead(templateObject_7 || (templateObject_7 = __makeTemplateObject(["bg-gray-100 hover:bg-gray-200 text-gray-900"], ["bg-gray-100 hover:bg-gray-200 text-gray-900"])));
var TwTableHeader$1 = F$3.th(templateObject_8 || (templateObject_8 = __makeTemplateObject(["text-left text-sm text-gray-900 font-semibold tracking-wider align-top p-2"], ["text-left text-sm text-gray-900 font-semibold tracking-wider align-top p-2"])));
var TwTableFoot = F$3.tfoot(templateObject_9 || (templateObject_9 = __makeTemplateObject(["bg-gray-100 text-gray-900"], ["bg-gray-100 text-gray-900"])));
var TwTableFooter$1 = F$3.th(templateObject_10 || (templateObject_10 = __makeTemplateObject(["text-right items-right group p-3 font-semibold capitalize"], ["text-right items-right group p-3 font-semibold capitalize"])));
var TwTableBody$1 = F$3.tbody(templateObject_11 || (templateObject_11 = __makeTemplateObject(["divide-y divide-white"], ["divide-y divide-white"])));
var TwTableBodyCell$1 = F$3.td(templateObject_12 || (templateObject_12 = __makeTemplateObject(["p-3 whitespace-nowrap border-t border-b border-gray-300"], ["p-3 whitespace-nowrap border-t border-b border-gray-300"])));
var TwTableBodyCellContent$1 = F$3.div(templateObject_13 || (templateObject_13 = __makeTemplateObject([""], [""])));
var TwHeaderCell = F$3.div(templateObject_14 || (templateObject_14 = __makeTemplateObject(["flex-column-header"], ["flex-column-header"])));
function TwTableBodyRow$1(_a) {
    var children = _a.children, even = _a.even, onClickEvent = _a.onClickEvent;
    var TwRow = F$3.tr(templateObject_15 || (templateObject_15 = __makeTemplateObject(["", " hover:bg-gray-200 text-gray-900"], ["", " hover:bg-gray-200 text-gray-900"])), function (p) { return (even ? "bg-gray-50" : "bg-gray-100"); });
    return react_1.default.createElement(TwRow, { onDoubleClick: onClickEvent }, children);
}
var templateObject_1$a, templateObject_2$8, templateObject_3$6, templateObject_4$3, templateObject_5$2, templateObject_6$1, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15;
var IbbDynamicComponent = function (props) {
    return react_1.default.createElement(react_1.default.Fragment, null, props.customComponent);
};
/**
 * Simple ponyfill for Object.fromEntries
 */
var fromEntries = function fromEntries(entries) {
    return entries.reduce(function (acc, _ref) {
        var key = _ref[0], value = _ref[1];
        acc[key] = value;
        return acc;
    }, {});
};
/**
 * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs
 */
var useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? React$4.useLayoutEffect : React$4.useEffect;
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}
function getWindow(node) {
    if (node == null) {
        return window;
    }
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}
function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
        return false;
    }
    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
            var value = attributes[name];
            if (value === false) {
                element.removeAttribute(name);
            }
            else {
                element.setAttribute(name, value === true ? '' : value);
            }
        });
    });
}
function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function () {
        Object.keys(state.elements).forEach(function (name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function (style, property) {
                style[property] = '';
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!isHTMLElement(element) || !getNodeName(element)) {
                return;
            }
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function (attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
};
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
var max = Math.max;
var min = Math.min;
var round = Math.round;
function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands) {
        return uaData.brands.map(function (item) {
            return item.brand + "/" + item.version;
        }).join(' ');
    }
    return navigator.userAgent;
}
function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
        includeScale = false;
    }
    if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}
// means it doesn't take into account transforms.
function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
    }
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) {
        return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) {
                return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        } while (next);
    } // Give up, the result is false
    return false;
}
function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
}
function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
        element.document) || window.document).documentElement;
}
function getParentNode(element) {
    if (getNodeName(element) === 'html') {
        return element;
    }
    return ( // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback
    );
}
function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
        getComputedStyle$1(element).position === 'fixed') {
        return null;
    }
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);
        if (elementCss.position === 'fixed') {
            return null;
        }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
            return currentNode;
        }
        else {
            currentNode = currentNode.parentNode;
        }
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.
function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
    }
    return offsetParent || getContainingBlock(element) || window;
}
function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}
function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}
function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
}
function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) {
        return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect$1(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) {
        return;
    } // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
            return;
        }
    }
    if (process.env.NODE_ENV !== "production") {
        if (!isHTMLElement(arrowElement)) {
            console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
    }
    if (!contains(state.elements.popper, arrowElement)) {
        if (process.env.NODE_ENV !== "production") {
            console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }
        return;
    }
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
};
function getVariation(placement) {
    return placement.split('-')[1];
}
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref) {
    var x = _ref.x, y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === getWindow(popper)) {
            offsetParent = getDocumentElement(popper);
            if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent = offsetParent;
        if (placement === top || (placement === left || placement === right) && variation === end) {
            sideY = bottom;
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
                offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
            sideX = right;
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
                offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    if (process.env.NODE_ENV !== "production") {
        var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';
        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
            return transitionProperty.indexOf(property) >= 0;
        })) {
            console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
    }
    var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.popperOffsets,
            position: state.options.strategy,
            adaptive: adaptive,
            roundOffsets: roundOffsets
        })));
    }
    if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
            offsets: state.modifiersData.arrow,
            position: 'absolute',
            adaptive: false,
            roundOffsets: roundOffsets
        })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
};
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
        scrollParents.forEach(function (scrollParent) {
            scrollParent.addEventListener('scroll', instance.update, passive);
        });
    }
    if (resize) {
        window.addEventListener('resize', instance.update, passive);
    }
    return function () {
        if (scroll) {
            scrollParents.forEach(function (scrollParent) {
                scrollParent.removeEventListener('scroll', instance.update, passive);
            });
        }
        if (resize) {
            window.removeEventListener('resize', instance.update, passive);
        }
    };
} // eslint-disable-next-line import/no-unused-modules
var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() { },
    effect: effect,
    data: {}
};
var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
    });
}
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
    });
}
function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}
function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
    };
}
// of the `<html>` and `<body>` rect bounds if horizontally scrollable
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
    }
    if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
    }
    return getScrollParent(getParentNode(node));
}
/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
        list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
        updatedList.concat(listScrollParents(getParentNode(target)));
}
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}
function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
        return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents
function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
        case top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch (variation) {
            case start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
        }
    }
    return offsets;
}
function detectOverflow(state, options) {
    if (options === void 0) {
        options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
            var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
            var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}
function computeAutoPlacement(state, options) {
    if (options === void 0) {
        options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
        if (process.env.NODE_ENV !== "production") {
            console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[getBasePlacement(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
    });
}
function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
        return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
        return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) {
            mainVariationSide = getOppositePlacement(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
            checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
            checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function (check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function (placement) {
                var checks = checksMap.get(placement);
                if (checks) {
                    return checks.slice(0, _i).every(function (check) {
                        return check;
                    });
                }
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
            var _ret = _loop(_i);
            if (_ret === "break")
                break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
        _skip: false
    }
};
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
        preventedOffsets = {
            x: 0,
            y: 0
        };
    }
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
};
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
};
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
};
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) {
        return;
    }
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? top : left;
        var _altSide = mainAxis === 'x' ? bottom : right;
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
};
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}
function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
    }
    else {
        return getHTMLElementScroll(node);
    }
}
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
        isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
            isScrollParent(documentElement)) {
            scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
            offsets = getBoundingClientRect(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        }
        else if (documentElement) {
            offsets.x = getWindowScrollBarX(documentElement);
        }
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) {
                    sort(depModifier);
                }
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
            // check for visited object
            sort(modifier);
        }
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}
function debounce(fn) {
    var pending;
    return function () {
        if (!pending) {
            pending = new Promise(function (resolve) {
                Promise.resolve().then(function () {
                    pending = undefined;
                    resolve(fn());
                });
            });
        }
        return pending;
    };
}
function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }
    return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
    }, str);
}
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
            .filter(function (value, index, self) {
            return self.indexOf(value) === index;
        }).forEach(function (key) {
            switch (key) {
                case 'name':
                    if (typeof modifier.name !== 'string') {
                        console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
                    }
                    break;
                case 'enabled':
                    if (typeof modifier.enabled !== 'boolean') {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
                    }
                    break;
                case 'phase':
                    if (modifierPhases.indexOf(modifier.phase) < 0) {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
                    }
                    break;
                case 'fn':
                    if (typeof modifier.fn !== 'function') {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
                    }
                    break;
                case 'effect':
                    if (modifier.effect != null && typeof modifier.effect !== 'function') {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
                    }
                    break;
                case 'requires':
                    if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
                    }
                    break;
                case 'requiresIfExists':
                    if (!Array.isArray(modifier.requiresIfExists)) {
                        console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
                    }
                    break;
                case 'options':
                case 'data':
                    break;
                default:
                    console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                        return "\"" + s + "\"";
                    }).join(', ') + "; but \"" + key + "\" was provided.");
            }
            modifier.requires && modifier.requires.forEach(function (requirement) {
                if (modifiers.find(function (mod) {
                    return mod.name === requirement;
                }) == null) {
                    console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
                }
            });
        });
    });
}
function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
        var identifier = fn(item);
        if (!identifiers.has(identifier)) {
            identifiers.add(identifier);
            return true;
        }
    });
}
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function (key) {
        return merged[key];
    });
}
var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }
    return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
        generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) {
            options = defaultOptions;
        }
        var state = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
                    popper: listScrollParents(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function (m) {
                    return m.enabled;
                }); // Validate the provided modifiers so that the consumer will get warned
                // if one of the modifiers is invalid for any reason
                if (process.env.NODE_ENV !== "production") {
                    var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                        var name = _ref.name;
                        return name;
                    });
                    validateModifiers(modifiers);
                    if (getBasePlacement(state.options.placement) === auto) {
                        var flipModifier = state.orderedModifiers.find(function (_ref2) {
                            var name = _ref2.name;
                            return name === 'flip';
                        });
                        if (!flipModifier) {
                            console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                        }
                    }
                    var _getComputedStyle = getComputedStyle$1(popper), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
                    // cause bugs with positioning, so we'll warn the consumer
                    if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                        return parseFloat(margin);
                    })) {
                        console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
                    }
                }
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) {
                    return;
                }
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) {
                    if (process.env.NODE_ENV !== "production") {
                        console.error(INVALID_ELEMENT_ERROR);
                    }
                    return;
                } // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
                    popper: getLayoutRect(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function (modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                var __debug_loops__ = 0;
                for (var index = 0; index < state.orderedModifiers.length; index++) {
                    if (process.env.NODE_ENV !== "production") {
                        __debug_loops__ += 1;
                        if (__debug_loops__ > 100) {
                            console.error(INFINITE_LOOP_ERROR);
                            break;
                        }
                    }
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') {
                        state = fn({
                            state: state,
                            options: _options,
                            name: name,
                            instance: instance
                        }) || state;
                    }
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: debounce(function () {
                return new Promise(function (resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) {
            if (process.env.NODE_ENV !== "production") {
                console.error(INVALID_ELEMENT_ERROR);
            }
            return instance;
        }
        instance.setOptions(options).then(function (state) {
            if (!isDestroyed && options.onFirstUpdate) {
                options.onFirstUpdate(state);
            }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function (_ref3) {
                var name = _ref3.name, _ref3$options = _ref3.options, options = _ref3$options === void 0 ? {} : _ref3$options, effect = _ref3.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() { };
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function (fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/ popperGenerator({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper(referenceElement, popperElement, options) {
    if (options === void 0) {
        options = {};
    }
    var prevOptions = React$4.useRef(null);
    var optionsWithDefaults = {
        onFirstUpdate: options.onFirstUpdate,
        placement: options.placement || 'bottom',
        strategy: options.strategy || 'absolute',
        modifiers: options.modifiers || EMPTY_MODIFIERS
    };
    var _React$useState = React$4.useState({
        styles: {
            popper: {
                position: optionsWithDefaults.strategy,
                left: '0',
                top: '0'
            },
            arrow: {
                position: 'absolute'
            }
        },
        attributes: {}
    }), state = _React$useState[0], setState = _React$useState[1];
    var updateStateModifier = React$4.useMemo(function () {
        return {
            name: 'updateState',
            enabled: true,
            phase: 'write',
            fn: function fn(_ref) {
                var state = _ref.state;
                var elements = Object.keys(state.elements);
                ReactDOM.flushSync(function () {
                    setState({
                        styles: fromEntries(elements.map(function (element) {
                            return [element, state.styles[element] || {}];
                        })),
                        attributes: fromEntries(elements.map(function (element) {
                            return [element, state.attributes[element]];
                        }))
                    });
                });
            },
            requires: ['computeStyles']
        };
    }, []);
    var popperOptions = React$4.useMemo(function () {
        var newOptions = {
            onFirstUpdate: optionsWithDefaults.onFirstUpdate,
            placement: optionsWithDefaults.placement,
            strategy: optionsWithDefaults.strategy,
            modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
                    name: 'applyStyles',
                    enabled: false
                }])
        };
        if (reactFastCompare(prevOptions.current, newOptions)) {
            return prevOptions.current || newOptions;
        }
        else {
            prevOptions.current = newOptions;
            return newOptions;
        }
    }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
    var popperInstanceRef = React$4.useRef();
    useIsomorphicLayoutEffect(function () {
        if (popperInstanceRef.current) {
            popperInstanceRef.current.setOptions(popperOptions);
        }
    }, [popperOptions]);
    useIsomorphicLayoutEffect(function () {
        if (referenceElement == null || popperElement == null) {
            return;
        }
        var createPopper$1 = options.createPopper || createPopper;
        var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);
        popperInstanceRef.current = popperInstance;
        return function () {
            popperInstance.destroy();
            popperInstanceRef.current = null;
        };
    }, [referenceElement, popperElement, options.createPopper]);
    return {
        state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
        styles: state.styles,
        attributes: state.attributes,
        update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
        forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
    };
};
function useGetLatest(val) {
    var ref = React$4.useRef(val);
    ref.current = val;
    return React$4.useCallback(function () {
        return ref.current;
    }, []);
}
var noop = function noop() {
};
function useControlledState(_ref) {
    var initial = _ref.initial, value = _ref.value, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? noop : _ref$onChange;
    if (initial === undefined && value === undefined) {
        throw new TypeError('Either "value" or "initial" variable must be set. Now both are undefined');
    }
    var _React$useState = React$4.useState(initial), state = _React$useState[0], setState = _React$useState[1];
    var getLatest = useGetLatest(state);
    var set = React$4.useCallback(function (updater) {
        var state = getLatest();
        var updatedState = typeof updater === 'function' ? updater(state) : updater;
        if (typeof updatedState.persist === 'function')
            updatedState.persist();
        setState(updatedState);
        if (typeof onChange === 'function')
            onChange(updatedState);
    }, [getLatest, onChange]);
    var isControlled = value !== undefined;
    return [isControlled ? value : state, isControlled ? onChange : set];
}
function generateBoundingClientRect(x, y) {
    if (x === void 0) {
        x = 0;
    }
    if (y === void 0) {
        y = 0;
    }
    return function () {
        return {
            width: 0,
            height: 0,
            top: y,
            right: x,
            bottom: y,
            left: x,
            x: 0,
            y: 0,
            toJSON: function toJSON() {
                return null;
            }
        };
    };
}
var _excluded$2 = ["styles", "attributes"];
var virtualElement = {
    getBoundingClientRect: generateBoundingClientRect()
};
var defaultConfig$1 = {
    closeOnOutsideClick: true,
    closeOnTriggerHidden: false,
    defaultVisible: false,
    delayHide: 0,
    delayShow: 0,
    followCursor: false,
    interactive: false,
    mutationObserverOptions: {
        attributes: true,
        childList: true,
        subtree: true
    },
    offset: [0, 6],
    trigger: 'hover'
};
function usePopperTooltip(config, popperOptions) {
    var _popperProps$state, _popperProps$state$mo, _popperProps$state$mo2;
    if (config === void 0) {
        config = {};
    }
    if (popperOptions === void 0) {
        popperOptions = {};
    }
    // Merging options with default options.
    // Keys with undefined values are replaced with the default ones if any.
    // Keys with other values pass through.
    var finalConfig = Object.keys(defaultConfig$1).reduce(function (config, key) {
        var _extends2;
        return _extends({}, config, (_extends2 = {}, _extends2[key] = config[key] !== undefined ? config[key] : defaultConfig$1[key], _extends2));
    }, config);
    var defaultModifiers = React$4.useMemo(function () {
        return [{
                name: 'offset',
                options: {
                    offset: finalConfig.offset
                }
            }];
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    Array.isArray(finalConfig.offset) ? finalConfig.offset : []);
    var finalPopperOptions = _extends({}, popperOptions, {
        placement: popperOptions.placement || finalConfig.placement,
        modifiers: popperOptions.modifiers || defaultModifiers
    });
    var _React$useState = React$4.useState(null), triggerRef = _React$useState[0], setTriggerRef = _React$useState[1];
    var _React$useState2 = React$4.useState(null), tooltipRef = _React$useState2[0], setTooltipRef = _React$useState2[1];
    var _useControlledState = useControlledState({
        initial: finalConfig.defaultVisible,
        value: finalConfig.visible,
        onChange: finalConfig.onVisibleChange
    }), visible = _useControlledState[0], setVisible = _useControlledState[1];
    var timer = React$4.useRef();
    React$4.useEffect(function () {
        return function () {
            return clearTimeout(timer.current);
        };
    }, []);
    var _usePopper = usePopper(finalConfig.followCursor ? virtualElement : triggerRef, tooltipRef, finalPopperOptions), styles = _usePopper.styles, attributes = _usePopper.attributes, popperProps = _objectWithoutPropertiesLoose$2(_usePopper, _excluded$2);
    var update = popperProps.update;
    var getLatest = useGetLatest({
        visible: visible,
        triggerRef: triggerRef,
        tooltipRef: tooltipRef,
        finalConfig: finalConfig
    });
    var isTriggeredBy = React$4.useCallback(function (trigger) {
        return Array.isArray(finalConfig.trigger) ? finalConfig.trigger.includes(trigger) : finalConfig.trigger === trigger;
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    Array.isArray(finalConfig.trigger) ? finalConfig.trigger : [finalConfig.trigger]);
    var hideTooltip = React$4.useCallback(function () {
        clearTimeout(timer.current);
        timer.current = window.setTimeout(function () {
            return setVisible(false);
        }, finalConfig.delayHide);
    }, [finalConfig.delayHide, setVisible]);
    var showTooltip = React$4.useCallback(function () {
        clearTimeout(timer.current);
        timer.current = window.setTimeout(function () {
            return setVisible(true);
        }, finalConfig.delayShow);
    }, [finalConfig.delayShow, setVisible]);
    var toggleTooltip = React$4.useCallback(function () {
        if (getLatest().visible) {
            hideTooltip();
        }
        else {
            showTooltip();
        }
    }, [getLatest, hideTooltip, showTooltip]); // Handle click outside
    React$4.useEffect(function () {
        if (!getLatest().finalConfig.closeOnOutsideClick)
            return;
        var handleClickOutside = function handleClickOutside(event) {
            var _event$composedPath;
            var _getLatest = getLatest(), tooltipRef = _getLatest.tooltipRef, triggerRef = _getLatest.triggerRef;
            var target = (event.composedPath == null ? void 0 : (_event$composedPath = event.composedPath()) == null ? void 0 : _event$composedPath[0]) || event.target;
            if (target instanceof Node) {
                if (tooltipRef != null && triggerRef != null && !tooltipRef.contains(target) && !triggerRef.contains(target)) {
                    hideTooltip();
                }
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return function () {
            return document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [getLatest, hideTooltip]); // Trigger: click
    React$4.useEffect(function () {
        if (triggerRef == null || !isTriggeredBy('click'))
            return;
        triggerRef.addEventListener('click', toggleTooltip);
        return function () {
            return triggerRef.removeEventListener('click', toggleTooltip);
        };
    }, [triggerRef, isTriggeredBy, toggleTooltip]); // Trigger: double-click
    React$4.useEffect(function () {
        if (triggerRef == null || !isTriggeredBy('double-click'))
            return;
        triggerRef.addEventListener('dblclick', toggleTooltip);
        return function () {
            return triggerRef.removeEventListener('dblclick', toggleTooltip);
        };
    }, [triggerRef, isTriggeredBy, toggleTooltip]); // Trigger: right-click
    React$4.useEffect(function () {
        if (triggerRef == null || !isTriggeredBy('right-click'))
            return;
        var preventDefaultAndToggle = function preventDefaultAndToggle(event) {
            // Don't show the context menu
            event.preventDefault();
            toggleTooltip();
        };
        triggerRef.addEventListener('contextmenu', preventDefaultAndToggle);
        return function () {
            return triggerRef.removeEventListener('contextmenu', preventDefaultAndToggle);
        };
    }, [triggerRef, isTriggeredBy, toggleTooltip]); // Trigger: focus
    React$4.useEffect(function () {
        if (triggerRef == null || !isTriggeredBy('focus'))
            return;
        triggerRef.addEventListener('focus', showTooltip);
        triggerRef.addEventListener('blur', hideTooltip);
        return function () {
            triggerRef.removeEventListener('focus', showTooltip);
            triggerRef.removeEventListener('blur', hideTooltip);
        };
    }, [triggerRef, isTriggeredBy, showTooltip, hideTooltip]); // Trigger: hover on trigger
    React$4.useEffect(function () {
        if (triggerRef == null || !isTriggeredBy('hover'))
            return;
        triggerRef.addEventListener('mouseenter', showTooltip);
        triggerRef.addEventListener('mouseleave', hideTooltip);
        return function () {
            triggerRef.removeEventListener('mouseenter', showTooltip);
            triggerRef.removeEventListener('mouseleave', hideTooltip);
        };
    }, [triggerRef, isTriggeredBy, showTooltip, hideTooltip]); // Trigger: hover on tooltip, keep it open if hovered
    React$4.useEffect(function () {
        if (tooltipRef == null || !isTriggeredBy('hover') || !getLatest().finalConfig.interactive)
            return;
        tooltipRef.addEventListener('mouseenter', showTooltip);
        tooltipRef.addEventListener('mouseleave', hideTooltip);
        return function () {
            tooltipRef.removeEventListener('mouseenter', showTooltip);
            tooltipRef.removeEventListener('mouseleave', hideTooltip);
        };
    }, [tooltipRef, isTriggeredBy, showTooltip, hideTooltip, getLatest]); // Handle closing tooltip if trigger hidden
    var isReferenceHidden = popperProps == null ? void 0 : (_popperProps$state = popperProps.state) == null ? void 0 : (_popperProps$state$mo = _popperProps$state.modifiersData) == null ? void 0 : (_popperProps$state$mo2 = _popperProps$state$mo.hide) == null ? void 0 : _popperProps$state$mo2.isReferenceHidden;
    React$4.useEffect(function () {
        if (finalConfig.closeOnTriggerHidden && isReferenceHidden)
            hideTooltip();
    }, [finalConfig.closeOnTriggerHidden, hideTooltip, isReferenceHidden]); // Handle follow cursor
    React$4.useEffect(function () {
        if (!finalConfig.followCursor || triggerRef == null)
            return;
        function setMousePosition(_ref) {
            var clientX = _ref.clientX, clientY = _ref.clientY;
            virtualElement.getBoundingClientRect = generateBoundingClientRect(clientX, clientY);
            update == null ? void 0 : update();
        }
        triggerRef.addEventListener('mousemove', setMousePosition);
        return function () {
            return triggerRef.removeEventListener('mousemove', setMousePosition);
        };
    }, [finalConfig.followCursor, triggerRef, update]); // Handle tooltip DOM mutation changes (aka mutation observer)
    React$4.useEffect(function () {
        if (tooltipRef == null || update == null || finalConfig.mutationObserverOptions == null)
            return;
        var observer = new MutationObserver(update);
        observer.observe(tooltipRef, finalConfig.mutationObserverOptions);
        return function () {
            return observer.disconnect();
        };
    }, [finalConfig.mutationObserverOptions, tooltipRef, update]); // Tooltip props getter
    var getTooltipProps = function getTooltipProps(args) {
        if (args === void 0) {
            args = {};
        }
        return _extends({}, args, {
            style: _extends({}, args.style, styles.popper)
        }, attributes.popper, {
            'data-popper-interactive': finalConfig.interactive
        });
    }; // Arrow props getter
    var getArrowProps = function getArrowProps(args) {
        if (args === void 0) {
            args = {};
        }
        return _extends({}, args, attributes.arrow, {
            style: _extends({}, args.style, styles.arrow),
            'data-popper-arrow': true
        });
    };
    return _extends({
        getArrowProps: getArrowProps,
        getTooltipProps: getTooltipProps,
        setTooltipRef: setTooltipRef,
        setTriggerRef: setTriggerRef,
        tooltipRef: tooltipRef,
        triggerRef: triggerRef,
        visible: visible
    }, popperProps);
}
var IbbFieldTooltip = function (_a) {
    var tooltipItems = _a.tooltipItems, _b = _a.tooltipLabel, tooltipLabel = _b === void 0 ? "Änderungshistorie" : _b, _c = _a.arrowPosition, arrowPosition = _c === void 0 ? "default" : _c, children = _a.children;
    if (!tooltipItems)
        return children;
    var _d = usePopperTooltip({
        trigger: "hover",
        placement: "bottom-start",
        //followCursor: true,
        closeOnOutsideClick: true,
        closeOnTriggerHidden: false,
        interactive: true,
        delayShow: 400,
        delayHide: 200,
        //closeOnOutsideClick: false
    }), getArrowProps = _d.getArrowProps, getTooltipProps = _d.getTooltipProps, setTooltipRef = _d.setTooltipRef, setTriggerRef = _d.setTriggerRef, visible = _d.visible;
    var arrowClassName = arrowPosition == "right" ? "tooltip-arrow-right" : "tooltip-arrow-default";
    return (react_1.default.createElement("div", { className: "element-with-tooltip inline", ref: setTriggerRef }, children, visible && (react_1.default.createElement(TwTooltipContainer, __assign$1({ name: "tooltip-container", ref: setTooltipRef }, getTooltipProps({ className: "tooltip-container", style: { width: "auto", minWidth: "200px", maxWidth: "400px", padding: "3px" } })), react_1.default.createElement("div", __assign$1({}, getArrowProps({ className: "tooltip-arrow ".concat(arrowClassName) }))), react_1.default.createElement(TwTooltipTitle, null, tooltipLabel), react_1.default.createElement(TwTooltipContent, null, tooltipItems.map(function (item, i) { return (react_1.default.createElement("div", { className: "p-2 whitespace-pre-wrap break-normal", key: i }, item)); }))))));
};
var TwTooltipContainer = F$3.div(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject(["bg-gray-200 border mt-0 block z-40 font-normal leading-normal text-sm max-w-xs text-left no-underline break-words rounded"], ["bg-gray-200 border mt-0 block z-40 font-normal leading-normal text-sm max-w-xs text-left no-underline break-words rounded"])));
var TwTooltipTitle = F$3.div(templateObject_2$7 || (templateObject_2$7 = __makeTemplateObject(["tooltip-header text-gray-900 font-semibold p-2 mb-0 border-b border-solid border-slate-100 uppercase rounded-t"], ["tooltip-header text-gray-900 font-semibold p-2 mb-0 border-b border-solid border-slate-100 uppercase rounded-t"])));
var TwTooltipContent = F$3.div(templateObject_3$5 || (templateObject_3$5 = __makeTemplateObject(["tooltip-content text-gray-900 divide-y divide-solid"], ["tooltip-content text-gray-900 divide-y divide-solid"])));
var templateObject_1$9, templateObject_2$7, templateObject_3$5;
var Asterisk = function () {
    return react_1.default.createElement("span", { className: "asterisk" });
};
var LabelComponent = function (_a) {
    var label = _a.label, type = _a.type, id = _a.id, required = _a.required;
    return (react_1.default.createElement(react_1.default.Fragment, null, label && type != ElementTypes.radio && type !== ElementTypes.table && !IsElementButton(type) && (react_1.default.createElement(TwInputFieldLabel, { htmlFor: id }, label, " ", required && react_1.default.createElement(Asterisk, null))), " "));
};
var ItemComponent$1 = function (_a) {
    var tooltipItems = _a.tooltipItems, children = _a.children;
    return react_1.default.createElement(IbbFieldTooltip, { tooltipItems: tooltipItems }, children);
};
var FieldWrapper = function (props) {
    var type = props.type, children = props.children, hideGrid = props.hideGrid, label = props.label;
    if (hideGrid) {
        return type == ElementTypes.checkbox && label ? (react_1.default.createElement("div", { className: "flex" }, react_1.default.createElement(ItemComponent$1, __assign$1({}, props)), react_1.default.createElement(LabelComponent, __assign$1({}, props)))) : (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(LabelComponent, __assign$1({}, props)), react_1.default.createElement(ItemComponent$1, __assign$1({}, props))));
    }
    else if (ButtonTypes.indexOf(type) > -1) {
        return react_1.default.createElement(TwElementButtonContainer, null, children);
    }
    else {
        return (react_1.default.createElement(TwElementContainer, null, react_1.default.createElement(TwElementContainerGrid_1_3, null, react_1.default.createElement(LabelComponent, __assign$1({}, props))), react_1.default.createElement(TwElementContainerGrid_2_3, null, react_1.default.createElement(ItemComponent$1, __assign$1({}, props)))));
    }
};
var InputElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly, focusKey = props.focusKey;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, field_placeholder = field.field_placeholder, field_name = field.field_name, field_readonly = field.field_readonly, field_maxlength = field.field_maxlength, field_validation_error = field.field_validation_error, field_validation_rules = field.field_validation_rules, field_validation_action = field.field_validation_action, field_custom_style = field.field_custom_style;
    var type = field_type == ElementTypes.inputCurrency || (field_options && field_options.precision && field_options.precision !== "0")
        ? InputType.currency
        : field_type == ElementTypes.inputPassword
            ? InputType.password
            : field_type == ElementTypes.inputNumeric
                ? InputType.number
                : InputType.text;
    var readOnly = field_readonly || userReadOnly ? true : false;
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbFormInput, { field_id: field_id, field_placeholder: field_placeholder, field_label: field_label, field_value: field_value, field_name: field_name, input_type: type, readonly: readOnly, required: field_required, maxlength: field_maxlength, options: field_options, field_validation_error: field_validation_error, validationRules: field_validation_rules ? field_validation_rules : {}, validationAction: field_validation_action, handleChangeInput: handleChangeInput, focusKey: focusKey, customStyle: field_custom_style })));
};
var lib$1 = {};
Object.defineProperty(lib$1, '__esModule', {
    value: true
});
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
        return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
            continue;
        target[key] = source[key];
    }
    return target;
}
class Position {
    constructor(line, col, index) {
        this.line = void 0;
        this.column = void 0;
        this.index = void 0;
        this.line = line;
        this.column = col;
        this.index = index;
    }
}
class SourceLocation {
    constructor(start, end) {
        this.start = void 0;
        this.end = void 0;
        this.filename = void 0;
        this.identifierName = void 0;
        this.start = start;
        this.end = end;
    }
}
function createPositionWithColumnOffset(position, columnOffset) {
    const { line, column, index } = position;
    return new Position(line, column + columnOffset, index + columnOffset);
}
const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
var ModuleErrors = {
    ImportMetaOutsideModule: {
        message: `import.meta may appear only with 'sourceType: "module"'`,
        code
    },
    ImportOutsideModule: {
        message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
        code
    }
};
const NodeDescriptions = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    CatchClause: "catch clause",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ImportSpecifier: "import specifier",
    ImportDefaultSpecifier: "import default specifier",
    ImportNamespaceSpecifier: "import namespace specifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
        true: "prefix operation",
        false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
};
const toNodeDescription = ({ type, prefix }) => type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];
var StandardErrors = {
    AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`,
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
    BadGetterArity: "A 'get' accessor must not have any formal parameters.",
    BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`,
    DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
    DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeferImportRequiresNamespace: 'Only `import defer * as x from "./module"` is valid.',
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    DynamicImportPhaseRequiresImportExpressions: ({ phase }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: ({ type }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
    ForInUsing: "For-in loop may not start with 'using' declaration.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: ({ type }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
    ImportBindingIsString: ({ importName }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,
    ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
    ImportCallArity: ({ maxArgumentCount }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
    ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
    ImportReflectionNotBinding: 'Only `import module x from "./module"` is valid.',
    IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidCoverInitializedName: "Invalid shorthand property initializer.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`,
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`,
    InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`,
    InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsOptionalChaining: ({ ancestor }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`,
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`,
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`,
    LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
    MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`,
    ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
    ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`,
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
    PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`,
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
    SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
    SourcePhaseImportRequiresDefault: 'Only `import source x from "./module"` is valid.',
    StaticPrototype: "Classes may not have static property named prototype.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`,
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Unexpected private name.",
    UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`,
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
    VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`,
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
};
var StrictModeErrors = {
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`,
    StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`,
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode."
};
const UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
var PipelineOperatorErrors = {
    PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
    PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',
    PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
    PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
    PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
    PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
        type
    })}; please wrap it in parentheses.`,
    PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'
};
const _excluded$1 = ["toMessage"], _excluded2$1 = ["message"];
function defineHidden(obj, key, value) {
    Object.defineProperty(obj, key, {
        enumerable: false,
        configurable: true,
        value
    });
}
function toParseErrorConstructor(_ref) {
    let { toMessage } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);
    return function constructor({ loc, details }) {
        const error = new SyntaxError();
        Object.assign(error, properties, {
            loc,
            pos: loc.index
        });
        if ("missingPlugin" in details) {
            Object.assign(error, {
                missingPlugin: details.missingPlugin
            });
        }
        defineHidden(error, "clone", function clone(overrides = {}) {
            var _overrides$loc;
            const { line, column, index } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
            return constructor({
                loc: new Position(line, column, index),
                details: Object.assign({}, details, overrides.details)
            });
        });
        defineHidden(error, "details", details);
        Object.defineProperty(error, "message", {
            configurable: true,
            get() {
                const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
                this.message = message;
                return message;
            },
            set(value) {
                Object.defineProperty(this, "message", {
                    value,
                    writable: true
                });
            }
        });
        return error;
    };
}
function ParseErrorEnum(argument, syntaxPlugin) {
    if (Array.isArray(argument)) {
        return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);
    }
    const ParseErrorConstructors = {};
    for (const reasonCode of Object.keys(argument)) {
        const template = argument[reasonCode];
        const _ref2 = typeof template === "string" ? {
            message: () => template
        } : typeof template === "function" ? {
            message: template
        } : template, { message } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);
        const toMessage = typeof message === "string" ? () => message : message;
        ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
            code: "BABEL_PARSER_SYNTAX_ERROR",
            reasonCode,
            toMessage
        }, syntaxPlugin ? {
            syntaxPlugin
        } : {}, rest));
    }
    return ParseErrorConstructors;
}
const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum `pipelineOperator`(PipelineOperatorErrors));
const { defineProperty } = Object;
const toUnenumerable = (object, key) => defineProperty(object, key, {
    enumerable: false,
    value: object[key]
});
function toESTreeLocation(node) {
    node.loc.start && toUnenumerable(node.loc.start, "index");
    node.loc.end && toUnenumerable(node.loc.end, "index");
    return node;
}
var estree = superClass => class ESTreeParserMixin extends superClass {
    parse() {
        const file = toESTreeLocation(super.parse());
        if (this.options.tokens) {
            file.tokens = file.tokens.map(toESTreeLocation);
        }
        return file;
    }
    parseRegExpLiteral({ pattern, flags }) {
        let regex = null;
        try {
            regex = new RegExp(pattern, flags);
        }
        catch (e) { }
        const node = this.estreeParseLiteral(regex);
        node.regex = {
            pattern,
            flags
        };
        return node;
    }
    parseBigIntLiteral(value) {
        let bigInt;
        try {
            bigInt = BigInt(value);
        }
        catch (_unused) {
            bigInt = null;
        }
        const node = this.estreeParseLiteral(bigInt);
        node.bigint = String(node.value || value);
        return node;
    }
    parseDecimalLiteral(value) {
        const decimal = null;
        const node = this.estreeParseLiteral(decimal);
        node.decimal = String(node.value || value);
        return node;
    }
    estreeParseLiteral(value) {
        return this.parseLiteral(value, "Literal");
    }
    parseStringLiteral(value) {
        return this.estreeParseLiteral(value);
    }
    parseNumericLiteral(value) {
        return this.estreeParseLiteral(value);
    }
    parseNullLiteral() {
        return this.estreeParseLiteral(null);
    }
    parseBooleanLiteral(value) {
        return this.estreeParseLiteral(value);
    }
    directiveToStmt(directive) {
        const expression = directive.value;
        delete directive.value;
        expression.type = "Literal";
        expression.raw = expression.extra.raw;
        expression.value = expression.extra.expressionValue;
        const stmt = directive;
        stmt.type = "ExpressionStatement";
        stmt.expression = expression;
        stmt.directive = expression.extra.rawValue;
        delete expression.extra;
        return stmt;
    }
    initFunction(node, isAsync) {
        super.initFunction(node, isAsync);
        node.expression = false;
    }
    checkDeclaration(node) {
        if (node != null && this.isObjectProperty(node)) {
            this.checkDeclaration(node.value);
        }
        else {
            super.checkDeclaration(node);
        }
    }
    getObjectOrClassMethodParams(method) {
        return method.value.params;
    }
    isValidDirective(stmt) {
        var _stmt$expression$extr;
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
    }
    parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
        super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
        const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
        node.body = directiveStatements.concat(node.body);
        delete node.directives;
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
        if (method.typeParameters) {
            method.value.typeParameters = method.typeParameters;
            delete method.typeParameters;
        }
        classBody.body.push(method);
    }
    parsePrivateName() {
        const node = super.parsePrivateName();
        {
            if (!this.getPluginOption("estree", "classFeatures")) {
                return node;
            }
        }
        return this.convertPrivateNameToPrivateIdentifier(node);
    }
    convertPrivateNameToPrivateIdentifier(node) {
        const name = super.getPrivateNameSV(node);
        node = node;
        delete node.id;
        node.name = name;
        node.type = "PrivateIdentifier";
        return node;
    }
    isPrivateName(node) {
        {
            if (!this.getPluginOption("estree", "classFeatures")) {
                return super.isPrivateName(node);
            }
        }
        return node.type === "PrivateIdentifier";
    }
    getPrivateNameSV(node) {
        {
            if (!this.getPluginOption("estree", "classFeatures")) {
                return super.getPrivateNameSV(node);
            }
        }
        return node.name;
    }
    parseLiteral(value, type) {
        const node = super.parseLiteral(value, type);
        node.raw = node.extra.raw;
        delete node.extra;
        return node;
    }
    parseFunctionBody(node, allowExpression, isMethod = false) {
        super.parseFunctionBody(node, allowExpression, isMethod);
        node.expression = node.body.type !== "BlockStatement";
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        let funcNode = this.startNode();
        funcNode.kind = node.kind;
        funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
        funcNode.type = "FunctionExpression";
        delete funcNode.kind;
        node.value = funcNode;
        if (type === "ClassPrivateMethod") {
            node.computed = false;
        }
        return this.finishNode(node, "MethodDefinition");
    }
    parseClassProperty(...args) {
        const propertyNode = super.parseClassProperty(...args);
        {
            if (!this.getPluginOption("estree", "classFeatures")) {
                return propertyNode;
            }
        }
        propertyNode.type = "PropertyDefinition";
        return propertyNode;
    }
    parseClassPrivateProperty(...args) {
        const propertyNode = super.parseClassPrivateProperty(...args);
        {
            if (!this.getPluginOption("estree", "classFeatures")) {
                return propertyNode;
            }
        }
        propertyNode.type = "PropertyDefinition";
        propertyNode.computed = false;
        return propertyNode;
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
        if (node) {
            node.type = "Property";
            if (node.kind === "method") {
                node.kind = "init";
            }
            node.shorthand = false;
        }
        return node;
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
        const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
        if (node) {
            node.kind = "init";
            node.type = "Property";
        }
        return node;
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding) {
        return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
    }
    isAssignable(node, isBinding) {
        if (node != null && this.isObjectProperty(node)) {
            return this.isAssignable(node.value, isBinding);
        }
        return super.isAssignable(node, isBinding);
    }
    toAssignable(node, isLHS = false) {
        if (node != null && this.isObjectProperty(node)) {
            const { key, value } = node;
            if (this.isPrivateName(key)) {
                this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
            }
            this.toAssignable(value, isLHS);
        }
        else {
            super.toAssignable(node, isLHS);
        }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.kind === "get" || prop.kind === "set") {
            this.raise(Errors.PatternHasAccessor, {
                at: prop.key
            });
        }
        else if (prop.method) {
            this.raise(Errors.PatternHasMethod, {
                at: prop.key
            });
        }
        else {
            super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
        }
    }
    finishCallExpression(unfinished, optional) {
        const node = super.finishCallExpression(unfinished, optional);
        if (node.callee.type === "Import") {
            node.type = "ImportExpression";
            node.source = node.arguments[0];
            if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
                var _node$arguments$, _node$arguments$2;
                node.options = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;
                node.attributes = (_node$arguments$2 = node.arguments[1]) != null ? _node$arguments$2 : null;
            }
            delete node.arguments;
            delete node.callee;
        }
        return node;
    }
    toReferencedArguments(node) {
        if (node.type === "ImportExpression") {
            return;
        }
        super.toReferencedArguments(node);
    }
    parseExport(unfinished, decorators) {
        const exportStartLoc = this.state.lastTokStartLoc;
        const node = super.parseExport(unfinished, decorators);
        switch (node.type) {
            case "ExportAllDeclaration":
                node.exported = null;
                break;
            case "ExportNamedDeclaration":
                if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
                    node.type = "ExportAllDeclaration";
                    node.exported = node.specifiers[0].exported;
                    delete node.specifiers;
                }
            case "ExportDefaultDeclaration":
                {
                    var _declaration$decorato;
                    const { declaration } = node;
                    if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
                        this.resetStartLocation(node, exportStartLoc);
                    }
                }
                break;
        }
        return node;
    }
    parseSubscript(base, startLoc, noCalls, state) {
        const node = super.parseSubscript(base, startLoc, noCalls, state);
        if (state.optionalChainMember) {
            if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
                node.type = node.type.substring(8);
            }
            if (state.stop) {
                const chain = this.startNodeAtNode(node);
                chain.expression = node;
                return this.finishNode(chain, "ChainExpression");
            }
        }
        else if (node.type === "MemberExpression" || node.type === "CallExpression") {
            node.optional = false;
        }
        return node;
    }
    isOptionalMemberExpression(node) {
        if (node.type === "ChainExpression") {
            return node.expression.type === "MemberExpression";
        }
        return super.isOptionalMemberExpression(node);
    }
    hasPropertyAsPrivateName(node) {
        if (node.type === "ChainExpression") {
            node = node.expression;
        }
        return super.hasPropertyAsPrivateName(node);
    }
    isObjectProperty(node) {
        return node.type === "Property" && node.kind === "init" && !node.method;
    }
    isObjectMethod(node) {
        return node.method || node.kind === "get" || node.kind === "set";
    }
    finishNodeAt(node, type, endLoc) {
        return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
    }
    resetStartLocation(node, startLoc) {
        super.resetStartLocation(node, startLoc);
        toESTreeLocation(node);
    }
    resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
        super.resetEndLocation(node, endLoc);
        toESTreeLocation(node);
    }
};
class TokContext {
    constructor(token, preserveSpace) {
        this.token = void 0;
        this.preserveSpace = void 0;
        this.token = token;
        this.preserveSpace = !!preserveSpace;
    }
}
const types = {
    brace: new TokContext("{"),
    j_oTag: new TokContext("<tag"),
    j_cTag: new TokContext("</tag"),
    j_expr: new TokContext("<tag>...</tag>", true)
};
{
    types.template = new TokContext("`", true);
}
const beforeExpr = true;
const startsExpr = true;
const isLoop = true;
const isAssign = true;
const prefix = true;
const postfix = true;
class ExportedTokenType {
    constructor(label, conf = {}) {
        this.label = void 0;
        this.keyword = void 0;
        this.beforeExpr = void 0;
        this.startsExpr = void 0;
        this.rightAssociative = void 0;
        this.isLoop = void 0;
        this.isAssign = void 0;
        this.prefix = void 0;
        this.postfix = void 0;
        this.binop = void 0;
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.rightAssociative = !!conf.rightAssociative;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop != null ? conf.binop : null;
        {
            this.updateContext = null;
        }
    }
}
const keywords$1 = new Map();
function createKeyword(name, options = {}) {
    options.keyword = name;
    const token = createToken(name, options);
    keywords$1.set(name, token);
    return token;
}
function createBinop(name, binop) {
    return createToken(name, {
        beforeExpr,
        binop
    });
}
let tokenTypeCounter = -1;
const tokenTypes = [];
const tokenLabels = [];
const tokenBinops = [];
const tokenBeforeExprs = [];
const tokenStartsExprs = [];
const tokenPrefixes = [];
function createToken(name, options = {}) {
    var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
    ++tokenTypeCounter;
    tokenLabels.push(name);
    tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
    tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
    tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
    tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
    tokenTypes.push(new ExportedTokenType(name, options));
    return tokenTypeCounter;
}
function createKeywordLike(name, options = {}) {
    var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
    ++tokenTypeCounter;
    keywords$1.set(name, tokenTypeCounter);
    tokenLabels.push(name);
    tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
    tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
    tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
    tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
    tokenTypes.push(new ExportedTokenType("name", options));
    return tokenTypeCounter;
}
const tt = {
    bracketL: createToken("[", {
        beforeExpr,
        startsExpr
    }),
    bracketHashL: createToken("#[", {
        beforeExpr,
        startsExpr
    }),
    bracketBarL: createToken("[|", {
        beforeExpr,
        startsExpr
    }),
    bracketR: createToken("]"),
    bracketBarR: createToken("|]"),
    braceL: createToken("{", {
        beforeExpr,
        startsExpr
    }),
    braceBarL: createToken("{|", {
        beforeExpr,
        startsExpr
    }),
    braceHashL: createToken("#{", {
        beforeExpr,
        startsExpr
    }),
    braceR: createToken("}"),
    braceBarR: createToken("|}"),
    parenL: createToken("(", {
        beforeExpr,
        startsExpr
    }),
    parenR: createToken(")"),
    comma: createToken(",", {
        beforeExpr
    }),
    semi: createToken(";", {
        beforeExpr
    }),
    colon: createToken(":", {
        beforeExpr
    }),
    doubleColon: createToken("::", {
        beforeExpr
    }),
    dot: createToken("."),
    question: createToken("?", {
        beforeExpr
    }),
    questionDot: createToken("?."),
    arrow: createToken("=>", {
        beforeExpr
    }),
    template: createToken("template"),
    ellipsis: createToken("...", {
        beforeExpr
    }),
    backQuote: createToken("`", {
        startsExpr
    }),
    dollarBraceL: createToken("${", {
        beforeExpr,
        startsExpr
    }),
    templateTail: createToken("...`", {
        startsExpr
    }),
    templateNonTail: createToken("...${", {
        beforeExpr,
        startsExpr
    }),
    at: createToken("@"),
    hash: createToken("#", {
        startsExpr
    }),
    interpreterDirective: createToken("#!..."),
    eq: createToken("=", {
        beforeExpr,
        isAssign
    }),
    assign: createToken("_=", {
        beforeExpr,
        isAssign
    }),
    slashAssign: createToken("_=", {
        beforeExpr,
        isAssign
    }),
    xorAssign: createToken("_=", {
        beforeExpr,
        isAssign
    }),
    moduloAssign: createToken("_=", {
        beforeExpr,
        isAssign
    }),
    incDec: createToken("++/--", {
        prefix,
        postfix,
        startsExpr
    }),
    bang: createToken("!", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    tilde: createToken("~", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    doubleCaret: createToken("^^", {
        startsExpr
    }),
    doubleAt: createToken("@@", {
        startsExpr
    }),
    pipeline: createBinop("|>", 0),
    nullishCoalescing: createBinop("??", 1),
    logicalOR: createBinop("||", 1),
    logicalAND: createBinop("&&", 2),
    bitwiseOR: createBinop("|", 3),
    bitwiseXOR: createBinop("^", 4),
    bitwiseAND: createBinop("&", 5),
    equality: createBinop("==/!=/===/!==", 6),
    lt: createBinop("</>/<=/>=", 7),
    gt: createBinop("</>/<=/>=", 7),
    relational: createBinop("</>/<=/>=", 7),
    bitShift: createBinop("<</>>/>>>", 8),
    bitShiftL: createBinop("<</>>/>>>", 8),
    bitShiftR: createBinop("<</>>/>>>", 8),
    plusMin: createToken("+/-", {
        beforeExpr,
        binop: 9,
        prefix,
        startsExpr
    }),
    modulo: createToken("%", {
        binop: 10,
        startsExpr
    }),
    star: createToken("*", {
        binop: 10
    }),
    slash: createBinop("/", 10),
    exponent: createToken("**", {
        beforeExpr,
        binop: 11,
        rightAssociative: true
    }),
    _in: createKeyword("in", {
        beforeExpr,
        binop: 7
    }),
    _instanceof: createKeyword("instanceof", {
        beforeExpr,
        binop: 7
    }),
    _break: createKeyword("break"),
    _case: createKeyword("case", {
        beforeExpr
    }),
    _catch: createKeyword("catch"),
    _continue: createKeyword("continue"),
    _debugger: createKeyword("debugger"),
    _default: createKeyword("default", {
        beforeExpr
    }),
    _else: createKeyword("else", {
        beforeExpr
    }),
    _finally: createKeyword("finally"),
    _function: createKeyword("function", {
        startsExpr
    }),
    _if: createKeyword("if"),
    _return: createKeyword("return", {
        beforeExpr
    }),
    _switch: createKeyword("switch"),
    _throw: createKeyword("throw", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _try: createKeyword("try"),
    _var: createKeyword("var"),
    _const: createKeyword("const"),
    _with: createKeyword("with"),
    _new: createKeyword("new", {
        beforeExpr,
        startsExpr
    }),
    _this: createKeyword("this", {
        startsExpr
    }),
    _super: createKeyword("super", {
        startsExpr
    }),
    _class: createKeyword("class", {
        startsExpr
    }),
    _extends: createKeyword("extends", {
        beforeExpr
    }),
    _export: createKeyword("export"),
    _import: createKeyword("import", {
        startsExpr
    }),
    _null: createKeyword("null", {
        startsExpr
    }),
    _true: createKeyword("true", {
        startsExpr
    }),
    _false: createKeyword("false", {
        startsExpr
    }),
    _typeof: createKeyword("typeof", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _void: createKeyword("void", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _delete: createKeyword("delete", {
        beforeExpr,
        prefix,
        startsExpr
    }),
    _do: createKeyword("do", {
        isLoop,
        beforeExpr
    }),
    _for: createKeyword("for", {
        isLoop
    }),
    _while: createKeyword("while", {
        isLoop
    }),
    _as: createKeywordLike("as", {
        startsExpr
    }),
    _assert: createKeywordLike("assert", {
        startsExpr
    }),
    _async: createKeywordLike("async", {
        startsExpr
    }),
    _await: createKeywordLike("await", {
        startsExpr
    }),
    _defer: createKeywordLike("defer", {
        startsExpr
    }),
    _from: createKeywordLike("from", {
        startsExpr
    }),
    _get: createKeywordLike("get", {
        startsExpr
    }),
    _let: createKeywordLike("let", {
        startsExpr
    }),
    _meta: createKeywordLike("meta", {
        startsExpr
    }),
    _of: createKeywordLike("of", {
        startsExpr
    }),
    _sent: createKeywordLike("sent", {
        startsExpr
    }),
    _set: createKeywordLike("set", {
        startsExpr
    }),
    _source: createKeywordLike("source", {
        startsExpr
    }),
    _static: createKeywordLike("static", {
        startsExpr
    }),
    _using: createKeywordLike("using", {
        startsExpr
    }),
    _yield: createKeywordLike("yield", {
        startsExpr
    }),
    _asserts: createKeywordLike("asserts", {
        startsExpr
    }),
    _checks: createKeywordLike("checks", {
        startsExpr
    }),
    _exports: createKeywordLike("exports", {
        startsExpr
    }),
    _global: createKeywordLike("global", {
        startsExpr
    }),
    _implements: createKeywordLike("implements", {
        startsExpr
    }),
    _intrinsic: createKeywordLike("intrinsic", {
        startsExpr
    }),
    _infer: createKeywordLike("infer", {
        startsExpr
    }),
    _is: createKeywordLike("is", {
        startsExpr
    }),
    _mixins: createKeywordLike("mixins", {
        startsExpr
    }),
    _proto: createKeywordLike("proto", {
        startsExpr
    }),
    _require: createKeywordLike("require", {
        startsExpr
    }),
    _satisfies: createKeywordLike("satisfies", {
        startsExpr
    }),
    _keyof: createKeywordLike("keyof", {
        startsExpr
    }),
    _readonly: createKeywordLike("readonly", {
        startsExpr
    }),
    _unique: createKeywordLike("unique", {
        startsExpr
    }),
    _abstract: createKeywordLike("abstract", {
        startsExpr
    }),
    _declare: createKeywordLike("declare", {
        startsExpr
    }),
    _enum: createKeywordLike("enum", {
        startsExpr
    }),
    _module: createKeywordLike("module", {
        startsExpr
    }),
    _namespace: createKeywordLike("namespace", {
        startsExpr
    }),
    _interface: createKeywordLike("interface", {
        startsExpr
    }),
    _type: createKeywordLike("type", {
        startsExpr
    }),
    _opaque: createKeywordLike("opaque", {
        startsExpr
    }),
    name: createToken("name", {
        startsExpr
    }),
    string: createToken("string", {
        startsExpr
    }),
    num: createToken("num", {
        startsExpr
    }),
    bigint: createToken("bigint", {
        startsExpr
    }),
    decimal: createToken("decimal", {
        startsExpr
    }),
    regexp: createToken("regexp", {
        startsExpr
    }),
    privateName: createToken("#name", {
        startsExpr
    }),
    eof: createToken("eof"),
    jsxName: createToken("jsxName"),
    jsxText: createToken("jsxText", {
        beforeExpr: true
    }),
    jsxTagStart: createToken("jsxTagStart", {
        startsExpr: true
    }),
    jsxTagEnd: createToken("jsxTagEnd"),
    placeholder: createToken("%%", {
        startsExpr: true
    })
};
function tokenIsIdentifier(token) {
    return token >= 93 && token <= 132;
}
function tokenKeywordOrIdentifierIsKeyword(token) {
    return token <= 92;
}
function tokenIsKeywordOrIdentifier(token) {
    return token >= 58 && token <= 132;
}
function tokenIsLiteralPropertyName(token) {
    return token >= 58 && token <= 136;
}
function tokenComesBeforeExpression(token) {
    return tokenBeforeExprs[token];
}
function tokenCanStartExpression(token) {
    return tokenStartsExprs[token];
}
function tokenIsAssignment(token) {
    return token >= 29 && token <= 33;
}
function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
    return token >= 129 && token <= 131;
}
function tokenIsLoop(token) {
    return token >= 90 && token <= 92;
}
function tokenIsKeyword(token) {
    return token >= 58 && token <= 92;
}
function tokenIsOperator(token) {
    return token >= 39 && token <= 59;
}
function tokenIsPostfix(token) {
    return token === 34;
}
function tokenIsPrefix(token) {
    return tokenPrefixes[token];
}
function tokenIsTSTypeOperator(token) {
    return token >= 121 && token <= 123;
}
function tokenIsTSDeclarationStart(token) {
    return token >= 124 && token <= 130;
}
function tokenLabelName(token) {
    return tokenLabels[token];
}
function tokenOperatorPrecedence(token) {
    return tokenBinops[token];
}
function tokenIsRightAssociative(token) {
    return token === 57;
}
function tokenIsTemplate(token) {
    return token >= 24 && token <= 25;
}
function getExportedToken(token) {
    return tokenTypes[token];
}
{
    tokenTypes[8].updateContext = context => {
        context.pop();
    };
    tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {
        context.push(types.brace);
    };
    tokenTypes[22].updateContext = context => {
        if (context[context.length - 1] === types.template) {
            context.pop();
        }
        else {
            context.push(types.template);
        }
    };
    tokenTypes[142].updateContext = context => {
        context.push(types.j_expr, types.j_oTag);
    };
}
let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ca\ua7d0\ua7d1\ua7d3\ua7d5-\ua7d9\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0898-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0cf3\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ece\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\u30fb\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f\uff65";
const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
function isInAstralSet(code, set) {
    let pos = 0x10000;
    for (let i = 0, length = set.length; i < length; i += 2) {
        pos += set[i];
        if (pos > code)
            return false;
        pos += set[i + 1];
        if (pos >= code)
            return true;
    }
    return false;
}
function isIdentifierStart(code) {
    if (code < 65)
        return code === 36;
    if (code <= 90)
        return true;
    if (code < 97)
        return code === 95;
    if (code <= 122)
        return true;
    if (code <= 0xffff) {
        return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code) {
    if (code < 48)
        return code === 36;
    if (code < 58)
        return true;
    if (code < 65)
        return false;
    if (code <= 90)
        return true;
    if (code < 97)
        return code === 95;
    if (code <= 122)
        return true;
    if (code <= 0xffff) {
        return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
const reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
    return keywords.has(word);
}
function isIteratorStart(current, next, next2) {
    return current === 64 && next === 64 && isIdentifierStart(next2);
}
const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
function canBeReservedWord(word) {
    return reservedWordLikeSet.has(word);
}
class Scope {
    constructor(flags) {
        this.var = new Set();
        this.lexical = new Set();
        this.functions = new Set();
        this.flags = flags;
    }
}
class ScopeHandler {
    constructor(parser, inModule) {
        this.parser = void 0;
        this.scopeStack = [];
        this.inModule = void 0;
        this.undefinedExports = new Map();
        this.parser = parser;
        this.inModule = inModule;
    }
    get inTopLevel() {
        return (this.currentScope().flags & 1) > 0;
    }
    get inFunction() {
        return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
        return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
        return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
        return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
        const flags = this.currentThisScopeFlags();
        return (flags & 64) > 0 && (flags & 2) === 0;
    }
    get inStaticBlock() {
        for (let i = this.scopeStack.length - 1;; i--) {
            const { flags } = this.scopeStack[i];
            if (flags & 128) {
                return true;
            }
            if (flags & (387 | 64)) {
                return false;
            }
        }
    }
    get inNonArrowFunction() {
        return (this.currentThisScopeFlags() & 2) > 0;
    }
    get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(flags) {
        return new Scope(flags);
    }
    enter(flags) {
        this.scopeStack.push(this.createScope(flags));
    }
    exit() {
        const scope = this.scopeStack.pop();
        return scope.flags;
    }
    treatFunctionsAsVarInScope(scope) {
        return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);
    }
    declareName(name, bindingType, loc) {
        let scope = this.currentScope();
        if (bindingType & 8 || bindingType & 16) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            if (bindingType & 16) {
                scope.functions.add(name);
            }
            else {
                scope.lexical.add(name);
            }
            if (bindingType & 8) {
                this.maybeExportDefined(scope, name);
            }
        }
        else if (bindingType & 4) {
            for (let i = this.scopeStack.length - 1; i >= 0; --i) {
                scope = this.scopeStack[i];
                this.checkRedeclarationInScope(scope, name, bindingType, loc);
                scope.var.add(name);
                this.maybeExportDefined(scope, name);
                if (scope.flags & 387)
                    break;
            }
        }
        if (this.parser.inModule && scope.flags & 1) {
            this.undefinedExports.delete(name);
        }
    }
    maybeExportDefined(scope, name) {
        if (this.parser.inModule && scope.flags & 1) {
            this.undefinedExports.delete(name);
        }
    }
    checkRedeclarationInScope(scope, name, bindingType, loc) {
        if (this.isRedeclaredInScope(scope, name, bindingType)) {
            this.parser.raise(Errors.VarRedeclaration, {
                at: loc,
                identifierName: name
            });
        }
    }
    isRedeclaredInScope(scope, name, bindingType) {
        if (!(bindingType & 1))
            return false;
        if (bindingType & 8) {
            return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);
        }
        if (bindingType & 16) {
            return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);
        }
        return scope.lexical.has(name) && !(scope.flags & 8 && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);
    }
    checkLocalExport(id) {
        const { name } = id;
        const topLevelScope = this.scopeStack[0];
        if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {
            this.undefinedExports.set(name, id.loc.start);
        }
    }
    currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
        for (let i = this.scopeStack.length - 1;; i--) {
            const { flags } = this.scopeStack[i];
            if (flags & 387) {
                return flags;
            }
        }
    }
    currentThisScopeFlags() {
        for (let i = this.scopeStack.length - 1;; i--) {
            const { flags } = this.scopeStack[i];
            if (flags & (387 | 64) && !(flags & 4)) {
                return flags;
            }
        }
    }
}
class FlowScope extends Scope {
    constructor(...args) {
        super(...args);
        this.declareFunctions = new Set();
    }
}
class FlowScopeHandler extends ScopeHandler {
    createScope(flags) {
        return new FlowScope(flags);
    }
    declareName(name, bindingType, loc) {
        const scope = this.currentScope();
        if (bindingType & 2048) {
            this.checkRedeclarationInScope(scope, name, bindingType, loc);
            this.maybeExportDefined(scope, name);
            scope.declareFunctions.add(name);
            return;
        }
        super.declareName(name, bindingType, loc);
    }
    isRedeclaredInScope(scope, name, bindingType) {
        if (super.isRedeclaredInScope(scope, name, bindingType))
            return true;
        if (bindingType & 2048) {
            return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));
        }
        return false;
    }
    checkLocalExport(id) {
        if (!this.scopeStack[0].declareFunctions.has(id.name)) {
            super.checkLocalExport(id);
        }
    }
}
class BaseParser {
    constructor() {
        this.sawUnambiguousESM = false;
        this.ambiguousScriptDifferentAst = false;
    }
    hasPlugin(pluginConfig) {
        if (typeof pluginConfig === "string") {
            return this.plugins.has(pluginConfig);
        }
        else {
            const [pluginName, pluginOptions] = pluginConfig;
            if (!this.hasPlugin(pluginName)) {
                return false;
            }
            const actualOptions = this.plugins.get(pluginName);
            for (const key of Object.keys(pluginOptions)) {
                if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
                    return false;
                }
            }
            return true;
        }
    }
    getPluginOption(plugin, name) {
        var _this$plugins$get;
        return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
    }
}
function setTrailingComments(node, comments) {
    if (node.trailingComments === undefined) {
        node.trailingComments = comments;
    }
    else {
        node.trailingComments.unshift(...comments);
    }
}
function setLeadingComments(node, comments) {
    if (node.leadingComments === undefined) {
        node.leadingComments = comments;
    }
    else {
        node.leadingComments.unshift(...comments);
    }
}
function setInnerComments(node, comments) {
    if (node.innerComments === undefined) {
        node.innerComments = comments;
    }
    else {
        node.innerComments.unshift(...comments);
    }
}
function adjustInnerComments(node, elements, commentWS) {
    let lastElement = null;
    let i = elements.length;
    while (lastElement === null && i > 0) {
        lastElement = elements[--i];
    }
    if (lastElement === null || lastElement.start > commentWS.start) {
        setInnerComments(node, commentWS.comments);
    }
    else {
        setTrailingComments(lastElement, commentWS.comments);
    }
}
class CommentsParser extends BaseParser {
    addComment(comment) {
        if (this.filename)
            comment.loc.filename = this.filename;
        this.state.comments.push(comment);
    }
    processComment(node) {
        const { commentStack } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
            return;
        let i = commentStackLength - 1;
        const lastCommentWS = commentStack[i];
        if (lastCommentWS.start === node.end) {
            lastCommentWS.leadingNode = node;
            i--;
        }
        const { start: nodeStart } = node;
        for (; i >= 0; i--) {
            const commentWS = commentStack[i];
            const commentEnd = commentWS.end;
            if (commentEnd > nodeStart) {
                commentWS.containingNode = node;
                this.finalizeComment(commentWS);
                commentStack.splice(i, 1);
            }
            else {
                if (commentEnd === nodeStart) {
                    commentWS.trailingNode = node;
                }
                break;
            }
        }
    }
    finalizeComment(commentWS) {
        const { comments } = commentWS;
        if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
            if (commentWS.leadingNode !== null) {
                setTrailingComments(commentWS.leadingNode, comments);
            }
            if (commentWS.trailingNode !== null) {
                setLeadingComments(commentWS.trailingNode, comments);
            }
        }
        else {
            const { containingNode: node, start: commentStart } = commentWS;
            if (this.input.charCodeAt(commentStart - 1) === 44) {
                switch (node.type) {
                    case "ObjectExpression":
                    case "ObjectPattern":
                    case "RecordExpression":
                        adjustInnerComments(node, node.properties, commentWS);
                        break;
                    case "CallExpression":
                    case "OptionalCallExpression":
                        adjustInnerComments(node, node.arguments, commentWS);
                        break;
                    case "FunctionDeclaration":
                    case "FunctionExpression":
                    case "ArrowFunctionExpression":
                    case "ObjectMethod":
                    case "ClassMethod":
                    case "ClassPrivateMethod":
                        adjustInnerComments(node, node.params, commentWS);
                        break;
                    case "ArrayExpression":
                    case "ArrayPattern":
                    case "TupleExpression":
                        adjustInnerComments(node, node.elements, commentWS);
                        break;
                    case "ExportNamedDeclaration":
                    case "ImportDeclaration":
                        adjustInnerComments(node, node.specifiers, commentWS);
                        break;
                    default:
                        {
                            setInnerComments(node, comments);
                        }
                }
            }
            else {
                setInnerComments(node, comments);
            }
        }
    }
    finalizeRemainingComments() {
        const { commentStack } = this.state;
        for (let i = commentStack.length - 1; i >= 0; i--) {
            this.finalizeComment(commentStack[i]);
        }
        this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(node) {
        const { commentStack } = this.state;
        const { length } = commentStack;
        if (length === 0)
            return;
        const commentWS = commentStack[length - 1];
        if (commentWS.leadingNode === node) {
            commentWS.leadingNode = null;
        }
    }
    resetPreviousIdentifierLeadingComments(node) {
        const { commentStack } = this.state;
        const { length } = commentStack;
        if (length === 0)
            return;
        if (commentStack[length - 1].trailingNode === node) {
            commentStack[length - 1].trailingNode = null;
        }
        else if (length >= 2 && commentStack[length - 2].trailingNode === node) {
            commentStack[length - 2].trailingNode = null;
        }
    }
    takeSurroundingComments(node, start, end) {
        const { commentStack } = this.state;
        const commentStackLength = commentStack.length;
        if (commentStackLength === 0)
            return;
        let i = commentStackLength - 1;
        for (; i >= 0; i--) {
            const commentWS = commentStack[i];
            const commentEnd = commentWS.end;
            const commentStart = commentWS.start;
            if (commentStart === end) {
                commentWS.leadingNode = node;
            }
            else if (commentEnd === start) {
                commentWS.trailingNode = node;
            }
            else if (commentEnd < start) {
                break;
            }
        }
    }
}
const lineBreak = /\r\n?|[\n\u2028\u2029]/;
const lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code) {
    switch (code) {
        case 10:
        case 13:
        case 8232:
        case 8233:
            return true;
        default:
            return false;
    }
}
const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
const skipWhiteSpaceToLineBreak = new RegExp("(?=(" + skipWhiteSpaceInLine.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
function isWhitespace(code) {
    switch (code) {
        case 0x0009:
        case 0x000b:
        case 0x000c:
        case 32:
        case 160:
        case 5760:
        case 0x2000:
        case 0x2001:
        case 0x2002:
        case 0x2003:
        case 0x2004:
        case 0x2005:
        case 0x2006:
        case 0x2007:
        case 0x2008:
        case 0x2009:
        case 0x200a:
        case 0x202f:
        case 0x205f:
        case 0x3000:
        case 0xfeff:
            return true;
        default:
            return false;
    }
}
class State {
    constructor() {
        this.strict = void 0;
        this.curLine = void 0;
        this.lineStart = void 0;
        this.startLoc = void 0;
        this.endLoc = void 0;
        this.errors = [];
        this.potentialArrowAt = -1;
        this.noArrowAt = [];
        this.noArrowParamsConversionAt = [];
        this.maybeInArrowParameters = false;
        this.inType = false;
        this.noAnonFunctionType = false;
        this.hasFlowComment = false;
        this.isAmbientContext = false;
        this.inAbstractClass = false;
        this.inDisallowConditionalTypesContext = false;
        this.topicContext = {
            maxNumOfResolvableTopics: 0,
            maxTopicIndex: null
        };
        this.soloAwait = false;
        this.inFSharpPipelineDirectBody = false;
        this.labels = [];
        this.comments = [];
        this.commentStack = [];
        this.pos = 0;
        this.type = 139;
        this.value = null;
        this.start = 0;
        this.end = 0;
        this.lastTokEndLoc = null;
        this.lastTokStartLoc = null;
        this.lastTokStart = 0;
        this.context = [types.brace];
        this.canStartJSXElement = true;
        this.containsEsc = false;
        this.firstInvalidTemplateEscapePos = null;
        this.strictErrors = new Map();
        this.tokensLength = 0;
    }
    init({ strictMode, sourceType, startLine, startColumn }) {
        this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
        this.curLine = startLine;
        this.lineStart = -startColumn;
        this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
    }
    curPosition() {
        return new Position(this.curLine, this.pos - this.lineStart, this.pos);
    }
    clone(skipArrays) {
        const state = new State();
        const keys = Object.keys(this);
        for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            let val = this[key];
            if (!skipArrays && Array.isArray(val)) {
                val = val.slice();
            }
            state[key] = val;
        }
        return state;
    }
}
var _isDigit = function isDigit(code) {
    return code >= 48 && code <= 57;
};
const forbiddenNumericSeparatorSiblings = {
    decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: new Set([46, 88, 95, 120])
};
const isAllowedNumericSeparatorSibling = {
    bin: ch => ch === 48 || ch === 49,
    oct: ch => ch >= 48 && ch <= 55,
    dec: ch => ch >= 48 && ch <= 57,
    hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
};
function readStringContents(type, input, pos, lineStart, curLine, errors) {
    const initialPos = pos;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos;
    const { length } = input;
    for (;;) {
        if (pos >= length) {
            errors.unterminated(initialPos, initialLineStart, initialCurLine);
            out += input.slice(chunkStart, pos);
            break;
        }
        const ch = input.charCodeAt(pos);
        if (isStringEnd(type, ch, input, pos)) {
            out += input.slice(chunkStart, pos);
            break;
        }
        if (ch === 92) {
            out += input.slice(chunkStart, pos);
            const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
            if (res.ch === null && !firstInvalidLoc) {
                firstInvalidLoc = {
                    pos,
                    lineStart,
                    curLine
                };
            }
            else {
                out += res.ch;
            }
            ({
                pos,
                lineStart,
                curLine
            } = res);
            chunkStart = pos;
        }
        else if (ch === 8232 || ch === 8233) {
            ++pos;
            ++curLine;
            lineStart = pos;
        }
        else if (ch === 10 || ch === 13) {
            if (type === "template") {
                out += input.slice(chunkStart, pos) + "\n";
                ++pos;
                if (ch === 13 && input.charCodeAt(pos) === 10) {
                    ++pos;
                }
                ++curLine;
                chunkStart = lineStart = pos;
            }
            else {
                errors.unterminated(initialPos, initialLineStart, initialCurLine);
            }
        }
        else {
            ++pos;
        }
    }
    return {
        pos,
        str: out,
        firstInvalidLoc,
        lineStart,
        curLine,
        containsInvalid: !!firstInvalidLoc
    };
}
function isStringEnd(type, ch, input, pos) {
    if (type === "template") {
        return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
}
function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos++;
    const res = ch => ({
        pos,
        ch,
        lineStart,
        curLine
    });
    const ch = input.charCodeAt(pos++);
    switch (ch) {
        case 110:
            return res("\n");
        case 114:
            return res("\r");
        case 120:
            {
                let code;
                ({
                    code,
                    pos
                } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
                return res(code === null ? null : String.fromCharCode(code));
            }
        case 117:
            {
                let code;
                ({
                    code,
                    pos
                } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
                return res(code === null ? null : String.fromCodePoint(code));
            }
        case 116:
            return res("\t");
        case 98:
            return res("\b");
        case 118:
            return res("\u000b");
        case 102:
            return res("\f");
        case 13:
            if (input.charCodeAt(pos) === 10) {
                ++pos;
            }
        case 10:
            lineStart = pos;
            ++curLine;
        case 8232:
        case 8233:
            return res("");
        case 56:
        case 57:
            if (inTemplate) {
                return res(null);
            }
            else {
                errors.strictNumericEscape(pos - 1, lineStart, curLine);
            }
        default:
            if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);
                let octalStr = match[0];
                let octal = parseInt(octalStr, 8);
                if (octal > 255) {
                    octalStr = octalStr.slice(0, -1);
                    octal = parseInt(octalStr, 8);
                }
                pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if (octalStr !== "0" || next === 56 || next === 57) {
                    if (inTemplate) {
                        return res(null);
                    }
                    else {
                        errors.strictNumericEscape(startPos, lineStart, curLine);
                    }
                }
                return res(String.fromCharCode(octal));
            }
            return res(String.fromCharCode(ch));
    }
}
function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos;
    let n;
    ({
        n,
        pos
    } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
        if (throwOnInvalid) {
            errors.invalidEscapeSequence(initialPos, lineStart, curLine);
        }
        else {
            pos = initialPos - 1;
        }
    }
    return {
        code: n,
        pos
    };
}
function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
        const code = input.charCodeAt(pos);
        let val;
        if (code === 95 && allowNumSeparator !== "bail") {
            const prev = input.charCodeAt(pos - 1);
            const next = input.charCodeAt(pos + 1);
            if (!allowNumSeparator) {
                if (bailOnError)
                    return {
                        n: null,
                        pos
                    };
                errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
            }
            else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
                if (bailOnError)
                    return {
                        n: null,
                        pos
                    };
                errors.unexpectedNumericSeparator(pos, lineStart, curLine);
            }
            ++pos;
            continue;
        }
        if (code >= 97) {
            val = code - 97 + 10;
        }
        else if (code >= 65) {
            val = code - 65 + 10;
        }
        else if (_isDigit(code)) {
            val = code - 48;
        }
        else {
            val = Infinity;
        }
        if (val >= radix) {
            if (val <= 9 && bailOnError) {
                return {
                    n: null,
                    pos
                };
            }
            else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
                val = 0;
            }
            else if (forceLen) {
                val = 0;
                invalid = true;
            }
            else {
                break;
            }
        }
        ++pos;
        total = total * radix + val;
    }
    if (pos === start || len != null && pos - start !== len || invalid) {
        return {
            n: null,
            pos
        };
    }
    return {
        n: total,
        pos
    };
}
function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input.charCodeAt(pos);
    let code;
    if (ch === 123) {
        ++pos;
        ({
            code,
            pos
        } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
        ++pos;
        if (code !== null && code > 0x10ffff) {
            if (throwOnInvalid) {
                errors.invalidCodePoint(pos, lineStart, curLine);
            }
            else {
                return {
                    code: null,
                    pos
                };
            }
        }
    }
    else {
        ({
            code,
            pos
        } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
        code,
        pos
    };
}
const _excluded = ["at"], _excluded2 = ["at"];
function buildPosition(pos, lineStart, curLine) {
    return new Position(curLine, pos - lineStart, pos);
}
const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);
class Token {
    constructor(state) {
        this.type = state.type;
        this.value = state.value;
        this.start = state.start;
        this.end = state.end;
        this.loc = new SourceLocation(state.startLoc, state.endLoc);
    }
}
class Tokenizer extends CommentsParser {
    constructor(options, input) {
        super();
        this.isLookahead = void 0;
        this.tokens = [];
        this.errorHandlers_readInt = {
            invalidDigit: (pos, lineStart, curLine, radix) => {
                if (!this.options.errorRecovery)
                    return false;
                this.raise(Errors.InvalidDigit, {
                    at: buildPosition(pos, lineStart, curLine),
                    radix
                });
                return true;
            },
            numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
            unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
        };
        this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
            invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
            invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
        });
        this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
            strictNumericEscape: (pos, lineStart, curLine) => {
                this.recordStrictModeErrors(Errors.StrictNumericEscape, {
                    at: buildPosition(pos, lineStart, curLine)
                });
            },
            unterminated: (pos, lineStart, curLine) => {
                throw this.raise(Errors.UnterminatedString, {
                    at: buildPosition(pos - 1, lineStart, curLine)
                });
            }
        });
        this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
            strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
            unterminated: (pos, lineStart, curLine) => {
                throw this.raise(Errors.UnterminatedTemplate, {
                    at: buildPosition(pos, lineStart, curLine)
                });
            }
        });
        this.state = new State();
        this.state.init(options);
        this.input = input;
        this.length = input.length;
        this.isLookahead = false;
    }
    pushToken(token) {
        this.tokens.length = this.state.tokensLength;
        this.tokens.push(token);
        ++this.state.tokensLength;
    }
    next() {
        this.checkKeywordEscapes();
        if (this.options.tokens) {
            this.pushToken(new Token(this.state));
        }
        this.state.lastTokStart = this.state.start;
        this.state.lastTokEndLoc = this.state.endLoc;
        this.state.lastTokStartLoc = this.state.startLoc;
        this.nextToken();
    }
    eat(type) {
        if (this.match(type)) {
            this.next();
            return true;
        }
        else {
            return false;
        }
    }
    match(type) {
        return this.state.type === type;
    }
    createLookaheadState(state) {
        return {
            pos: state.pos,
            value: null,
            type: state.type,
            start: state.start,
            end: state.end,
            context: [this.curContext()],
            inType: state.inType,
            startLoc: state.startLoc,
            lastTokEndLoc: state.lastTokEndLoc,
            curLine: state.curLine,
            lineStart: state.lineStart,
            curPosition: state.curPosition
        };
    }
    lookahead() {
        const old = this.state;
        this.state = this.createLookaheadState(old);
        this.isLookahead = true;
        this.nextToken();
        this.isLookahead = false;
        const curr = this.state;
        this.state = old;
        return curr;
    }
    nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(pos) {
        skipWhiteSpace.lastIndex = pos;
        return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
    }
    lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
    }
    nextTokenInLineStart() {
        return this.nextTokenInLineStartSince(this.state.pos);
    }
    nextTokenInLineStartSince(pos) {
        skipWhiteSpaceInLine.lastIndex = pos;
        return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
    }
    lookaheadInLineCharCode() {
        return this.input.charCodeAt(this.nextTokenInLineStart());
    }
    codePointAtPos(pos) {
        let cp = this.input.charCodeAt(pos);
        if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {
            const trail = this.input.charCodeAt(pos);
            if ((trail & 0xfc00) === 0xdc00) {
                cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);
            }
        }
        return cp;
    }
    setStrict(strict) {
        this.state.strict = strict;
        if (strict) {
            this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {
                at
            }));
            this.state.strictErrors.clear();
        }
    }
    curContext() {
        return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
        this.skipSpace();
        this.state.start = this.state.pos;
        if (!this.isLookahead)
            this.state.startLoc = this.state.curPosition();
        if (this.state.pos >= this.length) {
            this.finishToken(139);
            return;
        }
        this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment(commentEnd) {
        let startLoc;
        if (!this.isLookahead)
            startLoc = this.state.curPosition();
        const start = this.state.pos;
        const end = this.input.indexOf(commentEnd, start + 2);
        if (end === -1) {
            throw this.raise(Errors.UnterminatedComment, {
                at: this.state.curPosition()
            });
        }
        this.state.pos = end + commentEnd.length;
        lineBreakG.lastIndex = start + 2;
        while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
            ++this.state.curLine;
            this.state.lineStart = lineBreakG.lastIndex;
        }
        if (this.isLookahead)
            return;
        const comment = {
            type: "CommentBlock",
            value: this.input.slice(start + 2, end),
            start,
            end: end + commentEnd.length,
            loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
            this.pushToken(comment);
        return comment;
    }
    skipLineComment(startSkip) {
        const start = this.state.pos;
        let startLoc;
        if (!this.isLookahead)
            startLoc = this.state.curPosition();
        let ch = this.input.charCodeAt(this.state.pos += startSkip);
        if (this.state.pos < this.length) {
            while (!isNewLine(ch) && ++this.state.pos < this.length) {
                ch = this.input.charCodeAt(this.state.pos);
            }
        }
        if (this.isLookahead)
            return;
        const end = this.state.pos;
        const value = this.input.slice(start + startSkip, end);
        const comment = {
            type: "CommentLine",
            value,
            start,
            end,
            loc: new SourceLocation(startLoc, this.state.curPosition())
        };
        if (this.options.tokens)
            this.pushToken(comment);
        return comment;
    }
    skipSpace() {
        const spaceStart = this.state.pos;
        const comments = [];
        loop: while (this.state.pos < this.length) {
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
                case 32:
                case 160:
                case 9:
                    ++this.state.pos;
                    break;
                case 13:
                    if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                        ++this.state.pos;
                    }
                case 10:
                case 8232:
                case 8233:
                    ++this.state.pos;
                    ++this.state.curLine;
                    this.state.lineStart = this.state.pos;
                    break;
                case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                        case 42:
                            {
                                const comment = this.skipBlockComment("*/");
                                if (comment !== undefined) {
                                    this.addComment(comment);
                                    if (this.options.attachComment)
                                        comments.push(comment);
                                }
                                break;
                            }
                        case 47:
                            {
                                const comment = this.skipLineComment(2);
                                if (comment !== undefined) {
                                    this.addComment(comment);
                                    if (this.options.attachComment)
                                        comments.push(comment);
                                }
                                break;
                            }
                        default:
                            break loop;
                    }
                    break;
                default:
                    if (isWhitespace(ch)) {
                        ++this.state.pos;
                    }
                    else if (ch === 45 && !this.inModule && this.options.annexB) {
                        const pos = this.state.pos;
                        if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                            const comment = this.skipLineComment(3);
                            if (comment !== undefined) {
                                this.addComment(comment);
                                if (this.options.attachComment)
                                    comments.push(comment);
                            }
                        }
                        else {
                            break loop;
                        }
                    }
                    else if (ch === 60 && !this.inModule && this.options.annexB) {
                        const pos = this.state.pos;
                        if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                            const comment = this.skipLineComment(4);
                            if (comment !== undefined) {
                                this.addComment(comment);
                                if (this.options.attachComment)
                                    comments.push(comment);
                            }
                        }
                        else {
                            break loop;
                        }
                    }
                    else {
                        break loop;
                    }
            }
        }
        if (comments.length > 0) {
            const end = this.state.pos;
            const commentWhitespace = {
                start: spaceStart,
                end,
                comments,
                leadingNode: null,
                trailingNode: null,
                containingNode: null
            };
            this.state.commentStack.push(commentWhitespace);
        }
    }
    finishToken(type, val) {
        this.state.end = this.state.pos;
        this.state.endLoc = this.state.curPosition();
        const prevType = this.state.type;
        this.state.type = type;
        this.state.value = val;
        if (!this.isLookahead) {
            this.updateContext(prevType);
        }
    }
    replaceToken(type) {
        this.state.type = type;
        this.updateContext();
    }
    readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter()) {
            return;
        }
        const nextPos = this.state.pos + 1;
        const next = this.codePointAtPos(nextPos);
        if (next >= 48 && next <= 57) {
            throw this.raise(Errors.UnexpectedDigitAfterHash, {
                at: this.state.curPosition()
            });
        }
        if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
            this.expectPlugin("recordAndTuple");
            if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
                throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {
                    at: this.state.curPosition()
                });
            }
            this.state.pos += 2;
            if (next === 123) {
                this.finishToken(7);
            }
            else {
                this.finishToken(1);
            }
        }
        else if (isIdentifierStart(next)) {
            ++this.state.pos;
            this.finishToken(138, this.readWord1(next));
        }
        else if (next === 92) {
            ++this.state.pos;
            this.finishToken(138, this.readWord1());
        }
        else {
            this.finishOp(27, 1);
        }
    }
    readToken_dot() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next >= 48 && next <= 57) {
            this.readNumber(true);
            return;
        }
        if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
            this.state.pos += 3;
            this.finishToken(21);
        }
        else {
            ++this.state.pos;
            this.finishToken(16);
        }
    }
    readToken_slash() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
            this.finishOp(31, 2);
        }
        else {
            this.finishOp(56, 1);
        }
    }
    readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2)
            return false;
        let ch = this.input.charCodeAt(this.state.pos + 1);
        if (ch !== 33)
            return false;
        const start = this.state.pos;
        this.state.pos += 1;
        while (!isNewLine(ch) && ++this.state.pos < this.length) {
            ch = this.input.charCodeAt(this.state.pos);
        }
        const value = this.input.slice(start + 2, this.state.pos);
        this.finishToken(28, value);
        return true;
    }
    readToken_mult_modulo(code) {
        let type = code === 42 ? 55 : 54;
        let width = 1;
        let next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 42) {
            width++;
            next = this.input.charCodeAt(this.state.pos + 2);
            type = 57;
        }
        if (next === 61 && !this.state.inType) {
            width++;
            type = code === 37 ? 33 : 30;
        }
        this.finishOp(type, width);
    }
    readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
            if (this.input.charCodeAt(this.state.pos + 2) === 61) {
                this.finishOp(30, 3);
            }
            else {
                this.finishOp(code === 124 ? 41 : 42, 2);
            }
            return;
        }
        if (code === 124) {
            if (next === 62) {
                this.finishOp(39, 2);
                return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 125) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                    throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {
                        at: this.state.curPosition()
                    });
                }
                this.state.pos += 2;
                this.finishToken(9);
                return;
            }
            if (this.hasPlugin("recordAndTuple") && next === 93) {
                if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                    throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {
                        at: this.state.curPosition()
                    });
                }
                this.state.pos += 2;
                this.finishToken(4);
                return;
            }
        }
        if (next === 61) {
            this.finishOp(30, 2);
            return;
        }
        this.finishOp(code === 124 ? 43 : 45, 1);
    }
    readToken_caret() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61 && !this.state.inType) {
            this.finishOp(32, 2);
        }
        else if (next === 94 && this.hasPlugin(["pipelineOperator", {
                proposal: "hack",
                topicToken: "^^"
            }])) {
            this.finishOp(37, 2);
            const lookaheadCh = this.input.codePointAt(this.state.pos);
            if (lookaheadCh === 94) {
                this.unexpected();
            }
        }
        else {
            this.finishOp(44, 1);
        }
    }
    readToken_atSign() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 64 && this.hasPlugin(["pipelineOperator", {
                proposal: "hack",
                topicToken: "@@"
            }])) {
            this.finishOp(38, 2);
        }
        else {
            this.finishOp(26, 1);
        }
    }
    readToken_plus_min(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === code) {
            this.finishOp(34, 2);
            return;
        }
        if (next === 61) {
            this.finishOp(30, 2);
        }
        else {
            this.finishOp(53, 1);
        }
    }
    readToken_lt() {
        const { pos } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 60) {
            if (this.input.charCodeAt(pos + 2) === 61) {
                this.finishOp(30, 3);
                return;
            }
            this.finishOp(51, 2);
            return;
        }
        if (next === 61) {
            this.finishOp(49, 2);
            return;
        }
        this.finishOp(47, 1);
    }
    readToken_gt() {
        const { pos } = this.state;
        const next = this.input.charCodeAt(pos + 1);
        if (next === 62) {
            const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
            if (this.input.charCodeAt(pos + size) === 61) {
                this.finishOp(30, size + 1);
                return;
            }
            this.finishOp(52, size);
            return;
        }
        if (next === 61) {
            this.finishOp(49, 2);
            return;
        }
        this.finishOp(48, 1);
    }
    readToken_eq_excl(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (next === 61) {
            this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
            return;
        }
        if (code === 61 && next === 62) {
            this.state.pos += 2;
            this.finishToken(19);
            return;
        }
        this.finishOp(code === 61 ? 29 : 35, 1);
    }
    readToken_question() {
        const next = this.input.charCodeAt(this.state.pos + 1);
        const next2 = this.input.charCodeAt(this.state.pos + 2);
        if (next === 63) {
            if (next2 === 61) {
                this.finishOp(30, 3);
            }
            else {
                this.finishOp(40, 2);
            }
        }
        else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
            this.state.pos += 2;
            this.finishToken(18);
        }
        else {
            ++this.state.pos;
            this.finishToken(17);
        }
    }
    getTokenFromCode(code) {
        switch (code) {
            case 46:
                this.readToken_dot();
                return;
            case 40:
                ++this.state.pos;
                this.finishToken(10);
                return;
            case 41:
                ++this.state.pos;
                this.finishToken(11);
                return;
            case 59:
                ++this.state.pos;
                this.finishToken(13);
                return;
            case 44:
                ++this.state.pos;
                this.finishToken(12);
                return;
            case 91:
                if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                        throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {
                            at: this.state.curPosition()
                        });
                    }
                    this.state.pos += 2;
                    this.finishToken(2);
                }
                else {
                    ++this.state.pos;
                    this.finishToken(0);
                }
                return;
            case 93:
                ++this.state.pos;
                this.finishToken(3);
                return;
            case 123:
                if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
                    if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
                        throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {
                            at: this.state.curPosition()
                        });
                    }
                    this.state.pos += 2;
                    this.finishToken(6);
                }
                else {
                    ++this.state.pos;
                    this.finishToken(5);
                }
                return;
            case 125:
                ++this.state.pos;
                this.finishToken(8);
                return;
            case 58:
                if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
                    this.finishOp(15, 2);
                }
                else {
                    ++this.state.pos;
                    this.finishToken(14);
                }
                return;
            case 63:
                this.readToken_question();
                return;
            case 96:
                this.readTemplateToken();
                return;
            case 48:
                {
                    const next = this.input.charCodeAt(this.state.pos + 1);
                    if (next === 120 || next === 88) {
                        this.readRadixNumber(16);
                        return;
                    }
                    if (next === 111 || next === 79) {
                        this.readRadixNumber(8);
                        return;
                    }
                    if (next === 98 || next === 66) {
                        this.readRadixNumber(2);
                        return;
                    }
                }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                this.readNumber(false);
                return;
            case 34:
            case 39:
                this.readString(code);
                return;
            case 47:
                this.readToken_slash();
                return;
            case 37:
            case 42:
                this.readToken_mult_modulo(code);
                return;
            case 124:
            case 38:
                this.readToken_pipe_amp(code);
                return;
            case 94:
                this.readToken_caret();
                return;
            case 43:
            case 45:
                this.readToken_plus_min(code);
                return;
            case 60:
                this.readToken_lt();
                return;
            case 62:
                this.readToken_gt();
                return;
            case 61:
            case 33:
                this.readToken_eq_excl(code);
                return;
            case 126:
                this.finishOp(36, 1);
                return;
            case 64:
                this.readToken_atSign();
                return;
            case 35:
                this.readToken_numberSign();
                return;
            case 92:
                this.readWord();
                return;
            default:
                if (isIdentifierStart(code)) {
                    this.readWord(code);
                    return;
                }
        }
        throw this.raise(Errors.InvalidOrUnexpectedToken, {
            at: this.state.curPosition(),
            unexpected: String.fromCodePoint(code)
        });
    }
    finishOp(type, size) {
        const str = this.input.slice(this.state.pos, this.state.pos + size);
        this.state.pos += size;
        this.finishToken(type, str);
    }
    readRegexp() {
        const startLoc = this.state.startLoc;
        const start = this.state.start + 1;
        let escaped, inClass;
        let { pos } = this.state;
        for (;; ++pos) {
            if (pos >= this.length) {
                throw this.raise(Errors.UnterminatedRegExp, {
                    at: createPositionWithColumnOffset(startLoc, 1)
                });
            }
            const ch = this.input.charCodeAt(pos);
            if (isNewLine(ch)) {
                throw this.raise(Errors.UnterminatedRegExp, {
                    at: createPositionWithColumnOffset(startLoc, 1)
                });
            }
            if (escaped) {
                escaped = false;
            }
            else {
                if (ch === 91) {
                    inClass = true;
                }
                else if (ch === 93 && inClass) {
                    inClass = false;
                }
                else if (ch === 47 && !inClass) {
                    break;
                }
                escaped = ch === 92;
            }
        }
        const content = this.input.slice(start, pos);
        ++pos;
        let mods = "";
        const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
        while (pos < this.length) {
            const cp = this.codePointAtPos(pos);
            const char = String.fromCharCode(cp);
            if (VALID_REGEX_FLAGS.has(cp)) {
                if (cp === 118) {
                    if (mods.includes("u")) {
                        this.raise(Errors.IncompatibleRegExpUVFlags, {
                            at: nextPos()
                        });
                    }
                }
                else if (cp === 117) {
                    if (mods.includes("v")) {
                        this.raise(Errors.IncompatibleRegExpUVFlags, {
                            at: nextPos()
                        });
                    }
                }
                if (mods.includes(char)) {
                    this.raise(Errors.DuplicateRegExpFlags, {
                        at: nextPos()
                    });
                }
            }
            else if (isIdentifierChar(cp) || cp === 92) {
                this.raise(Errors.MalformedRegExpFlags, {
                    at: nextPos()
                });
            }
            else {
                break;
            }
            ++pos;
            mods += char;
        }
        this.state.pos = pos;
        this.finishToken(137, {
            pattern: content,
            flags: mods
        });
    }
    readInt(radix, len, forceLen = false, allowNumSeparator = true) {
        const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
        this.state.pos = pos;
        return n;
    }
    readRadixNumber(radix) {
        const startLoc = this.state.curPosition();
        let isBigInt = false;
        this.state.pos += 2;
        const val = this.readInt(radix);
        if (val == null) {
            this.raise(Errors.InvalidDigit, {
                at: createPositionWithColumnOffset(startLoc, 2),
                radix
            });
        }
        const next = this.input.charCodeAt(this.state.pos);
        if (next === 110) {
            ++this.state.pos;
            isBigInt = true;
        }
        else if (next === 109) {
            throw this.raise(Errors.InvalidDecimal, {
                at: startLoc
            });
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
            throw this.raise(Errors.NumberIdentifier, {
                at: this.state.curPosition()
            });
        }
        if (isBigInt) {
            const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
            this.finishToken(135, str);
            return;
        }
        this.finishToken(134, val);
    }
    readNumber(startsWithDot) {
        const start = this.state.pos;
        const startLoc = this.state.curPosition();
        let isFloat = false;
        let isBigInt = false;
        let isDecimal = false;
        let hasExponent = false;
        let isOctal = false;
        if (!startsWithDot && this.readInt(10) === null) {
            this.raise(Errors.InvalidNumber, {
                at: this.state.curPosition()
            });
        }
        const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (hasLeadingZero) {
            const integer = this.input.slice(start, this.state.pos);
            this.recordStrictModeErrors(Errors.StrictOctalLiteral, {
                at: startLoc
            });
            if (!this.state.strict) {
                const underscorePos = integer.indexOf("_");
                if (underscorePos > 0) {
                    this.raise(Errors.ZeroDigitNumericSeparator, {
                        at: createPositionWithColumnOffset(startLoc, underscorePos)
                    });
                }
            }
            isOctal = hasLeadingZero && !/[89]/.test(integer);
        }
        let next = this.input.charCodeAt(this.state.pos);
        if (next === 46 && !isOctal) {
            ++this.state.pos;
            this.readInt(10);
            isFloat = true;
            next = this.input.charCodeAt(this.state.pos);
        }
        if ((next === 69 || next === 101) && !isOctal) {
            next = this.input.charCodeAt(++this.state.pos);
            if (next === 43 || next === 45) {
                ++this.state.pos;
            }
            if (this.readInt(10) === null) {
                this.raise(Errors.InvalidOrMissingExponent, {
                    at: startLoc
                });
            }
            isFloat = true;
            hasExponent = true;
            next = this.input.charCodeAt(this.state.pos);
        }
        if (next === 110) {
            if (isFloat || hasLeadingZero) {
                this.raise(Errors.InvalidBigIntLiteral, {
                    at: startLoc
                });
            }
            ++this.state.pos;
            isBigInt = true;
        }
        if (next === 109) {
            this.expectPlugin("decimal", this.state.curPosition());
            if (hasExponent || hasLeadingZero) {
                this.raise(Errors.InvalidDecimal, {
                    at: startLoc
                });
            }
            ++this.state.pos;
            isDecimal = true;
        }
        if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
            throw this.raise(Errors.NumberIdentifier, {
                at: this.state.curPosition()
            });
        }
        const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
        if (isBigInt) {
            this.finishToken(135, str);
            return;
        }
        if (isDecimal) {
            this.finishToken(136, str);
            return;
        }
        const val = isOctal ? parseInt(str, 8) : parseFloat(str);
        this.finishToken(134, val);
    }
    readCodePoint(throwOnInvalid) {
        const { code, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
        this.state.pos = pos;
        return code;
    }
    readString(quote) {
        const { str, pos, curLine, lineStart } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
        this.state.pos = pos + 1;
        this.state.lineStart = lineStart;
        this.state.curLine = curLine;
        this.finishToken(133, str);
    }
    readTemplateContinuation() {
        if (!this.match(8)) {
            this.unexpected(null, 8);
        }
        this.state.pos--;
        this.readTemplateToken();
    }
    readTemplateToken() {
        const opening = this.input[this.state.pos];
        const { str, firstInvalidLoc, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
        this.state.pos = pos + 1;
        this.state.lineStart = lineStart;
        this.state.curLine = curLine;
        if (firstInvalidLoc) {
            this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
        }
        if (this.input.codePointAt(pos) === 96) {
            this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
        }
        else {
            this.state.pos++;
            this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
        }
    }
    recordStrictModeErrors(toParseError, { at }) {
        const index = at.index;
        if (this.state.strict && !this.state.strictErrors.has(index)) {
            this.raise(toParseError, {
                at
            });
        }
        else {
            this.state.strictErrors.set(index, [toParseError, at]);
        }
    }
    readWord1(firstCode) {
        this.state.containsEsc = false;
        let word = "";
        const start = this.state.pos;
        let chunkStart = this.state.pos;
        if (firstCode !== undefined) {
            this.state.pos += firstCode <= 0xffff ? 1 : 2;
        }
        while (this.state.pos < this.length) {
            const ch = this.codePointAtPos(this.state.pos);
            if (isIdentifierChar(ch)) {
                this.state.pos += ch <= 0xffff ? 1 : 2;
            }
            else if (ch === 92) {
                this.state.containsEsc = true;
                word += this.input.slice(chunkStart, this.state.pos);
                const escStart = this.state.curPosition();
                const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
                if (this.input.charCodeAt(++this.state.pos) !== 117) {
                    this.raise(Errors.MissingUnicodeEscape, {
                        at: this.state.curPosition()
                    });
                    chunkStart = this.state.pos - 1;
                    continue;
                }
                ++this.state.pos;
                const esc = this.readCodePoint(true);
                if (esc !== null) {
                    if (!identifierCheck(esc)) {
                        this.raise(Errors.EscapedCharNotAnIdentifier, {
                            at: escStart
                        });
                    }
                    word += String.fromCodePoint(esc);
                }
                chunkStart = this.state.pos;
            }
            else {
                break;
            }
        }
        return word + this.input.slice(chunkStart, this.state.pos);
    }
    readWord(firstCode) {
        const word = this.readWord1(firstCode);
        const type = keywords$1.get(word);
        if (type !== undefined) {
            this.finishToken(type, tokenLabelName(type));
        }
        else {
            this.finishToken(132, word);
        }
    }
    checkKeywordEscapes() {
        const { type } = this.state;
        if (tokenIsKeyword(type) && this.state.containsEsc) {
            this.raise(Errors.InvalidEscapedReservedWord, {
                at: this.state.startLoc,
                reservedWord: tokenLabelName(type)
            });
        }
    }
    raise(toParseError, raiseProperties) {
        const { at } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);
        const loc = at instanceof Position ? at : at.loc.start;
        const error = toParseError({
            loc,
            details
        });
        if (!this.options.errorRecovery)
            throw error;
        if (!this.isLookahead)
            this.state.errors.push(error);
        return error;
    }
    raiseOverwrite(toParseError, raiseProperties) {
        const { at } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);
        const loc = at instanceof Position ? at : at.loc.start;
        const pos = loc.index;
        const errors = this.state.errors;
        for (let i = errors.length - 1; i >= 0; i--) {
            const error = errors[i];
            if (error.loc.index === pos) {
                return errors[i] = toParseError({
                    loc,
                    details
                });
            }
            if (error.loc.index < pos)
                break;
        }
        return this.raise(toParseError, raiseProperties);
    }
    updateContext(prevType) { }
    unexpected(loc, type) {
        throw this.raise(Errors.UnexpectedToken, {
            expected: type ? tokenLabelName(type) : null,
            at: loc != null ? loc : this.state.startLoc
        });
    }
    expectPlugin(pluginName, loc) {
        if (this.hasPlugin(pluginName)) {
            return true;
        }
        throw this.raise(Errors.MissingPlugin, {
            at: loc != null ? loc : this.state.startLoc,
            missingPlugin: [pluginName]
        });
    }
    expectOnePlugin(pluginNames) {
        if (!pluginNames.some(name => this.hasPlugin(name))) {
            throw this.raise(Errors.MissingOneOfPlugins, {
                at: this.state.startLoc,
                missingPlugin: pluginNames
            });
        }
    }
    errorBuilder(error) {
        return (pos, lineStart, curLine) => {
            this.raise(error, {
                at: buildPosition(pos, lineStart, curLine)
            });
        };
    }
}
class ClassScope {
    constructor() {
        this.privateNames = new Set();
        this.loneAccessors = new Map();
        this.undefinedPrivateNames = new Map();
    }
}
class ClassScopeHandler {
    constructor(parser) {
        this.parser = void 0;
        this.stack = [];
        this.undefinedPrivateNames = new Map();
        this.parser = parser;
    }
    current() {
        return this.stack[this.stack.length - 1];
    }
    enter() {
        this.stack.push(new ClassScope());
    }
    exit() {
        const oldClassScope = this.stack.pop();
        const current = this.current();
        for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
            if (current) {
                if (!current.undefinedPrivateNames.has(name)) {
                    current.undefinedPrivateNames.set(name, loc);
                }
            }
            else {
                this.parser.raise(Errors.InvalidPrivateFieldResolution, {
                    at: loc,
                    identifierName: name
                });
            }
        }
    }
    declarePrivateName(name, elementType, loc) {
        const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
        let redefined = privateNames.has(name);
        if (elementType & 3) {
            const accessor = redefined && loneAccessors.get(name);
            if (accessor) {
                const oldStatic = accessor & 4;
                const newStatic = elementType & 4;
                const oldKind = accessor & 3;
                const newKind = elementType & 3;
                redefined = oldKind === newKind || oldStatic !== newStatic;
                if (!redefined)
                    loneAccessors.delete(name);
            }
            else if (!redefined) {
                loneAccessors.set(name, elementType);
            }
        }
        if (redefined) {
            this.parser.raise(Errors.PrivateNameRedeclaration, {
                at: loc,
                identifierName: name
            });
        }
        privateNames.add(name);
        undefinedPrivateNames.delete(name);
    }
    usePrivateName(name, loc) {
        let classScope;
        for (classScope of this.stack) {
            if (classScope.privateNames.has(name))
                return;
        }
        if (classScope) {
            classScope.undefinedPrivateNames.set(name, loc);
        }
        else {
            this.parser.raise(Errors.InvalidPrivateFieldResolution, {
                at: loc,
                identifierName: name
            });
        }
    }
}
class ExpressionScope {
    constructor(type = 0) {
        this.type = type;
    }
    canBeArrowParameterDeclaration() {
        return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
        return this.type === 3;
    }
}
class ArrowHeadParsingScope extends ExpressionScope {
    constructor(type) {
        super(type);
        this.declarationErrors = new Map();
    }
    recordDeclarationError(ParsingErrorClass, { at }) {
        const index = at.index;
        this.declarationErrors.set(index, [ParsingErrorClass, at]);
    }
    clearDeclarationError(index) {
        this.declarationErrors.delete(index);
    }
    iterateErrors(iterator) {
        this.declarationErrors.forEach(iterator);
    }
}
class ExpressionScopeHandler {
    constructor(parser) {
        this.parser = void 0;
        this.stack = [new ExpressionScope()];
        this.parser = parser;
    }
    enter(scope) {
        this.stack.push(scope);
    }
    exit() {
        this.stack.pop();
    }
    recordParameterInitializerError(toParseError, { at: node }) {
        const origin = {
            at: node.loc.start
        };
        const { stack } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (!scope.isCertainlyParameterDeclaration()) {
            if (scope.canBeArrowParameterDeclaration()) {
                scope.recordDeclarationError(toParseError, origin);
            }
            else {
                return;
            }
            scope = stack[--i];
        }
        this.parser.raise(toParseError, origin);
    }
    recordArrowParameterBindingError(error, { at: node }) {
        const { stack } = this;
        const scope = stack[stack.length - 1];
        const origin = {
            at: node.loc.start
        };
        if (scope.isCertainlyParameterDeclaration()) {
            this.parser.raise(error, origin);
        }
        else if (scope.canBeArrowParameterDeclaration()) {
            scope.recordDeclarationError(error, origin);
        }
        else {
            return;
        }
    }
    recordAsyncArrowParametersError({ at }) {
        const { stack } = this;
        let i = stack.length - 1;
        let scope = stack[i];
        while (scope.canBeArrowParameterDeclaration()) {
            if (scope.type === 2) {
                scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {
                    at
                });
            }
            scope = stack[--i];
        }
    }
    validateAsPattern() {
        const { stack } = this;
        const currentScope = stack[stack.length - 1];
        if (!currentScope.canBeArrowParameterDeclaration())
            return;
        currentScope.iterateErrors(([toParseError, loc]) => {
            this.parser.raise(toParseError, {
                at: loc
            });
            let i = stack.length - 2;
            let scope = stack[i];
            while (scope.canBeArrowParameterDeclaration()) {
                scope.clearDeclarationError(loc.index);
                scope = stack[--i];
            }
        });
    }
}
function newParameterDeclarationScope() {
    return new ExpressionScope(3);
}
function newArrowHeadScope() {
    return new ArrowHeadParsingScope(1);
}
function newAsyncArrowScope() {
    return new ArrowHeadParsingScope(2);
}
function newExpressionScope() {
    return new ExpressionScope();
}
class ProductionParameterHandler {
    constructor() {
        this.stacks = [];
    }
    enter(flags) {
        this.stacks.push(flags);
    }
    exit() {
        this.stacks.pop();
    }
    currentFlags() {
        return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
        return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
        return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
        return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
        return (this.currentFlags() & 8) > 0;
    }
}
function functionFlags(isAsync, isGenerator) {
    return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
}
class UtilParser extends Tokenizer {
    addExtra(node, key, value, enumerable = true) {
        if (!node)
            return;
        const extra = node.extra = node.extra || {};
        if (enumerable) {
            extra[key] = value;
        }
        else {
            Object.defineProperty(extra, key, {
                enumerable,
                value
            });
        }
    }
    isContextual(token) {
        return this.state.type === token && !this.state.containsEsc;
    }
    isUnparsedContextual(nameStart, name) {
        const nameEnd = nameStart + name.length;
        if (this.input.slice(nameStart, nameEnd) === name) {
            const nextCh = this.input.charCodeAt(nameEnd);
            return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);
        }
        return false;
    }
    isLookaheadContextual(name) {
        const next = this.nextTokenStart();
        return this.isUnparsedContextual(next, name);
    }
    eatContextual(token) {
        if (this.isContextual(token)) {
            this.next();
            return true;
        }
        return false;
    }
    expectContextual(token, toParseError) {
        if (!this.eatContextual(token)) {
            if (toParseError != null) {
                throw this.raise(toParseError, {
                    at: this.state.startLoc
                });
            }
            this.unexpected(null, token);
        }
    }
    canInsertSemicolon() {
        return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
        return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
    }
    hasFollowingLineBreak() {
        skipWhiteSpaceToLineBreak.lastIndex = this.state.end;
        return skipWhiteSpaceToLineBreak.test(this.input);
    }
    isLineTerminator() {
        return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(allowAsi = true) {
        if (allowAsi ? this.isLineTerminator() : this.eat(13))
            return;
        this.raise(Errors.MissingSemicolon, {
            at: this.state.lastTokEndLoc
        });
    }
    expect(type, loc) {
        this.eat(type) || this.unexpected(loc, type);
    }
    tryParse(fn, oldState = this.state.clone()) {
        const abortSignal = {
            node: null
        };
        try {
            const node = fn((node = null) => {
                abortSignal.node = node;
                throw abortSignal;
            });
            if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                this.state = oldState;
                this.state.tokensLength = failState.tokensLength;
                return {
                    node,
                    error: failState.errors[oldState.errors.length],
                    thrown: false,
                    aborted: false,
                    failState
                };
            }
            return {
                node,
                error: null,
                thrown: false,
                aborted: false,
                failState: null
            };
        }
        catch (error) {
            const failState = this.state;
            this.state = oldState;
            if (error instanceof SyntaxError) {
                return {
                    node: null,
                    error,
                    thrown: true,
                    aborted: false,
                    failState
                };
            }
            if (error === abortSignal) {
                return {
                    node: abortSignal.node,
                    error: null,
                    thrown: false,
                    aborted: true,
                    failState
                };
            }
            throw error;
        }
    }
    checkExpressionErrors(refExpressionErrors, andThrow) {
        if (!refExpressionErrors)
            return false;
        const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
        const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
        if (!andThrow) {
            return hasErrors;
        }
        if (shorthandAssignLoc != null) {
            this.raise(Errors.InvalidCoverInitializedName, {
                at: shorthandAssignLoc
            });
        }
        if (doubleProtoLoc != null) {
            this.raise(Errors.DuplicateProto, {
                at: doubleProtoLoc
            });
        }
        if (privateKeyLoc != null) {
            this.raise(Errors.UnexpectedPrivateField, {
                at: privateKeyLoc
            });
        }
        if (optionalParametersLoc != null) {
            this.unexpected(optionalParametersLoc);
        }
    }
    isLiteralPropertyName() {
        return tokenIsLiteralPropertyName(this.state.type);
    }
    isPrivateName(node) {
        return node.type === "PrivateName";
    }
    getPrivateNameSV(node) {
        return node.id.name;
    }
    hasPropertyAsPrivateName(node) {
        return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
    }
    isObjectProperty(node) {
        return node.type === "ObjectProperty";
    }
    isObjectMethod(node) {
        return node.type === "ObjectMethod";
    }
    initializeScopes(inModule = this.options.sourceType === "module") {
        const oldLabels = this.state.labels;
        this.state.labels = [];
        const oldExportedIdentifiers = this.exportedIdentifiers;
        this.exportedIdentifiers = new Set();
        const oldInModule = this.inModule;
        this.inModule = inModule;
        const oldScope = this.scope;
        const ScopeHandler = this.getScopeHandler();
        this.scope = new ScopeHandler(this, inModule);
        const oldProdParam = this.prodParam;
        this.prodParam = new ProductionParameterHandler();
        const oldClassScope = this.classScope;
        this.classScope = new ClassScopeHandler(this);
        const oldExpressionScope = this.expressionScope;
        this.expressionScope = new ExpressionScopeHandler(this);
        return () => {
            this.state.labels = oldLabels;
            this.exportedIdentifiers = oldExportedIdentifiers;
            this.inModule = oldInModule;
            this.scope = oldScope;
            this.prodParam = oldProdParam;
            this.classScope = oldClassScope;
            this.expressionScope = oldExpressionScope;
        };
    }
    enterInitialScopes() {
        let paramFlags = 0;
        if (this.inModule) {
            paramFlags |= 2;
        }
        this.scope.enter(1);
        this.prodParam.enter(paramFlags);
    }
    checkDestructuringPrivate(refExpressionErrors) {
        const { privateKeyLoc } = refExpressionErrors;
        if (privateKeyLoc !== null) {
            this.expectPlugin("destructuringPrivate", privateKeyLoc);
        }
    }
}
class ExpressionErrors {
    constructor() {
        this.shorthandAssignLoc = null;
        this.doubleProtoLoc = null;
        this.privateKeyLoc = null;
        this.optionalParametersLoc = null;
    }
}
class Node$1 {
    constructor(parser, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        this.loc = new SourceLocation(loc);
        if (parser != null && parser.options.ranges)
            this.range = [pos, 0];
        if (parser != null && parser.filename)
            this.loc.filename = parser.filename;
    }
}
const NodePrototype = Node$1.prototype;
{
    NodePrototype.__clone = function () {
        const newNode = new Node$1(undefined, this.start, this.loc.start);
        const keys = Object.keys(this);
        for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
                newNode[key] = this[key];
            }
        }
        return newNode;
    };
}
function clonePlaceholder(node) {
    return cloneIdentifier(node);
}
function cloneIdentifier(node) {
    const { type, start, end, loc, range, extra, name } = node;
    const cloned = Object.create(NodePrototype);
    cloned.type = type;
    cloned.start = start;
    cloned.end = end;
    cloned.loc = loc;
    cloned.range = range;
    cloned.extra = extra;
    cloned.name = name;
    if (type === "Placeholder") {
        cloned.expectedNode = node.expectedNode;
    }
    return cloned;
}
function cloneStringLiteral(node) {
    const { type, start, end, loc, range, extra } = node;
    if (type === "Placeholder") {
        return clonePlaceholder(node);
    }
    const cloned = Object.create(NodePrototype);
    cloned.type = type;
    cloned.start = start;
    cloned.end = end;
    cloned.loc = loc;
    cloned.range = range;
    if (node.raw !== undefined) {
        cloned.raw = node.raw;
    }
    else {
        cloned.extra = extra;
    }
    cloned.value = node.value;
    return cloned;
}
class NodeUtils extends UtilParser {
    startNode() {
        return new Node$1(this, this.state.start, this.state.startLoc);
    }
    startNodeAt(loc) {
        return new Node$1(this, loc.index, loc);
    }
    startNodeAtNode(type) {
        return this.startNodeAt(type.loc.start);
    }
    finishNode(node, type) {
        return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
    }
    finishNodeAt(node, type, endLoc) {
        node.type = type;
        node.end = endLoc.index;
        node.loc.end = endLoc;
        if (this.options.ranges)
            node.range[1] = endLoc.index;
        if (this.options.attachComment)
            this.processComment(node);
        return node;
    }
    resetStartLocation(node, startLoc) {
        node.start = startLoc.index;
        node.loc.start = startLoc;
        if (this.options.ranges)
            node.range[0] = startLoc.index;
    }
    resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
        node.end = endLoc.index;
        node.loc.end = endLoc;
        if (this.options.ranges)
            node.range[1] = endLoc.index;
    }
    resetStartLocationFromNode(node, locationNode) {
        this.resetStartLocation(node, locationNode.loc.start);
    }
}
const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
const FlowErrors = ParseErrorEnum `flow`({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
    AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`,
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
    EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
    EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
    EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
    EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
    EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
    EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
    EnumStringMemberInconsistentlyInitialized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    PatternIsOptional: Object.assign({
        message: "A binding pattern parameter cannot be optional in an implementation signature."
    }, {
        reasonCode: "OptionalBindingPattern"
    }),
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`,
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".',
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
});
function isEsModuleType(bodyElement) {
    return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
}
function hasTypeImportKind(node) {
    return node.importKind === "type" || node.importKind === "typeof";
}
const exportSuggestions = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
};
function partition(list, test) {
    const list1 = [];
    const list2 = [];
    for (let i = 0; i < list.length; i++) {
        (test(list[i], i, list) ? list1 : list2).push(list[i]);
    }
    return [list1, list2];
}
const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
var flow = superClass => class FlowParserMixin extends superClass {
    constructor(...args) {
        super(...args);
        this.flowPragma = undefined;
    }
    getScopeHandler() {
        return FlowScopeHandler;
    }
    shouldParseTypes() {
        return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
    }
    shouldParseEnums() {
        return !!this.getPluginOption("flow", "enums");
    }
    finishToken(type, val) {
        if (type !== 133 && type !== 13 && type !== 28) {
            if (this.flowPragma === undefined) {
                this.flowPragma = null;
            }
        }
        super.finishToken(type, val);
    }
    addComment(comment) {
        if (this.flowPragma === undefined) {
            const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
            if (!matches)
                ;
            else if (matches[1] === "flow") {
                this.flowPragma = "flow";
            }
            else if (matches[1] === "noflow") {
                this.flowPragma = "noflow";
            }
            else {
                throw new Error("Unexpected flow pragma");
            }
        }
        super.addComment(comment);
    }
    flowParseTypeInitialiser(tok) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(tok || 14);
        const type = this.flowParseType();
        this.state.inType = oldInType;
        return type;
    }
    flowParsePredicate() {
        const node = this.startNode();
        const moduloLoc = this.state.startLoc;
        this.next();
        this.expectContextual(110);
        if (this.state.lastTokStart > moduloLoc.index + 1) {
            this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {
                at: moduloLoc
            });
        }
        if (this.eat(10)) {
            node.value = super.parseExpression();
            this.expect(11);
            return this.finishNode(node, "DeclaredPredicate");
        }
        else {
            return this.finishNode(node, "InferredPredicate");
        }
    }
    flowParseTypeAndPredicateInitialiser() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        this.expect(14);
        let type = null;
        let predicate = null;
        if (this.match(54)) {
            this.state.inType = oldInType;
            predicate = this.flowParsePredicate();
        }
        else {
            type = this.flowParseType();
            this.state.inType = oldInType;
            if (this.match(54)) {
                predicate = this.flowParsePredicate();
            }
        }
        return [type, predicate];
    }
    flowParseDeclareClass(node) {
        this.next();
        this.flowParseInterfaceish(node, true);
        return this.finishNode(node, "DeclareClass");
    }
    flowParseDeclareFunction(node) {
        this.next();
        const id = node.id = this.parseIdentifier();
        const typeNode = this.startNode();
        const typeContainer = this.startNode();
        if (this.match(47)) {
            typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        else {
            typeNode.typeParameters = null;
        }
        this.expect(10);
        const tmp = this.flowParseFunctionTypeParams();
        typeNode.params = tmp.params;
        typeNode.rest = tmp.rest;
        typeNode.this = tmp._this;
        this.expect(11);
        [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
        typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
        id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
        this.resetEndLocation(id);
        this.semicolon();
        this.scope.declareName(node.id.name, 2048, node.id.loc.start);
        return this.finishNode(node, "DeclareFunction");
    }
    flowParseDeclare(node, insideModule) {
        if (this.match(80)) {
            return this.flowParseDeclareClass(node);
        }
        else if (this.match(68)) {
            return this.flowParseDeclareFunction(node);
        }
        else if (this.match(74)) {
            return this.flowParseDeclareVariable(node);
        }
        else if (this.eatContextual(127)) {
            if (this.match(16)) {
                return this.flowParseDeclareModuleExports(node);
            }
            else {
                if (insideModule) {
                    this.raise(FlowErrors.NestedDeclareModule, {
                        at: this.state.lastTokStartLoc
                    });
                }
                return this.flowParseDeclareModule(node);
            }
        }
        else if (this.isContextual(130)) {
            return this.flowParseDeclareTypeAlias(node);
        }
        else if (this.isContextual(131)) {
            return this.flowParseDeclareOpaqueType(node);
        }
        else if (this.isContextual(129)) {
            return this.flowParseDeclareInterface(node);
        }
        else if (this.match(82)) {
            return this.flowParseDeclareExportDeclaration(node, insideModule);
        }
        else {
            this.unexpected();
        }
    }
    flowParseDeclareVariable(node) {
        this.next();
        node.id = this.flowParseTypeAnnotatableIdentifier(true);
        this.scope.declareName(node.id.name, 5, node.id.loc.start);
        this.semicolon();
        return this.finishNode(node, "DeclareVariable");
    }
    flowParseDeclareModule(node) {
        this.scope.enter(0);
        if (this.match(133)) {
            node.id = super.parseExprAtom();
        }
        else {
            node.id = this.parseIdentifier();
        }
        const bodyNode = node.body = this.startNode();
        const body = bodyNode.body = [];
        this.expect(5);
        while (!this.match(8)) {
            let bodyNode = this.startNode();
            if (this.match(83)) {
                this.next();
                if (!this.isContextual(130) && !this.match(87)) {
                    this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {
                        at: this.state.lastTokStartLoc
                    });
                }
                super.parseImport(bodyNode);
            }
            else {
                this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
                bodyNode = this.flowParseDeclare(bodyNode, true);
            }
            body.push(bodyNode);
        }
        this.scope.exit();
        this.expect(8);
        this.finishNode(bodyNode, "BlockStatement");
        let kind = null;
        let hasModuleExport = false;
        body.forEach(bodyElement => {
            if (isEsModuleType(bodyElement)) {
                if (kind === "CommonJS") {
                    this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                        at: bodyElement
                    });
                }
                kind = "ES";
            }
            else if (bodyElement.type === "DeclareModuleExports") {
                if (hasModuleExport) {
                    this.raise(FlowErrors.DuplicateDeclareModuleExports, {
                        at: bodyElement
                    });
                }
                if (kind === "ES") {
                    this.raise(FlowErrors.AmbiguousDeclareModuleKind, {
                        at: bodyElement
                    });
                }
                kind = "CommonJS";
                hasModuleExport = true;
            }
        });
        node.kind = kind || "CommonJS";
        return this.finishNode(node, "DeclareModule");
    }
    flowParseDeclareExportDeclaration(node, insideModule) {
        this.expect(82);
        if (this.eat(65)) {
            if (this.match(68) || this.match(80)) {
                node.declaration = this.flowParseDeclare(this.startNode());
            }
            else {
                node.declaration = this.flowParseType();
                this.semicolon();
            }
            node.default = true;
            return this.finishNode(node, "DeclareExportDeclaration");
        }
        else {
            if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
                const label = this.state.value;
                throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {
                    at: this.state.startLoc,
                    unsupportedExportKind: label,
                    suggestion: exportSuggestions[label]
                });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
                node.declaration = this.flowParseDeclare(this.startNode());
                node.default = false;
                return this.finishNode(node, "DeclareExportDeclaration");
            }
            else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
                node = this.parseExport(node, null);
                if (node.type === "ExportNamedDeclaration") {
                    node.type = "ExportDeclaration";
                    node.default = false;
                    delete node.exportKind;
                }
                node.type = "Declare" + node.type;
                return node;
            }
        }
        this.unexpected();
    }
    flowParseDeclareModuleExports(node) {
        this.next();
        this.expectContextual(111);
        node.typeAnnotation = this.flowParseTypeAnnotation();
        this.semicolon();
        return this.finishNode(node, "DeclareModuleExports");
    }
    flowParseDeclareTypeAlias(node) {
        this.next();
        const finished = this.flowParseTypeAlias(node);
        finished.type = "DeclareTypeAlias";
        return finished;
    }
    flowParseDeclareOpaqueType(node) {
        this.next();
        const finished = this.flowParseOpaqueType(node, true);
        finished.type = "DeclareOpaqueType";
        return finished;
    }
    flowParseDeclareInterface(node) {
        this.next();
        this.flowParseInterfaceish(node, false);
        return this.finishNode(node, "DeclareInterface");
    }
    flowParseInterfaceish(node, isClass) {
        node.id = this.flowParseRestrictedIdentifier(!isClass, true);
        this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        else {
            node.typeParameters = null;
        }
        node.extends = [];
        if (this.eat(81)) {
            do {
                node.extends.push(this.flowParseInterfaceExtends());
            } while (!isClass && this.eat(12));
        }
        if (isClass) {
            node.implements = [];
            node.mixins = [];
            if (this.eatContextual(117)) {
                do {
                    node.mixins.push(this.flowParseInterfaceExtends());
                } while (this.eat(12));
            }
            if (this.eatContextual(113)) {
                do {
                    node.implements.push(this.flowParseInterfaceExtends());
                } while (this.eat(12));
            }
        }
        node.body = this.flowParseObjectType({
            allowStatic: isClass,
            allowExact: false,
            allowSpread: false,
            allowProto: isClass,
            allowInexact: false
        });
    }
    flowParseInterfaceExtends() {
        const node = this.startNode();
        node.id = this.flowParseQualifiedTypeIdentifier();
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
        }
        else {
            node.typeParameters = null;
        }
        return this.finishNode(node, "InterfaceExtends");
    }
    flowParseInterface(node) {
        this.flowParseInterfaceish(node, false);
        return this.finishNode(node, "InterfaceDeclaration");
    }
    checkNotUnderscore(word) {
        if (word === "_") {
            this.raise(FlowErrors.UnexpectedReservedUnderscore, {
                at: this.state.startLoc
            });
        }
    }
    checkReservedType(word, startLoc, declaration) {
        if (!reservedTypes.has(word))
            return;
        this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {
            at: startLoc,
            reservedType: word
        });
    }
    flowParseRestrictedIdentifier(liberal, declaration) {
        this.checkReservedType(this.state.value, this.state.startLoc, declaration);
        return this.parseIdentifier(liberal);
    }
    flowParseTypeAlias(node) {
        node.id = this.flowParseRestrictedIdentifier(false, true);
        this.scope.declareName(node.id.name, 8201, node.id.loc.start);
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        else {
            node.typeParameters = null;
        }
        node.right = this.flowParseTypeInitialiser(29);
        this.semicolon();
        return this.finishNode(node, "TypeAlias");
    }
    flowParseOpaqueType(node, declare) {
        this.expectContextual(130);
        node.id = this.flowParseRestrictedIdentifier(true, true);
        this.scope.declareName(node.id.name, 8201, node.id.loc.start);
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        else {
            node.typeParameters = null;
        }
        node.supertype = null;
        if (this.match(14)) {
            node.supertype = this.flowParseTypeInitialiser(14);
        }
        node.impltype = null;
        if (!declare) {
            node.impltype = this.flowParseTypeInitialiser(29);
        }
        this.semicolon();
        return this.finishNode(node, "OpaqueType");
    }
    flowParseTypeParameter(requireDefault = false) {
        const nodeStartLoc = this.state.startLoc;
        const node = this.startNode();
        const variance = this.flowParseVariance();
        const ident = this.flowParseTypeAnnotatableIdentifier();
        node.name = ident.name;
        node.variance = variance;
        node.bound = ident.typeAnnotation;
        if (this.match(29)) {
            this.eat(29);
            node.default = this.flowParseType();
        }
        else {
            if (requireDefault) {
                this.raise(FlowErrors.MissingTypeParamDefault, {
                    at: nodeStartLoc
                });
            }
        }
        return this.finishNode(node, "TypeParameter");
    }
    flowParseTypeParameterDeclaration() {
        const oldInType = this.state.inType;
        const node = this.startNode();
        node.params = [];
        this.state.inType = true;
        if (this.match(47) || this.match(142)) {
            this.next();
        }
        else {
            this.unexpected();
        }
        let defaultRequired = false;
        do {
            const typeParameter = this.flowParseTypeParameter(defaultRequired);
            node.params.push(typeParameter);
            if (typeParameter.default) {
                defaultRequired = true;
            }
            if (!this.match(48)) {
                this.expect(12);
            }
        } while (!this.match(48));
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node, "TypeParameterDeclaration");
    }
    flowParseTypeParameterInstantiation() {
        const node = this.startNode();
        const oldInType = this.state.inType;
        node.params = [];
        this.state.inType = true;
        this.expect(47);
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = false;
        while (!this.match(48)) {
            node.params.push(this.flowParseType());
            if (!this.match(48)) {
                this.expect(12);
            }
        }
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node, "TypeParameterInstantiation");
    }
    flowParseTypeParameterInstantiationCallOrNew() {
        const node = this.startNode();
        const oldInType = this.state.inType;
        node.params = [];
        this.state.inType = true;
        this.expect(47);
        while (!this.match(48)) {
            node.params.push(this.flowParseTypeOrImplicitInstantiation());
            if (!this.match(48)) {
                this.expect(12);
            }
        }
        this.expect(48);
        this.state.inType = oldInType;
        return this.finishNode(node, "TypeParameterInstantiation");
    }
    flowParseInterfaceType() {
        const node = this.startNode();
        this.expectContextual(129);
        node.extends = [];
        if (this.eat(81)) {
            do {
                node.extends.push(this.flowParseInterfaceExtends());
            } while (this.eat(12));
        }
        node.body = this.flowParseObjectType({
            allowStatic: false,
            allowExact: false,
            allowSpread: false,
            allowProto: false,
            allowInexact: false
        });
        return this.finishNode(node, "InterfaceTypeAnnotation");
    }
    flowParseObjectPropertyKey() {
        return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
    }
    flowParseObjectTypeIndexer(node, isStatic, variance) {
        node.static = isStatic;
        if (this.lookahead().type === 14) {
            node.id = this.flowParseObjectPropertyKey();
            node.key = this.flowParseTypeInitialiser();
        }
        else {
            node.id = null;
            node.key = this.flowParseType();
        }
        this.expect(3);
        node.value = this.flowParseTypeInitialiser();
        node.variance = variance;
        return this.finishNode(node, "ObjectTypeIndexer");
    }
    flowParseObjectTypeInternalSlot(node, isStatic) {
        node.static = isStatic;
        node.id = this.flowParseObjectPropertyKey();
        this.expect(3);
        this.expect(3);
        if (this.match(47) || this.match(10)) {
            node.method = true;
            node.optional = false;
            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
        }
        else {
            node.method = false;
            if (this.eat(17)) {
                node.optional = true;
            }
            node.value = this.flowParseTypeInitialiser();
        }
        return this.finishNode(node, "ObjectTypeInternalSlot");
    }
    flowParseObjectTypeMethodish(node) {
        node.params = [];
        node.rest = null;
        node.typeParameters = null;
        node.this = null;
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        this.expect(10);
        if (this.match(78)) {
            node.this = this.flowParseFunctionTypeParam(true);
            node.this.name = null;
            if (!this.match(11)) {
                this.expect(12);
            }
        }
        while (!this.match(11) && !this.match(21)) {
            node.params.push(this.flowParseFunctionTypeParam(false));
            if (!this.match(11)) {
                this.expect(12);
            }
        }
        if (this.eat(21)) {
            node.rest = this.flowParseFunctionTypeParam(false);
        }
        this.expect(11);
        node.returnType = this.flowParseTypeInitialiser();
        return this.finishNode(node, "FunctionTypeAnnotation");
    }
    flowParseObjectTypeCallProperty(node, isStatic) {
        const valueNode = this.startNode();
        node.static = isStatic;
        node.value = this.flowParseObjectTypeMethodish(valueNode);
        return this.finishNode(node, "ObjectTypeCallProperty");
    }
    flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const nodeStart = this.startNode();
        nodeStart.callProperties = [];
        nodeStart.properties = [];
        nodeStart.indexers = [];
        nodeStart.internalSlots = [];
        let endDelim;
        let exact;
        let inexact = false;
        if (allowExact && this.match(6)) {
            this.expect(6);
            endDelim = 9;
            exact = true;
        }
        else {
            this.expect(5);
            endDelim = 8;
            exact = false;
        }
        nodeStart.exact = exact;
        while (!this.match(endDelim)) {
            let isStatic = false;
            let protoStartLoc = null;
            let inexactStartLoc = null;
            const node = this.startNode();
            if (allowProto && this.isContextual(118)) {
                const lookahead = this.lookahead();
                if (lookahead.type !== 14 && lookahead.type !== 17) {
                    this.next();
                    protoStartLoc = this.state.startLoc;
                    allowStatic = false;
                }
            }
            if (allowStatic && this.isContextual(106)) {
                const lookahead = this.lookahead();
                if (lookahead.type !== 14 && lookahead.type !== 17) {
                    this.next();
                    isStatic = true;
                }
            }
            const variance = this.flowParseVariance();
            if (this.eat(0)) {
                if (protoStartLoc != null) {
                    this.unexpected(protoStartLoc);
                }
                if (this.eat(0)) {
                    if (variance) {
                        this.unexpected(variance.loc.start);
                    }
                    nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
                }
                else {
                    nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
                }
            }
            else if (this.match(10) || this.match(47)) {
                if (protoStartLoc != null) {
                    this.unexpected(protoStartLoc);
                }
                if (variance) {
                    this.unexpected(variance.loc.start);
                }
                nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
            }
            else {
                let kind = "init";
                if (this.isContextual(99) || this.isContextual(104)) {
                    const lookahead = this.lookahead();
                    if (tokenIsLiteralPropertyName(lookahead.type)) {
                        kind = this.state.value;
                        this.next();
                    }
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
                if (propOrInexact === null) {
                    inexact = true;
                    inexactStartLoc = this.state.lastTokStartLoc;
                }
                else {
                    nodeStart.properties.push(propOrInexact);
                }
            }
            this.flowObjectTypeSemicolon();
            if (inexactStartLoc && !this.match(8) && !this.match(9)) {
                this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {
                    at: inexactStartLoc
                });
            }
        }
        this.expect(endDelim);
        if (allowSpread) {
            nodeStart.inexact = inexact;
        }
        const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
        this.state.inType = oldInType;
        return out;
    }
    flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
        if (this.eat(21)) {
            const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
            if (isInexactToken) {
                if (!allowSpread) {
                    this.raise(FlowErrors.InexactInsideNonObject, {
                        at: this.state.lastTokStartLoc
                    });
                }
                else if (!allowInexact) {
                    this.raise(FlowErrors.InexactInsideExact, {
                        at: this.state.lastTokStartLoc
                    });
                }
                if (variance) {
                    this.raise(FlowErrors.InexactVariance, {
                        at: variance
                    });
                }
                return null;
            }
            if (!allowSpread) {
                this.raise(FlowErrors.UnexpectedSpreadType, {
                    at: this.state.lastTokStartLoc
                });
            }
            if (protoStartLoc != null) {
                this.unexpected(protoStartLoc);
            }
            if (variance) {
                this.raise(FlowErrors.SpreadVariance, {
                    at: variance
                });
            }
            node.argument = this.flowParseType();
            return this.finishNode(node, "ObjectTypeSpreadProperty");
        }
        else {
            node.key = this.flowParseObjectPropertyKey();
            node.static = isStatic;
            node.proto = protoStartLoc != null;
            node.kind = kind;
            let optional = false;
            if (this.match(47) || this.match(10)) {
                node.method = true;
                if (protoStartLoc != null) {
                    this.unexpected(protoStartLoc);
                }
                if (variance) {
                    this.unexpected(variance.loc.start);
                }
                node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
                if (kind === "get" || kind === "set") {
                    this.flowCheckGetterSetterParams(node);
                }
                if (!allowSpread && node.key.name === "constructor" && node.value.this) {
                    this.raise(FlowErrors.ThisParamBannedInConstructor, {
                        at: node.value.this
                    });
                }
            }
            else {
                if (kind !== "init")
                    this.unexpected();
                node.method = false;
                if (this.eat(17)) {
                    optional = true;
                }
                node.value = this.flowParseTypeInitialiser();
                node.variance = variance;
            }
            node.optional = optional;
            return this.finishNode(node, "ObjectTypeProperty");
        }
    }
    flowCheckGetterSetterParams(property) {
        const paramCount = property.kind === "get" ? 0 : 1;
        const length = property.value.params.length + (property.value.rest ? 1 : 0);
        if (property.value.this) {
            this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {
                at: property.value.this
            });
        }
        if (length !== paramCount) {
            this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
                at: property
            });
        }
        if (property.kind === "set" && property.value.rest) {
            this.raise(Errors.BadSetterRestParameter, {
                at: property
            });
        }
    }
    flowObjectTypeSemicolon() {
        if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
            this.unexpected();
        }
    }
    flowParseQualifiedTypeIdentifier(startLoc, id) {
        var _startLoc;
        (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
        let node = id || this.flowParseRestrictedIdentifier(true);
        while (this.eat(16)) {
            const node2 = this.startNodeAt(startLoc);
            node2.qualification = node;
            node2.id = this.flowParseRestrictedIdentifier(true);
            node = this.finishNode(node2, "QualifiedTypeIdentifier");
        }
        return node;
    }
    flowParseGenericType(startLoc, id) {
        const node = this.startNodeAt(startLoc);
        node.typeParameters = null;
        node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
        }
        return this.finishNode(node, "GenericTypeAnnotation");
    }
    flowParseTypeofType() {
        const node = this.startNode();
        this.expect(87);
        node.argument = this.flowParsePrimaryType();
        return this.finishNode(node, "TypeofTypeAnnotation");
    }
    flowParseTupleType() {
        const node = this.startNode();
        node.types = [];
        this.expect(0);
        while (this.state.pos < this.length && !this.match(3)) {
            node.types.push(this.flowParseType());
            if (this.match(3))
                break;
            this.expect(12);
        }
        this.expect(3);
        return this.finishNode(node, "TupleTypeAnnotation");
    }
    flowParseFunctionTypeParam(first) {
        let name = null;
        let optional = false;
        let typeAnnotation = null;
        const node = this.startNode();
        const lh = this.lookahead();
        const isThis = this.state.type === 78;
        if (lh.type === 14 || lh.type === 17) {
            if (isThis && !first) {
                this.raise(FlowErrors.ThisParamMustBeFirst, {
                    at: node
                });
            }
            name = this.parseIdentifier(isThis);
            if (this.eat(17)) {
                optional = true;
                if (isThis) {
                    this.raise(FlowErrors.ThisParamMayNotBeOptional, {
                        at: node
                    });
                }
            }
            typeAnnotation = this.flowParseTypeInitialiser();
        }
        else {
            typeAnnotation = this.flowParseType();
        }
        node.name = name;
        node.optional = optional;
        node.typeAnnotation = typeAnnotation;
        return this.finishNode(node, "FunctionTypeParam");
    }
    reinterpretTypeAsFunctionTypeParam(type) {
        const node = this.startNodeAt(type.loc.start);
        node.name = null;
        node.optional = false;
        node.typeAnnotation = type;
        return this.finishNode(node, "FunctionTypeParam");
    }
    flowParseFunctionTypeParams(params = []) {
        let rest = null;
        let _this = null;
        if (this.match(78)) {
            _this = this.flowParseFunctionTypeParam(true);
            _this.name = null;
            if (!this.match(11)) {
                this.expect(12);
            }
        }
        while (!this.match(11) && !this.match(21)) {
            params.push(this.flowParseFunctionTypeParam(false));
            if (!this.match(11)) {
                this.expect(12);
            }
        }
        if (this.eat(21)) {
            rest = this.flowParseFunctionTypeParam(false);
        }
        return {
            params,
            rest,
            _this
        };
    }
    flowIdentToTypeAnnotation(startLoc, node, id) {
        switch (id.name) {
            case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
            case "bool":
            case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
            case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
            case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
            case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
            case "string":
                return this.finishNode(node, "StringTypeAnnotation");
            case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
            default:
                this.checkNotUnderscore(id.name);
                return this.flowParseGenericType(startLoc, id);
        }
    }
    flowParsePrimaryType() {
        const startLoc = this.state.startLoc;
        const node = this.startNode();
        let tmp;
        let type;
        let isGroupedType = false;
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        switch (this.state.type) {
            case 5:
                return this.flowParseObjectType({
                    allowStatic: false,
                    allowExact: false,
                    allowSpread: true,
                    allowProto: false,
                    allowInexact: true
                });
            case 6:
                return this.flowParseObjectType({
                    allowStatic: false,
                    allowExact: true,
                    allowSpread: true,
                    allowProto: false,
                    allowInexact: false
                });
            case 0:
                this.state.noAnonFunctionType = false;
                type = this.flowParseTupleType();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
                return type;
            case 47:
                node.typeParameters = this.flowParseTypeParameterDeclaration();
                this.expect(10);
                tmp = this.flowParseFunctionTypeParams();
                node.params = tmp.params;
                node.rest = tmp.rest;
                node.this = tmp._this;
                this.expect(11);
                this.expect(19);
                node.returnType = this.flowParseType();
                return this.finishNode(node, "FunctionTypeAnnotation");
            case 10:
                this.next();
                if (!this.match(11) && !this.match(21)) {
                    if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                        const token = this.lookahead().type;
                        isGroupedType = token !== 17 && token !== 14;
                    }
                    else {
                        isGroupedType = true;
                    }
                }
                if (isGroupedType) {
                    this.state.noAnonFunctionType = false;
                    type = this.flowParseType();
                    this.state.noAnonFunctionType = oldNoAnonFunctionType;
                    if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                        this.expect(11);
                        return type;
                    }
                    else {
                        this.eat(12);
                    }
                }
                if (type) {
                    tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
                }
                else {
                    tmp = this.flowParseFunctionTypeParams();
                }
                node.params = tmp.params;
                node.rest = tmp.rest;
                node.this = tmp._this;
                this.expect(11);
                this.expect(19);
                node.returnType = this.flowParseType();
                node.typeParameters = null;
                return this.finishNode(node, "FunctionTypeAnnotation");
            case 133:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
            case 85:
            case 86:
                node.value = this.match(85);
                this.next();
                return this.finishNode(node, "BooleanLiteralTypeAnnotation");
            case 53:
                if (this.state.value === "-") {
                    this.next();
                    if (this.match(134)) {
                        return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                    }
                    if (this.match(135)) {
                        return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                    }
                    throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {
                        at: this.state.startLoc
                    });
                }
                this.unexpected();
                return;
            case 134:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
            case 135:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
            case 88:
                this.next();
                return this.finishNode(node, "VoidTypeAnnotation");
            case 84:
                this.next();
                return this.finishNode(node, "NullLiteralTypeAnnotation");
            case 78:
                this.next();
                return this.finishNode(node, "ThisTypeAnnotation");
            case 55:
                this.next();
                return this.finishNode(node, "ExistsTypeAnnotation");
            case 87:
                return this.flowParseTypeofType();
            default:
                if (tokenIsKeyword(this.state.type)) {
                    const label = tokenLabelName(this.state.type);
                    this.next();
                    return super.createIdentifier(node, label);
                }
                else if (tokenIsIdentifier(this.state.type)) {
                    if (this.isContextual(129)) {
                        return this.flowParseInterfaceType();
                    }
                    return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
                }
        }
        this.unexpected();
    }
    flowParsePostfixType() {
        const startLoc = this.state.startLoc;
        let type = this.flowParsePrimaryType();
        let seenOptionalIndexedAccess = false;
        while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
            const node = this.startNodeAt(startLoc);
            const optional = this.eat(18);
            seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
            this.expect(0);
            if (!optional && this.match(3)) {
                node.elementType = type;
                this.next();
                type = this.finishNode(node, "ArrayTypeAnnotation");
            }
            else {
                node.objectType = type;
                node.indexType = this.flowParseType();
                this.expect(3);
                if (seenOptionalIndexedAccess) {
                    node.optional = optional;
                    type = this.finishNode(node, "OptionalIndexedAccessType");
                }
                else {
                    type = this.finishNode(node, "IndexedAccessType");
                }
            }
        }
        return type;
    }
    flowParsePrefixType() {
        const node = this.startNode();
        if (this.eat(17)) {
            node.typeAnnotation = this.flowParsePrefixType();
            return this.finishNode(node, "NullableTypeAnnotation");
        }
        else {
            return this.flowParsePostfixType();
        }
    }
    flowParseAnonFunctionWithoutParens() {
        const param = this.flowParsePrefixType();
        if (!this.state.noAnonFunctionType && this.eat(19)) {
            const node = this.startNodeAt(param.loc.start);
            node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
            node.rest = null;
            node.this = null;
            node.returnType = this.flowParseType();
            node.typeParameters = null;
            return this.finishNode(node, "FunctionTypeAnnotation");
        }
        return param;
    }
    flowParseIntersectionType() {
        const node = this.startNode();
        this.eat(45);
        const type = this.flowParseAnonFunctionWithoutParens();
        node.types = [type];
        while (this.eat(45)) {
            node.types.push(this.flowParseAnonFunctionWithoutParens());
        }
        return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
    }
    flowParseUnionType() {
        const node = this.startNode();
        this.eat(43);
        const type = this.flowParseIntersectionType();
        node.types = [type];
        while (this.eat(43)) {
            node.types.push(this.flowParseIntersectionType());
        }
        return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
    }
    flowParseType() {
        const oldInType = this.state.inType;
        this.state.inType = true;
        const type = this.flowParseUnionType();
        this.state.inType = oldInType;
        return type;
    }
    flowParseTypeOrImplicitInstantiation() {
        if (this.state.type === 132 && this.state.value === "_") {
            const startLoc = this.state.startLoc;
            const node = this.parseIdentifier();
            return this.flowParseGenericType(startLoc, node);
        }
        else {
            return this.flowParseType();
        }
    }
    flowParseTypeAnnotation() {
        const node = this.startNode();
        node.typeAnnotation = this.flowParseTypeInitialiser();
        return this.finishNode(node, "TypeAnnotation");
    }
    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
        const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
        if (this.match(14)) {
            ident.typeAnnotation = this.flowParseTypeAnnotation();
            this.resetEndLocation(ident);
        }
        return ident;
    }
    typeCastToParameter(node) {
        node.expression.typeAnnotation = node.typeAnnotation;
        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
        return node.expression;
    }
    flowParseVariance() {
        let variance = null;
        if (this.match(53)) {
            variance = this.startNode();
            if (this.state.value === "+") {
                variance.kind = "plus";
            }
            else {
                variance.kind = "minus";
            }
            this.next();
            return this.finishNode(variance, "Variance");
        }
        return variance;
    }
    parseFunctionBody(node, allowExpressionBody, isMethod = false) {
        if (allowExpressionBody) {
            this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
            return;
        }
        super.parseFunctionBody(node, false, isMethod);
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
        if (this.match(14)) {
            const typeNode = this.startNode();
            [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
            node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
        }
        return super.parseFunctionBodyAndFinish(node, type, isMethod);
    }
    parseStatementLike(flags) {
        if (this.state.strict && this.isContextual(129)) {
            const lookahead = this.lookahead();
            if (tokenIsKeywordOrIdentifier(lookahead.type)) {
                const node = this.startNode();
                this.next();
                return this.flowParseInterface(node);
            }
        }
        else if (this.shouldParseEnums() && this.isContextual(126)) {
            const node = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(node);
        }
        const stmt = super.parseStatementLike(flags);
        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
            this.flowPragma = null;
        }
        return stmt;
    }
    parseExpressionStatement(node, expr, decorators) {
        if (expr.type === "Identifier") {
            if (expr.name === "declare") {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
                    return this.flowParseDeclare(node);
                }
            }
            else if (tokenIsIdentifier(this.state.type)) {
                if (expr.name === "interface") {
                    return this.flowParseInterface(node);
                }
                else if (expr.name === "type") {
                    return this.flowParseTypeAlias(node);
                }
                else if (expr.name === "opaque") {
                    return this.flowParseOpaqueType(node, false);
                }
            }
        }
        return super.parseExpressionStatement(node, expr, decorators);
    }
    shouldParseExportDeclaration() {
        const { type } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
            return !this.state.containsEsc;
        }
        return super.shouldParseExportDeclaration();
    }
    isExportDefaultSpecifier() {
        const { type } = this.state;
        if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
            return this.state.containsEsc;
        }
        return super.isExportDefaultSpecifier();
    }
    parseExportDefaultExpression() {
        if (this.shouldParseEnums() && this.isContextual(126)) {
            const node = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(node);
        }
        return super.parseExportDefaultExpression();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
        if (!this.match(17))
            return expr;
        if (this.state.maybeInArrowParameters) {
            const nextCh = this.lookaheadCharCode();
            if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
                this.setOptionalParametersError(refExpressionErrors);
                return expr;
            }
        }
        this.expect(17);
        const state = this.state.clone();
        const originalNoArrowAt = this.state.noArrowAt;
        const node = this.startNodeAt(startLoc);
        let { consequent, failed } = this.tryParseConditionalConsequent();
        let [valid, invalid] = this.getArrowLikeExpressions(consequent);
        if (failed || invalid.length > 0) {
            const noArrowAt = [...originalNoArrowAt];
            if (invalid.length > 0) {
                this.state = state;
                this.state.noArrowAt = noArrowAt;
                for (let i = 0; i < invalid.length; i++) {
                    noArrowAt.push(invalid[i].start);
                }
                ({
                    consequent,
                    failed
                } = this.tryParseConditionalConsequent());
                [valid, invalid] = this.getArrowLikeExpressions(consequent);
            }
            if (failed && valid.length > 1) {
                this.raise(FlowErrors.AmbiguousConditionalArrow, {
                    at: state.startLoc
                });
            }
            if (failed && valid.length === 1) {
                this.state = state;
                noArrowAt.push(valid[0].start);
                this.state.noArrowAt = noArrowAt;
                ({
                    consequent,
                    failed
                } = this.tryParseConditionalConsequent());
            }
        }
        this.getArrowLikeExpressions(consequent, true);
        this.state.noArrowAt = originalNoArrowAt;
        this.expect(14);
        node.test = expr;
        node.consequent = consequent;
        node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
        return this.finishNode(node, "ConditionalExpression");
    }
    tryParseConditionalConsequent() {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        const consequent = this.parseMaybeAssignAllowIn();
        const failed = !this.match(14);
        this.state.noArrowParamsConversionAt.pop();
        return {
            consequent,
            failed
        };
    }
    getArrowLikeExpressions(node, disallowInvalid) {
        const stack = [node];
        const arrows = [];
        while (stack.length !== 0) {
            const node = stack.pop();
            if (node.type === "ArrowFunctionExpression") {
                if (node.typeParameters || !node.returnType) {
                    this.finishArrowValidation(node);
                }
                else {
                    arrows.push(node);
                }
                stack.push(node.body);
            }
            else if (node.type === "ConditionalExpression") {
                stack.push(node.consequent);
                stack.push(node.alternate);
            }
        }
        if (disallowInvalid) {
            arrows.forEach(node => this.finishArrowValidation(node));
            return [arrows, []];
        }
        return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
    }
    finishArrowValidation(node) {
        var _node$extra;
        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
        this.scope.enter(2 | 4);
        super.checkParams(node, false, true);
        this.scope.exit();
    }
    forwardNoArrowParamsConversionAt(node, parse) {
        let result;
        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            result = parse();
            this.state.noArrowParamsConversionAt.pop();
        }
        else {
            result = parse();
        }
        return result;
    }
    parseParenItem(node, startLoc) {
        node = super.parseParenItem(node, startLoc);
        if (this.eat(17)) {
            node.optional = true;
            this.resetEndLocation(node);
        }
        if (this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            typeCastNode.expression = node;
            typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
            return this.finishNode(typeCastNode, "TypeCastExpression");
        }
        return node;
    }
    assertModuleNodeAllowed(node) {
        if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
            return;
        }
        super.assertModuleNodeAllowed(node);
    }
    parseExportDeclaration(node) {
        if (this.isContextual(130)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            if (this.match(5)) {
                node.specifiers = this.parseExportSpecifiers(true);
                super.parseExportFrom(node);
                return null;
            }
            else {
                return this.flowParseTypeAlias(declarationNode);
            }
        }
        else if (this.isContextual(131)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseOpaqueType(declarationNode, false);
        }
        else if (this.isContextual(129)) {
            node.exportKind = "type";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseInterface(declarationNode);
        }
        else if (this.shouldParseEnums() && this.isContextual(126)) {
            node.exportKind = "value";
            const declarationNode = this.startNode();
            this.next();
            return this.flowParseEnumDeclaration(declarationNode);
        }
        else {
            return super.parseExportDeclaration(node);
        }
    }
    eatExportStar(node) {
        if (super.eatExportStar(node))
            return true;
        if (this.isContextual(130) && this.lookahead().type === 55) {
            node.exportKind = "type";
            this.next();
            this.next();
            return true;
        }
        return false;
    }
    maybeParseExportNamespaceSpecifier(node) {
        const { startLoc } = this.state;
        const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
        if (hasNamespace && node.exportKind === "type") {
            this.unexpected(startLoc);
        }
        return hasNamespace;
    }
    parseClassId(node, isStatement, optionalId) {
        super.parseClassId(node, isStatement, optionalId);
        if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
    }
    parseClassMember(classBody, member, state) {
        const { startLoc } = this.state;
        if (this.isContextual(125)) {
            if (super.parseClassMemberFromModifier(classBody, member)) {
                return;
            }
            member.declare = true;
        }
        super.parseClassMember(classBody, member, state);
        if (member.declare) {
            if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
                this.raise(FlowErrors.DeclareClassElement, {
                    at: startLoc
                });
            }
            else if (member.value) {
                this.raise(FlowErrors.DeclareClassFieldInitializer, {
                    at: member.value
                });
            }
        }
    }
    isIterator(word) {
        return word === "iterator" || word === "asyncIterator";
    }
    readIterator() {
        const word = super.readWord1();
        const fullWord = "@@" + word;
        if (!this.isIterator(word) || !this.state.inType) {
            this.raise(Errors.InvalidIdentifier, {
                at: this.state.curPosition(),
                identifierName: fullWord
            });
        }
        this.finishToken(132, fullWord);
    }
    getTokenFromCode(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 123 && next === 124) {
            this.finishOp(6, 2);
        }
        else if (this.state.inType && (code === 62 || code === 60)) {
            this.finishOp(code === 62 ? 48 : 47, 1);
        }
        else if (this.state.inType && code === 63) {
            if (next === 46) {
                this.finishOp(18, 2);
            }
            else {
                this.finishOp(17, 1);
            }
        }
        else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
            this.state.pos += 2;
            this.readIterator();
        }
        else {
            super.getTokenFromCode(code);
        }
    }
    isAssignable(node, isBinding) {
        if (node.type === "TypeCastExpression") {
            return this.isAssignable(node.expression, isBinding);
        }
        else {
            return super.isAssignable(node, isBinding);
        }
    }
    toAssignable(node, isLHS = false) {
        if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
            node.left = this.typeCastToParameter(node.left);
        }
        super.toAssignable(node, isLHS);
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
            const expr = exprList[i];
            if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
                exprList[i] = this.typeCastToParameter(expr);
            }
        }
        super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    toReferencedList(exprList, isParenthesizedExpr) {
        for (let i = 0; i < exprList.length; i++) {
            var _expr$extra;
            const expr = exprList[i];
            if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
                this.raise(FlowErrors.TypeCastInPattern, {
                    at: expr.typeAnnotation
                });
            }
        }
        return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
        if (canBePattern && !this.state.maybeInArrowParameters) {
            this.toReferencedList(node.elements);
        }
        return node;
    }
    isValidLVal(type, isParenthesized, binding) {
        return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
    }
    parseClassProperty(node) {
        if (this.match(14)) {
            node.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassProperty(node);
    }
    parseClassPrivateProperty(node) {
        if (this.match(14)) {
            node.typeAnnotation = this.flowParseTypeAnnotation();
        }
        return super.parseClassPrivateProperty(node);
    }
    isClassMethod() {
        return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
        return this.match(14) || super.isClassProperty();
    }
    isNonstaticConstructor(method) {
        return !this.match(14) && super.isNonstaticConstructor(method);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        if (method.variance) {
            this.unexpected(method.variance.loc.start);
        }
        delete method.variance;
        if (this.match(47)) {
            method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
        if (method.params && isConstructor) {
            const params = method.params;
            if (params.length > 0 && this.isThisParam(params[0])) {
                this.raise(FlowErrors.ThisParamBannedInConstructor, {
                    at: method
                });
            }
        }
        else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
            const params = method.value.params;
            if (params.length > 0 && this.isThisParam(params[0])) {
                this.raise(FlowErrors.ThisParamBannedInConstructor, {
                    at: method
                });
            }
        }
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        if (method.variance) {
            this.unexpected(method.variance.loc.start);
        }
        delete method.variance;
        if (this.match(47)) {
            method.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    parseClassSuper(node) {
        super.parseClassSuper(node);
        if (node.superClass && this.match(47)) {
            node.superTypeParameters = this.flowParseTypeParameterInstantiation();
        }
        if (this.isContextual(113)) {
            this.next();
            const implemented = node.implements = [];
            do {
                const node = this.startNode();
                node.id = this.flowParseRestrictedIdentifier(true);
                if (this.match(47)) {
                    node.typeParameters = this.flowParseTypeParameterInstantiation();
                }
                else {
                    node.typeParameters = null;
                }
                implemented.push(this.finishNode(node, "ClassImplements"));
            } while (this.eat(12));
        }
    }
    checkGetterSetterParams(method) {
        super.checkGetterSetterParams(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length > 0) {
            const param = params[0];
            if (this.isThisParam(param) && method.kind === "get") {
                this.raise(FlowErrors.GetterMayNotHaveThisParam, {
                    at: param
                });
            }
            else if (this.isThisParam(param)) {
                this.raise(FlowErrors.SetterMayNotHaveThisParam, {
                    at: param
                });
            }
        }
    }
    parsePropertyNamePrefixOperator(node) {
        node.variance = this.flowParseVariance();
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        if (prop.variance) {
            this.unexpected(prop.variance.loc.start);
        }
        delete prop.variance;
        let typeParameters;
        if (this.match(47) && !isAccessor) {
            typeParameters = this.flowParseTypeParameterDeclaration();
            if (!this.match(10))
                this.unexpected();
        }
        const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
        if (typeParameters) {
            (result.value || result).typeParameters = typeParameters;
        }
        return result;
    }
    parseAssignableListItemTypes(param) {
        if (this.eat(17)) {
            if (param.type !== "Identifier") {
                this.raise(FlowErrors.PatternIsOptional, {
                    at: param
                });
            }
            if (this.isThisParam(param)) {
                this.raise(FlowErrors.ThisParamMayNotBeOptional, {
                    at: param
                });
            }
            param.optional = true;
        }
        if (this.match(14)) {
            param.typeAnnotation = this.flowParseTypeAnnotation();
        }
        else if (this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamAnnotationRequired, {
                at: param
            });
        }
        if (this.match(29) && this.isThisParam(param)) {
            this.raise(FlowErrors.ThisParamNoDefault, {
                at: param
            });
        }
        this.resetEndLocation(param);
        return param;
    }
    parseMaybeDefault(startLoc, left) {
        const node = super.parseMaybeDefault(startLoc, left);
        if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
            this.raise(FlowErrors.TypeBeforeInitializer, {
                at: node.typeAnnotation
            });
        }
        return node;
    }
    checkImportReflection(node) {
        super.checkImportReflection(node);
        if (node.module && node.importKind !== "value") {
            this.raise(FlowErrors.ImportReflectionHasImportType, {
                at: node.specifiers[0].loc.start
            });
        }
    }
    parseImportSpecifierLocal(node, specifier, type) {
        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
        node.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    isPotentialImportPhase(isExport) {
        if (super.isPotentialImportPhase(isExport))
            return true;
        if (this.isContextual(130)) {
            if (!isExport)
                return true;
            const ch = this.lookaheadCharCode();
            return ch === 123 || ch === 42;
        }
        return !isExport && this.isContextual(87);
    }
    applyImportPhase(node, isExport, phase, loc) {
        super.applyImportPhase(node, isExport, phase, loc);
        if (isExport) {
            if (!phase && this.match(65)) {
                return;
            }
            node.exportKind = phase === "type" ? phase : "value";
        }
        else {
            if (phase === "type" && this.match(55))
                this.unexpected();
            node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
        }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
        const firstIdent = specifier.imported;
        let specifierTypeKind = null;
        if (firstIdent.type === "Identifier") {
            if (firstIdent.name === "type") {
                specifierTypeKind = "type";
            }
            else if (firstIdent.name === "typeof") {
                specifierTypeKind = "typeof";
            }
        }
        let isBinding = false;
        if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
            const as_ident = this.parseIdentifier(true);
            if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
                specifier.imported = as_ident;
                specifier.importKind = specifierTypeKind;
                specifier.local = cloneIdentifier(as_ident);
            }
            else {
                specifier.imported = firstIdent;
                specifier.importKind = null;
                specifier.local = this.parseIdentifier();
            }
        }
        else {
            if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
                specifier.imported = this.parseIdentifier(true);
                specifier.importKind = specifierTypeKind;
            }
            else {
                if (importedIsString) {
                    throw this.raise(Errors.ImportBindingIsString, {
                        at: specifier,
                        importName: firstIdent.value
                    });
                }
                specifier.imported = firstIdent;
                specifier.importKind = null;
            }
            if (this.eatContextual(93)) {
                specifier.local = this.parseIdentifier();
            }
            else {
                isBinding = true;
                specifier.local = cloneIdentifier(specifier.imported);
            }
        }
        const specifierIsTypeImport = hasTypeImportKind(specifier);
        if (isInTypeOnlyImport && specifierIsTypeImport) {
            this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {
                at: specifier
            });
        }
        if (isInTypeOnlyImport || specifierIsTypeImport) {
            this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
        }
        if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
            this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
        }
        return this.finishImportSpecifier(specifier, "ImportSpecifier");
    }
    parseBindingAtom() {
        switch (this.state.type) {
            case 78:
                return this.parseIdentifier(true);
            default:
                return super.parseBindingAtom();
        }
    }
    parseFunctionParams(node, isConstructor) {
        const kind = node.kind;
        if (kind !== "get" && kind !== "set" && this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterDeclaration();
        }
        super.parseFunctionParams(node, isConstructor);
    }
    parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (this.match(14)) {
            decl.id.typeAnnotation = this.flowParseTypeAnnotation();
            this.resetEndLocation(decl.id);
        }
    }
    parseAsyncArrowFromCallExpression(node, call) {
        if (this.match(14)) {
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            node.returnType = this.flowParseTypeAnnotation();
            this.state.noAnonFunctionType = oldNoAnonFunctionType;
        }
        return super.parseAsyncArrowFromCallExpression(node, call);
    }
    shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx;
        let state = null;
        let jsx;
        if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
            state = this.state.clone();
            jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!jsx.error)
                return jsx.node;
            const { context } = this.state;
            const currentContext = context[context.length - 1];
            if (currentContext === types.j_oTag || currentContext === types.j_expr) {
                context.pop();
            }
        }
        if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {
            var _jsx2, _jsx3;
            state = state || this.state.clone();
            let typeParameters;
            const arrow = this.tryParse(abort => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                    const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                    this.resetStartLocationFromNode(result, typeParameters);
                    return result;
                });
                if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized)
                    abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
                if (expr.type !== "ArrowFunctionExpression")
                    abort();
                expr.typeParameters = typeParameters;
                this.resetStartLocationFromNode(expr, typeParameters);
                return arrowExpression;
            }, state);
            let arrowExpression = null;
            if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
                if (!arrow.error && !arrow.aborted) {
                    if (arrow.node.async) {
                        this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {
                            at: typeParameters
                        });
                    }
                    return arrow.node;
                }
                arrowExpression = arrow.node;
            }
            if ((_jsx2 = jsx) != null && _jsx2.node) {
                this.state = jsx.failState;
                return jsx.node;
            }
            if (arrowExpression) {
                this.state = arrow.failState;
                return arrowExpression;
            }
            if ((_jsx3 = jsx) != null && _jsx3.thrown)
                throw jsx.error;
            if (arrow.thrown)
                throw arrow.error;
            throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {
                at: typeParameters
            });
        }
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
    }
    parseArrow(node) {
        if (this.match(14)) {
            const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
                this.state.noAnonFunctionType = oldNoAnonFunctionType;
                if (this.canInsertSemicolon())
                    this.unexpected();
                if (!this.match(19))
                    this.unexpected();
                return typeNode;
            });
            if (result.thrown)
                return null;
            if (result.error)
                this.state = result.failState;
            node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
        }
        return super.parseArrow(node);
    }
    shouldParseArrow(params) {
        return this.match(14) || super.shouldParseArrow(params);
    }
    setArrowFunctionParameters(node, params) {
        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            node.params = params;
        }
        else {
            super.setArrowFunctionParameters(node, params);
        }
    }
    checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {
            return;
        }
        for (let i = 0; i < node.params.length; i++) {
            if (this.isThisParam(node.params[i]) && i > 0) {
                this.raise(FlowErrors.ThisParamMustBeFirst, {
                    at: node.params[i]
                });
            }
        }
        super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
    }
    parseParenAndDistinguishExpression(canBeArrow) {
        return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);
    }
    parseSubscripts(base, startLoc, noCalls) {
        if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.arguments = super.parseCallExpressionArguments(11, false);
            base = this.finishNode(node, "CallExpression");
        }
        else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
            const state = this.state.clone();
            const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
            if (!arrow.error && !arrow.aborted)
                return arrow.node;
            const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
            if (result.node && !result.error)
                return result.node;
            if (arrow.node) {
                this.state = arrow.failState;
                return arrow.node;
            }
            if (result.node) {
                this.state = result.failState;
                return result.node;
            }
            throw arrow.error || result.error;
        }
        return super.parseSubscripts(base, startLoc, noCalls);
    }
    parseSubscript(base, startLoc, noCalls, subscriptState) {
        if (this.match(18) && this.isLookaheadToken_lt()) {
            subscriptState.optionalChainMember = true;
            if (noCalls) {
                subscriptState.stop = true;
                return base;
            }
            this.next();
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.typeArguments = this.flowParseTypeParameterInstantiation();
            this.expect(10);
            node.arguments = this.parseCallExpressionArguments(11, false);
            node.optional = true;
            return this.finishCallExpression(node, true);
        }
        else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            const result = this.tryParse(() => {
                node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
                this.expect(10);
                node.arguments = super.parseCallExpressionArguments(11, false);
                if (subscriptState.optionalChainMember) {
                    node.optional = false;
                }
                return this.finishCallExpression(node, subscriptState.optionalChainMember);
            });
            if (result.node) {
                if (result.error)
                    this.state = result.failState;
                return result.node;
            }
        }
        return super.parseSubscript(base, startLoc, noCalls, subscriptState);
    }
    parseNewCallee(node) {
        super.parseNewCallee(node);
        let targs = null;
        if (this.shouldParseTypes() && this.match(47)) {
            targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
        }
        node.typeArguments = targs;
    }
    parseAsyncArrowWithTypeParameters(startLoc) {
        const node = this.startNodeAt(startLoc);
        this.parseFunctionParams(node, false);
        if (!this.parseArrow(node))
            return;
        return super.parseArrowExpression(node, undefined, true);
    }
    readToken_mult_modulo(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 42 && next === 47 && this.state.hasFlowComment) {
            this.state.hasFlowComment = false;
            this.state.pos += 2;
            this.nextToken();
            return;
        }
        super.readToken_mult_modulo(code);
    }
    readToken_pipe_amp(code) {
        const next = this.input.charCodeAt(this.state.pos + 1);
        if (code === 124 && next === 125) {
            this.finishOp(9, 2);
            return;
        }
        super.readToken_pipe_amp(code);
    }
    parseTopLevel(file, program) {
        const fileNode = super.parseTopLevel(file, program);
        if (this.state.hasFlowComment) {
            this.raise(FlowErrors.UnterminatedFlowComment, {
                at: this.state.curPosition()
            });
        }
        return fileNode;
    }
    skipBlockComment() {
        if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
            if (this.state.hasFlowComment) {
                throw this.raise(FlowErrors.NestedFlowComment, {
                    at: this.state.startLoc
                });
            }
            this.hasFlowCommentCompletion();
            const commentSkip = this.skipFlowComment();
            if (commentSkip) {
                this.state.pos += commentSkip;
                this.state.hasFlowComment = true;
            }
            return;
        }
        return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
    }
    skipFlowComment() {
        const { pos } = this.state;
        let shiftToFirstNonWhiteSpace = 2;
        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
            shiftToFirstNonWhiteSpace++;
        }
        const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
        const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
        if (ch2 === 58 && ch3 === 58) {
            return shiftToFirstNonWhiteSpace + 2;
        }
        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
            return shiftToFirstNonWhiteSpace + 12;
        }
        if (ch2 === 58 && ch3 !== 58) {
            return shiftToFirstNonWhiteSpace;
        }
        return false;
    }
    hasFlowCommentCompletion() {
        const end = this.input.indexOf("*/", this.state.pos);
        if (end === -1) {
            throw this.raise(Errors.UnterminatedComment, {
                at: this.state.curPosition()
            });
        }
    }
    flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
        this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {
            at: loc,
            memberName,
            enumName
        });
    }
    flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
        return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({
            at: loc
        }, enumContext));
    }
    flowEnumErrorNumberMemberNotInitialized(loc, { enumName, memberName }) {
        this.raise(FlowErrors.EnumNumberMemberNotInitialized, {
            at: loc,
            enumName,
            memberName
        });
    }
    flowEnumErrorStringMemberInconsistentlyInitialized(node, { enumName }) {
        this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, {
            at: node,
            enumName
        });
    }
    flowEnumMemberInit() {
        const startLoc = this.state.startLoc;
        const endOfInit = () => this.match(12) || this.match(8);
        switch (this.state.type) {
            case 134:
                {
                    const literal = this.parseNumericLiteral(this.state.value);
                    if (endOfInit()) {
                        return {
                            type: "number",
                            loc: literal.loc.start,
                            value: literal
                        };
                    }
                    return {
                        type: "invalid",
                        loc: startLoc
                    };
                }
            case 133:
                {
                    const literal = this.parseStringLiteral(this.state.value);
                    if (endOfInit()) {
                        return {
                            type: "string",
                            loc: literal.loc.start,
                            value: literal
                        };
                    }
                    return {
                        type: "invalid",
                        loc: startLoc
                    };
                }
            case 85:
            case 86:
                {
                    const literal = this.parseBooleanLiteral(this.match(85));
                    if (endOfInit()) {
                        return {
                            type: "boolean",
                            loc: literal.loc.start,
                            value: literal
                        };
                    }
                    return {
                        type: "invalid",
                        loc: startLoc
                    };
                }
            default:
                return {
                    type: "invalid",
                    loc: startLoc
                };
        }
    }
    flowEnumMemberRaw() {
        const loc = this.state.startLoc;
        const id = this.parseIdentifier(true);
        const init = this.eat(29) ? this.flowEnumMemberInit() : {
            type: "none",
            loc
        };
        return {
            id,
            init
        };
    }
    flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
        const { explicitType } = context;
        if (explicitType === null) {
            return;
        }
        if (explicitType !== expectedType) {
            this.flowEnumErrorInvalidMemberInitializer(loc, context);
        }
    }
    flowEnumMembers({ enumName, explicitType }) {
        const seenNames = new Set();
        const members = {
            booleanMembers: [],
            numberMembers: [],
            stringMembers: [],
            defaultedMembers: []
        };
        let hasUnknownMembers = false;
        while (!this.match(8)) {
            if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
            }
            const memberNode = this.startNode();
            const { id, init } = this.flowEnumMemberRaw();
            const memberName = id.name;
            if (memberName === "") {
                continue;
            }
            if (/^[a-z]/.test(memberName)) {
                this.raise(FlowErrors.EnumInvalidMemberName, {
                    at: id,
                    memberName,
                    suggestion: memberName[0].toUpperCase() + memberName.slice(1),
                    enumName
                });
            }
            if (seenNames.has(memberName)) {
                this.raise(FlowErrors.EnumDuplicateMemberName, {
                    at: id,
                    memberName,
                    enumName
                });
            }
            seenNames.add(memberName);
            const context = {
                enumName,
                explicitType,
                memberName
            };
            memberNode.id = id;
            switch (init.type) {
                case "boolean":
                    {
                        this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
                        memberNode.init = init.value;
                        members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                        break;
                    }
                case "number":
                    {
                        this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
                        memberNode.init = init.value;
                        members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                        break;
                    }
                case "string":
                    {
                        this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
                        memberNode.init = init.value;
                        members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                        break;
                    }
                case "invalid":
                    {
                        throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                    }
                case "none":
                    {
                        switch (explicitType) {
                            case "boolean":
                                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                                break;
                            case "number":
                                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                                break;
                            default:
                                members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                        }
                    }
            }
            if (!this.match(8)) {
                this.expect(12);
            }
        }
        return {
            members,
            hasUnknownMembers
        };
    }
    flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
        if (initializedMembers.length === 0) {
            return defaultedMembers;
        }
        else if (defaultedMembers.length === 0) {
            return initializedMembers;
        }
        else if (defaultedMembers.length > initializedMembers.length) {
            for (const member of initializedMembers) {
                this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
                    enumName
                });
            }
            return defaultedMembers;
        }
        else {
            for (const member of defaultedMembers) {
                this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
                    enumName
                });
            }
            return initializedMembers;
        }
    }
    flowEnumParseExplicitType({ enumName }) {
        if (!this.eatContextual(102))
            return null;
        if (!tokenIsIdentifier(this.state.type)) {
            throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {
                at: this.state.startLoc,
                enumName
            });
        }
        const { value } = this.state;
        this.next();
        if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
            this.raise(FlowErrors.EnumInvalidExplicitType, {
                at: this.state.startLoc,
                enumName,
                invalidEnumType: value
            });
        }
        return value;
    }
    flowEnumBody(node, id) {
        const enumName = id.name;
        const nameLoc = id.loc.start;
        const explicitType = this.flowEnumParseExplicitType({
            enumName
        });
        this.expect(5);
        const { members, hasUnknownMembers } = this.flowEnumMembers({
            enumName,
            explicitType
        });
        node.hasUnknownMembers = hasUnknownMembers;
        switch (explicitType) {
            case "boolean":
                node.explicitType = true;
                node.members = members.booleanMembers;
                this.expect(8);
                return this.finishNode(node, "EnumBooleanBody");
            case "number":
                node.explicitType = true;
                node.members = members.numberMembers;
                this.expect(8);
                return this.finishNode(node, "EnumNumberBody");
            case "string":
                node.explicitType = true;
                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                    enumName
                });
                this.expect(8);
                return this.finishNode(node, "EnumStringBody");
            case "symbol":
                node.members = members.defaultedMembers;
                this.expect(8);
                return this.finishNode(node, "EnumSymbolBody");
            default:
                {
                    const empty = () => {
                        node.members = [];
                        this.expect(8);
                        return this.finishNode(node, "EnumStringBody");
                    };
                    node.explicitType = false;
                    const boolsLen = members.booleanMembers.length;
                    const numsLen = members.numberMembers.length;
                    const strsLen = members.stringMembers.length;
                    const defaultedLen = members.defaultedMembers.length;
                    if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
                        return empty();
                    }
                    else if (!boolsLen && !numsLen) {
                        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                            enumName
                        });
                        this.expect(8);
                        return this.finishNode(node, "EnumStringBody");
                    }
                    else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                        for (const member of members.defaultedMembers) {
                            this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                                enumName,
                                memberName: member.id.name
                            });
                        }
                        node.members = members.booleanMembers;
                        this.expect(8);
                        return this.finishNode(node, "EnumBooleanBody");
                    }
                    else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                        for (const member of members.defaultedMembers) {
                            this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                                enumName,
                                memberName: member.id.name
                            });
                        }
                        node.members = members.numberMembers;
                        this.expect(8);
                        return this.finishNode(node, "EnumNumberBody");
                    }
                    else {
                        this.raise(FlowErrors.EnumInconsistentMemberValues, {
                            at: nameLoc,
                            enumName
                        });
                        return empty();
                    }
                }
        }
    }
    flowParseEnumDeclaration(node) {
        const id = this.parseIdentifier();
        node.id = id;
        node.body = this.flowEnumBody(this.startNode(), id);
        return this.finishNode(node, "EnumDeclaration");
    }
    isLookaheadToken_lt() {
        const next = this.nextTokenStart();
        if (this.input.charCodeAt(next) === 60) {
            const afterNext = this.input.charCodeAt(next + 1);
            return afterNext !== 60 && afterNext !== 61;
        }
        return false;
    }
    maybeUnwrapTypeCastExpression(node) {
        return node.type === "TypeCastExpression" ? node.expression : node;
    }
};
const entities = {
    __proto__: null,
    quot: "\u0022",
    amp: "&",
    apos: "\u0027",
    lt: "<",
    gt: ">",
    nbsp: "\u00A0",
    iexcl: "\u00A1",
    cent: "\u00A2",
    pound: "\u00A3",
    curren: "\u00A4",
    yen: "\u00A5",
    brvbar: "\u00A6",
    sect: "\u00A7",
    uml: "\u00A8",
    copy: "\u00A9",
    ordf: "\u00AA",
    laquo: "\u00AB",
    not: "\u00AC",
    shy: "\u00AD",
    reg: "\u00AE",
    macr: "\u00AF",
    deg: "\u00B0",
    plusmn: "\u00B1",
    sup2: "\u00B2",
    sup3: "\u00B3",
    acute: "\u00B4",
    micro: "\u00B5",
    para: "\u00B6",
    middot: "\u00B7",
    cedil: "\u00B8",
    sup1: "\u00B9",
    ordm: "\u00BA",
    raquo: "\u00BB",
    frac14: "\u00BC",
    frac12: "\u00BD",
    frac34: "\u00BE",
    iquest: "\u00BF",
    Agrave: "\u00C0",
    Aacute: "\u00C1",
    Acirc: "\u00C2",
    Atilde: "\u00C3",
    Auml: "\u00C4",
    Aring: "\u00C5",
    AElig: "\u00C6",
    Ccedil: "\u00C7",
    Egrave: "\u00C8",
    Eacute: "\u00C9",
    Ecirc: "\u00CA",
    Euml: "\u00CB",
    Igrave: "\u00CC",
    Iacute: "\u00CD",
    Icirc: "\u00CE",
    Iuml: "\u00CF",
    ETH: "\u00D0",
    Ntilde: "\u00D1",
    Ograve: "\u00D2",
    Oacute: "\u00D3",
    Ocirc: "\u00D4",
    Otilde: "\u00D5",
    Ouml: "\u00D6",
    times: "\u00D7",
    Oslash: "\u00D8",
    Ugrave: "\u00D9",
    Uacute: "\u00DA",
    Ucirc: "\u00DB",
    Uuml: "\u00DC",
    Yacute: "\u00DD",
    THORN: "\u00DE",
    szlig: "\u00DF",
    agrave: "\u00E0",
    aacute: "\u00E1",
    acirc: "\u00E2",
    atilde: "\u00E3",
    auml: "\u00E4",
    aring: "\u00E5",
    aelig: "\u00E6",
    ccedil: "\u00E7",
    egrave: "\u00E8",
    eacute: "\u00E9",
    ecirc: "\u00EA",
    euml: "\u00EB",
    igrave: "\u00EC",
    iacute: "\u00ED",
    icirc: "\u00EE",
    iuml: "\u00EF",
    eth: "\u00F0",
    ntilde: "\u00F1",
    ograve: "\u00F2",
    oacute: "\u00F3",
    ocirc: "\u00F4",
    otilde: "\u00F5",
    ouml: "\u00F6",
    divide: "\u00F7",
    oslash: "\u00F8",
    ugrave: "\u00F9",
    uacute: "\u00FA",
    ucirc: "\u00FB",
    uuml: "\u00FC",
    yacute: "\u00FD",
    thorn: "\u00FE",
    yuml: "\u00FF",
    OElig: "\u0152",
    oelig: "\u0153",
    Scaron: "\u0160",
    scaron: "\u0161",
    Yuml: "\u0178",
    fnof: "\u0192",
    circ: "\u02C6",
    tilde: "\u02DC",
    Alpha: "\u0391",
    Beta: "\u0392",
    Gamma: "\u0393",
    Delta: "\u0394",
    Epsilon: "\u0395",
    Zeta: "\u0396",
    Eta: "\u0397",
    Theta: "\u0398",
    Iota: "\u0399",
    Kappa: "\u039A",
    Lambda: "\u039B",
    Mu: "\u039C",
    Nu: "\u039D",
    Xi: "\u039E",
    Omicron: "\u039F",
    Pi: "\u03A0",
    Rho: "\u03A1",
    Sigma: "\u03A3",
    Tau: "\u03A4",
    Upsilon: "\u03A5",
    Phi: "\u03A6",
    Chi: "\u03A7",
    Psi: "\u03A8",
    Omega: "\u03A9",
    alpha: "\u03B1",
    beta: "\u03B2",
    gamma: "\u03B3",
    delta: "\u03B4",
    epsilon: "\u03B5",
    zeta: "\u03B6",
    eta: "\u03B7",
    theta: "\u03B8",
    iota: "\u03B9",
    kappa: "\u03BA",
    lambda: "\u03BB",
    mu: "\u03BC",
    nu: "\u03BD",
    xi: "\u03BE",
    omicron: "\u03BF",
    pi: "\u03C0",
    rho: "\u03C1",
    sigmaf: "\u03C2",
    sigma: "\u03C3",
    tau: "\u03C4",
    upsilon: "\u03C5",
    phi: "\u03C6",
    chi: "\u03C7",
    psi: "\u03C8",
    omega: "\u03C9",
    thetasym: "\u03D1",
    upsih: "\u03D2",
    piv: "\u03D6",
    ensp: "\u2002",
    emsp: "\u2003",
    thinsp: "\u2009",
    zwnj: "\u200C",
    zwj: "\u200D",
    lrm: "\u200E",
    rlm: "\u200F",
    ndash: "\u2013",
    mdash: "\u2014",
    lsquo: "\u2018",
    rsquo: "\u2019",
    sbquo: "\u201A",
    ldquo: "\u201C",
    rdquo: "\u201D",
    bdquo: "\u201E",
    dagger: "\u2020",
    Dagger: "\u2021",
    bull: "\u2022",
    hellip: "\u2026",
    permil: "\u2030",
    prime: "\u2032",
    Prime: "\u2033",
    lsaquo: "\u2039",
    rsaquo: "\u203A",
    oline: "\u203E",
    frasl: "\u2044",
    euro: "\u20AC",
    image: "\u2111",
    weierp: "\u2118",
    real: "\u211C",
    trade: "\u2122",
    alefsym: "\u2135",
    larr: "\u2190",
    uarr: "\u2191",
    rarr: "\u2192",
    darr: "\u2193",
    harr: "\u2194",
    crarr: "\u21B5",
    lArr: "\u21D0",
    uArr: "\u21D1",
    rArr: "\u21D2",
    dArr: "\u21D3",
    hArr: "\u21D4",
    forall: "\u2200",
    part: "\u2202",
    exist: "\u2203",
    empty: "\u2205",
    nabla: "\u2207",
    isin: "\u2208",
    notin: "\u2209",
    ni: "\u220B",
    prod: "\u220F",
    sum: "\u2211",
    minus: "\u2212",
    lowast: "\u2217",
    radic: "\u221A",
    prop: "\u221D",
    infin: "\u221E",
    ang: "\u2220",
    and: "\u2227",
    or: "\u2228",
    cap: "\u2229",
    cup: "\u222A",
    int: "\u222B",
    there4: "\u2234",
    sim: "\u223C",
    cong: "\u2245",
    asymp: "\u2248",
    ne: "\u2260",
    equiv: "\u2261",
    le: "\u2264",
    ge: "\u2265",
    sub: "\u2282",
    sup: "\u2283",
    nsub: "\u2284",
    sube: "\u2286",
    supe: "\u2287",
    oplus: "\u2295",
    otimes: "\u2297",
    perp: "\u22A5",
    sdot: "\u22C5",
    lceil: "\u2308",
    rceil: "\u2309",
    lfloor: "\u230A",
    rfloor: "\u230B",
    lang: "\u2329",
    rang: "\u232A",
    loz: "\u25CA",
    spades: "\u2660",
    clubs: "\u2663",
    hearts: "\u2665",
    diams: "\u2666"
};
const JsxErrors = ParseErrorEnum `jsx`({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
});
function isFragment(object) {
    return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
}
function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") {
        return object.name;
    }
    if (object.type === "JSXNamespacedName") {
        return object.namespace.name + ":" + object.name.name;
    }
    if (object.type === "JSXMemberExpression") {
        return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
    throw new Error("Node had unexpected type: " + object.type);
}
var jsx = superClass => class JSXParserMixin extends superClass {
    jsxReadToken() {
        let out = "";
        let chunkStart = this.state.pos;
        for (;;) {
            if (this.state.pos >= this.length) {
                throw this.raise(JsxErrors.UnterminatedJsxContent, {
                    at: this.state.startLoc
                });
            }
            const ch = this.input.charCodeAt(this.state.pos);
            switch (ch) {
                case 60:
                case 123:
                    if (this.state.pos === this.state.start) {
                        if (ch === 60 && this.state.canStartJSXElement) {
                            ++this.state.pos;
                            this.finishToken(142);
                        }
                        else {
                            super.getTokenFromCode(ch);
                        }
                        return;
                    }
                    out += this.input.slice(chunkStart, this.state.pos);
                    this.finishToken(141, out);
                    return;
                case 38:
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadEntity();
                    chunkStart = this.state.pos;
                    break;
                case 62:
                case 125:
                default:
                    if (isNewLine(ch)) {
                        out += this.input.slice(chunkStart, this.state.pos);
                        out += this.jsxReadNewLine(true);
                        chunkStart = this.state.pos;
                    }
                    else {
                        ++this.state.pos;
                    }
            }
        }
    }
    jsxReadNewLine(normalizeCRLF) {
        const ch = this.input.charCodeAt(this.state.pos);
        let out;
        ++this.state.pos;
        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
            ++this.state.pos;
            out = normalizeCRLF ? "\n" : "\r\n";
        }
        else {
            out = String.fromCharCode(ch);
        }
        ++this.state.curLine;
        this.state.lineStart = this.state.pos;
        return out;
    }
    jsxReadString(quote) {
        let out = "";
        let chunkStart = ++this.state.pos;
        for (;;) {
            if (this.state.pos >= this.length) {
                throw this.raise(Errors.UnterminatedString, {
                    at: this.state.startLoc
                });
            }
            const ch = this.input.charCodeAt(this.state.pos);
            if (ch === quote)
                break;
            if (ch === 38) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadEntity();
                chunkStart = this.state.pos;
            }
            else if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadNewLine(false);
                chunkStart = this.state.pos;
            }
            else {
                ++this.state.pos;
            }
        }
        out += this.input.slice(chunkStart, this.state.pos++);
        this.finishToken(133, out);
    }
    jsxReadEntity() {
        const startPos = ++this.state.pos;
        if (this.codePointAtPos(this.state.pos) === 35) {
            ++this.state.pos;
            let radix = 10;
            if (this.codePointAtPos(this.state.pos) === 120) {
                radix = 16;
                ++this.state.pos;
            }
            const codePoint = this.readInt(radix, undefined, false, "bail");
            if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
                ++this.state.pos;
                return String.fromCodePoint(codePoint);
            }
        }
        else {
            let count = 0;
            let semi = false;
            while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {
                ++this.state.pos;
            }
            if (semi) {
                const desc = this.input.slice(startPos, this.state.pos);
                const entity = entities[desc];
                ++this.state.pos;
                if (entity) {
                    return entity;
                }
            }
        }
        this.state.pos = startPos;
        return "&";
    }
    jsxReadWord() {
        let ch;
        const start = this.state.pos;
        do {
            ch = this.input.charCodeAt(++this.state.pos);
        } while (isIdentifierChar(ch) || ch === 45);
        this.finishToken(140, this.input.slice(start, this.state.pos));
    }
    jsxParseIdentifier() {
        const node = this.startNode();
        if (this.match(140)) {
            node.name = this.state.value;
        }
        else if (tokenIsKeyword(this.state.type)) {
            node.name = tokenLabelName(this.state.type);
        }
        else {
            this.unexpected();
        }
        this.next();
        return this.finishNode(node, "JSXIdentifier");
    }
    jsxParseNamespacedName() {
        const startLoc = this.state.startLoc;
        const name = this.jsxParseIdentifier();
        if (!this.eat(14))
            return name;
        const node = this.startNodeAt(startLoc);
        node.namespace = name;
        node.name = this.jsxParseIdentifier();
        return this.finishNode(node, "JSXNamespacedName");
    }
    jsxParseElementName() {
        const startLoc = this.state.startLoc;
        let node = this.jsxParseNamespacedName();
        if (node.type === "JSXNamespacedName") {
            return node;
        }
        while (this.eat(16)) {
            const newNode = this.startNodeAt(startLoc);
            newNode.object = node;
            newNode.property = this.jsxParseIdentifier();
            node = this.finishNode(newNode, "JSXMemberExpression");
        }
        return node;
    }
    jsxParseAttributeValue() {
        let node;
        switch (this.state.type) {
            case 5:
                node = this.startNode();
                this.setContext(types.brace);
                this.next();
                node = this.jsxParseExpressionContainer(node, types.j_oTag);
                if (node.expression.type === "JSXEmptyExpression") {
                    this.raise(JsxErrors.AttributeIsEmpty, {
                        at: node
                    });
                }
                return node;
            case 142:
            case 133:
                return this.parseExprAtom();
            default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, {
                    at: this.state.startLoc
                });
        }
    }
    jsxParseEmptyExpression() {
        const node = this.startNodeAt(this.state.lastTokEndLoc);
        return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
    }
    jsxParseSpreadChild(node) {
        this.next();
        node.expression = this.parseExpression();
        this.setContext(types.j_expr);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node, "JSXSpreadChild");
    }
    jsxParseExpressionContainer(node, previousContext) {
        if (this.match(8)) {
            node.expression = this.jsxParseEmptyExpression();
        }
        else {
            const expression = this.parseExpression();
            node.expression = expression;
        }
        this.setContext(previousContext);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node, "JSXExpressionContainer");
    }
    jsxParseAttribute() {
        const node = this.startNode();
        if (this.match(5)) {
            this.setContext(types.brace);
            this.next();
            this.expect(21);
            node.argument = this.parseMaybeAssignAllowIn();
            this.setContext(types.j_oTag);
            this.state.canStartJSXElement = true;
            this.expect(8);
            return this.finishNode(node, "JSXSpreadAttribute");
        }
        node.name = this.jsxParseNamespacedName();
        node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
        return this.finishNode(node, "JSXAttribute");
    }
    jsxParseOpeningElementAt(startLoc) {
        const node = this.startNodeAt(startLoc);
        if (this.eat(143)) {
            return this.finishNode(node, "JSXOpeningFragment");
        }
        node.name = this.jsxParseElementName();
        return this.jsxParseOpeningElementAfterName(node);
    }
    jsxParseOpeningElementAfterName(node) {
        const attributes = [];
        while (!this.match(56) && !this.match(143)) {
            attributes.push(this.jsxParseAttribute());
        }
        node.attributes = attributes;
        node.selfClosing = this.eat(56);
        this.expect(143);
        return this.finishNode(node, "JSXOpeningElement");
    }
    jsxParseClosingElementAt(startLoc) {
        const node = this.startNodeAt(startLoc);
        if (this.eat(143)) {
            return this.finishNode(node, "JSXClosingFragment");
        }
        node.name = this.jsxParseElementName();
        this.expect(143);
        return this.finishNode(node, "JSXClosingElement");
    }
    jsxParseElementAt(startLoc) {
        const node = this.startNodeAt(startLoc);
        const children = [];
        const openingElement = this.jsxParseOpeningElementAt(startLoc);
        let closingElement = null;
        if (!openingElement.selfClosing) {
            contents: for (;;) {
                switch (this.state.type) {
                    case 142:
                        startLoc = this.state.startLoc;
                        this.next();
                        if (this.eat(56)) {
                            closingElement = this.jsxParseClosingElementAt(startLoc);
                            break contents;
                        }
                        children.push(this.jsxParseElementAt(startLoc));
                        break;
                    case 141:
                        children.push(this.parseExprAtom());
                        break;
                    case 5:
                        {
                            const node = this.startNode();
                            this.setContext(types.brace);
                            this.next();
                            if (this.match(21)) {
                                children.push(this.jsxParseSpreadChild(node));
                            }
                            else {
                                children.push(this.jsxParseExpressionContainer(node, types.j_expr));
                            }
                            break;
                        }
                    default:
                        this.unexpected();
                }
            }
            if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
                this.raise(JsxErrors.MissingClosingTagFragment, {
                    at: closingElement
                });
            }
            else if (!isFragment(openingElement) && isFragment(closingElement)) {
                this.raise(JsxErrors.MissingClosingTagElement, {
                    at: closingElement,
                    openingTagName: getQualifiedJSXName(openingElement.name)
                });
            }
            else if (!isFragment(openingElement) && !isFragment(closingElement)) {
                if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                    this.raise(JsxErrors.MissingClosingTagElement, {
                        at: closingElement,
                        openingTagName: getQualifiedJSXName(openingElement.name)
                    });
                }
            }
        }
        if (isFragment(openingElement)) {
            node.openingFragment = openingElement;
            node.closingFragment = closingElement;
        }
        else {
            node.openingElement = openingElement;
            node.closingElement = closingElement;
        }
        node.children = children;
        if (this.match(47)) {
            throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {
                at: this.state.startLoc
            });
        }
        return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
    }
    jsxParseElement() {
        const startLoc = this.state.startLoc;
        this.next();
        return this.jsxParseElementAt(startLoc);
    }
    setContext(newContext) {
        const { context } = this.state;
        context[context.length - 1] = newContext;
    }
    parseExprAtom(refExpressionErrors) {
        if (this.match(141)) {
            return this.parseLiteral(this.state.value, "JSXText");
        }
        else if (this.match(142)) {
            return this.jsxParseElement();
        }
        else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
            this.replaceToken(142);
            return this.jsxParseElement();
        }
        else {
            return super.parseExprAtom(refExpressionErrors);
        }
    }
    skipSpace() {
        const curContext = this.curContext();
        if (!curContext.preserveSpace)
            super.skipSpace();
    }
    getTokenFromCode(code) {
        const context = this.curContext();
        if (context === types.j_expr) {
            this.jsxReadToken();
            return;
        }
        if (context === types.j_oTag || context === types.j_cTag) {
            if (isIdentifierStart(code)) {
                this.jsxReadWord();
                return;
            }
            if (code === 62) {
                ++this.state.pos;
                this.finishToken(143);
                return;
            }
            if ((code === 34 || code === 39) && context === types.j_oTag) {
                this.jsxReadString(code);
                return;
            }
        }
        if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
            ++this.state.pos;
            this.finishToken(142);
            return;
        }
        super.getTokenFromCode(code);
    }
    updateContext(prevType) {
        const { context, type } = this.state;
        if (type === 56 && prevType === 142) {
            context.splice(-2, 2, types.j_cTag);
            this.state.canStartJSXElement = false;
        }
        else if (type === 142) {
            context.push(types.j_oTag);
        }
        else if (type === 143) {
            const out = context[context.length - 1];
            if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
                context.pop();
                this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
            }
            else {
                this.setContext(types.j_expr);
                this.state.canStartJSXElement = true;
            }
        }
        else {
            this.state.canStartJSXElement = tokenComesBeforeExpression(type);
        }
    }
};
class TypeScriptScope extends Scope {
    constructor(...args) {
        super(...args);
        this.types = new Set();
        this.enums = new Set();
        this.constEnums = new Set();
        this.classes = new Set();
        this.exportOnlyBindings = new Set();
    }
}
class TypeScriptScopeHandler extends ScopeHandler {
    constructor(...args) {
        super(...args);
        this.importsStack = [];
    }
    createScope(flags) {
        this.importsStack.push(new Set());
        return new TypeScriptScope(flags);
    }
    enter(flags) {
        if (flags == 256) {
            this.importsStack.push(new Set());
        }
        super.enter(flags);
    }
    exit() {
        const flags = super.exit();
        if (flags == 256) {
            this.importsStack.pop();
        }
        return flags;
    }
    hasImport(name, allowShadow) {
        const len = this.importsStack.length;
        if (this.importsStack[len - 1].has(name)) {
            return true;
        }
        if (!allowShadow && len > 1) {
            for (let i = 0; i < len - 1; i++) {
                if (this.importsStack[i].has(name))
                    return true;
            }
        }
        return false;
    }
    declareName(name, bindingType, loc) {
        if (bindingType & 4096) {
            if (this.hasImport(name, true)) {
                this.parser.raise(Errors.VarRedeclaration, {
                    at: loc,
                    identifierName: name
                });
            }
            this.importsStack[this.importsStack.length - 1].add(name);
            return;
        }
        const scope = this.currentScope();
        if (bindingType & 1024) {
            this.maybeExportDefined(scope, name);
            scope.exportOnlyBindings.add(name);
            return;
        }
        super.declareName(name, bindingType, loc);
        if (bindingType & 2) {
            if (!(bindingType & 1)) {
                this.checkRedeclarationInScope(scope, name, bindingType, loc);
                this.maybeExportDefined(scope, name);
            }
            scope.types.add(name);
        }
        if (bindingType & 256)
            scope.enums.add(name);
        if (bindingType & 512) {
            scope.constEnums.add(name);
        }
        if (bindingType & 128)
            scope.classes.add(name);
    }
    isRedeclaredInScope(scope, name, bindingType) {
        if (scope.enums.has(name)) {
            if (bindingType & 256) {
                const isConst = !!(bindingType & 512);
                const wasConst = scope.constEnums.has(name);
                return isConst !== wasConst;
            }
            return true;
        }
        if (bindingType & 128 && scope.classes.has(name)) {
            if (scope.lexical.has(name)) {
                return !!(bindingType & 1);
            }
            else {
                return false;
            }
        }
        if (bindingType & 2 && scope.types.has(name)) {
            return true;
        }
        return super.isRedeclaredInScope(scope, name, bindingType);
    }
    checkLocalExport(id) {
        const { name } = id;
        if (this.hasImport(name))
            return;
        const len = this.scopeStack.length;
        for (let i = len - 1; i >= 0; i--) {
            const scope = this.scopeStack[i];
            if (scope.types.has(name) || scope.exportOnlyBindings.has(name))
                return;
        }
        super.checkLocalExport(id);
    }
}
const getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
const unwrapParenthesizedExpression = node => {
    return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
};
class LValParser extends NodeUtils {
    toAssignable(node, isLHS = false) {
        var _node$extra, _node$extra3;
        let parenthesized = undefined;
        if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
            parenthesized = unwrapParenthesizedExpression(node);
            if (isLHS) {
                if (parenthesized.type === "Identifier") {
                    this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {
                        at: node
                    });
                }
                else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
                    this.raise(Errors.InvalidParenthesizedAssignment, {
                        at: node
                    });
                }
            }
            else {
                this.raise(Errors.InvalidParenthesizedAssignment, {
                    at: node
                });
            }
        }
        switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
                break;
            case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                    var _node$extra2;
                    const prop = node.properties[i];
                    const isLast = i === last;
                    this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
                    if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
                        this.raise(Errors.RestTrailingComma, {
                            at: node.extra.trailingCommaLoc
                        });
                    }
                }
                break;
            case "ObjectProperty":
                {
                    const { key, value } = node;
                    if (this.isPrivateName(key)) {
                        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
                    }
                    this.toAssignable(value, isLHS);
                    break;
                }
            case "SpreadElement":
                {
                    throw new Error("Internal @babel/parser error (this is a bug, please report it)." + " SpreadElement should be converted by .toAssignable's caller.");
                }
            case "ArrayExpression":
                node.type = "ArrayPattern";
                this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
            case "AssignmentExpression":
                if (node.operator !== "=") {
                    this.raise(Errors.MissingEqInAssignment, {
                        at: node.left.loc.end
                    });
                }
                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isLHS);
                break;
            case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
                break;
        }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
        if (prop.type === "ObjectMethod") {
            this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {
                at: prop.key
            });
        }
        else if (prop.type === "SpreadElement") {
            prop.type = "RestElement";
            const arg = prop.argument;
            this.checkToRestConversion(arg, false);
            this.toAssignable(arg, isLHS);
            if (!isLast) {
                this.raise(Errors.RestTrailingComma, {
                    at: prop
                });
            }
        }
        else {
            this.toAssignable(prop, isLHS);
        }
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
        const end = exprList.length - 1;
        for (let i = 0; i <= end; i++) {
            const elt = exprList[i];
            if (!elt)
                continue;
            if (elt.type === "SpreadElement") {
                elt.type = "RestElement";
                const arg = elt.argument;
                this.checkToRestConversion(arg, true);
                this.toAssignable(arg, isLHS);
            }
            else {
                this.toAssignable(elt, isLHS);
            }
            if (elt.type === "RestElement") {
                if (i < end) {
                    this.raise(Errors.RestTrailingComma, {
                        at: elt
                    });
                }
                else if (trailingCommaLoc) {
                    this.raise(Errors.RestTrailingComma, {
                        at: trailingCommaLoc
                    });
                }
            }
        }
    }
    isAssignable(node, isBinding) {
        switch (node.type) {
            case "Identifier":
            case "ObjectPattern":
            case "ArrayPattern":
            case "AssignmentPattern":
            case "RestElement":
                return true;
            case "ObjectExpression":
                {
                    const last = node.properties.length - 1;
                    return node.properties.every((prop, i) => {
                        return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
                    });
                }
            case "ObjectProperty":
                return this.isAssignable(node.value);
            case "SpreadElement":
                return this.isAssignable(node.argument);
            case "ArrayExpression":
                return node.elements.every(element => element === null || this.isAssignable(element));
            case "AssignmentExpression":
                return node.operator === "=";
            case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
            case "MemberExpression":
            case "OptionalMemberExpression":
                return !isBinding;
            default:
                return false;
        }
    }
    toReferencedList(exprList, isParenthesizedExpr) {
        return exprList;
    }
    toReferencedListDeep(exprList, isParenthesizedExpr) {
        this.toReferencedList(exprList, isParenthesizedExpr);
        for (const expr of exprList) {
            if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
                this.toReferencedListDeep(expr.elements);
            }
        }
    }
    parseSpread(refExpressionErrors) {
        const node = this.startNode();
        this.next();
        node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);
        return this.finishNode(node, "SpreadElement");
    }
    parseRestBinding() {
        const node = this.startNode();
        this.next();
        node.argument = this.parseBindingAtom();
        return this.finishNode(node, "RestElement");
    }
    parseBindingAtom() {
        switch (this.state.type) {
            case 0:
                {
                    const node = this.startNode();
                    this.next();
                    node.elements = this.parseBindingList(3, 93, 1);
                    return this.finishNode(node, "ArrayPattern");
                }
            case 5:
                return this.parseObjectLike(8, true);
        }
        return this.parseIdentifier();
    }
    parseBindingList(close, closeCharCode, flags) {
        const allowEmpty = flags & 1;
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
            if (first) {
                first = false;
            }
            else {
                this.expect(12);
            }
            if (allowEmpty && this.match(12)) {
                elts.push(null);
            }
            else if (this.eat(close)) {
                break;
            }
            else if (this.match(21)) {
                elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
                if (!this.checkCommaAfterRest(closeCharCode)) {
                    this.expect(close);
                    break;
                }
            }
            else {
                const decorators = [];
                if (this.match(26) && this.hasPlugin("decorators")) {
                    this.raise(Errors.UnsupportedParameterDecorator, {
                        at: this.state.startLoc
                    });
                }
                while (this.match(26)) {
                    decorators.push(this.parseDecorator());
                }
                elts.push(this.parseAssignableListItem(flags, decorators));
            }
        }
        return elts;
    }
    parseBindingRestProperty(prop) {
        this.next();
        prop.argument = this.parseIdentifier();
        this.checkCommaAfterRest(125);
        return this.finishNode(prop, "RestElement");
    }
    parseBindingProperty() {
        const prop = this.startNode();
        const { type, startLoc } = this.state;
        if (type === 21) {
            return this.parseBindingRestProperty(prop);
        }
        else if (type === 138) {
            this.expectPlugin("destructuringPrivate", startLoc);
            this.classScope.usePrivateName(this.state.value, startLoc);
            prop.key = this.parsePrivateName();
        }
        else {
            this.parsePropertyName(prop);
        }
        prop.method = false;
        return this.parseObjPropValue(prop, startLoc, false, false, true, false);
    }
    parseAssignableListItem(flags, decorators) {
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left, flags);
        const elt = this.parseMaybeDefault(left.loc.start, left);
        if (decorators.length) {
            left.decorators = decorators;
        }
        return elt;
    }
    parseAssignableListItemTypes(param, flags) {
        return param;
    }
    parseMaybeDefault(startLoc, left) {
        var _startLoc, _left;
        (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
        left = (_left = left) != null ? _left : this.parseBindingAtom();
        if (!this.eat(29))
            return left;
        const node = this.startNodeAt(startLoc);
        node.left = left;
        node.right = this.parseMaybeAssignAllowIn();
        return this.finishNode(node, "AssignmentPattern");
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding) {
        return getOwn$1({
            AssignmentPattern: "left",
            RestElement: "argument",
            ObjectProperty: "value",
            ParenthesizedExpression: "expression",
            ArrayPattern: "elements",
            ObjectPattern: "properties"
        }, type);
    }
    isOptionalMemberExpression(expression) {
        return expression.type === "OptionalMemberExpression";
    }
    checkLVal(expression, { in: ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false }) {
        var _expression$extra;
        const type = expression.type;
        if (this.isObjectMethod(expression))
            return;
        const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
        if (isOptionalMemberExpression || type === "MemberExpression") {
            if (isOptionalMemberExpression) {
                this.expectPlugin("optionalChainingAssign", expression.loc.start);
                if (ancestor.type !== "AssignmentExpression") {
                    this.raise(Errors.InvalidLhsOptionalChaining, {
                        at: expression,
                        ancestor
                    });
                }
            }
            if (binding !== 64) {
                this.raise(Errors.InvalidPropertyBindingPattern, {
                    at: expression
                });
            }
            return;
        }
        if (type === "Identifier") {
            this.checkIdentifier(expression, binding, strictModeChanged);
            const { name } = expression;
            if (checkClashes) {
                if (checkClashes.has(name)) {
                    this.raise(Errors.ParamDupe, {
                        at: expression
                    });
                }
                else {
                    checkClashes.add(name);
                }
            }
            return;
        }
        const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
        if (validity === true)
            return;
        if (validity === false) {
            const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
            this.raise(ParseErrorClass, {
                at: expression,
                ancestor
            });
            return;
        }
        const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === "ParenthesizedExpression"];
        const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
            type
        } : ancestor;
        for (const child of [].concat(expression[key])) {
            if (child) {
                this.checkLVal(child, {
                    in: nextAncestor,
                    binding,
                    checkClashes,
                    strictModeChanged,
                    hasParenthesizedAncestor: isParenthesizedExpression
                });
            }
        }
    }
    checkIdentifier(at, bindingType, strictModeChanged = false) {
        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
            if (bindingType === 64) {
                this.raise(Errors.StrictEvalArguments, {
                    at,
                    referenceName: at.name
                });
            }
            else {
                this.raise(Errors.StrictEvalArgumentsBinding, {
                    at,
                    bindingName: at.name
                });
            }
        }
        if (bindingType & 8192 && at.name === "let") {
            this.raise(Errors.LetInLexicalBinding, {
                at
            });
        }
        if (!(bindingType & 64)) {
            this.declareNameFromIdentifier(at, bindingType);
        }
    }
    declareNameFromIdentifier(identifier, binding) {
        this.scope.declareName(identifier.name, binding, identifier.loc.start);
    }
    checkToRestConversion(node, allowPattern) {
        switch (node.type) {
            case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
            case "Identifier":
            case "MemberExpression":
                break;
            case "ArrayExpression":
            case "ObjectExpression":
                if (allowPattern)
                    break;
            default:
                this.raise(Errors.InvalidRestAssignmentPattern, {
                    at: node
                });
        }
    }
    checkCommaAfterRest(close) {
        if (!this.match(12)) {
            return false;
        }
        this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {
            at: this.state.startLoc
        });
        return true;
    }
}
const getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];
function nonNull(x) {
    if (x == null) {
        throw new Error(`Unexpected ${x} value.`);
    }
    return x;
}
function assert(x) {
    if (!x) {
        throw new Error("Assert fail");
    }
}
const TSErrors = ParseErrorEnum `typescript`({
    AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
    AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
    AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`,
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: ({ modifier }) => `Accessibility modifier already seen.`,
    DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`,
    EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`,
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
    IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
    InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`,
    InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`,
    InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
    InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
    InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. " + "You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
    ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
    TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
});
function keywordTypeFromName(value) {
    switch (value) {
        case "any":
            return "TSAnyKeyword";
        case "boolean":
            return "TSBooleanKeyword";
        case "bigint":
            return "TSBigIntKeyword";
        case "never":
            return "TSNeverKeyword";
        case "number":
            return "TSNumberKeyword";
        case "object":
            return "TSObjectKeyword";
        case "string":
            return "TSStringKeyword";
        case "symbol":
            return "TSSymbolKeyword";
        case "undefined":
            return "TSUndefinedKeyword";
        case "unknown":
            return "TSUnknownKeyword";
        default:
            return undefined;
    }
}
function tsIsAccessModifier(modifier) {
    return modifier === "private" || modifier === "public" || modifier === "protected";
}
function tsIsVarianceAnnotations(modifier) {
    return modifier === "in" || modifier === "out";
}
var typescript = superClass => class TypeScriptParserMixin extends superClass {
    constructor(...args) {
        super(...args);
        this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["in", "out"],
            disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameter
        });
        this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["const"],
            disallowedModifiers: ["in", "out"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
        });
        this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
            allowedModifiers: ["in", "out", "const"],
            disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
            errorTemplate: TSErrors.InvalidModifierOnTypeParameter
        });
    }
    getScopeHandler() {
        return TypeScriptScopeHandler;
    }
    tsIsIdentifier() {
        return tokenIsIdentifier(this.state.type);
    }
    tsTokenCanFollowModifier() {
        return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
    }
    tsNextTokenCanFollowModifier() {
        this.next();
        return this.tsTokenCanFollowModifier();
    }
    tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
        if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
            return undefined;
        }
        const modifier = this.state.value;
        if (allowedModifiers.indexOf(modifier) !== -1) {
            if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
                return undefined;
            }
            if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
                return modifier;
            }
        }
        return undefined;
    }
    tsParseModifiers({ allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }, modified) {
        const enforceOrder = (loc, modifier, before, after) => {
            if (modifier === before && modified[after]) {
                this.raise(TSErrors.InvalidModifiersOrder, {
                    at: loc,
                    orderedModifiers: [before, after]
                });
            }
        };
        const incompatible = (loc, modifier, mod1, mod2) => {
            if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
                this.raise(TSErrors.IncompatibleModifiers, {
                    at: loc,
                    modifiers: [mod1, mod2]
                });
            }
        };
        for (;;) {
            const { startLoc } = this.state;
            const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
            if (!modifier)
                break;
            if (tsIsAccessModifier(modifier)) {
                if (modified.accessibility) {
                    this.raise(TSErrors.DuplicateAccessibilityModifier, {
                        at: startLoc,
                        modifier
                    });
                }
                else {
                    enforceOrder(startLoc, modifier, modifier, "override");
                    enforceOrder(startLoc, modifier, modifier, "static");
                    enforceOrder(startLoc, modifier, modifier, "readonly");
                    modified.accessibility = modifier;
                }
            }
            else if (tsIsVarianceAnnotations(modifier)) {
                if (modified[modifier]) {
                    this.raise(TSErrors.DuplicateModifier, {
                        at: startLoc,
                        modifier
                    });
                }
                modified[modifier] = true;
                enforceOrder(startLoc, modifier, "in", "out");
            }
            else {
                if (Object.hasOwnProperty.call(modified, modifier)) {
                    this.raise(TSErrors.DuplicateModifier, {
                        at: startLoc,
                        modifier
                    });
                }
                else {
                    enforceOrder(startLoc, modifier, "static", "readonly");
                    enforceOrder(startLoc, modifier, "static", "override");
                    enforceOrder(startLoc, modifier, "override", "readonly");
                    enforceOrder(startLoc, modifier, "abstract", "override");
                    incompatible(startLoc, modifier, "declare", "override");
                    incompatible(startLoc, modifier, "static", "abstract");
                }
                modified[modifier] = true;
            }
            if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
                this.raise(errorTemplate, {
                    at: startLoc,
                    modifier
                });
            }
        }
    }
    tsIsListTerminator(kind) {
        switch (kind) {
            case "EnumMembers":
            case "TypeMembers":
                return this.match(8);
            case "HeritageClauseElement":
                return this.match(5);
            case "TupleElementTypes":
                return this.match(3);
            case "TypeParametersOrArguments":
                return this.match(48);
        }
    }
    tsParseList(kind, parseElement) {
        const result = [];
        while (!this.tsIsListTerminator(kind)) {
            result.push(parseElement());
        }
        return result;
    }
    tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
    }
    tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
        const result = [];
        let trailingCommaPos = -1;
        for (;;) {
            if (this.tsIsListTerminator(kind)) {
                break;
            }
            trailingCommaPos = -1;
            const element = parseElement();
            if (element == null) {
                return undefined;
            }
            result.push(element);
            if (this.eat(12)) {
                trailingCommaPos = this.state.lastTokStart;
                continue;
            }
            if (this.tsIsListTerminator(kind)) {
                break;
            }
            if (expectSuccess) {
                this.expect(12);
            }
            return undefined;
        }
        if (refTrailingCommaPos) {
            refTrailingCommaPos.value = trailingCommaPos;
        }
        return result;
    }
    tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
        if (!skipFirstToken) {
            if (bracket) {
                this.expect(0);
            }
            else {
                this.expect(47);
            }
        }
        const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
        if (bracket) {
            this.expect(3);
        }
        else {
            this.expect(48);
        }
        return result;
    }
    tsParseImportType() {
        const node = this.startNode();
        this.expect(83);
        this.expect(10);
        if (!this.match(133)) {
            this.raise(TSErrors.UnsupportedImportTypeArgument, {
                at: this.state.startLoc
            });
        }
        node.argument = super.parseExprAtom();
        this.expect(11);
        if (this.eat(16)) {
            node.qualifier = this.tsParseEntityName();
        }
        if (this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, "TSImportType");
    }
    tsParseEntityName(allowReservedWords = true) {
        let entity = this.parseIdentifier(allowReservedWords);
        while (this.eat(16)) {
            const node = this.startNodeAtNode(entity);
            node.left = entity;
            node.right = this.parseIdentifier(allowReservedWords);
            entity = this.finishNode(node, "TSQualifiedName");
        }
        return entity;
    }
    tsParseTypeReference() {
        const node = this.startNode();
        node.typeName = this.tsParseEntityName();
        if (!this.hasPrecedingLineBreak() && this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, "TSTypeReference");
    }
    tsParseThisTypePredicate(lhs) {
        this.next();
        const node = this.startNodeAtNode(lhs);
        node.parameterName = lhs;
        node.typeAnnotation = this.tsParseTypeAnnotation(false);
        node.asserts = false;
        return this.finishNode(node, "TSTypePredicate");
    }
    tsParseThisTypeNode() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "TSThisType");
    }
    tsParseTypeQuery() {
        const node = this.startNode();
        this.expect(87);
        if (this.match(83)) {
            node.exprName = this.tsParseImportType();
        }
        else {
            node.exprName = this.tsParseEntityName();
        }
        if (!this.hasPrecedingLineBreak() && this.match(47)) {
            node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, "TSTypeQuery");
    }
    tsParseTypeParameter(parseModifiers) {
        const node = this.startNode();
        parseModifiers(node);
        node.name = this.tsParseTypeParameterName();
        node.constraint = this.tsEatThenParseType(81);
        node.default = this.tsEatThenParseType(29);
        return this.finishNode(node, "TSTypeParameter");
    }
    tsTryParseTypeParameters(parseModifiers) {
        if (this.match(47)) {
            return this.tsParseTypeParameters(parseModifiers);
        }
    }
    tsParseTypeParameters(parseModifiers) {
        const node = this.startNode();
        if (this.match(47) || this.match(142)) {
            this.next();
        }
        else {
            this.unexpected();
        }
        const refTrailingCommaPos = {
            value: -1
        };
        node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
        if (node.params.length === 0) {
            this.raise(TSErrors.EmptyTypeParameters, {
                at: node
            });
        }
        if (refTrailingCommaPos.value !== -1) {
            this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
        }
        return this.finishNode(node, "TSTypeParameterDeclaration");
    }
    tsFillSignature(returnToken, signature) {
        const returnTokenRequired = returnToken === 19;
        const paramsKey = "parameters";
        const returnTypeKey = "typeAnnotation";
        signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
        this.expect(10);
        signature[paramsKey] = this.tsParseBindingListForSignature();
        if (returnTokenRequired) {
            signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
        else if (this.match(returnToken)) {
            signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
        }
    }
    tsParseBindingListForSignature() {
        const list = super.parseBindingList(11, 41, 2);
        for (const pattern of list) {
            const { type } = pattern;
            if (type === "AssignmentPattern" || type === "TSParameterProperty") {
                this.raise(TSErrors.UnsupportedSignatureParameterKind, {
                    at: pattern,
                    type
                });
            }
        }
        return list;
    }
    tsParseTypeMemberSemicolon() {
        if (!this.eat(12) && !this.isLineTerminator()) {
            this.expect(13);
        }
    }
    tsParseSignatureMember(kind, node) {
        this.tsFillSignature(14, node);
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node, kind);
    }
    tsIsUnambiguouslyIndexSignature() {
        this.next();
        if (tokenIsIdentifier(this.state.type)) {
            this.next();
            return this.match(14);
        }
        return false;
    }
    tsTryParseIndexSignature(node) {
        if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
            return;
        }
        this.expect(0);
        const id = this.parseIdentifier();
        id.typeAnnotation = this.tsParseTypeAnnotation();
        this.resetEndLocation(id);
        this.expect(3);
        node.parameters = [id];
        const type = this.tsTryParseTypeAnnotation();
        if (type)
            node.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(node, "TSIndexSignature");
    }
    tsParsePropertyOrMethodSignature(node, readonly) {
        if (this.eat(17))
            node.optional = true;
        const nodeAny = node;
        if (this.match(10) || this.match(47)) {
            if (readonly) {
                this.raise(TSErrors.ReadonlyForMethodSignature, {
                    at: node
                });
            }
            const method = nodeAny;
            if (method.kind && this.match(47)) {
                this.raise(TSErrors.AccesorCannotHaveTypeParameters, {
                    at: this.state.curPosition()
                });
            }
            this.tsFillSignature(14, method);
            this.tsParseTypeMemberSemicolon();
            const paramsKey = "parameters";
            const returnTypeKey = "typeAnnotation";
            if (method.kind === "get") {
                if (method[paramsKey].length > 0) {
                    this.raise(Errors.BadGetterArity, {
                        at: this.state.curPosition()
                    });
                    if (this.isThisParam(method[paramsKey][0])) {
                        this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                            at: this.state.curPosition()
                        });
                    }
                }
            }
            else if (method.kind === "set") {
                if (method[paramsKey].length !== 1) {
                    this.raise(Errors.BadSetterArity, {
                        at: this.state.curPosition()
                    });
                }
                else {
                    const firstParameter = method[paramsKey][0];
                    if (this.isThisParam(firstParameter)) {
                        this.raise(TSErrors.AccesorCannotDeclareThisParameter, {
                            at: this.state.curPosition()
                        });
                    }
                    if (firstParameter.type === "Identifier" && firstParameter.optional) {
                        this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {
                            at: this.state.curPosition()
                        });
                    }
                    if (firstParameter.type === "RestElement") {
                        this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {
                            at: this.state.curPosition()
                        });
                    }
                }
                if (method[returnTypeKey]) {
                    this.raise(TSErrors.SetAccesorCannotHaveReturnType, {
                        at: method[returnTypeKey]
                    });
                }
            }
            else {
                method.kind = "method";
            }
            return this.finishNode(method, "TSMethodSignature");
        }
        else {
            const property = nodeAny;
            if (readonly)
                property.readonly = true;
            const type = this.tsTryParseTypeAnnotation();
            if (type)
                property.typeAnnotation = type;
            this.tsParseTypeMemberSemicolon();
            return this.finishNode(property, "TSPropertySignature");
        }
    }
    tsParseTypeMember() {
        const node = this.startNode();
        if (this.match(10) || this.match(47)) {
            return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
        }
        if (this.match(77)) {
            const id = this.startNode();
            this.next();
            if (this.match(10) || this.match(47)) {
                return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
            }
            else {
                node.key = this.createIdentifier(id, "new");
                return this.tsParsePropertyOrMethodSignature(node, false);
            }
        }
        this.tsParseModifiers({
            allowedModifiers: ["readonly"],
            disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
        }, node);
        const idx = this.tsTryParseIndexSignature(node);
        if (idx) {
            return idx;
        }
        super.parsePropertyName(node);
        if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
            node.kind = node.key.name;
            super.parsePropertyName(node);
        }
        return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
    }
    tsParseTypeLiteral() {
        const node = this.startNode();
        node.members = this.tsParseObjectTypeMembers();
        return this.finishNode(node, "TSTypeLiteral");
    }
    tsParseObjectTypeMembers() {
        this.expect(5);
        const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
        this.expect(8);
        return members;
    }
    tsIsStartOfMappedType() {
        this.next();
        if (this.eat(53)) {
            return this.isContextual(122);
        }
        if (this.isContextual(122)) {
            this.next();
        }
        if (!this.match(0)) {
            return false;
        }
        this.next();
        if (!this.tsIsIdentifier()) {
            return false;
        }
        this.next();
        return this.match(58);
    }
    tsParseMappedTypeParameter() {
        const node = this.startNode();
        node.name = this.tsParseTypeParameterName();
        node.constraint = this.tsExpectThenParseType(58);
        return this.finishNode(node, "TSTypeParameter");
    }
    tsParseMappedType() {
        const node = this.startNode();
        this.expect(5);
        if (this.match(53)) {
            node.readonly = this.state.value;
            this.next();
            this.expectContextual(122);
        }
        else if (this.eatContextual(122)) {
            node.readonly = true;
        }
        this.expect(0);
        node.typeParameter = this.tsParseMappedTypeParameter();
        node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
        this.expect(3);
        if (this.match(53)) {
            node.optional = this.state.value;
            this.next();
            this.expect(17);
        }
        else if (this.eat(17)) {
            node.optional = true;
        }
        node.typeAnnotation = this.tsTryParseType();
        this.semicolon();
        this.expect(8);
        return this.finishNode(node, "TSMappedType");
    }
    tsParseTupleType() {
        const node = this.startNode();
        node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
        let seenOptionalElement = false;
        node.elementTypes.forEach(elementNode => {
            const { type } = elementNode;
            if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
                this.raise(TSErrors.OptionalTypeBeforeRequired, {
                    at: elementNode
                });
            }
            seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
        });
        return this.finishNode(node, "TSTupleType");
    }
    tsParseTupleElementType() {
        const { startLoc } = this.state;
        const rest = this.eat(21);
        let labeled;
        let label;
        let optional;
        let type;
        const isWord = tokenIsKeywordOrIdentifier(this.state.type);
        const chAfterWord = isWord ? this.lookaheadCharCode() : null;
        if (chAfterWord === 58) {
            labeled = true;
            optional = false;
            label = this.parseIdentifier(true);
            this.expect(14);
            type = this.tsParseType();
        }
        else if (chAfterWord === 63) {
            optional = true;
            const startLoc = this.state.startLoc;
            const wordName = this.state.value;
            const typeOrLabel = this.tsParseNonArrayType();
            if (this.lookaheadCharCode() === 58) {
                labeled = true;
                label = this.createIdentifier(this.startNodeAt(startLoc), wordName);
                this.expect(17);
                this.expect(14);
                type = this.tsParseType();
            }
            else {
                labeled = false;
                type = typeOrLabel;
                this.expect(17);
            }
        }
        else {
            type = this.tsParseType();
            optional = this.eat(17);
            labeled = this.eat(14);
        }
        if (labeled) {
            let labeledNode;
            if (label) {
                labeledNode = this.startNodeAtNode(label);
                labeledNode.optional = optional;
                labeledNode.label = label;
                labeledNode.elementType = type;
                if (this.eat(17)) {
                    labeledNode.optional = true;
                    this.raise(TSErrors.TupleOptionalAfterType, {
                        at: this.state.lastTokStartLoc
                    });
                }
            }
            else {
                labeledNode = this.startNodeAtNode(type);
                labeledNode.optional = optional;
                this.raise(TSErrors.InvalidTupleMemberLabel, {
                    at: type
                });
                labeledNode.label = type;
                labeledNode.elementType = this.tsParseType();
            }
            type = this.finishNode(labeledNode, "TSNamedTupleMember");
        }
        else if (optional) {
            const optionalTypeNode = this.startNodeAtNode(type);
            optionalTypeNode.typeAnnotation = type;
            type = this.finishNode(optionalTypeNode, "TSOptionalType");
        }
        if (rest) {
            const restNode = this.startNodeAt(startLoc);
            restNode.typeAnnotation = type;
            type = this.finishNode(restNode, "TSRestType");
        }
        return type;
    }
    tsParseParenthesizedType() {
        const node = this.startNode();
        this.expect(10);
        node.typeAnnotation = this.tsParseType();
        this.expect(11);
        return this.finishNode(node, "TSParenthesizedType");
    }
    tsParseFunctionOrConstructorType(type, abstract) {
        const node = this.startNode();
        if (type === "TSConstructorType") {
            node.abstract = !!abstract;
            if (abstract)
                this.next();
            this.next();
        }
        this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
        return this.finishNode(node, type);
    }
    tsParseLiteralTypeNode() {
        const node = this.startNode();
        switch (this.state.type) {
            case 134:
            case 135:
            case 133:
            case 85:
            case 86:
                node.literal = super.parseExprAtom();
                break;
            default:
                this.unexpected();
        }
        return this.finishNode(node, "TSLiteralType");
    }
    tsParseTemplateLiteralType() {
        const node = this.startNode();
        node.literal = super.parseTemplate(false);
        return this.finishNode(node, "TSLiteralType");
    }
    parseTemplateSubstitution() {
        if (this.state.inType)
            return this.tsParseType();
        return super.parseTemplateSubstitution();
    }
    tsParseThisTypeOrThisTypePredicate() {
        const thisKeyword = this.tsParseThisTypeNode();
        if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
            return this.tsParseThisTypePredicate(thisKeyword);
        }
        else {
            return thisKeyword;
        }
    }
    tsParseNonArrayType() {
        switch (this.state.type) {
            case 133:
            case 134:
            case 135:
            case 85:
            case 86:
                return this.tsParseLiteralTypeNode();
            case 53:
                if (this.state.value === "-") {
                    const node = this.startNode();
                    const nextToken = this.lookahead();
                    if (nextToken.type !== 134 && nextToken.type !== 135) {
                        this.unexpected();
                    }
                    node.literal = this.parseMaybeUnary();
                    return this.finishNode(node, "TSLiteralType");
                }
                break;
            case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
            case 87:
                return this.tsParseTypeQuery();
            case 83:
                return this.tsParseImportType();
            case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
            case 0:
                return this.tsParseTupleType();
            case 10:
                return this.tsParseParenthesizedType();
            case 25:
            case 24:
                return this.tsParseTemplateLiteralType();
            default:
                {
                    const { type } = this.state;
                    if (tokenIsIdentifier(type) || type === 88 || type === 84) {
                        const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
                        if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {
                            const node = this.startNode();
                            this.next();
                            return this.finishNode(node, nodeType);
                        }
                        return this.tsParseTypeReference();
                    }
                }
        }
        this.unexpected();
    }
    tsParseArrayTypeOrHigher() {
        let type = this.tsParseNonArrayType();
        while (!this.hasPrecedingLineBreak() && this.eat(0)) {
            if (this.match(3)) {
                const node = this.startNodeAtNode(type);
                node.elementType = type;
                this.expect(3);
                type = this.finishNode(node, "TSArrayType");
            }
            else {
                const node = this.startNodeAtNode(type);
                node.objectType = type;
                node.indexType = this.tsParseType();
                this.expect(3);
                type = this.finishNode(node, "TSIndexedAccessType");
            }
        }
        return type;
    }
    tsParseTypeOperator() {
        const node = this.startNode();
        const operator = this.state.value;
        this.next();
        node.operator = operator;
        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
        if (operator === "readonly") {
            this.tsCheckTypeAnnotationForReadOnly(node);
        }
        return this.finishNode(node, "TSTypeOperator");
    }
    tsCheckTypeAnnotationForReadOnly(node) {
        switch (node.typeAnnotation.type) {
            case "TSTupleType":
            case "TSArrayType":
                return;
            default:
                this.raise(TSErrors.UnexpectedReadonly, {
                    at: node
                });
        }
    }
    tsParseInferType() {
        const node = this.startNode();
        this.expectContextual(115);
        const typeParameter = this.startNode();
        typeParameter.name = this.tsParseTypeParameterName();
        typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
        node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
        return this.finishNode(node, "TSInferType");
    }
    tsParseConstraintForInferType() {
        if (this.eat(81)) {
            const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
            if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
                return constraint;
            }
        }
    }
    tsParseTypeOperatorOrHigher() {
        const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
        return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
    }
    tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
        const node = this.startNode();
        const hasLeadingOperator = this.eat(operator);
        const types = [];
        do {
            types.push(parseConstituentType());
        } while (this.eat(operator));
        if (types.length === 1 && !hasLeadingOperator) {
            return types[0];
        }
        node.types = types;
        return this.finishNode(node, kind);
    }
    tsParseIntersectionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
    }
    tsParseUnionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
    }
    tsIsStartOfFunctionType() {
        if (this.match(47)) {
            return true;
        }
        return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
    }
    tsSkipParameterStart() {
        if (tokenIsIdentifier(this.state.type) || this.match(78)) {
            this.next();
            return true;
        }
        if (this.match(5)) {
            const { errors } = this.state;
            const previousErrorCount = errors.length;
            try {
                this.parseObjectLike(8, true);
                return errors.length === previousErrorCount;
            }
            catch (_unused) {
                return false;
            }
        }
        if (this.match(0)) {
            this.next();
            const { errors } = this.state;
            const previousErrorCount = errors.length;
            try {
                super.parseBindingList(3, 93, 1);
                return errors.length === previousErrorCount;
            }
            catch (_unused2) {
                return false;
            }
        }
        return false;
    }
    tsIsUnambiguouslyStartOfFunctionType() {
        this.next();
        if (this.match(11) || this.match(21)) {
            return true;
        }
        if (this.tsSkipParameterStart()) {
            if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
                return true;
            }
            if (this.match(11)) {
                this.next();
                if (this.match(19)) {
                    return true;
                }
            }
        }
        return false;
    }
    tsParseTypeOrTypePredicateAnnotation(returnToken) {
        return this.tsInType(() => {
            const t = this.startNode();
            this.expect(returnToken);
            const node = this.startNode();
            const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
            if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                if (thisTypePredicate.type === "TSThisType") {
                    node.parameterName = thisTypePredicate;
                    node.asserts = true;
                    node.typeAnnotation = null;
                    thisTypePredicate = this.finishNode(node, "TSTypePredicate");
                }
                else {
                    this.resetStartLocationFromNode(thisTypePredicate, node);
                    thisTypePredicate.asserts = true;
                }
                t.typeAnnotation = thisTypePredicate;
                return this.finishNode(t, "TSTypeAnnotation");
            }
            const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
            if (!typePredicateVariable) {
                if (!asserts) {
                    return this.tsParseTypeAnnotation(false, t);
                }
                node.parameterName = this.parseIdentifier();
                node.asserts = asserts;
                node.typeAnnotation = null;
                t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
                return this.finishNode(t, "TSTypeAnnotation");
            }
            const type = this.tsParseTypeAnnotation(false);
            node.parameterName = typePredicateVariable;
            node.typeAnnotation = type;
            node.asserts = asserts;
            t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
            return this.finishNode(t, "TSTypeAnnotation");
        });
    }
    tsTryParseTypeOrTypePredicateAnnotation() {
        if (this.match(14)) {
            return this.tsParseTypeOrTypePredicateAnnotation(14);
        }
    }
    tsTryParseTypeAnnotation() {
        if (this.match(14)) {
            return this.tsParseTypeAnnotation();
        }
    }
    tsTryParseType() {
        return this.tsEatThenParseType(14);
    }
    tsParseTypePredicatePrefix() {
        const id = this.parseIdentifier();
        if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
            this.next();
            return id;
        }
    }
    tsParseTypePredicateAsserts() {
        if (this.state.type !== 109) {
            return false;
        }
        const containsEsc = this.state.containsEsc;
        this.next();
        if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
            return false;
        }
        if (containsEsc) {
            this.raise(Errors.InvalidEscapedReservedWord, {
                at: this.state.lastTokStartLoc,
                reservedWord: "asserts"
            });
        }
        return true;
    }
    tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
        this.tsInType(() => {
            if (eatColon)
                this.expect(14);
            t.typeAnnotation = this.tsParseType();
        });
        return this.finishNode(t, "TSTypeAnnotation");
    }
    tsParseType() {
        assert(this.state.inType);
        const type = this.tsParseNonConditionalType();
        if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
            return type;
        }
        const node = this.startNodeAtNode(type);
        node.checkType = type;
        node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
        this.expect(17);
        node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
        this.expect(14);
        node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
        return this.finishNode(node, "TSConditionalType");
    }
    isAbstractConstructorSignature() {
        return this.isContextual(124) && this.lookahead().type === 77;
    }
    tsParseNonConditionalType() {
        if (this.tsIsStartOfFunctionType()) {
            return this.tsParseFunctionOrConstructorType("TSFunctionType");
        }
        if (this.match(77)) {
            return this.tsParseFunctionOrConstructorType("TSConstructorType");
        }
        else if (this.isAbstractConstructorSignature()) {
            return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
        }
        return this.tsParseUnionTypeOrHigher();
    }
    tsParseTypeAssertion() {
        if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
            this.raise(TSErrors.ReservedTypeAssertion, {
                at: this.state.startLoc
            });
        }
        const node = this.startNode();
        node.typeAnnotation = this.tsInType(() => {
            this.next();
            return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
        });
        this.expect(48);
        node.expression = this.parseMaybeUnary();
        return this.finishNode(node, "TSTypeAssertion");
    }
    tsParseHeritageClause(token) {
        const originalStartLoc = this.state.startLoc;
        const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
            const node = this.startNode();
            node.expression = this.tsParseEntityName();
            if (this.match(47)) {
                node.typeParameters = this.tsParseTypeArguments();
            }
            return this.finishNode(node, "TSExpressionWithTypeArguments");
        });
        if (!delimitedList.length) {
            this.raise(TSErrors.EmptyHeritageClauseType, {
                at: originalStartLoc,
                token
            });
        }
        return delimitedList;
    }
    tsParseInterfaceDeclaration(node, properties = {}) {
        if (this.hasFollowingLineBreak())
            return null;
        this.expectContextual(129);
        if (properties.declare)
            node.declare = true;
        if (tokenIsIdentifier(this.state.type)) {
            node.id = this.parseIdentifier();
            this.checkIdentifier(node.id, 130);
        }
        else {
            node.id = null;
            this.raise(TSErrors.MissingInterfaceName, {
                at: this.state.startLoc
            });
        }
        node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
        if (this.eat(81)) {
            node.extends = this.tsParseHeritageClause("extends");
        }
        const body = this.startNode();
        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
        node.body = this.finishNode(body, "TSInterfaceBody");
        return this.finishNode(node, "TSInterfaceDeclaration");
    }
    tsParseTypeAliasDeclaration(node) {
        node.id = this.parseIdentifier();
        this.checkIdentifier(node.id, 2);
        node.typeAnnotation = this.tsInType(() => {
            node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
            this.expect(29);
            if (this.isContextual(114) && this.lookahead().type !== 16) {
                const node = this.startNode();
                this.next();
                return this.finishNode(node, "TSIntrinsicKeyword");
            }
            return this.tsParseType();
        });
        this.semicolon();
        return this.finishNode(node, "TSTypeAliasDeclaration");
    }
    tsInNoContext(cb) {
        const oldContext = this.state.context;
        this.state.context = [oldContext[0]];
        try {
            return cb();
        }
        finally {
            this.state.context = oldContext;
        }
    }
    tsInType(cb) {
        const oldInType = this.state.inType;
        this.state.inType = true;
        try {
            return cb();
        }
        finally {
            this.state.inType = oldInType;
        }
    }
    tsInDisallowConditionalTypesContext(cb) {
        const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
        this.state.inDisallowConditionalTypesContext = true;
        try {
            return cb();
        }
        finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
        }
    }
    tsInAllowConditionalTypesContext(cb) {
        const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
        this.state.inDisallowConditionalTypesContext = false;
        try {
            return cb();
        }
        finally {
            this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
        }
    }
    tsEatThenParseType(token) {
        if (this.match(token)) {
            return this.tsNextThenParseType();
        }
    }
    tsExpectThenParseType(token) {
        return this.tsInType(() => {
            this.expect(token);
            return this.tsParseType();
        });
    }
    tsNextThenParseType() {
        return this.tsInType(() => {
            this.next();
            return this.tsParseType();
        });
    }
    tsParseEnumMember() {
        const node = this.startNode();
        node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
        if (this.eat(29)) {
            node.initializer = super.parseMaybeAssignAllowIn();
        }
        return this.finishNode(node, "TSEnumMember");
    }
    tsParseEnumDeclaration(node, properties = {}) {
        if (properties.const)
            node.const = true;
        if (properties.declare)
            node.declare = true;
        this.expectContextual(126);
        node.id = this.parseIdentifier();
        this.checkIdentifier(node.id, node.const ? 8971 : 8459);
        this.expect(5);
        node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
        this.expect(8);
        return this.finishNode(node, "TSEnumDeclaration");
    }
    tsParseModuleBlock() {
        const node = this.startNode();
        this.scope.enter(0);
        this.expect(5);
        super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);
        this.scope.exit();
        return this.finishNode(node, "TSModuleBlock");
    }
    tsParseModuleOrNamespaceDeclaration(node, nested = false) {
        node.id = this.parseIdentifier();
        if (!nested) {
            this.checkIdentifier(node.id, 1024);
        }
        if (this.eat(16)) {
            const inner = this.startNode();
            this.tsParseModuleOrNamespaceDeclaration(inner, true);
            node.body = inner;
        }
        else {
            this.scope.enter(256);
            this.prodParam.enter(0);
            node.body = this.tsParseModuleBlock();
            this.prodParam.exit();
            this.scope.exit();
        }
        return this.finishNode(node, "TSModuleDeclaration");
    }
    tsParseAmbientExternalModuleDeclaration(node) {
        if (this.isContextual(112)) {
            node.global = true;
            node.id = this.parseIdentifier();
        }
        else if (this.match(133)) {
            node.id = super.parseStringLiteral(this.state.value);
        }
        else {
            this.unexpected();
        }
        if (this.match(5)) {
            this.scope.enter(256);
            this.prodParam.enter(0);
            node.body = this.tsParseModuleBlock();
            this.prodParam.exit();
            this.scope.exit();
        }
        else {
            this.semicolon();
        }
        return this.finishNode(node, "TSModuleDeclaration");
    }
    tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
        node.isExport = isExport || false;
        node.id = maybeDefaultIdentifier || this.parseIdentifier();
        this.checkIdentifier(node.id, 4096);
        this.expect(29);
        const moduleReference = this.tsParseModuleReference();
        if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
            this.raise(TSErrors.ImportAliasHasImportType, {
                at: moduleReference
            });
        }
        node.moduleReference = moduleReference;
        this.semicolon();
        return this.finishNode(node, "TSImportEqualsDeclaration");
    }
    tsIsExternalModuleReference() {
        return this.isContextual(119) && this.lookaheadCharCode() === 40;
    }
    tsParseModuleReference() {
        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
    }
    tsParseExternalModuleReference() {
        const node = this.startNode();
        this.expectContextual(119);
        this.expect(10);
        if (!this.match(133)) {
            this.unexpected();
        }
        node.expression = super.parseExprAtom();
        this.expect(11);
        this.sawUnambiguousESM = true;
        return this.finishNode(node, "TSExternalModuleReference");
    }
    tsLookAhead(f) {
        const state = this.state.clone();
        const res = f();
        this.state = state;
        return res;
    }
    tsTryParseAndCatch(f) {
        const result = this.tryParse(abort => f() || abort());
        if (result.aborted || !result.node)
            return;
        if (result.error)
            this.state = result.failState;
        return result.node;
    }
    tsTryParse(f) {
        const state = this.state.clone();
        const result = f();
        if (result !== undefined && result !== false) {
            return result;
        }
        this.state = state;
    }
    tsTryParseDeclare(nany) {
        if (this.isLineTerminator()) {
            return;
        }
        let startType = this.state.type;
        let kind;
        if (this.isContextual(100)) {
            startType = 74;
            kind = "let";
        }
        return this.tsInAmbientContext(() => {
            switch (startType) {
                case 68:
                    nany.declare = true;
                    return super.parseFunctionStatement(nany, false, false);
                case 80:
                    nany.declare = true;
                    return this.parseClass(nany, true, false);
                case 126:
                    return this.tsParseEnumDeclaration(nany, {
                        declare: true
                    });
                case 112:
                    return this.tsParseAmbientExternalModuleDeclaration(nany);
                case 75:
                case 74:
                    if (!this.match(75) || !this.isLookaheadContextual("enum")) {
                        nany.declare = true;
                        return this.parseVarStatement(nany, kind || this.state.value, true);
                    }
                    this.expect(75);
                    return this.tsParseEnumDeclaration(nany, {
                        const: true,
                        declare: true
                    });
                case 129:
                    {
                        const result = this.tsParseInterfaceDeclaration(nany, {
                            declare: true
                        });
                        if (result)
                            return result;
                    }
                default:
                    if (tokenIsIdentifier(startType)) {
                        return this.tsParseDeclaration(nany, this.state.value, true, null);
                    }
            }
        });
    }
    tsTryParseExportDeclaration() {
        return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
    }
    tsParseExpressionStatement(node, expr, decorators) {
        switch (expr.name) {
            case "declare":
                {
                    const declaration = this.tsTryParseDeclare(node);
                    if (declaration) {
                        declaration.declare = true;
                    }
                    return declaration;
                }
            case "global":
                if (this.match(5)) {
                    this.scope.enter(256);
                    this.prodParam.enter(0);
                    const mod = node;
                    mod.global = true;
                    mod.id = expr;
                    mod.body = this.tsParseModuleBlock();
                    this.scope.exit();
                    this.prodParam.exit();
                    return this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
            default:
                return this.tsParseDeclaration(node, expr.name, false, decorators);
        }
    }
    tsParseDeclaration(node, value, next, decorators) {
        switch (value) {
            case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
                    return this.tsParseAbstractDeclaration(node, decorators);
                }
                break;
            case "module":
                if (this.tsCheckLineTerminator(next)) {
                    if (this.match(133)) {
                        return this.tsParseAmbientExternalModuleDeclaration(node);
                    }
                    else if (tokenIsIdentifier(this.state.type)) {
                        return this.tsParseModuleOrNamespaceDeclaration(node);
                    }
                }
                break;
            case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
            case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
                    return this.tsParseTypeAliasDeclaration(node);
                }
                break;
        }
    }
    tsCheckLineTerminator(next) {
        if (next) {
            if (this.hasFollowingLineBreak())
                return false;
            this.next();
            return true;
        }
        return !this.isLineTerminator();
    }
    tsTryParseGenericAsyncArrowFunction(startLoc) {
        if (!this.match(47))
            return;
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        const res = this.tsTryParseAndCatch(() => {
            const node = this.startNodeAt(startLoc);
            node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            super.parseFunctionParams(node);
            node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
            this.expect(19);
            return node;
        });
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        if (!res)
            return;
        return super.parseArrowExpression(res, null, true);
    }
    tsParseTypeArgumentsInExpression() {
        if (this.reScan_lt() !== 47)
            return;
        return this.tsParseTypeArguments();
    }
    tsParseTypeArguments() {
        const node = this.startNode();
        node.params = this.tsInType(() => this.tsInNoContext(() => {
            this.expect(47);
            return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
        }));
        if (node.params.length === 0) {
            this.raise(TSErrors.EmptyTypeArguments, {
                at: node
            });
        }
        else if (!this.state.inType && this.curContext() === types.brace) {
            this.reScan_lt_gt();
        }
        this.expect(48);
        return this.finishNode(node, "TSTypeParameterInstantiation");
    }
    tsIsDeclarationStart() {
        return tokenIsTSDeclarationStart(this.state.type);
    }
    isExportDefaultSpecifier() {
        if (this.tsIsDeclarationStart())
            return false;
        return super.isExportDefaultSpecifier();
    }
    parseAssignableListItem(flags, decorators) {
        const startLoc = this.state.startLoc;
        const modified = {};
        this.tsParseModifiers({
            allowedModifiers: ["public", "private", "protected", "override", "readonly"]
        }, modified);
        const accessibility = modified.accessibility;
        const override = modified.override;
        const readonly = modified.readonly;
        if (!(flags & 4) && (accessibility || readonly || override)) {
            this.raise(TSErrors.UnexpectedParameterModifier, {
                at: startLoc
            });
        }
        const left = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(left, flags);
        const elt = this.parseMaybeDefault(left.loc.start, left);
        if (accessibility || readonly || override) {
            const pp = this.startNodeAt(startLoc);
            if (decorators.length) {
                pp.decorators = decorators;
            }
            if (accessibility)
                pp.accessibility = accessibility;
            if (readonly)
                pp.readonly = readonly;
            if (override)
                pp.override = override;
            if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
                this.raise(TSErrors.UnsupportedParameterPropertyKind, {
                    at: pp
                });
            }
            pp.parameter = elt;
            return this.finishNode(pp, "TSParameterProperty");
        }
        if (decorators.length) {
            left.decorators = decorators;
        }
        return elt;
    }
    isSimpleParameter(node) {
        return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
    }
    tsDisallowOptionalPattern(node) {
        for (const param of node.params) {
            if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
                this.raise(TSErrors.PatternIsOptional, {
                    at: param
                });
            }
        }
    }
    setArrowFunctionParameters(node, params, trailingCommaLoc) {
        super.setArrowFunctionParameters(node, params, trailingCommaLoc);
        this.tsDisallowOptionalPattern(node);
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
        if (this.match(14)) {
            node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
        }
        const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;
        if (bodilessType && !this.match(5) && this.isLineTerminator()) {
            return this.finishNode(node, bodilessType);
        }
        if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
            this.raise(TSErrors.DeclareFunctionHasImplementation, {
                at: node
            });
            if (node.declare) {
                return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
            }
        }
        this.tsDisallowOptionalPattern(node);
        return super.parseFunctionBodyAndFinish(node, type, isMethod);
    }
    registerFunctionStatementId(node) {
        if (!node.body && node.id) {
            this.checkIdentifier(node.id, 1024);
        }
        else {
            super.registerFunctionStatementId(node);
        }
    }
    tsCheckForInvalidTypeCasts(items) {
        items.forEach(node => {
            if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
                this.raise(TSErrors.UnexpectedTypeAnnotation, {
                    at: node.typeAnnotation
                });
            }
        });
    }
    toReferencedList(exprList, isInParens) {
        this.tsCheckForInvalidTypeCasts(exprList);
        return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
        if (node.type === "ArrayExpression") {
            this.tsCheckForInvalidTypeCasts(node.elements);
        }
        return node;
    }
    parseSubscript(base, startLoc, noCalls, state) {
        if (!this.hasPrecedingLineBreak() && this.match(35)) {
            this.state.canStartJSXElement = false;
            this.next();
            const nonNullExpression = this.startNodeAt(startLoc);
            nonNullExpression.expression = base;
            return this.finishNode(nonNullExpression, "TSNonNullExpression");
        }
        let isOptionalCall = false;
        if (this.match(18) && this.lookaheadCharCode() === 60) {
            if (noCalls) {
                state.stop = true;
                return base;
            }
            state.optionalChainMember = isOptionalCall = true;
            this.next();
        }
        if (this.match(47) || this.match(51)) {
            let missingParenErrorLoc;
            const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                    const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
                    if (asyncArrowFn) {
                        return asyncArrowFn;
                    }
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments)
                    return;
                if (isOptionalCall && !this.match(10)) {
                    missingParenErrorLoc = this.state.curPosition();
                    return;
                }
                if (tokenIsTemplate(this.state.type)) {
                    const result = super.parseTaggedTemplateExpression(base, startLoc, state);
                    result.typeParameters = typeArguments;
                    return result;
                }
                if (!noCalls && this.eat(10)) {
                    const node = this.startNodeAt(startLoc);
                    node.callee = base;
                    node.arguments = this.parseCallExpressionArguments(11, false);
                    this.tsCheckForInvalidTypeCasts(node.arguments);
                    node.typeParameters = typeArguments;
                    if (state.optionalChainMember) {
                        node.optional = isOptionalCall;
                    }
                    return this.finishCallExpression(node, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
                    return;
                }
                const node = this.startNodeAt(startLoc);
                node.expression = base;
                node.typeParameters = typeArguments;
                return this.finishNode(node, "TSInstantiationExpression");
            });
            if (missingParenErrorLoc) {
                this.unexpected(missingParenErrorLoc, 10);
            }
            if (result) {
                if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
                    this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {
                        at: this.state.startLoc
                    });
                }
                return result;
            }
        }
        return super.parseSubscript(base, startLoc, noCalls, state);
    }
    parseNewCallee(node) {
        var _callee$extra;
        super.parseNewCallee(node);
        const { callee } = node;
        if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
            node.typeParameters = callee.typeParameters;
            node.callee = callee.expression;
        }
    }
    parseExprOp(left, leftStartLoc, minPrec) {
        let isSatisfies;
        if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
            const node = this.startNodeAt(leftStartLoc);
            node.expression = left;
            node.typeAnnotation = this.tsInType(() => {
                this.next();
                if (this.match(75)) {
                    if (isSatisfies) {
                        this.raise(Errors.UnexpectedKeyword, {
                            at: this.state.startLoc,
                            keyword: "const"
                        });
                    }
                    return this.tsParseTypeReference();
                }
                return this.tsParseType();
            });
            this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
            this.reScan_lt_gt();
            return this.parseExprOp(node, leftStartLoc, minPrec);
        }
        return super.parseExprOp(left, leftStartLoc, minPrec);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (!this.state.isAmbientContext) {
            super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
        }
    }
    checkImportReflection(node) {
        super.checkImportReflection(node);
        if (node.module && node.importKind !== "value") {
            this.raise(TSErrors.ImportReflectionHasImportType, {
                at: node.specifiers[0].loc.start
            });
        }
    }
    checkDuplicateExports() { }
    isPotentialImportPhase(isExport) {
        if (super.isPotentialImportPhase(isExport))
            return true;
        if (this.isContextual(130)) {
            const ch = this.lookaheadCharCode();
            return isExport ? ch === 123 || ch === 42 : ch !== 61;
        }
        return !isExport && this.isContextual(87);
    }
    applyImportPhase(node, isExport, phase, loc) {
        super.applyImportPhase(node, isExport, phase, loc);
        if (isExport) {
            node.exportKind = phase === "type" ? "type" : "value";
        }
        else {
            node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
        }
    }
    parseImport(node) {
        if (this.match(133)) {
            node.importKind = "value";
            return super.parseImport(node);
        }
        let importNode;
        if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
            node.importKind = "value";
            return this.tsParseImportEqualsDeclaration(node);
        }
        else if (this.isContextual(130)) {
            const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            if (this.lookaheadCharCode() === 61) {
                return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
            }
            else {
                importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
            }
        }
        else {
            importNode = super.parseImport(node);
        }
        if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
            this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {
                at: importNode
            });
        }
        return importNode;
    }
    parseExport(node, decorators) {
        if (this.match(83)) {
            this.next();
            let maybeDefaultIdentifier = null;
            if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
                maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
            }
            else {
                node.importKind = "value";
            }
            return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);
        }
        else if (this.eat(29)) {
            const assign = node;
            assign.expression = super.parseExpression();
            this.semicolon();
            this.sawUnambiguousESM = true;
            return this.finishNode(assign, "TSExportAssignment");
        }
        else if (this.eatContextual(93)) {
            const decl = node;
            this.expectContextual(128);
            decl.id = this.parseIdentifier();
            this.semicolon();
            return this.finishNode(decl, "TSNamespaceExportDeclaration");
        }
        else {
            return super.parseExport(node, decorators);
        }
    }
    isAbstractClass() {
        return this.isContextual(124) && this.lookahead().type === 80;
    }
    parseExportDefaultExpression() {
        if (this.isAbstractClass()) {
            const cls = this.startNode();
            this.next();
            cls.abstract = true;
            return this.parseClass(cls, true, true);
        }
        if (this.match(129)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
                return result;
        }
        return super.parseExportDefaultExpression();
    }
    parseVarStatement(node, kind, allowMissingInitializer = false) {
        const { isAmbientContext } = this.state;
        const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
        if (!isAmbientContext)
            return declaration;
        for (const { id, init } of declaration.declarations) {
            if (!init)
                continue;
            if (kind !== "const" || !!id.typeAnnotation) {
                this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {
                    at: init
                });
            }
            else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
                this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {
                    at: init
                });
            }
        }
        return declaration;
    }
    parseStatementContent(flags, decorators) {
        if (this.match(75) && this.isLookaheadContextual("enum")) {
            const node = this.startNode();
            this.expect(75);
            return this.tsParseEnumDeclaration(node, {
                const: true
            });
        }
        if (this.isContextual(126)) {
            return this.tsParseEnumDeclaration(this.startNode());
        }
        if (this.isContextual(129)) {
            const result = this.tsParseInterfaceDeclaration(this.startNode());
            if (result)
                return result;
        }
        return super.parseStatementContent(flags, decorators);
    }
    parseAccessModifier() {
        return this.tsParseModifier(["public", "protected", "private"]);
    }
    tsHasSomeModifiers(member, modifiers) {
        return modifiers.some(modifier => {
            if (tsIsAccessModifier(modifier)) {
                return member.accessibility === modifier;
            }
            return !!member[modifier];
        });
    }
    tsIsStartOfStaticBlocks() {
        return this.isContextual(106) && this.lookaheadCharCode() === 123;
    }
    parseClassMember(classBody, member, state) {
        const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
        this.tsParseModifiers({
            allowedModifiers: modifiers,
            disallowedModifiers: ["in", "out"],
            stopOnStartOfClassStaticBlock: true,
            errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
        }, member);
        const callParseClassMemberWithIsStatic = () => {
            if (this.tsIsStartOfStaticBlocks()) {
                this.next();
                this.next();
                if (this.tsHasSomeModifiers(member, modifiers)) {
                    this.raise(TSErrors.StaticBlockCannotHaveModifier, {
                        at: this.state.curPosition()
                    });
                }
                super.parseClassStaticBlock(classBody, member);
            }
            else {
                this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            }
        };
        if (member.declare) {
            this.tsInAmbientContext(callParseClassMemberWithIsStatic);
        }
        else {
            callParseClassMemberWithIsStatic();
        }
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const idx = this.tsTryParseIndexSignature(member);
        if (idx) {
            classBody.body.push(idx);
            if (member.abstract) {
                this.raise(TSErrors.IndexSignatureHasAbstract, {
                    at: member
                });
            }
            if (member.accessibility) {
                this.raise(TSErrors.IndexSignatureHasAccessibility, {
                    at: member,
                    modifier: member.accessibility
                });
            }
            if (member.declare) {
                this.raise(TSErrors.IndexSignatureHasDeclare, {
                    at: member
                });
            }
            if (member.override) {
                this.raise(TSErrors.IndexSignatureHasOverride, {
                    at: member
                });
            }
            return;
        }
        if (!this.state.inAbstractClass && member.abstract) {
            this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {
                at: member
            });
        }
        if (member.override) {
            if (!state.hadSuperClass) {
                this.raise(TSErrors.OverrideNotInSubClass, {
                    at: member
                });
            }
        }
        super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parsePostMemberNameModifiers(methodOrProp) {
        const optional = this.eat(17);
        if (optional)
            methodOrProp.optional = true;
        if (methodOrProp.readonly && this.match(10)) {
            this.raise(TSErrors.ClassMethodHasReadonly, {
                at: methodOrProp
            });
        }
        if (methodOrProp.declare && this.match(10)) {
            this.raise(TSErrors.ClassMethodHasDeclare, {
                at: methodOrProp
            });
        }
    }
    parseExpressionStatement(node, expr, decorators) {
        const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;
        return decl || super.parseExpressionStatement(node, expr, decorators);
    }
    shouldParseExportDeclaration() {
        if (this.tsIsDeclarationStart())
            return true;
        return super.shouldParseExportDeclaration();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
        if (!this.state.maybeInArrowParameters || !this.match(17)) {
            return super.parseConditional(expr, startLoc, refExpressionErrors);
        }
        const result = this.tryParse(() => super.parseConditional(expr, startLoc));
        if (!result.node) {
            if (result.error) {
                super.setOptionalParametersError(refExpressionErrors, result.error);
            }
            return expr;
        }
        if (result.error)
            this.state = result.failState;
        return result.node;
    }
    parseParenItem(node, startLoc) {
        node = super.parseParenItem(node, startLoc);
        if (this.eat(17)) {
            node.optional = true;
            this.resetEndLocation(node);
        }
        if (this.match(14)) {
            const typeCastNode = this.startNodeAt(startLoc);
            typeCastNode.expression = node;
            typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
            return this.finishNode(typeCastNode, "TSTypeCastExpression");
        }
        return node;
    }
    parseExportDeclaration(node) {
        if (!this.state.isAmbientContext && this.isContextual(125)) {
            return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
        }
        const startLoc = this.state.startLoc;
        const isDeclare = this.eatContextual(125);
        if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
            throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {
                at: this.state.startLoc
            });
        }
        const isIdentifier = tokenIsIdentifier(this.state.type);
        const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
        if (!declaration)
            return null;
        if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
            node.exportKind = "type";
        }
        if (isDeclare) {
            this.resetStartLocation(declaration, startLoc);
            declaration.declare = true;
        }
        return declaration;
    }
    parseClassId(node, isStatement, optionalId, bindingType) {
        if ((!isStatement || optionalId) && this.isContextual(113)) {
            return;
        }
        super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
        const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
        if (typeParameters)
            node.typeParameters = typeParameters;
    }
    parseClassPropertyAnnotation(node) {
        if (!node.optional) {
            if (this.eat(35)) {
                node.definite = true;
            }
            else if (this.eat(17)) {
                node.optional = true;
            }
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
            node.typeAnnotation = type;
    }
    parseClassProperty(node) {
        this.parseClassPropertyAnnotation(node);
        if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
            this.raise(TSErrors.DeclareClassFieldHasInitializer, {
                at: this.state.startLoc
            });
        }
        if (node.abstract && this.match(29)) {
            const { key } = node;
            this.raise(TSErrors.AbstractPropertyHasInitializer, {
                at: this.state.startLoc,
                propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
            });
        }
        return super.parseClassProperty(node);
    }
    parseClassPrivateProperty(node) {
        if (node.abstract) {
            this.raise(TSErrors.PrivateElementHasAbstract, {
                at: node
            });
        }
        if (node.accessibility) {
            this.raise(TSErrors.PrivateElementHasAccessibility, {
                at: node,
                modifier: node.accessibility
            });
        }
        this.parseClassPropertyAnnotation(node);
        return super.parseClassPrivateProperty(node);
    }
    parseClassAccessorProperty(node) {
        this.parseClassPropertyAnnotation(node);
        if (node.optional) {
            this.raise(TSErrors.AccessorCannotBeOptional, {
                at: node
            });
        }
        return super.parseClassAccessorProperty(node);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
        if (typeParameters && isConstructor) {
            this.raise(TSErrors.ConstructorHasTypeParameters, {
                at: typeParameters
            });
        }
        const { declare = false, kind } = method;
        if (declare && (kind === "get" || kind === "set")) {
            this.raise(TSErrors.DeclareAccessor, {
                at: method,
                kind
            });
        }
        if (typeParameters)
            method.typeParameters = typeParameters;
        super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
        if (typeParameters)
            method.typeParameters = typeParameters;
        super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    declareClassPrivateMethodInScope(node, kind) {
        if (node.type === "TSDeclareMethod")
            return;
        if (node.type === "MethodDefinition" && !node.value.body)
            return;
        super.declareClassPrivateMethodInScope(node, kind);
    }
    parseClassSuper(node) {
        super.parseClassSuper(node);
        if (node.superClass && (this.match(47) || this.match(51))) {
            node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
        }
        if (this.eatContextual(113)) {
            node.implements = this.tsParseHeritageClause("implements");
        }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
        if (typeParameters)
            prop.typeParameters = typeParameters;
        return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
    }
    parseFunctionParams(node, isConstructor) {
        const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
        if (typeParameters)
            node.typeParameters = typeParameters;
        super.parseFunctionParams(node, isConstructor);
    }
    parseVarId(decl, kind) {
        super.parseVarId(decl, kind);
        if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
            decl.definite = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
            decl.id.typeAnnotation = type;
            this.resetEndLocation(decl.id);
        }
    }
    parseAsyncArrowFromCallExpression(node, call) {
        if (this.match(14)) {
            node.returnType = this.tsParseTypeAnnotation();
        }
        return super.parseAsyncArrowFromCallExpression(node, call);
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
        let state;
        let jsx;
        let typeCast;
        if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
            state = this.state.clone();
            jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!jsx.error)
                return jsx.node;
            const { context } = this.state;
            const currentContext = context[context.length - 1];
            if (currentContext === types.j_oTag || currentContext === types.j_expr) {
                context.pop();
            }
        }
        if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        }
        if (!state || state === this.state)
            state = this.state.clone();
        let typeParameters;
        const arrow = this.tryParse(abort => {
            var _expr$extra, _typeParameters;
            typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
            const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
                abort();
            }
            if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
                this.resetStartLocationFromNode(expr, typeParameters);
            }
            expr.typeParameters = typeParameters;
            return expr;
        }, state);
        if (!arrow.error && !arrow.aborted) {
            if (typeParameters)
                this.reportReservedArrowTypeParam(typeParameters);
            return arrow.node;
        }
        if (!jsx) {
            assert(!this.hasPlugin("jsx"));
            typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
            if (!typeCast.error)
                return typeCast.node;
        }
        if ((_jsx2 = jsx) != null && _jsx2.node) {
            this.state = jsx.failState;
            return jsx.node;
        }
        if (arrow.node) {
            this.state = arrow.failState;
            if (typeParameters)
                this.reportReservedArrowTypeParam(typeParameters);
            return arrow.node;
        }
        if ((_typeCast = typeCast) != null && _typeCast.node) {
            this.state = typeCast.failState;
            return typeCast.node;
        }
        throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
    }
    reportReservedArrowTypeParam(node) {
        var _node$extra;
        if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
            this.raise(TSErrors.ReservedArrowTypeParam, {
                at: node
            });
        }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
        if (!this.hasPlugin("jsx") && this.match(47)) {
            return this.tsParseTypeAssertion();
        }
        return super.parseMaybeUnary(refExpressionErrors, sawUnary);
    }
    parseArrow(node) {
        if (this.match(14)) {
            const result = this.tryParse(abort => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                if (this.canInsertSemicolon() || !this.match(19))
                    abort();
                return returnType;
            });
            if (result.aborted)
                return;
            if (!result.thrown) {
                if (result.error)
                    this.state = result.failState;
                node.returnType = result.node;
            }
        }
        return super.parseArrow(node);
    }
    parseAssignableListItemTypes(param, flags) {
        if (!(flags & 2))
            return param;
        if (this.eat(17)) {
            param.optional = true;
        }
        const type = this.tsTryParseTypeAnnotation();
        if (type)
            param.typeAnnotation = type;
        this.resetEndLocation(param);
        return param;
    }
    isAssignable(node, isBinding) {
        switch (node.type) {
            case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
            case "TSParameterProperty":
                return true;
            default:
                return super.isAssignable(node, isBinding);
        }
    }
    toAssignable(node, isLHS = false) {
        switch (node.type) {
            case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
                if (isLHS) {
                    this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {
                        at: node
                    });
                }
                else {
                    this.raise(TSErrors.UnexpectedTypeCastInParameter, {
                        at: node
                    });
                }
                this.toAssignable(node.expression, isLHS);
                break;
            case "AssignmentExpression":
                if (!isLHS && node.left.type === "TSTypeCastExpression") {
                    node.left = this.typeCastToParameter(node.left);
                }
            default:
                super.toAssignable(node, isLHS);
        }
    }
    toAssignableParenthesizedExpression(node, isLHS) {
        switch (node.expression.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSNonNullExpression":
            case "TSTypeAssertion":
            case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
            default:
                super.toAssignable(node, isLHS);
        }
    }
    checkToRestConversion(node, allowPattern) {
        switch (node.type) {
            case "TSAsExpression":
            case "TSSatisfiesExpression":
            case "TSTypeAssertion":
            case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
            default:
                super.checkToRestConversion(node, allowPattern);
        }
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding) {
        return getOwn({
            TSTypeCastExpression: true,
            TSParameterProperty: "parameter",
            TSNonNullExpression: "expression",
            TSAsExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
            TSSatisfiesExpression: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true],
            TSTypeAssertion: (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true]
        }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
    }
    parseBindingAtom() {
        if (this.state.type === 78) {
            return this.parseIdentifier(true);
        }
        return super.parseBindingAtom();
    }
    parseMaybeDecoratorArguments(expr) {
        if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsParseTypeArgumentsInExpression();
            if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                call.typeParameters = typeArguments;
                return call;
            }
            this.unexpected(null, 10);
        }
        return super.parseMaybeDecoratorArguments(expr);
    }
    checkCommaAfterRest(close) {
        if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
            this.next();
            return false;
        }
        return super.checkCommaAfterRest(close);
    }
    isClassMethod() {
        return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
        return this.match(35) || this.match(14) || super.isClassProperty();
    }
    parseMaybeDefault(startLoc, left) {
        const node = super.parseMaybeDefault(startLoc, left);
        if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
            this.raise(TSErrors.TypeAnnotationAfterAssign, {
                at: node.typeAnnotation
            });
        }
        return node;
    }
    getTokenFromCode(code) {
        if (this.state.inType) {
            if (code === 62) {
                this.finishOp(48, 1);
                return;
            }
            if (code === 60) {
                this.finishOp(47, 1);
                return;
            }
        }
        super.getTokenFromCode(code);
    }
    reScan_lt_gt() {
        const { type } = this.state;
        if (type === 47) {
            this.state.pos -= 1;
            this.readToken_lt();
        }
        else if (type === 48) {
            this.state.pos -= 1;
            this.readToken_gt();
        }
    }
    reScan_lt() {
        const { type } = this.state;
        if (type === 51) {
            this.state.pos -= 2;
            this.finishOp(47, 1);
            return 47;
        }
        return type;
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
        for (let i = 0; i < exprList.length; i++) {
            const expr = exprList[i];
            if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
                exprList[i] = this.typeCastToParameter(expr);
            }
        }
        super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    typeCastToParameter(node) {
        node.expression.typeAnnotation = node.typeAnnotation;
        this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
        return node.expression;
    }
    shouldParseArrow(params) {
        if (this.match(14)) {
            return params.every(expr => this.isAssignable(expr, true));
        }
        return super.shouldParseArrow(params);
    }
    shouldParseAsyncArrow() {
        return this.match(14) || super.shouldParseAsyncArrow();
    }
    canHaveLeadingDecorator() {
        return super.canHaveLeadingDecorator() || this.isAbstractClass();
    }
    jsxParseOpeningElementAfterName(node) {
        if (this.match(47) || this.match(51)) {
            const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
            if (typeArguments)
                node.typeParameters = typeArguments;
        }
        return super.jsxParseOpeningElementAfterName(node);
    }
    getGetterSetterExpectedParamCount(method) {
        const baseCount = super.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        const firstParam = params[0];
        const hasContextParam = firstParam && this.isThisParam(firstParam);
        return hasContextParam ? baseCount + 1 : baseCount;
    }
    parseCatchClauseParam() {
        const param = super.parseCatchClauseParam();
        const type = this.tsTryParseTypeAnnotation();
        if (type) {
            param.typeAnnotation = type;
            this.resetEndLocation(param);
        }
        return param;
    }
    tsInAmbientContext(cb) {
        const oldIsAmbientContext = this.state.isAmbientContext;
        this.state.isAmbientContext = true;
        try {
            return cb();
        }
        finally {
            this.state.isAmbientContext = oldIsAmbientContext;
        }
    }
    parseClass(node, isStatement, optionalId) {
        const oldInAbstractClass = this.state.inAbstractClass;
        this.state.inAbstractClass = !!node.abstract;
        try {
            return super.parseClass(node, isStatement, optionalId);
        }
        finally {
            this.state.inAbstractClass = oldInAbstractClass;
        }
    }
    tsParseAbstractDeclaration(node, decorators) {
        if (this.match(80)) {
            node.abstract = true;
            return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
        }
        else if (this.isContextual(129)) {
            if (!this.hasFollowingLineBreak()) {
                node.abstract = true;
                this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {
                    at: node
                });
                return this.tsParseInterfaceDeclaration(node);
            }
        }
        else {
            this.unexpected(null, 80);
        }
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
        const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
        if (method.abstract) {
            const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
            if (hasBody) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, {
                    at: method,
                    methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
                });
            }
        }
        return method;
    }
    tsParseTypeParameterName() {
        const typeName = this.parseIdentifier();
        return typeName.name;
    }
    shouldParseAsAmbientContext() {
        return !!this.getPluginOption("typescript", "dts");
    }
    parse() {
        if (this.shouldParseAsAmbientContext()) {
            this.state.isAmbientContext = true;
        }
        return super.parse();
    }
    getExpression() {
        if (this.shouldParseAsAmbientContext()) {
            this.state.isAmbientContext = true;
        }
        return super.getExpression();
    }
    parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
        if (!isString && isMaybeTypeOnly) {
            this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
            return this.finishNode(node, "ExportSpecifier");
        }
        node.exportKind = "value";
        return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
        if (!importedIsString && isMaybeTypeOnly) {
            this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
            return this.finishNode(specifier, "ImportSpecifier");
        }
        specifier.importKind = "value";
        return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
    }
    parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
        const leftOfAsKey = isImport ? "imported" : "local";
        const rightOfAsKey = isImport ? "local" : "exported";
        let leftOfAs = node[leftOfAsKey];
        let rightOfAs;
        let hasTypeSpecifier = false;
        let canParseAsKeyword = true;
        const loc = leftOfAs.loc.start;
        if (this.isContextual(93)) {
            const firstAs = this.parseIdentifier();
            if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                if (tokenIsKeywordOrIdentifier(this.state.type)) {
                    hasTypeSpecifier = true;
                    leftOfAs = firstAs;
                    rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
                    canParseAsKeyword = false;
                }
                else {
                    rightOfAs = secondAs;
                    canParseAsKeyword = false;
                }
            }
            else if (tokenIsKeywordOrIdentifier(this.state.type)) {
                canParseAsKeyword = false;
                rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
            }
            else {
                hasTypeSpecifier = true;
                leftOfAs = firstAs;
            }
        }
        else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            hasTypeSpecifier = true;
            if (isImport) {
                leftOfAs = this.parseIdentifier(true);
                if (!this.isContextual(93)) {
                    this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
                }
            }
            else {
                leftOfAs = this.parseModuleExportName();
            }
        }
        if (hasTypeSpecifier && isInTypeOnlyImportExport) {
            this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {
                at: loc
            });
        }
        node[leftOfAsKey] = leftOfAs;
        node[rightOfAsKey] = rightOfAs;
        const kindKey = isImport ? "importKind" : "exportKind";
        node[kindKey] = hasTypeSpecifier ? "type" : "value";
        if (canParseAsKeyword && this.eatContextual(93)) {
            node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        }
        if (!node[rightOfAsKey]) {
            node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
        }
        if (isImport) {
            this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
        }
    }
};
function isPossiblyLiteralEnum(expression) {
    if (expression.type !== "MemberExpression")
        return false;
    const { computed, property } = expression;
    if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
        return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
}
function isValidAmbientConstInitializer(expression, estree) {
    var _expression$extra;
    const { type } = expression;
    if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
        return false;
    }
    if (estree) {
        if (type === "Literal") {
            const { value } = expression;
            if (typeof value === "string" || typeof value === "boolean") {
                return true;
            }
        }
    }
    else {
        if (type === "StringLiteral" || type === "BooleanLiteral") {
            return true;
        }
    }
    if (isNumber$1(expression, estree) || isNegativeNumber(expression, estree)) {
        return true;
    }
    if (type === "TemplateLiteral" && expression.expressions.length === 0) {
        return true;
    }
    if (isPossiblyLiteralEnum(expression)) {
        return true;
    }
    return false;
}
function isNumber$1(expression, estree) {
    if (estree) {
        return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
    }
    return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
}
function isNegativeNumber(expression, estree) {
    if (expression.type === "UnaryExpression") {
        const { operator, argument } = expression;
        if (operator === "-" && isNumber$1(argument, estree)) {
            return true;
        }
    }
    return false;
}
function isUncomputedMemberExpressionChain(expression) {
    if (expression.type === "Identifier")
        return true;
    if (expression.type !== "MemberExpression" || expression.computed) {
        return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
}
const PlaceholderErrors = ParseErrorEnum `placeholders`({
    ClassNameIsRequired: "A class name is required.",
    UnexpectedSpace: "Unexpected space in placeholder."
});
var placeholders = superClass => class PlaceholdersParserMixin extends superClass {
    parsePlaceholder(expectedNode) {
        if (this.match(144)) {
            const node = this.startNode();
            this.next();
            this.assertNoSpace();
            node.name = super.parseIdentifier(true);
            this.assertNoSpace();
            this.expect(144);
            return this.finishPlaceholder(node, expectedNode);
        }
    }
    finishPlaceholder(node, expectedNode) {
        const isFinished = !!(node.expectedNode && node.type === "Placeholder");
        node.expectedNode = expectedNode;
        return isFinished ? node : this.finishNode(node, "Placeholder");
    }
    getTokenFromCode(code) {
        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
            this.finishOp(144, 2);
        }
        else {
            super.getTokenFromCode(code);
        }
    }
    parseExprAtom(refExpressionErrors) {
        return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
    }
    parseIdentifier(liberal) {
        return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word !== undefined) {
            super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
        }
    }
    parseBindingAtom() {
        return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
    }
    isValidLVal(type, isParenthesized, binding) {
        return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
    }
    toAssignable(node, isLHS) {
        if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
            node.expectedNode = "Pattern";
        }
        else {
            super.toAssignable(node, isLHS);
        }
    }
    chStartsBindingIdentifier(ch, pos) {
        if (super.chStartsBindingIdentifier(ch, pos)) {
            return true;
        }
        const nextToken = this.lookahead();
        if (nextToken.type === 144) {
            return true;
        }
        return false;
    }
    verifyBreakContinue(node, isBreak) {
        if (node.label && node.label.type === "Placeholder")
            return;
        super.verifyBreakContinue(node, isBreak);
    }
    parseExpressionStatement(node, expr) {
        var _expr$extra;
        if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
            return super.parseExpressionStatement(node, expr);
        }
        if (this.match(14)) {
            const stmt = node;
            stmt.label = this.finishPlaceholder(expr, "Identifier");
            this.next();
            stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
            return this.finishNode(stmt, "LabeledStatement");
        }
        this.semicolon();
        node.name = expr.name;
        return this.finishPlaceholder(node, "Statement");
    }
    parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
        return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
    }
    parseFunctionId(requireId) {
        return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
    }
    parseClass(node, isStatement, optionalId) {
        const type = isStatement ? "ClassDeclaration" : "ClassExpression";
        this.next();
        const oldStrict = this.state.strict;
        const placeholder = this.parsePlaceholder("Identifier");
        if (placeholder) {
            if (this.match(81) || this.match(144) || this.match(5)) {
                node.id = placeholder;
            }
            else if (optionalId || !isStatement) {
                node.id = null;
                node.body = this.finishPlaceholder(placeholder, "ClassBody");
                return this.finishNode(node, type);
            }
            else {
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, {
                    at: this.state.startLoc
                });
            }
        }
        else {
            this.parseClassId(node, isStatement, optionalId);
        }
        super.parseClassSuper(node);
        node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, type);
    }
    parseExport(node, decorators) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder)
            return super.parseExport(node, decorators);
        if (!this.isContextual(98) && !this.match(12)) {
            node.specifiers = [];
            node.source = null;
            node.declaration = this.finishPlaceholder(placeholder, "Declaration");
            return this.finishNode(node, "ExportNamedDeclaration");
        }
        this.expectPlugin("exportDefaultFrom");
        const specifier = this.startNode();
        specifier.exported = placeholder;
        node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return super.parseExport(node, decorators);
    }
    isExportDefaultSpecifier() {
        if (this.match(65)) {
            const next = this.nextTokenStart();
            if (this.isUnparsedContextual(next, "from")) {
                if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {
                    return true;
                }
            }
        }
        return super.isExportDefaultSpecifier();
    }
    maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
        var _specifiers;
        if ((_specifiers = node.specifiers) != null && _specifiers.length) {
            return true;
        }
        return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
    }
    checkExport(node) {
        const { specifiers } = node;
        if (specifiers != null && specifiers.length) {
            node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
        }
        super.checkExport(node);
        node.specifiers = specifiers;
    }
    parseImport(node) {
        const placeholder = this.parsePlaceholder("Identifier");
        if (!placeholder)
            return super.parseImport(node);
        node.specifiers = [];
        if (!this.isContextual(98) && !this.match(12)) {
            node.source = this.finishPlaceholder(placeholder, "StringLiteral");
            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
        }
        const specifier = this.startNodeAtNode(placeholder);
        specifier.local = placeholder;
        node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
        if (this.eat(12)) {
            const hasStarImport = this.maybeParseStarImportSpecifier(node);
            if (!hasStarImport)
                this.parseNamedImportSpecifiers(node);
        }
        this.expectContextual(98);
        node.source = this.parseImportSource();
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
    }
    parseImportSource() {
        return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
    }
    assertNoSpace() {
        if (this.state.start > this.state.lastTokEndLoc.index) {
            this.raise(PlaceholderErrors.UnexpectedSpace, {
                at: this.state.lastTokEndLoc
            });
        }
    }
};
var v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {
    parseV8Intrinsic() {
        if (this.match(54)) {
            const v8IntrinsicStartLoc = this.state.startLoc;
            const node = this.startNode();
            this.next();
            if (tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName();
                const identifier = this.createIdentifier(node, name);
                identifier.type = "V8IntrinsicIdentifier";
                if (this.match(10)) {
                    return identifier;
                }
            }
            this.unexpected(v8IntrinsicStartLoc);
        }
    }
    parseExprAtom(refExpressionErrors) {
        return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
    }
};
function hasPlugin(plugins, expectedConfig) {
    const [expectedName, expectedOptions] = typeof expectedConfig === "string" ? [expectedConfig, {}] : expectedConfig;
    const expectedKeys = Object.keys(expectedOptions);
    const expectedOptionsIsEmpty = expectedKeys.length === 0;
    return plugins.some(p => {
        if (typeof p === "string") {
            return expectedOptionsIsEmpty && p === expectedName;
        }
        else {
            const [pluginName, pluginOptions] = p;
            if (pluginName !== expectedName) {
                return false;
            }
            for (const key of expectedKeys) {
                if (pluginOptions[key] !== expectedOptions[key]) {
                    return false;
                }
            }
            return true;
        }
    });
}
function getPluginOption(plugins, name, option) {
    const plugin = plugins.find(plugin => {
        if (Array.isArray(plugin)) {
            return plugin[0] === name;
        }
        else {
            return plugin === name;
        }
    });
    if (plugin && Array.isArray(plugin) && plugin.length > 1) {
        return plugin[1][option];
    }
    return null;
}
const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
function validatePlugins(plugins) {
    if (hasPlugin(plugins, "decorators")) {
        if (hasPlugin(plugins, "decorators-legacy")) {
            throw new Error("Cannot use the decorators and decorators-legacy plugin together");
        }
        const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
        if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
            throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
        }
        const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
        if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
            throw new Error("'allowCallParenthesized' must be a boolean.");
        }
    }
    if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript")) {
        throw new Error("Cannot combine flow and typescript plugins.");
    }
    if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic")) {
        throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    }
    if (hasPlugin(plugins, "pipelineOperator")) {
        const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
        if (!PIPELINE_PROPOSALS.includes(proposal)) {
            const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
            throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
        }
        const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", {
                syntaxType: "hash"
            }]);
        if (proposal === "hack") {
            if (hasPlugin(plugins, "placeholders")) {
                throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
            }
            if (hasPlugin(plugins, "v8intrinsic")) {
                throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
            }
            const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
            if (!TOPIC_TOKENS.includes(topicToken)) {
                const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");
                throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
            }
            if (topicToken === "#" && tupleSyntaxIsHash) {
                throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
        }
        else if (proposal === "smart" && tupleSyntaxIsHash) {
            throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
        }
    }
    if (hasPlugin(plugins, "moduleAttributes")) {
        {
            if (hasPlugin(plugins, "importAssertions") || hasPlugin(plugins, "importAttributes")) {
                throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
            }
            const moduleAttributesVersionPluginOption = getPluginOption(plugins, "moduleAttributes", "version");
            if (moduleAttributesVersionPluginOption !== "may-2020") {
                throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
            }
        }
    }
    if (hasPlugin(plugins, "importAssertions") && hasPlugin(plugins, "importAttributes")) {
        throw new Error("Cannot combine importAssertions and importAttributes plugins.");
    }
    if (hasPlugin(plugins, "recordAndTuple") && getPluginOption(plugins, "recordAndTuple", "syntaxType") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType"))) {
        throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
    }
    if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
        const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
        error.missingPlugins = "doExpressions";
        throw error;
    }
    if (hasPlugin(plugins, "optionalChainingAssign") && getPluginOption(plugins, "optionalChainingAssign", "version") !== "2023-07") {
        throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is '2023-07'.");
    }
}
const mixinPlugins = {
    estree,
    jsx,
    flow,
    typescript,
    v8intrinsic,
    placeholders
};
const mixinPluginNames = Object.keys(mixinPlugins);
const defaultOptions = {
    sourceType: "script",
    sourceFilename: undefined,
    startColumn: 0,
    startLine: 1,
    allowAwaitOutsideFunction: false,
    allowReturnOutsideFunction: false,
    allowNewTargetOutsideFunction: false,
    allowImportExportEverywhere: false,
    allowSuperOutsideMethod: false,
    allowUndeclaredExports: false,
    plugins: [],
    strictMode: null,
    ranges: false,
    tokens: false,
    createImportExpressions: false,
    createParenthesizedExpressions: false,
    errorRecovery: false,
    attachComment: true,
    annexB: true
};
function getOptions(opts) {
    if (opts == null) {
        return Object.assign({}, defaultOptions);
    }
    if (opts.annexB != null && opts.annexB !== false) {
        throw new Error("The `annexB` option can only be set to `false`.");
    }
    const options = {};
    for (const key of Object.keys(defaultOptions)) {
        var _opts$key;
        options[key] = (_opts$key = opts[key]) != null ? _opts$key : defaultOptions[key];
    }
    return options;
}
class ExpressionParser extends LValParser {
    checkProto(prop, isRecord, protoRef, refExpressionErrors) {
        if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
            return;
        }
        const key = prop.key;
        const name = key.type === "Identifier" ? key.name : key.value;
        if (name === "__proto__") {
            if (isRecord) {
                this.raise(Errors.RecordNoProto, {
                    at: key
                });
                return;
            }
            if (protoRef.used) {
                if (refExpressionErrors) {
                    if (refExpressionErrors.doubleProtoLoc === null) {
                        refExpressionErrors.doubleProtoLoc = key.loc.start;
                    }
                }
                else {
                    this.raise(Errors.DuplicateProto, {
                        at: key
                    });
                }
            }
            protoRef.used = true;
        }
    }
    shouldExitDescending(expr, potentialArrowAt) {
        return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
    }
    getExpression() {
        this.enterInitialScopes();
        this.nextToken();
        const expr = this.parseExpression();
        if (!this.match(139)) {
            this.unexpected();
        }
        this.finalizeRemainingComments();
        expr.comments = this.state.comments;
        expr.errors = this.state.errors;
        if (this.options.tokens) {
            expr.tokens = this.tokens;
        }
        return expr;
    }
    parseExpression(disallowIn, refExpressionErrors) {
        if (disallowIn) {
            return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
        }
        return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
    }
    parseExpressionBase(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const expr = this.parseMaybeAssign(refExpressionErrors);
        if (this.match(12)) {
            const node = this.startNodeAt(startLoc);
            node.expressions = [expr];
            while (this.eat(12)) {
                node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
            }
            this.toReferencedList(node.expressions);
            return this.finishNode(node, "SequenceExpression");
        }
        return expr;
    }
    parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
        return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
        return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    setOptionalParametersError(refExpressionErrors, resultError) {
        var _resultError$loc;
        refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
        const startLoc = this.state.startLoc;
        if (this.isContextual(108)) {
            if (this.prodParam.hasYield) {
                let left = this.parseYield();
                if (afterLeftParse) {
                    left = afterLeftParse.call(this, left, startLoc);
                }
                return left;
            }
        }
        let ownExpressionErrors;
        if (refExpressionErrors) {
            ownExpressionErrors = false;
        }
        else {
            refExpressionErrors = new ExpressionErrors();
            ownExpressionErrors = true;
        }
        const { type } = this.state;
        if (type === 10 || tokenIsIdentifier(type)) {
            this.state.potentialArrowAt = this.state.start;
        }
        let left = this.parseMaybeConditional(refExpressionErrors);
        if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startLoc);
        }
        if (tokenIsAssignment(this.state.type)) {
            const node = this.startNodeAt(startLoc);
            const operator = this.state.value;
            node.operator = operator;
            if (this.match(29)) {
                this.toAssignable(left, true);
                node.left = left;
                const startIndex = startLoc.index;
                if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
                    refExpressionErrors.doubleProtoLoc = null;
                }
                if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
                    refExpressionErrors.shorthandAssignLoc = null;
                }
                if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
                    this.checkDestructuringPrivate(refExpressionErrors);
                    refExpressionErrors.privateKeyLoc = null;
                }
            }
            else {
                node.left = left;
            }
            this.next();
            node.right = this.parseMaybeAssign();
            this.checkLVal(left, {
                in: this.finishNode(node, "AssignmentExpression")
            });
            return node;
        }
        else if (ownExpressionErrors) {
            this.checkExpressionErrors(refExpressionErrors, true);
        }
        return left;
    }
    parseMaybeConditional(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprOps(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
        }
        return this.parseConditional(expr, startLoc, refExpressionErrors);
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
        if (this.eat(17)) {
            const node = this.startNodeAt(startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssignAllowIn();
            this.expect(14);
            node.alternate = this.parseMaybeAssign();
            return this.finishNode(node, "ConditionalExpression");
        }
        return expr;
    }
    parseMaybeUnaryOrPrivate(refExpressionErrors) {
        return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
    }
    parseExprOps(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
        }
        return this.parseExprOp(expr, startLoc, -1);
    }
    parseExprOp(left, leftStartLoc, minPrec) {
        if (this.isPrivateName(left)) {
            const value = this.getPrivateNameSV(left);
            if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
                this.raise(Errors.PrivateInExpectedIn, {
                    at: left,
                    identifierName: value
                });
            }
            this.classScope.usePrivateName(value, left.loc.start);
        }
        const op = this.state.type;
        if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
            let prec = tokenOperatorPrecedence(op);
            if (prec > minPrec) {
                if (op === 39) {
                    this.expectPlugin("pipelineOperator");
                    if (this.state.inFSharpPipelineDirectBody) {
                        return left;
                    }
                    this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartLoc);
                node.left = left;
                node.operator = this.state.value;
                const logical = op === 41 || op === 42;
                const coalesce = op === 40;
                if (coalesce) {
                    prec = tokenOperatorPrecedence(42);
                }
                this.next();
                if (op === 39 && this.hasPlugin(["pipelineOperator", {
                        proposal: "minimal"
                    }])) {
                    if (this.state.type === 96 && this.prodParam.hasAwait) {
                        throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {
                            at: this.state.startLoc
                        });
                    }
                }
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
                const nextOp = this.state.type;
                if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
                    throw this.raise(Errors.MixingCoalesceWithLogical, {
                        at: this.state.startLoc
                    });
                }
                return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
            }
        }
        return left;
    }
    parseExprOpRightExpr(op, prec) {
        const startLoc = this.state.startLoc;
        switch (op) {
            case 39:
                switch (this.getPluginOption("pipelineOperator", "proposal")) {
                    case "hack":
                        return this.withTopicBindingContext(() => {
                            return this.parseHackPipeBody();
                        });
                    case "smart":
                        return this.withTopicBindingContext(() => {
                            if (this.prodParam.hasYield && this.isContextual(108)) {
                                throw this.raise(Errors.PipeBodyIsTighter, {
                                    at: this.state.startLoc
                                });
                            }
                            return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
                        });
                    case "fsharp":
                        return this.withSoloAwaitPermittingContext(() => {
                            return this.parseFSharpPipelineBody(prec);
                        });
                }
            default:
                return this.parseExprOpBaseRightExpr(op, prec);
        }
    }
    parseExprOpBaseRightExpr(op, prec) {
        const startLoc = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
    }
    parseHackPipeBody() {
        var _body$extra;
        const { startLoc } = this.state;
        const body = this.parseMaybeAssign();
        const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
        if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
            this.raise(Errors.PipeUnparenthesizedBody, {
                at: startLoc,
                type: body.type
            });
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
            this.raise(Errors.PipeTopicUnused, {
                at: startLoc
            });
        }
        return body;
    }
    checkExponentialAfterUnary(node) {
        if (this.match(57)) {
            this.raise(Errors.UnexpectedTokenUnaryExponentiation, {
                at: node.argument
            });
        }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
        const startLoc = this.state.startLoc;
        const isAwait = this.isContextual(96);
        if (isAwait && this.isAwaitAllowed()) {
            this.next();
            const expr = this.parseAwait(startLoc);
            if (!sawUnary)
                this.checkExponentialAfterUnary(expr);
            return expr;
        }
        const update = this.match(34);
        const node = this.startNode();
        if (tokenIsPrefix(this.state.type)) {
            node.operator = this.state.value;
            node.prefix = true;
            if (this.match(72)) {
                this.expectPlugin("throwExpressions");
            }
            const isDelete = this.match(89);
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refExpressionErrors, true);
            if (this.state.strict && isDelete) {
                const arg = node.argument;
                if (arg.type === "Identifier") {
                    this.raise(Errors.StrictDelete, {
                        at: node
                    });
                }
                else if (this.hasPropertyAsPrivateName(arg)) {
                    this.raise(Errors.DeletePrivateField, {
                        at: node
                    });
                }
            }
            if (!update) {
                if (!sawUnary) {
                    this.checkExponentialAfterUnary(node);
                }
                return this.finishNode(node, "UnaryExpression");
            }
        }
        const expr = this.parseUpdate(node, update, refExpressionErrors);
        if (isAwait) {
            const { type } = this.state;
            const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
            if (startsExpr && !this.isAmbiguousAwait()) {
                this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {
                    at: startLoc
                });
                return this.parseAwait(startLoc);
            }
        }
        return expr;
    }
    parseUpdate(node, update, refExpressionErrors) {
        if (update) {
            const updateExpressionNode = node;
            this.checkLVal(updateExpressionNode.argument, {
                in: this.finishNode(updateExpressionNode, "UpdateExpression")
            });
            return node;
        }
        const startLoc = this.state.startLoc;
        let expr = this.parseExprSubscripts(refExpressionErrors);
        if (this.checkExpressionErrors(refExpressionErrors, false))
            return expr;
        while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
            const node = this.startNodeAt(startLoc);
            node.operator = this.state.value;
            node.prefix = false;
            node.argument = expr;
            this.next();
            this.checkLVal(expr, {
                in: expr = this.finishNode(node, "UpdateExpression")
            });
        }
        return expr;
    }
    parseExprSubscripts(refExpressionErrors) {
        const startLoc = this.state.startLoc;
        const potentialArrowAt = this.state.potentialArrowAt;
        const expr = this.parseExprAtom(refExpressionErrors);
        if (this.shouldExitDescending(expr, potentialArrowAt)) {
            return expr;
        }
        return this.parseSubscripts(expr, startLoc);
    }
    parseSubscripts(base, startLoc, noCalls) {
        const state = {
            optionalChainMember: false,
            maybeAsyncArrow: this.atPossibleAsyncArrow(base),
            stop: false
        };
        do {
            base = this.parseSubscript(base, startLoc, noCalls, state);
            state.maybeAsyncArrow = false;
        } while (!state.stop);
        return base;
    }
    parseSubscript(base, startLoc, noCalls, state) {
        const { type } = this.state;
        if (!noCalls && type === 15) {
            return this.parseBind(base, startLoc, noCalls, state);
        }
        else if (tokenIsTemplate(type)) {
            return this.parseTaggedTemplateExpression(base, startLoc, state);
        }
        let optional = false;
        if (type === 18) {
            if (noCalls) {
                this.raise(Errors.OptionalChainingNoNew, {
                    at: this.state.startLoc
                });
                if (this.lookaheadCharCode() === 40) {
                    state.stop = true;
                    return base;
                }
            }
            state.optionalChainMember = optional = true;
            this.next();
        }
        if (!noCalls && this.match(10)) {
            return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
        }
        else {
            const computed = this.eat(0);
            if (computed || optional || this.eat(16)) {
                return this.parseMember(base, startLoc, state, computed, optional);
            }
            else {
                state.stop = true;
                return base;
            }
        }
    }
    parseMember(base, startLoc, state, computed, optional) {
        const node = this.startNodeAt(startLoc);
        node.object = base;
        node.computed = computed;
        if (computed) {
            node.property = this.parseExpression();
            this.expect(3);
        }
        else if (this.match(138)) {
            if (base.type === "Super") {
                this.raise(Errors.SuperPrivateField, {
                    at: startLoc
                });
            }
            this.classScope.usePrivateName(this.state.value, this.state.startLoc);
            node.property = this.parsePrivateName();
        }
        else {
            node.property = this.parseIdentifier(true);
        }
        if (state.optionalChainMember) {
            node.optional = optional;
            return this.finishNode(node, "OptionalMemberExpression");
        }
        else {
            return this.finishNode(node, "MemberExpression");
        }
    }
    parseBind(base, startLoc, noCalls, state) {
        const node = this.startNodeAt(startLoc);
        node.object = base;
        this.next();
        node.callee = this.parseNoCallExpr();
        state.stop = true;
        return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
    }
    parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        let refExpressionErrors = null;
        this.state.maybeInArrowParameters = true;
        this.next();
        const node = this.startNodeAt(startLoc);
        node.callee = base;
        const { maybeAsyncArrow, optionalChainMember } = state;
        if (maybeAsyncArrow) {
            this.expressionScope.enter(newAsyncArrowScope());
            refExpressionErrors = new ExpressionErrors();
        }
        if (optionalChainMember) {
            node.optional = optional;
        }
        if (optional) {
            node.arguments = this.parseCallExpressionArguments(11);
        }
        else {
            node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
        }
        let finishedNode = this.finishCallExpression(node, optionalChainMember);
        if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
            state.stop = true;
            this.checkDestructuringPrivate(refExpressionErrors);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
        }
        else {
            if (maybeAsyncArrow) {
                this.checkExpressionErrors(refExpressionErrors, true);
                this.expressionScope.exit();
            }
            this.toReferencedArguments(finishedNode);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return finishedNode;
    }
    toReferencedArguments(node, isParenthesizedExpr) {
        this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
    }
    parseTaggedTemplateExpression(base, startLoc, state) {
        const node = this.startNodeAt(startLoc);
        node.tag = base;
        node.quasi = this.parseTemplate(true);
        if (state.optionalChainMember) {
            this.raise(Errors.OptionalChainingNoTemplate, {
                at: startLoc
            });
        }
        return this.finishNode(node, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(base) {
        return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
    }
    expectImportAttributesPlugin() {
        if (!this.hasPlugin("importAssertions")) {
            this.expectPlugin("importAttributes");
        }
    }
    finishCallExpression(node, optional) {
        if (node.callee.type === "Import") {
            if (node.arguments.length === 2) {
                {
                    if (!this.hasPlugin("moduleAttributes")) {
                        this.expectImportAttributesPlugin();
                    }
                }
            }
            if (node.arguments.length === 0 || node.arguments.length > 2) {
                this.raise(Errors.ImportCallArity, {
                    at: node,
                    maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
                });
            }
            else {
                for (const arg of node.arguments) {
                    if (arg.type === "SpreadElement") {
                        this.raise(Errors.ImportCallSpreadArgument, {
                            at: arg
                        });
                    }
                }
            }
        }
        return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
        const elts = [];
        let first = true;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        while (!this.eat(close)) {
            if (first) {
                first = false;
            }
            else {
                this.expect(12);
                if (this.match(close)) {
                    if (dynamicImport && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
                        this.raise(Errors.ImportCallArgumentTrailingComma, {
                            at: this.state.lastTokStartLoc
                        });
                    }
                    if (nodeForExtra) {
                        this.addTrailingCommaExtraToNode(nodeForExtra);
                    }
                    this.next();
                    break;
                }
            }
            elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
        }
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return elts;
    }
    shouldParseAsyncArrow() {
        return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(node, call) {
        var _call$extra;
        this.resetPreviousNodeTrailingComments(call);
        this.expect(19);
        this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
        if (call.innerComments) {
            setInnerComments(node, call.innerComments);
        }
        if (call.callee.trailingComments) {
            setInnerComments(node, call.callee.trailingComments);
        }
        return node;
    }
    parseNoCallExpr() {
        const startLoc = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
    }
    parseExprAtom(refExpressionErrors) {
        let node;
        let decorators = null;
        const { type } = this.state;
        switch (type) {
            case 79:
                return this.parseSuper();
            case 83:
                node = this.startNode();
                this.next();
                if (this.match(16)) {
                    return this.parseImportMetaProperty(node);
                }
                if (this.match(10)) {
                    if (this.options.createImportExpressions) {
                        return this.parseImportCall(node);
                    }
                    else {
                        return this.finishNode(node, "Import");
                    }
                }
                else {
                    this.raise(Errors.UnsupportedImport, {
                        at: this.state.lastTokStartLoc
                    });
                    return this.finishNode(node, "Import");
                }
            case 78:
                node = this.startNode();
                this.next();
                return this.finishNode(node, "ThisExpression");
            case 90:
                {
                    return this.parseDo(this.startNode(), false);
                }
            case 56:
            case 31:
                {
                    this.readRegexp();
                    return this.parseRegExpLiteral(this.state.value);
                }
            case 134:
                return this.parseNumericLiteral(this.state.value);
            case 135:
                return this.parseBigIntLiteral(this.state.value);
            case 136:
                return this.parseDecimalLiteral(this.state.value);
            case 133:
                return this.parseStringLiteral(this.state.value);
            case 84:
                return this.parseNullLiteral();
            case 85:
                return this.parseBooleanLiteral(true);
            case 86:
                return this.parseBooleanLiteral(false);
            case 10:
                {
                    const canBeArrow = this.state.potentialArrowAt === this.state.start;
                    return this.parseParenAndDistinguishExpression(canBeArrow);
                }
            case 2:
            case 1:
                {
                    return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
                }
            case 0:
                {
                    return this.parseArrayLike(3, true, false, refExpressionErrors);
                }
            case 6:
            case 7:
                {
                    return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
                }
            case 5:
                {
                    return this.parseObjectLike(8, false, false, refExpressionErrors);
                }
            case 68:
                return this.parseFunctionOrFunctionSent();
            case 26:
                decorators = this.parseDecorators();
            case 80:
                return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
            case 77:
                return this.parseNewOrNewTarget();
            case 25:
            case 24:
                return this.parseTemplate(false);
            case 15:
                {
                    node = this.startNode();
                    this.next();
                    node.object = null;
                    const callee = node.callee = this.parseNoCallExpr();
                    if (callee.type === "MemberExpression") {
                        return this.finishNode(node, "BindExpression");
                    }
                    else {
                        throw this.raise(Errors.UnsupportedBind, {
                            at: callee
                        });
                    }
                }
            case 138:
                {
                    this.raise(Errors.PrivateInExpectedIn, {
                        at: this.state.startLoc,
                        identifierName: this.state.value
                    });
                    return this.parsePrivateName();
                }
            case 33:
                {
                    return this.parseTopicReferenceThenEqualsSign(54, "%");
                }
            case 32:
                {
                    return this.parseTopicReferenceThenEqualsSign(44, "^");
                }
            case 37:
            case 38:
                {
                    return this.parseTopicReference("hack");
                }
            case 44:
            case 54:
            case 27:
                {
                    const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                    if (pipeProposal) {
                        return this.parseTopicReference(pipeProposal);
                    }
                    this.unexpected();
                    break;
                }
            case 47:
                {
                    const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                    if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
                        this.expectOnePlugin(["jsx", "flow", "typescript"]);
                    }
                    else {
                        this.unexpected();
                    }
                    break;
                }
            default:
                if (tokenIsIdentifier(type)) {
                    if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
                        return this.parseModuleExpression();
                    }
                    const canBeArrow = this.state.potentialArrowAt === this.state.start;
                    const containsEsc = this.state.containsEsc;
                    const id = this.parseIdentifier();
                    if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
                        const { type } = this.state;
                        if (type === 68) {
                            this.resetPreviousNodeTrailingComments(id);
                            this.next();
                            return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
                        }
                        else if (tokenIsIdentifier(type)) {
                            if (this.lookaheadCharCode() === 61) {
                                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                            }
                            else {
                                return id;
                            }
                        }
                        else if (type === 90) {
                            this.resetPreviousNodeTrailingComments(id);
                            return this.parseDo(this.startNodeAtNode(id), true);
                        }
                    }
                    if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
                        this.next();
                        return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
                    }
                    return id;
                }
                else {
                    this.unexpected();
                }
        }
    }
    parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
        const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
        if (pipeProposal) {
            this.state.type = topicTokenType;
            this.state.value = topicTokenValue;
            this.state.pos--;
            this.state.end--;
            this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
            return this.parseTopicReference(pipeProposal);
        }
        else {
            this.unexpected();
        }
    }
    parseTopicReference(pipeProposal) {
        const node = this.startNode();
        const startLoc = this.state.startLoc;
        const tokenType = this.state.type;
        this.next();
        return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
    }
    finishTopicReference(node, startLoc, pipeProposal, tokenType) {
        if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
            const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
            if (!this.topicReferenceIsAllowedInCurrentContext()) {
                this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {
                    at: startLoc
                });
            }
            this.registerTopicReference();
            return this.finishNode(node, nodeType);
        }
        else {
            throw this.raise(Errors.PipeTopicUnconfiguredToken, {
                at: startLoc,
                token: tokenLabelName(tokenType)
            });
        }
    }
    testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
        switch (pipeProposal) {
            case "hack":
                {
                    return this.hasPlugin(["pipelineOperator", {
                            topicToken: tokenLabelName(tokenType)
                        }]);
                }
            case "smart":
                return tokenType === 27;
            default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, {
                    at: startLoc
                });
        }
    }
    parseAsyncArrowUnaryFunction(node) {
        this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
        const params = [this.parseIdentifier()];
        this.prodParam.exit();
        if (this.hasPrecedingLineBreak()) {
            this.raise(Errors.LineTerminatorBeforeArrow, {
                at: this.state.curPosition()
            });
        }
        this.expect(19);
        return this.parseArrowExpression(node, params, true);
    }
    parseDo(node, isAsync) {
        this.expectPlugin("doExpressions");
        if (isAsync) {
            this.expectPlugin("asyncDoExpressions");
        }
        node.async = isAsync;
        this.next();
        const oldLabels = this.state.labels;
        this.state.labels = [];
        if (isAsync) {
            this.prodParam.enter(2);
            node.body = this.parseBlock();
            this.prodParam.exit();
        }
        else {
            node.body = this.parseBlock();
        }
        this.state.labels = oldLabels;
        return this.finishNode(node, "DoExpression");
    }
    parseSuper() {
        const node = this.startNode();
        this.next();
        if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
            this.raise(Errors.SuperNotAllowed, {
                at: node
            });
        }
        else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
            this.raise(Errors.UnexpectedSuper, {
                at: node
            });
        }
        if (!this.match(10) && !this.match(0) && !this.match(16)) {
            this.raise(Errors.UnsupportedSuper, {
                at: node
            });
        }
        return this.finishNode(node, "Super");
    }
    parsePrivateName() {
        const node = this.startNode();
        const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
        const name = this.state.value;
        this.next();
        node.id = this.createIdentifier(id, name);
        return this.finishNode(node, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
        const node = this.startNode();
        this.next();
        if (this.prodParam.hasYield && this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
            this.next();
            if (this.match(103)) {
                this.expectPlugin("functionSent");
            }
            else if (!this.hasPlugin("functionSent")) {
                this.unexpected();
            }
            return this.parseMetaProperty(node, meta, "sent");
        }
        return this.parseFunction(node);
    }
    parseMetaProperty(node, meta, propertyName) {
        node.meta = meta;
        const containsEsc = this.state.containsEsc;
        node.property = this.parseIdentifier(true);
        if (node.property.name !== propertyName || containsEsc) {
            this.raise(Errors.UnsupportedMetaProperty, {
                at: node.property,
                target: meta.name,
                onlyValidPropertyName: propertyName
            });
        }
        return this.finishNode(node, "MetaProperty");
    }
    parseImportMetaProperty(node) {
        const id = this.createIdentifier(this.startNodeAtNode(node), "import");
        this.next();
        if (this.isContextual(101)) {
            if (!this.inModule) {
                this.raise(Errors.ImportMetaOutsideModule, {
                    at: id
                });
            }
            this.sawUnambiguousESM = true;
        }
        else if (this.isContextual(105) || this.isContextual(97)) {
            const isSource = this.isContextual(105);
            if (!isSource)
                this.unexpected();
            this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
            if (!this.options.createImportExpressions) {
                throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, {
                    at: this.state.startLoc,
                    phase: this.state.value
                });
            }
            this.next();
            node.phase = isSource ? "source" : "defer";
            return this.parseImportCall(node);
        }
        return this.parseMetaProperty(node, id, "meta");
    }
    parseLiteralAtNode(value, type, node) {
        this.addExtra(node, "rawValue", value);
        this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
        node.value = value;
        this.next();
        return this.finishNode(node, type);
    }
    parseLiteral(value, type) {
        const node = this.startNode();
        return this.parseLiteralAtNode(value, type, node);
    }
    parseStringLiteral(value) {
        return this.parseLiteral(value, "StringLiteral");
    }
    parseNumericLiteral(value) {
        return this.parseLiteral(value, "NumericLiteral");
    }
    parseBigIntLiteral(value) {
        return this.parseLiteral(value, "BigIntLiteral");
    }
    parseDecimalLiteral(value) {
        return this.parseLiteral(value, "DecimalLiteral");
    }
    parseRegExpLiteral(value) {
        const node = this.parseLiteral(value.value, "RegExpLiteral");
        node.pattern = value.pattern;
        node.flags = value.flags;
        return node;
    }
    parseBooleanLiteral(value) {
        const node = this.startNode();
        node.value = value;
        this.next();
        return this.finishNode(node, "BooleanLiteral");
    }
    parseNullLiteral() {
        const node = this.startNode();
        this.next();
        return this.finishNode(node, "NullLiteral");
    }
    parseParenAndDistinguishExpression(canBeArrow) {
        const startLoc = this.state.startLoc;
        let val;
        this.next();
        this.expressionScope.enter(newArrowHeadScope());
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true;
        this.state.inFSharpPipelineDirectBody = false;
        const innerStartLoc = this.state.startLoc;
        const exprList = [];
        const refExpressionErrors = new ExpressionErrors();
        let first = true;
        let spreadStartLoc;
        let optionalCommaStartLoc;
        while (!this.match(11)) {
            if (first) {
                first = false;
            }
            else {
                this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
                if (this.match(11)) {
                    optionalCommaStartLoc = this.state.startLoc;
                    break;
                }
            }
            if (this.match(21)) {
                const spreadNodeStartLoc = this.state.startLoc;
                spreadStartLoc = this.state.startLoc;
                exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
                if (!this.checkCommaAfterRest(41)) {
                    break;
                }
            }
            else {
                exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
        }
        const innerEndLoc = this.state.lastTokEndLoc;
        this.expect(11);
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let arrowNode = this.startNodeAt(startLoc);
        if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
            this.checkDestructuringPrivate(refExpressionErrors);
            this.expressionScope.validateAsPattern();
            this.expressionScope.exit();
            this.parseArrowExpression(arrowNode, exprList, false);
            return arrowNode;
        }
        this.expressionScope.exit();
        if (!exprList.length) {
            this.unexpected(this.state.lastTokStartLoc);
        }
        if (optionalCommaStartLoc)
            this.unexpected(optionalCommaStartLoc);
        if (spreadStartLoc)
            this.unexpected(spreadStartLoc);
        this.checkExpressionErrors(refExpressionErrors, true);
        this.toReferencedListDeep(exprList, true);
        if (exprList.length > 1) {
            val = this.startNodeAt(innerStartLoc);
            val.expressions = exprList;
            this.finishNode(val, "SequenceExpression");
            this.resetEndLocation(val, innerEndLoc);
        }
        else {
            val = exprList[0];
        }
        return this.wrapParenthesis(startLoc, val);
    }
    wrapParenthesis(startLoc, expression) {
        if (!this.options.createParenthesizedExpressions) {
            this.addExtra(expression, "parenthesized", true);
            this.addExtra(expression, "parenStart", startLoc.index);
            this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
            return expression;
        }
        const parenExpression = this.startNodeAt(startLoc);
        parenExpression.expression = expression;
        return this.finishNode(parenExpression, "ParenthesizedExpression");
    }
    shouldParseArrow(params) {
        return !this.canInsertSemicolon();
    }
    parseArrow(node) {
        if (this.eat(19)) {
            return node;
        }
    }
    parseParenItem(node, startLoc) {
        return node;
    }
    parseNewOrNewTarget() {
        const node = this.startNode();
        this.next();
        if (this.match(16)) {
            const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
            this.next();
            const metaProp = this.parseMetaProperty(node, meta, "target");
            if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
                this.raise(Errors.UnexpectedNewTarget, {
                    at: metaProp
                });
            }
            return metaProp;
        }
        return this.parseNew(node);
    }
    parseNew(node) {
        this.parseNewCallee(node);
        if (this.eat(10)) {
            const args = this.parseExprList(11);
            this.toReferencedList(args);
            node.arguments = args;
        }
        else {
            node.arguments = [];
        }
        return this.finishNode(node, "NewExpression");
    }
    parseNewCallee(node) {
        const isImport = this.match(83);
        const callee = this.parseNoCallExpr();
        node.callee = callee;
        if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
            this.raise(Errors.ImportCallNotNewExpression, {
                at: callee
            });
        }
    }
    parseTemplateElement(isTagged) {
        const { start, startLoc, end, value } = this.state;
        const elemStart = start + 1;
        const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
        if (value === null) {
            if (!isTagged) {
                this.raise(Errors.InvalidEscapeSequenceTemplate, {
                    at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)
                });
            }
        }
        const isTail = this.match(24);
        const endOffset = isTail ? -1 : -2;
        const elemEnd = end + endOffset;
        elem.value = {
            raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
            cooked: value === null ? null : value.slice(1, endOffset)
        };
        elem.tail = isTail;
        this.next();
        const finishedNode = this.finishNode(elem, "TemplateElement");
        this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
        return finishedNode;
    }
    parseTemplate(isTagged) {
        const node = this.startNode();
        node.expressions = [];
        let curElt = this.parseTemplateElement(isTagged);
        node.quasis = [curElt];
        while (!curElt.tail) {
            node.expressions.push(this.parseTemplateSubstitution());
            this.readTemplateContinuation();
            node.quasis.push(curElt = this.parseTemplateElement(isTagged));
        }
        return this.finishNode(node, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
        return this.parseExpression();
    }
    parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
        if (isRecord) {
            this.expectPlugin("recordAndTuple");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const propHash = Object.create(null);
        let first = true;
        const node = this.startNode();
        node.properties = [];
        this.next();
        while (!this.match(close)) {
            if (first) {
                first = false;
            }
            else {
                this.expect(12);
                if (this.match(close)) {
                    this.addTrailingCommaExtraToNode(node);
                    break;
                }
            }
            let prop;
            if (isPattern) {
                prop = this.parseBindingProperty();
            }
            else {
                prop = this.parsePropertyDefinition(refExpressionErrors);
                this.checkProto(prop, isRecord, propHash, refExpressionErrors);
            }
            if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
                this.raise(Errors.InvalidRecordProperty, {
                    at: prop
                });
            }
            if (prop.shorthand) {
                this.addExtra(prop, "shorthand", true);
            }
            node.properties.push(prop);
        }
        this.next();
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        let type = "ObjectExpression";
        if (isPattern) {
            type = "ObjectPattern";
        }
        else if (isRecord) {
            type = "RecordExpression";
        }
        return this.finishNode(node, type);
    }
    addTrailingCommaExtraToNode(node) {
        this.addExtra(node, "trailingComma", this.state.lastTokStart);
        this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
    }
    maybeAsyncOrAccessorProp(prop) {
        return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(refExpressionErrors) {
        let decorators = [];
        if (this.match(26)) {
            if (this.hasPlugin("decorators")) {
                this.raise(Errors.UnsupportedPropertyDecorator, {
                    at: this.state.startLoc
                });
            }
            while (this.match(26)) {
                decorators.push(this.parseDecorator());
            }
        }
        const prop = this.startNode();
        let isAsync = false;
        let isAccessor = false;
        let startLoc;
        if (this.match(21)) {
            if (decorators.length)
                this.unexpected();
            return this.parseSpread();
        }
        if (decorators.length) {
            prop.decorators = decorators;
            decorators = [];
        }
        prop.method = false;
        if (refExpressionErrors) {
            startLoc = this.state.startLoc;
        }
        let isGenerator = this.eat(55);
        this.parsePropertyNamePrefixOperator(prop);
        const containsEsc = this.state.containsEsc;
        const key = this.parsePropertyName(prop, refExpressionErrors);
        if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
            const keyName = key.name;
            if (keyName === "async" && !this.hasPrecedingLineBreak()) {
                isAsync = true;
                this.resetPreviousNodeTrailingComments(key);
                isGenerator = this.eat(55);
                this.parsePropertyName(prop);
            }
            if (keyName === "get" || keyName === "set") {
                isAccessor = true;
                this.resetPreviousNodeTrailingComments(key);
                prop.kind = keyName;
                if (this.match(55)) {
                    isGenerator = true;
                    this.raise(Errors.AccessorIsGenerator, {
                        at: this.state.curPosition(),
                        kind: keyName
                    });
                    this.next();
                }
                this.parsePropertyName(prop);
            }
        }
        return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
    }
    getGetterSetterExpectedParamCount(method) {
        return method.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(method) {
        return method.params;
    }
    checkGetterSetterParams(method) {
        var _params;
        const paramCount = this.getGetterSetterExpectedParamCount(method);
        const params = this.getObjectOrClassMethodParams(method);
        if (params.length !== paramCount) {
            this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, {
                at: method
            });
        }
        if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
            this.raise(Errors.BadSetterRestParameter, {
                at: method
            });
        }
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
        if (isAccessor) {
            const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
            this.checkGetterSetterParams(finishedProp);
            return finishedProp;
        }
        if (isAsync || isGenerator || this.match(10)) {
            if (isPattern)
                this.unexpected();
            prop.kind = "method";
            prop.method = true;
            return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
        }
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
        prop.shorthand = false;
        if (this.eat(14)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
            return this.finishNode(prop, "ObjectProperty");
        }
        if (!prop.computed && prop.key.type === "Identifier") {
            this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
            if (isPattern) {
                prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            }
            else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                if (refExpressionErrors != null) {
                    if (refExpressionErrors.shorthandAssignLoc === null) {
                        refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
                    }
                }
                else {
                    this.raise(Errors.InvalidCoverInitializedName, {
                        at: shorthandAssignLoc
                    });
                }
                prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
            }
            else {
                prop.value = cloneIdentifier(prop.key);
            }
            prop.shorthand = true;
            return this.finishNode(prop, "ObjectProperty");
        }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
        const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
        if (!node)
            this.unexpected();
        return node;
    }
    parsePropertyName(prop, refExpressionErrors) {
        if (this.eat(0)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssignAllowIn();
            this.expect(3);
        }
        else {
            const { type, value } = this.state;
            let key;
            if (tokenIsKeywordOrIdentifier(type)) {
                key = this.parseIdentifier(true);
            }
            else {
                switch (type) {
                    case 134:
                        key = this.parseNumericLiteral(value);
                        break;
                    case 133:
                        key = this.parseStringLiteral(value);
                        break;
                    case 135:
                        key = this.parseBigIntLiteral(value);
                        break;
                    case 136:
                        key = this.parseDecimalLiteral(value);
                        break;
                    case 138:
                        {
                            const privateKeyLoc = this.state.startLoc;
                            if (refExpressionErrors != null) {
                                if (refExpressionErrors.privateKeyLoc === null) {
                                    refExpressionErrors.privateKeyLoc = privateKeyLoc;
                                }
                            }
                            else {
                                this.raise(Errors.UnexpectedPrivateField, {
                                    at: privateKeyLoc
                                });
                            }
                            key = this.parsePrivateName();
                            break;
                        }
                    default:
                        this.unexpected();
                }
            }
            prop.key = key;
            if (type !== 138) {
                prop.computed = false;
            }
        }
        return prop.key;
    }
    initFunction(node, isAsync) {
        node.id = null;
        node.generator = false;
        node.async = isAsync;
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
        this.initFunction(node, isAsync);
        node.generator = isGenerator;
        this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        this.parseFunctionParams(node, isConstructor);
        const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
        this.prodParam.exit();
        this.scope.exit();
        return finishedNode;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
        if (isTuple) {
            this.expectPlugin("recordAndTuple");
        }
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const node = this.startNode();
        this.next();
        node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
    }
    parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
        this.scope.enter(2 | 4);
        let flags = functionFlags(isAsync, false);
        if (!this.match(5) && this.prodParam.hasIn) {
            flags |= 8;
        }
        this.prodParam.enter(flags);
        this.initFunction(node, isAsync);
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        if (params) {
            this.state.maybeInArrowParameters = true;
            this.setArrowFunctionParameters(node, params, trailingCommaLoc);
        }
        this.state.maybeInArrowParameters = false;
        this.parseFunctionBody(node, true);
        this.prodParam.exit();
        this.scope.exit();
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return this.finishNode(node, "ArrowFunctionExpression");
    }
    setArrowFunctionParameters(node, params, trailingCommaLoc) {
        this.toAssignableList(params, trailingCommaLoc, false);
        node.params = params;
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
        this.parseFunctionBody(node, false, isMethod);
        return this.finishNode(node, type);
    }
    parseFunctionBody(node, allowExpression, isMethod = false) {
        const isExpression = allowExpression && !this.match(5);
        this.expressionScope.enter(newExpressionScope());
        if (isExpression) {
            node.body = this.parseMaybeAssign();
            this.checkParams(node, false, allowExpression, false);
        }
        else {
            const oldStrict = this.state.strict;
            const oldLabels = this.state.labels;
            this.state.labels = [];
            this.prodParam.enter(this.prodParam.currentFlags() | 4);
            node.body = this.parseBlock(true, false, hasStrictModeDirective => {
                const nonSimple = !this.isSimpleParamList(node.params);
                if (hasStrictModeDirective && nonSimple) {
                    this.raise(Errors.IllegalLanguageModeDirective, {
                        at: (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node
                    });
                }
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
                if (this.state.strict && node.id) {
                    this.checkIdentifier(node.id, 65, strictModeChanged);
                }
            });
            this.prodParam.exit();
            this.state.labels = oldLabels;
        }
        this.expressionScope.exit();
    }
    isSimpleParameter(node) {
        return node.type === "Identifier";
    }
    isSimpleParamList(params) {
        for (let i = 0, len = params.length; i < len; i++) {
            if (!this.isSimpleParameter(params[i]))
                return false;
        }
        return true;
    }
    checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
        const checkClashes = !allowDuplicates && new Set();
        const formalParameters = {
            type: "FormalParameters"
        };
        for (const param of node.params) {
            this.checkLVal(param, {
                in: formalParameters,
                binding: 5,
                checkClashes,
                strictModeChanged
            });
        }
    }
    parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
        const elts = [];
        let first = true;
        while (!this.eat(close)) {
            if (first) {
                first = false;
            }
            else {
                this.expect(12);
                if (this.match(close)) {
                    if (nodeForExtra) {
                        this.addTrailingCommaExtraToNode(nodeForExtra);
                    }
                    this.next();
                    break;
                }
            }
            elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
        }
        return elts;
    }
    parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
        let elt;
        if (this.match(12)) {
            if (!allowEmpty) {
                this.raise(Errors.UnexpectedToken, {
                    at: this.state.curPosition(),
                    unexpected: ","
                });
            }
            elt = null;
        }
        else if (this.match(21)) {
            const spreadNodeStartLoc = this.state.startLoc;
            elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
        }
        else if (this.match(17)) {
            this.expectPlugin("partialApplication");
            if (!allowPlaceholder) {
                this.raise(Errors.UnexpectedArgumentPlaceholder, {
                    at: this.state.startLoc
                });
            }
            const node = this.startNode();
            this.next();
            elt = this.finishNode(node, "ArgumentPlaceholder");
        }
        else {
            elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
        }
        return elt;
    }
    parseIdentifier(liberal) {
        const node = this.startNode();
        const name = this.parseIdentifierName(liberal);
        return this.createIdentifier(node, name);
    }
    createIdentifier(node, name) {
        node.name = name;
        node.loc.identifierName = name;
        return this.finishNode(node, "Identifier");
    }
    parseIdentifierName(liberal) {
        let name;
        const { startLoc, type } = this.state;
        if (tokenIsKeywordOrIdentifier(type)) {
            name = this.state.value;
        }
        else {
            this.unexpected();
        }
        const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);
        if (liberal) {
            if (tokenIsKeyword) {
                this.replaceToken(132);
            }
        }
        else {
            this.checkReservedWord(name, startLoc, tokenIsKeyword, false);
        }
        this.next();
        return name;
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
        if (word.length > 10) {
            return;
        }
        if (!canBeReservedWord(word)) {
            return;
        }
        if (checkKeywords && isKeyword(word)) {
            this.raise(Errors.UnexpectedKeyword, {
                at: startLoc,
                keyword: word
            });
            return;
        }
        const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
        if (reservedTest(word, this.inModule)) {
            this.raise(Errors.UnexpectedReservedWord, {
                at: startLoc,
                reservedWord: word
            });
            return;
        }
        else if (word === "yield") {
            if (this.prodParam.hasYield) {
                this.raise(Errors.YieldBindingIdentifier, {
                    at: startLoc
                });
                return;
            }
        }
        else if (word === "await") {
            if (this.prodParam.hasAwait) {
                this.raise(Errors.AwaitBindingIdentifier, {
                    at: startLoc
                });
                return;
            }
            if (this.scope.inStaticBlock) {
                this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {
                    at: startLoc
                });
                return;
            }
            this.expressionScope.recordAsyncArrowParametersError({
                at: startLoc
            });
        }
        else if (word === "arguments") {
            if (this.scope.inClassAndNotInNonArrowFunction) {
                this.raise(Errors.ArgumentsInClass, {
                    at: startLoc
                });
                return;
            }
        }
    }
    isAwaitAllowed() {
        if (this.prodParam.hasAwait)
            return true;
        if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {
            return true;
        }
        return false;
    }
    parseAwait(startLoc) {
        const node = this.startNodeAt(startLoc);
        this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {
            at: node
        });
        if (this.eat(55)) {
            this.raise(Errors.ObsoleteAwaitStar, {
                at: node
            });
        }
        if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
            if (this.isAmbiguousAwait()) {
                this.ambiguousScriptDifferentAst = true;
            }
            else {
                this.sawUnambiguousESM = true;
            }
        }
        if (!this.state.soloAwait) {
            node.argument = this.parseMaybeUnary(null, true);
        }
        return this.finishNode(node, "AwaitExpression");
    }
    isAmbiguousAwait() {
        if (this.hasPrecedingLineBreak())
            return true;
        const { type } = this.state;
        return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
    }
    parseYield() {
        const node = this.startNode();
        this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {
            at: node
        });
        this.next();
        let delegating = false;
        let argument = null;
        if (!this.hasPrecedingLineBreak()) {
            delegating = this.eat(55);
            switch (this.state.type) {
                case 13:
                case 139:
                case 8:
                case 11:
                case 3:
                case 9:
                case 14:
                case 12:
                    if (!delegating)
                        break;
                default:
                    argument = this.parseMaybeAssign();
            }
        }
        node.delegate = delegating;
        node.argument = argument;
        return this.finishNode(node, "YieldExpression");
    }
    parseImportCall(node) {
        this.next();
        node.source = this.parseMaybeAssignAllowIn();
        if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
            node.options = null;
        }
        if (this.eat(12)) {
            this.expectImportAttributesPlugin();
            if (!this.match(11)) {
                node.options = this.parseMaybeAssignAllowIn();
                this.eat(12);
            }
        }
        this.expect(11);
        return this.finishNode(node, "ImportExpression");
    }
    checkPipelineAtInfixOperator(left, leftStartLoc) {
        if (this.hasPlugin(["pipelineOperator", {
                proposal: "smart"
            }])) {
            if (left.type === "SequenceExpression") {
                this.raise(Errors.PipelineHeadSequenceExpression, {
                    at: leftStartLoc
                });
            }
        }
    }
    parseSmartPipelineBodyInStyle(childExpr, startLoc) {
        if (this.isSimpleReference(childExpr)) {
            const bodyNode = this.startNodeAt(startLoc);
            bodyNode.callee = childExpr;
            return this.finishNode(bodyNode, "PipelineBareFunction");
        }
        else {
            const bodyNode = this.startNodeAt(startLoc);
            this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
            bodyNode.expression = childExpr;
            return this.finishNode(bodyNode, "PipelineTopicExpression");
        }
    }
    isSimpleReference(expression) {
        switch (expression.type) {
            case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
            case "Identifier":
                return true;
            default:
                return false;
        }
    }
    checkSmartPipeTopicBodyEarlyErrors(startLoc) {
        if (this.match(19)) {
            throw this.raise(Errors.PipelineBodyNoArrow, {
                at: this.state.startLoc
            });
        }
        if (!this.topicReferenceWasUsedInCurrentContext()) {
            this.raise(Errors.PipelineTopicUnused, {
                at: startLoc
            });
        }
    }
    withTopicBindingContext(callback) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
            maxNumOfResolvableTopics: 1,
            maxTopicIndex: null
        };
        try {
            return callback();
        }
        finally {
            this.state.topicContext = outerContextTopicState;
        }
    }
    withSmartMixTopicForbiddingContext(callback) {
        if (this.hasPlugin(["pipelineOperator", {
                proposal: "smart"
            }])) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = {
                maxNumOfResolvableTopics: 0,
                maxTopicIndex: null
            };
            try {
                return callback();
            }
            finally {
                this.state.topicContext = outerContextTopicState;
            }
        }
        else {
            return callback();
        }
    }
    withSoloAwaitPermittingContext(callback) {
        const outerContextSoloAwaitState = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
            return callback();
        }
        finally {
            this.state.soloAwait = outerContextSoloAwaitState;
        }
    }
    allowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToSet = 8 & ~flags;
        if (prodParamToSet) {
            this.prodParam.enter(flags | 8);
            try {
                return callback();
            }
            finally {
                this.prodParam.exit();
            }
        }
        return callback();
    }
    disallowInAnd(callback) {
        const flags = this.prodParam.currentFlags();
        const prodParamToClear = 8 & flags;
        if (prodParamToClear) {
            this.prodParam.enter(flags & ~8);
            try {
                return callback();
            }
            finally {
                this.prodParam.exit();
            }
        }
        return callback();
    }
    registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(prec) {
        const startLoc = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
        return ret;
    }
    parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const node = this.startNode();
        this.next();
        if (!this.match(5)) {
            this.unexpected(null, 5);
        }
        const program = this.startNodeAt(this.state.endLoc);
        this.next();
        const revertScopes = this.initializeScopes(true);
        this.enterInitialScopes();
        try {
            node.body = this.parseProgram(program, 8, "module");
        }
        finally {
            revertScopes();
        }
        return this.finishNode(node, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(prop) { }
}
const loopLabel = {
    kind: "loop"
}, switchLabel = {
    kind: "switch"
};
const loneSurrogate = /[\uD800-\uDFFF]/u;
const keywordRelationalOperator = /in(?:stanceof)?/y;
function babel7CompatTokens(tokens, input) {
    for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i];
        const { type } = token;
        if (typeof type === "number") {
            {
                if (type === 138) {
                    const { loc, start, value, end } = token;
                    const hashEndPos = start + 1;
                    const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i, 1, new Token({
                        type: getExportedToken(27),
                        value: "#",
                        start: start,
                        end: hashEndPos,
                        startLoc: loc.start,
                        endLoc: hashEndLoc
                    }), new Token({
                        type: getExportedToken(132),
                        value: value,
                        start: hashEndPos,
                        end: end,
                        startLoc: hashEndLoc,
                        endLoc: loc.end
                    }));
                    i++;
                    continue;
                }
                if (tokenIsTemplate(type)) {
                    const { loc, start, value, end } = token;
                    const backquoteEnd = start + 1;
                    const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken;
                    if (input.charCodeAt(start) === 96) {
                        startToken = new Token({
                            type: getExportedToken(22),
                            value: "`",
                            start: start,
                            end: backquoteEnd,
                            startLoc: loc.start,
                            endLoc: backquoteEndLoc
                        });
                    }
                    else {
                        startToken = new Token({
                            type: getExportedToken(8),
                            value: "}",
                            start: start,
                            end: backquoteEnd,
                            startLoc: loc.start,
                            endLoc: backquoteEndLoc
                        });
                    }
                    let templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    if (type === 24) {
                        templateElementEnd = end - 1;
                        templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
                        templateValue = value === null ? null : value.slice(1, -1);
                        endToken = new Token({
                            type: getExportedToken(22),
                            value: "`",
                            start: templateElementEnd,
                            end: end,
                            startLoc: templateElementEndLoc,
                            endLoc: loc.end
                        });
                    }
                    else {
                        templateElementEnd = end - 2;
                        templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
                        templateValue = value === null ? null : value.slice(1, -2);
                        endToken = new Token({
                            type: getExportedToken(23),
                            value: "${",
                            start: templateElementEnd,
                            end: end,
                            startLoc: templateElementEndLoc,
                            endLoc: loc.end
                        });
                    }
                    tokens.splice(i, 1, startToken, new Token({
                        type: getExportedToken(20),
                        value: templateValue,
                        start: backquoteEnd,
                        end: templateElementEnd,
                        startLoc: backquoteEndLoc,
                        endLoc: templateElementEndLoc
                    }), endToken);
                    i += 2;
                    continue;
                }
            }
            token.type = getExportedToken(type);
        }
    }
    return tokens;
}
class StatementParser extends ExpressionParser {
    parseTopLevel(file, program) {
        file.program = this.parseProgram(program);
        file.comments = this.state.comments;
        if (this.options.tokens) {
            file.tokens = babel7CompatTokens(this.tokens, this.input);
        }
        return this.finishNode(file, "File");
    }
    parseProgram(program, end = 139, sourceType = this.options.sourceType) {
        program.sourceType = sourceType;
        program.interpreter = this.parseInterpreterDirective();
        this.parseBlockBody(program, true, true, end);
        if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
            for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
                this.raise(Errors.ModuleExportUndefined, {
                    at,
                    localName
                });
            }
        }
        let finishedProgram;
        if (end === 139) {
            finishedProgram = this.finishNode(program, "Program");
        }
        else {
            finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
        }
        return finishedProgram;
    }
    stmtToDirective(stmt) {
        const directive = stmt;
        directive.type = "Directive";
        directive.value = directive.expression;
        delete directive.expression;
        const directiveLiteral = directive.value;
        const expressionValue = directiveLiteral.value;
        const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
        const val = directiveLiteral.value = raw.slice(1, -1);
        this.addExtra(directiveLiteral, "raw", raw);
        this.addExtra(directiveLiteral, "rawValue", val);
        this.addExtra(directiveLiteral, "expressionValue", expressionValue);
        directiveLiteral.type = "DirectiveLiteral";
        return directive;
    }
    parseInterpreterDirective() {
        if (!this.match(28)) {
            return null;
        }
        const node = this.startNode();
        node.value = this.state.value;
        this.next();
        return this.finishNode(node, "InterpreterDirective");
    }
    isLet() {
        if (!this.isContextual(100)) {
            return false;
        }
        return this.hasFollowingBindingAtom();
    }
    chStartsBindingIdentifier(ch, pos) {
        if (isIdentifierStart(ch)) {
            keywordRelationalOperator.lastIndex = pos;
            if (keywordRelationalOperator.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
                if (!isIdentifierChar(endCh) && endCh !== 92) {
                    return false;
                }
            }
            return true;
        }
        else if (ch === 92) {
            return true;
        }
        else {
            return false;
        }
    }
    chStartsBindingPattern(ch) {
        return ch === 91 || ch === 123;
    }
    hasFollowingBindingAtom() {
        const next = this.nextTokenStart();
        const nextCh = this.codePointAtPos(next);
        return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
    }
    hasInLineFollowingBindingIdentifier() {
        const next = this.nextTokenInLineStart();
        const nextCh = this.codePointAtPos(next);
        return this.chStartsBindingIdentifier(nextCh, next);
    }
    startsUsingForOf() {
        const { type, containsEsc } = this.lookahead();
        if (type === 102 && !containsEsc) {
            return false;
        }
        else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
            this.expectPlugin("explicitResourceManagement");
            return true;
        }
    }
    startsAwaitUsing() {
        let next = this.nextTokenInLineStart();
        if (this.isUnparsedContextual(next, "using")) {
            next = this.nextTokenInLineStartSince(next + 5);
            const nextCh = this.codePointAtPos(next);
            if (this.chStartsBindingIdentifier(nextCh, next)) {
                this.expectPlugin("explicitResourceManagement");
                return true;
            }
        }
        return false;
    }
    parseModuleItem() {
        return this.parseStatementLike(1 | 2 | 4 | 8);
    }
    parseStatementListItem() {
        return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
    }
    parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
        let flags = 0;
        if (this.options.annexB && !this.state.strict) {
            flags |= 4;
            if (allowLabeledFunction) {
                flags |= 8;
            }
        }
        return this.parseStatementLike(flags);
    }
    parseStatement() {
        return this.parseStatementLike(0);
    }
    parseStatementLike(flags) {
        let decorators = null;
        if (this.match(26)) {
            decorators = this.parseDecorators(true);
        }
        return this.parseStatementContent(flags, decorators);
    }
    parseStatementContent(flags, decorators) {
        const starttype = this.state.type;
        const node = this.startNode();
        const allowDeclaration = !!(flags & 2);
        const allowFunctionDeclaration = !!(flags & 4);
        const topLevel = flags & 1;
        switch (starttype) {
            case 60:
                return this.parseBreakContinueStatement(node, true);
            case 63:
                return this.parseBreakContinueStatement(node, false);
            case 64:
                return this.parseDebuggerStatement(node);
            case 90:
                return this.parseDoWhileStatement(node);
            case 91:
                return this.parseForStatement(node);
            case 68:
                if (this.lookaheadCharCode() === 46)
                    break;
                if (!allowFunctionDeclaration) {
                    this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, {
                        at: this.state.startLoc
                    });
                }
                return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
            case 80:
                if (!allowDeclaration)
                    this.unexpected();
                return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
            case 69:
                return this.parseIfStatement(node);
            case 70:
                return this.parseReturnStatement(node);
            case 71:
                return this.parseSwitchStatement(node);
            case 72:
                return this.parseThrowStatement(node);
            case 73:
                return this.parseTryStatement(node);
            case 96:
                if (!this.state.containsEsc && this.startsAwaitUsing()) {
                    if (!this.isAwaitAllowed()) {
                        this.raise(Errors.AwaitUsingNotInAsyncContext, {
                            at: node
                        });
                    }
                    else if (!allowDeclaration) {
                        this.raise(Errors.UnexpectedLexicalDeclaration, {
                            at: node
                        });
                    }
                    this.next();
                    return this.parseVarStatement(node, "await using");
                }
                break;
            case 107:
                if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {
                    break;
                }
                this.expectPlugin("explicitResourceManagement");
                if (!this.scope.inModule && this.scope.inTopLevel) {
                    this.raise(Errors.UnexpectedUsingDeclaration, {
                        at: this.state.startLoc
                    });
                }
                else if (!allowDeclaration) {
                    this.raise(Errors.UnexpectedLexicalDeclaration, {
                        at: this.state.startLoc
                    });
                }
                return this.parseVarStatement(node, "using");
            case 100:
                {
                    if (this.state.containsEsc) {
                        break;
                    }
                    const next = this.nextTokenStart();
                    const nextCh = this.codePointAtPos(next);
                    if (nextCh !== 91) {
                        if (!allowDeclaration && this.hasFollowingLineBreak())
                            break;
                        if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
                            break;
                        }
                    }
                }
            case 75:
                {
                    if (!allowDeclaration) {
                        this.raise(Errors.UnexpectedLexicalDeclaration, {
                            at: this.state.startLoc
                        });
                    }
                }
            case 74:
                {
                    const kind = this.state.value;
                    return this.parseVarStatement(node, kind);
                }
            case 92:
                return this.parseWhileStatement(node);
            case 76:
                return this.parseWithStatement(node);
            case 5:
                return this.parseBlock();
            case 13:
                return this.parseEmptyStatement(node);
            case 83:
                {
                    const nextTokenCharCode = this.lookaheadCharCode();
                    if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
                        break;
                    }
                }
            case 82:
                {
                    if (!this.options.allowImportExportEverywhere && !topLevel) {
                        this.raise(Errors.UnexpectedImportExport, {
                            at: this.state.startLoc
                        });
                    }
                    this.next();
                    let result;
                    if (starttype === 83) {
                        result = this.parseImport(node);
                        if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
                            this.sawUnambiguousESM = true;
                        }
                    }
                    else {
                        result = this.parseExport(node, decorators);
                        if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
                            this.sawUnambiguousESM = true;
                        }
                    }
                    this.assertModuleNodeAllowed(result);
                    return result;
                }
            default:
                {
                    if (this.isAsyncFunction()) {
                        if (!allowDeclaration) {
                            this.raise(Errors.AsyncFunctionInSingleStatementContext, {
                                at: this.state.startLoc
                            });
                        }
                        this.next();
                        return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
                    }
                }
        }
        const maybeName = this.state.value;
        const expr = this.parseExpression();
        if (tokenIsIdentifier(starttype) && expr.type === "Identifier" && this.eat(14)) {
            return this.parseLabeledStatement(node, maybeName, expr, flags);
        }
        else {
            return this.parseExpressionStatement(node, expr, decorators);
        }
    }
    assertModuleNodeAllowed(node) {
        if (!this.options.allowImportExportEverywhere && !this.inModule) {
            this.raise(Errors.ImportOutsideModule, {
                at: node
            });
        }
    }
    decoratorsEnabledBeforeExport() {
        if (this.hasPlugin("decorators-legacy"))
            return true;
        return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
    }
    maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
        if (maybeDecorators) {
            if (classNode.decorators && classNode.decorators.length > 0) {
                if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
                    this.raise(Errors.DecoratorsBeforeAfterExport, {
                        at: classNode.decorators[0]
                    });
                }
                classNode.decorators.unshift(...maybeDecorators);
            }
            else {
                classNode.decorators = maybeDecorators;
            }
            this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
            if (exportNode)
                this.resetStartLocationFromNode(exportNode, classNode);
        }
        return classNode;
    }
    canHaveLeadingDecorator() {
        return this.match(80);
    }
    parseDecorators(allowExport) {
        const decorators = [];
        do {
            decorators.push(this.parseDecorator());
        } while (this.match(26));
        if (this.match(82)) {
            if (!allowExport) {
                this.unexpected();
            }
            if (!this.decoratorsEnabledBeforeExport()) {
                this.raise(Errors.DecoratorExportClass, {
                    at: this.state.startLoc
                });
            }
        }
        else if (!this.canHaveLeadingDecorator()) {
            throw this.raise(Errors.UnexpectedLeadingDecorator, {
                at: this.state.startLoc
            });
        }
        return decorators;
    }
    parseDecorator() {
        this.expectOnePlugin(["decorators", "decorators-legacy"]);
        const node = this.startNode();
        this.next();
        if (this.hasPlugin("decorators")) {
            const startLoc = this.state.startLoc;
            let expr;
            if (this.match(10)) {
                const startLoc = this.state.startLoc;
                this.next();
                expr = this.parseExpression();
                this.expect(11);
                expr = this.wrapParenthesis(startLoc, expr);
                const paramsStartLoc = this.state.startLoc;
                node.expression = this.parseMaybeDecoratorArguments(expr);
                if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
                    this.raise(Errors.DecoratorArgumentsOutsideParentheses, {
                        at: paramsStartLoc
                    });
                }
            }
            else {
                expr = this.parseIdentifier(false);
                while (this.eat(16)) {
                    const node = this.startNodeAt(startLoc);
                    node.object = expr;
                    if (this.match(138)) {
                        this.classScope.usePrivateName(this.state.value, this.state.startLoc);
                        node.property = this.parsePrivateName();
                    }
                    else {
                        node.property = this.parseIdentifier(true);
                    }
                    node.computed = false;
                    expr = this.finishNode(node, "MemberExpression");
                }
                node.expression = this.parseMaybeDecoratorArguments(expr);
            }
        }
        else {
            node.expression = this.parseExprSubscripts();
        }
        return this.finishNode(node, "Decorator");
    }
    parseMaybeDecoratorArguments(expr) {
        if (this.eat(10)) {
            const node = this.startNodeAtNode(expr);
            node.callee = expr;
            node.arguments = this.parseCallExpressionArguments(11, false);
            this.toReferencedList(node.arguments);
            return this.finishNode(node, "CallExpression");
        }
        return expr;
    }
    parseBreakContinueStatement(node, isBreak) {
        this.next();
        if (this.isLineTerminator()) {
            node.label = null;
        }
        else {
            node.label = this.parseIdentifier();
            this.semicolon();
        }
        this.verifyBreakContinue(node, isBreak);
        return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(node, isBreak) {
        let i;
        for (i = 0; i < this.state.labels.length; ++i) {
            const lab = this.state.labels[i];
            if (node.label == null || lab.name === node.label.name) {
                if (lab.kind != null && (isBreak || lab.kind === "loop"))
                    break;
                if (node.label && isBreak)
                    break;
            }
        }
        if (i === this.state.labels.length) {
            const type = isBreak ? "BreakStatement" : "ContinueStatement";
            this.raise(Errors.IllegalBreakContinue, {
                at: node,
                type
            });
        }
    }
    parseDebuggerStatement(node) {
        this.next();
        this.semicolon();
        return this.finishNode(node, "DebuggerStatement");
    }
    parseHeaderExpression() {
        this.expect(10);
        const val = this.parseExpression();
        this.expect(11);
        return val;
    }
    parseDoWhileStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
        this.state.labels.pop();
        this.expect(92);
        node.test = this.parseHeaderExpression();
        this.eat(13);
        return this.finishNode(node, "DoWhileStatement");
    }
    parseForStatement(node) {
        this.next();
        this.state.labels.push(loopLabel);
        let awaitAt = null;
        if (this.isAwaitAllowed() && this.eatContextual(96)) {
            awaitAt = this.state.lastTokStartLoc;
        }
        this.scope.enter(0);
        this.expect(10);
        if (this.match(13)) {
            if (awaitAt !== null) {
                this.unexpected(awaitAt);
            }
            return this.parseFor(node, null);
        }
        const startsWithLet = this.isContextual(100);
        {
            const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
            const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
            const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
            if (this.match(74) || this.match(75) || isLetOrUsing) {
                const initNode = this.startNode();
                let kind;
                if (startsWithAwaitUsing) {
                    kind = "await using";
                    if (!this.isAwaitAllowed()) {
                        this.raise(Errors.AwaitUsingNotInAsyncContext, {
                            at: this.state.startLoc
                        });
                    }
                    this.next();
                }
                else {
                    kind = this.state.value;
                }
                this.next();
                this.parseVar(initNode, true, kind);
                const init = this.finishNode(initNode, "VariableDeclaration");
                const isForIn = this.match(58);
                if (isForIn && starsWithUsingDeclaration) {
                    this.raise(Errors.ForInUsing, {
                        at: init
                    });
                }
                if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {
                    return this.parseForIn(node, init, awaitAt);
                }
                if (awaitAt !== null) {
                    this.unexpected(awaitAt);
                }
                return this.parseFor(node, init);
            }
        }
        const startsWithAsync = this.isContextual(95);
        const refExpressionErrors = new ExpressionErrors();
        const init = this.parseExpression(true, refExpressionErrors);
        const isForOf = this.isContextual(102);
        if (isForOf) {
            if (startsWithLet) {
                this.raise(Errors.ForOfLet, {
                    at: init
                });
            }
            if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
                this.raise(Errors.ForOfAsync, {
                    at: init
                });
            }
        }
        if (isForOf || this.match(58)) {
            this.checkDestructuringPrivate(refExpressionErrors);
            this.toAssignable(init, true);
            const type = isForOf ? "ForOfStatement" : "ForInStatement";
            this.checkLVal(init, {
                in: {
                    type
                }
            });
            return this.parseForIn(node, init, awaitAt);
        }
        else {
            this.checkExpressionErrors(refExpressionErrors, true);
        }
        if (awaitAt !== null) {
            this.unexpected(awaitAt);
        }
        return this.parseFor(node, init);
    }
    parseFunctionStatement(node, isAsync, isHangingDeclaration) {
        this.next();
        return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
    }
    parseIfStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
        node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
        return this.finishNode(node, "IfStatement");
    }
    parseReturnStatement(node) {
        if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
            this.raise(Errors.IllegalReturn, {
                at: this.state.startLoc
            });
        }
        this.next();
        if (this.isLineTerminator()) {
            node.argument = null;
        }
        else {
            node.argument = this.parseExpression();
            this.semicolon();
        }
        return this.finishNode(node, "ReturnStatement");
    }
    parseSwitchStatement(node) {
        this.next();
        node.discriminant = this.parseHeaderExpression();
        const cases = node.cases = [];
        this.expect(5);
        this.state.labels.push(switchLabel);
        this.scope.enter(0);
        let cur;
        for (let sawDefault; !this.match(8);) {
            if (this.match(61) || this.match(65)) {
                const isCase = this.match(61);
                if (cur)
                    this.finishNode(cur, "SwitchCase");
                cases.push(cur = this.startNode());
                cur.consequent = [];
                this.next();
                if (isCase) {
                    cur.test = this.parseExpression();
                }
                else {
                    if (sawDefault) {
                        this.raise(Errors.MultipleDefaultsInSwitch, {
                            at: this.state.lastTokStartLoc
                        });
                    }
                    sawDefault = true;
                    cur.test = null;
                }
                this.expect(14);
            }
            else {
                if (cur) {
                    cur.consequent.push(this.parseStatementListItem());
                }
                else {
                    this.unexpected();
                }
            }
        }
        this.scope.exit();
        if (cur)
            this.finishNode(cur, "SwitchCase");
        this.next();
        this.state.labels.pop();
        return this.finishNode(node, "SwitchStatement");
    }
    parseThrowStatement(node) {
        this.next();
        if (this.hasPrecedingLineBreak()) {
            this.raise(Errors.NewlineAfterThrow, {
                at: this.state.lastTokEndLoc
            });
        }
        node.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node, "ThrowStatement");
    }
    parseCatchClauseParam() {
        const param = this.parseBindingAtom();
        this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
        this.checkLVal(param, {
            in: {
                type: "CatchClause"
            },
            binding: 9
        });
        return param;
    }
    parseTryStatement(node) {
        this.next();
        node.block = this.parseBlock();
        node.handler = null;
        if (this.match(62)) {
            const clause = this.startNode();
            this.next();
            if (this.match(10)) {
                this.expect(10);
                clause.param = this.parseCatchClauseParam();
                this.expect(11);
            }
            else {
                clause.param = null;
                this.scope.enter(0);
            }
            clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
            this.scope.exit();
            node.handler = this.finishNode(clause, "CatchClause");
        }
        node.finalizer = this.eat(67) ? this.parseBlock() : null;
        if (!node.handler && !node.finalizer) {
            this.raise(Errors.NoCatchOrFinally, {
                at: node
            });
        }
        return this.finishNode(node, "TryStatement");
    }
    parseVarStatement(node, kind, allowMissingInitializer = false) {
        this.next();
        this.parseVar(node, false, kind, allowMissingInitializer);
        this.semicolon();
        return this.finishNode(node, "VariableDeclaration");
    }
    parseWhileStatement(node) {
        this.next();
        node.test = this.parseHeaderExpression();
        this.state.labels.push(loopLabel);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
        this.state.labels.pop();
        return this.finishNode(node, "WhileStatement");
    }
    parseWithStatement(node) {
        if (this.state.strict) {
            this.raise(Errors.StrictWith, {
                at: this.state.startLoc
            });
        }
        this.next();
        node.object = this.parseHeaderExpression();
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
        return this.finishNode(node, "WithStatement");
    }
    parseEmptyStatement(node) {
        this.next();
        return this.finishNode(node, "EmptyStatement");
    }
    parseLabeledStatement(node, maybeName, expr, flags) {
        for (const label of this.state.labels) {
            if (label.name === maybeName) {
                this.raise(Errors.LabelRedeclaration, {
                    at: expr,
                    labelName: maybeName
                });
            }
        }
        const kind = tokenIsLoop(this.state.type) ? "loop" : this.match(71) ? "switch" : null;
        for (let i = this.state.labels.length - 1; i >= 0; i--) {
            const label = this.state.labels[i];
            if (label.statementStart === node.start) {
                label.statementStart = this.state.start;
                label.kind = kind;
            }
            else {
                break;
            }
        }
        this.state.labels.push({
            name: maybeName,
            kind: kind,
            statementStart: this.state.start
        });
        node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
        this.state.labels.pop();
        node.label = expr;
        return this.finishNode(node, "LabeledStatement");
    }
    parseExpressionStatement(node, expr, decorators) {
        node.expression = expr;
        this.semicolon();
        return this.finishNode(node, "ExpressionStatement");
    }
    parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
        const node = this.startNode();
        if (allowDirectives) {
            this.state.strictErrors.clear();
        }
        this.expect(5);
        if (createNewLexicalScope) {
            this.scope.enter(0);
        }
        this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
        if (createNewLexicalScope) {
            this.scope.exit();
        }
        return this.finishNode(node, "BlockStatement");
    }
    isValidDirective(stmt) {
        return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
    }
    parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
        const body = node.body = [];
        const directives = node.directives = [];
        this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
    }
    parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
        const oldStrict = this.state.strict;
        let hasStrictModeDirective = false;
        let parsedNonDirective = false;
        while (!this.match(end)) {
            const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
            if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                    const directive = this.stmtToDirective(stmt);
                    directives.push(directive);
                    if (!hasStrictModeDirective && directive.value.value === "use strict") {
                        hasStrictModeDirective = true;
                        this.setStrict(true);
                    }
                    continue;
                }
                parsedNonDirective = true;
                this.state.strictErrors.clear();
            }
            body.push(stmt);
        }
        afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
        if (!oldStrict) {
            this.setStrict(false);
        }
        this.next();
    }
    parseFor(node, init) {
        node.init = init;
        this.semicolon(false);
        node.test = this.match(13) ? null : this.parseExpression();
        this.semicolon(false);
        node.update = this.match(11) ? null : this.parseExpression();
        this.expect(11);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, "ForStatement");
    }
    parseForIn(node, init, awaitAt) {
        const isForIn = this.match(58);
        this.next();
        if (isForIn) {
            if (awaitAt !== null)
                this.unexpected(awaitAt);
        }
        else {
            node.await = awaitAt !== null;
        }
        if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(Errors.ForInOfLoopInitializer, {
                at: init,
                type: isForIn ? "ForInStatement" : "ForOfStatement"
            });
        }
        if (init.type === "AssignmentPattern") {
            this.raise(Errors.InvalidLhs, {
                at: init,
                ancestor: {
                    type: "ForStatement"
                }
            });
        }
        node.left = init;
        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
        this.expect(11);
        node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
        this.scope.exit();
        this.state.labels.pop();
        return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(node, isFor, kind, allowMissingInitializer = false) {
        const declarations = node.declarations = [];
        node.kind = kind;
        for (;;) {
            const decl = this.startNode();
            this.parseVarId(decl, kind);
            decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
            if (decl.init === null && !allowMissingInitializer) {
                if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
                    this.raise(Errors.DeclarationMissingInitializer, {
                        at: this.state.lastTokEndLoc,
                        kind: "destructuring"
                    });
                }
                else if (kind === "const" && !(this.match(58) || this.isContextual(102))) {
                    this.raise(Errors.DeclarationMissingInitializer, {
                        at: this.state.lastTokEndLoc,
                        kind: "const"
                    });
                }
            }
            declarations.push(this.finishNode(decl, "VariableDeclarator"));
            if (!this.eat(12))
                break;
        }
        return node;
    }
    parseVarId(decl, kind) {
        const id = this.parseBindingAtom();
        this.checkLVal(id, {
            in: {
                type: "VariableDeclarator"
            },
            binding: kind === "var" ? 5 : 8201
        });
        decl.id = id;
    }
    parseAsyncFunctionExpression(node) {
        return this.parseFunction(node, 8);
    }
    parseFunction(node, flags = 0) {
        const hangingDeclaration = flags & 2;
        const isDeclaration = !!(flags & 1);
        const requireId = isDeclaration && !(flags & 4);
        const isAsync = !!(flags & 8);
        this.initFunction(node, isAsync);
        if (this.match(55)) {
            if (hangingDeclaration) {
                this.raise(Errors.GeneratorInSingleStatementContext, {
                    at: this.state.startLoc
                });
            }
            this.next();
            node.generator = true;
        }
        if (isDeclaration) {
            node.id = this.parseFunctionId(requireId);
        }
        const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = false;
        this.scope.enter(2);
        this.prodParam.enter(functionFlags(isAsync, node.generator));
        if (!isDeclaration) {
            node.id = this.parseFunctionId();
        }
        this.parseFunctionParams(node, false);
        this.withSmartMixTopicForbiddingContext(() => {
            this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
        });
        this.prodParam.exit();
        this.scope.exit();
        if (isDeclaration && !hangingDeclaration) {
            this.registerFunctionStatementId(node);
        }
        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
        return node;
    }
    parseFunctionId(requireId) {
        return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(node, isConstructor) {
        this.expect(10);
        this.expressionScope.enter(newParameterDeclarationScope());
        node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
        this.expressionScope.exit();
    }
    registerFunctionStatementId(node) {
        if (!node.id)
            return;
        this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
    }
    parseClass(node, isStatement, optionalId) {
        this.next();
        const oldStrict = this.state.strict;
        this.state.strict = true;
        this.parseClassId(node, isStatement, optionalId);
        this.parseClassSuper(node);
        node.body = this.parseClassBody(!!node.superClass, oldStrict);
        return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
        return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
        return this.match(10);
    }
    isNonstaticConstructor(method) {
        return !method.computed && !method.static && (method.key.name === "constructor" || method.key.value === "constructor");
    }
    parseClassBody(hadSuperClass, oldStrict) {
        this.classScope.enter();
        const state = {
            hadConstructor: false,
            hadSuperClass
        };
        let decorators = [];
        const classBody = this.startNode();
        classBody.body = [];
        this.expect(5);
        this.withSmartMixTopicForbiddingContext(() => {
            while (!this.match(8)) {
                if (this.eat(13)) {
                    if (decorators.length > 0) {
                        throw this.raise(Errors.DecoratorSemicolon, {
                            at: this.state.lastTokEndLoc
                        });
                    }
                    continue;
                }
                if (this.match(26)) {
                    decorators.push(this.parseDecorator());
                    continue;
                }
                const member = this.startNode();
                if (decorators.length) {
                    member.decorators = decorators;
                    this.resetStartLocationFromNode(member, decorators[0]);
                    decorators = [];
                }
                this.parseClassMember(classBody, member, state);
                if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
                    this.raise(Errors.DecoratorConstructor, {
                        at: member
                    });
                }
            }
        });
        this.state.strict = oldStrict;
        this.next();
        if (decorators.length) {
            throw this.raise(Errors.TrailingDecorator, {
                at: this.state.startLoc
            });
        }
        this.classScope.exit();
        return this.finishNode(classBody, "ClassBody");
    }
    parseClassMemberFromModifier(classBody, member) {
        const key = this.parseIdentifier(true);
        if (this.isClassMethod()) {
            const method = member;
            method.kind = "method";
            method.computed = false;
            method.key = key;
            method.static = false;
            this.pushClassMethod(classBody, method, false, false, false, false);
            return true;
        }
        else if (this.isClassProperty()) {
            const prop = member;
            prop.computed = false;
            prop.key = key;
            prop.static = false;
            classBody.body.push(this.parseClassProperty(prop));
            return true;
        }
        this.resetPreviousNodeTrailingComments(key);
        return false;
    }
    parseClassMember(classBody, member, state) {
        const isStatic = this.isContextual(106);
        if (isStatic) {
            if (this.parseClassMemberFromModifier(classBody, member)) {
                return;
            }
            if (this.eat(5)) {
                this.parseClassStaticBlock(classBody, member);
                return;
            }
        }
        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
        const publicMethod = member;
        const privateMethod = member;
        const publicProp = member;
        const privateProp = member;
        const accessorProp = member;
        const method = publicMethod;
        const publicMember = publicMethod;
        member.static = isStatic;
        this.parsePropertyNamePrefixOperator(member);
        if (this.eat(55)) {
            method.kind = "method";
            const isPrivateName = this.match(138);
            this.parseClassElementName(method);
            if (isPrivateName) {
                this.pushClassPrivateMethod(classBody, privateMethod, true, false);
                return;
            }
            if (this.isNonstaticConstructor(publicMethod)) {
                this.raise(Errors.ConstructorIsGenerator, {
                    at: publicMethod.key
                });
            }
            this.pushClassMethod(classBody, publicMethod, true, false, false, false);
            return;
        }
        const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;
        const isPrivate = this.match(138);
        const key = this.parseClassElementName(member);
        const maybeQuestionTokenStartLoc = this.state.startLoc;
        this.parsePostMemberNameModifiers(publicMember);
        if (this.isClassMethod()) {
            method.kind = "method";
            if (isPrivate) {
                this.pushClassPrivateMethod(classBody, privateMethod, false, false);
                return;
            }
            const isConstructor = this.isNonstaticConstructor(publicMethod);
            let allowsDirectSuper = false;
            if (isConstructor) {
                publicMethod.kind = "constructor";
                if (state.hadConstructor && !this.hasPlugin("typescript")) {
                    this.raise(Errors.DuplicateConstructor, {
                        at: key
                    });
                }
                if (isConstructor && this.hasPlugin("typescript") && member.override) {
                    this.raise(Errors.OverrideOnConstructor, {
                        at: key
                    });
                }
                state.hadConstructor = true;
                allowsDirectSuper = state.hadSuperClass;
            }
            this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
        }
        else if (this.isClassProperty()) {
            if (isPrivate) {
                this.pushClassPrivateProperty(classBody, privateProp);
            }
            else {
                this.pushClassProperty(classBody, publicProp);
            }
        }
        else if (isContextual && key.name === "async" && !this.isLineTerminator()) {
            this.resetPreviousNodeTrailingComments(key);
            const isGenerator = this.eat(55);
            if (publicMember.optional) {
                this.unexpected(maybeQuestionTokenStartLoc);
            }
            method.kind = "method";
            const isPrivate = this.match(138);
            this.parseClassElementName(method);
            this.parsePostMemberNameModifiers(publicMember);
            if (isPrivate) {
                this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
            }
            else {
                if (this.isNonstaticConstructor(publicMethod)) {
                    this.raise(Errors.ConstructorIsAsync, {
                        at: publicMethod.key
                    });
                }
                this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
            }
        }
        else if (isContextual && (key.name === "get" || key.name === "set") && !(this.match(55) && this.isLineTerminator())) {
            this.resetPreviousNodeTrailingComments(key);
            method.kind = key.name;
            const isPrivate = this.match(138);
            this.parseClassElementName(publicMethod);
            if (isPrivate) {
                this.pushClassPrivateMethod(classBody, privateMethod, false, false);
            }
            else {
                if (this.isNonstaticConstructor(publicMethod)) {
                    this.raise(Errors.ConstructorIsAccessor, {
                        at: publicMethod.key
                    });
                }
                this.pushClassMethod(classBody, publicMethod, false, false, false, false);
            }
            this.checkGetterSetterParams(publicMethod);
        }
        else if (isContextual && key.name === "accessor" && !this.isLineTerminator()) {
            this.expectPlugin("decoratorAutoAccessors");
            this.resetPreviousNodeTrailingComments(key);
            const isPrivate = this.match(138);
            this.parseClassElementName(publicProp);
            this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);
        }
        else if (this.isLineTerminator()) {
            if (isPrivate) {
                this.pushClassPrivateProperty(classBody, privateProp);
            }
            else {
                this.pushClassProperty(classBody, publicProp);
            }
        }
        else {
            this.unexpected();
        }
    }
    parseClassElementName(member) {
        const { type, value } = this.state;
        if ((type === 132 || type === 133) && member.static && value === "prototype") {
            this.raise(Errors.StaticPrototype, {
                at: this.state.startLoc
            });
        }
        if (type === 138) {
            if (value === "constructor") {
                this.raise(Errors.ConstructorClassPrivateField, {
                    at: this.state.startLoc
                });
            }
            const key = this.parsePrivateName();
            member.key = key;
            return key;
        }
        return this.parsePropertyName(member);
    }
    parseClassStaticBlock(classBody, member) {
        var _member$decorators;
        this.scope.enter(64 | 128 | 16);
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(0);
        const body = member.body = [];
        this.parseBlockOrModuleBlockBody(body, undefined, false, 8);
        this.prodParam.exit();
        this.scope.exit();
        this.state.labels = oldLabels;
        classBody.body.push(this.finishNode(member, "StaticBlock"));
        if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
            this.raise(Errors.DecoratorStaticBlock, {
                at: member
            });
        }
    }
    pushClassProperty(classBody, prop) {
        if (!prop.computed && (prop.key.name === "constructor" || prop.key.value === "constructor")) {
            this.raise(Errors.ConstructorClassField, {
                at: prop.key
            });
        }
        classBody.body.push(this.parseClassProperty(prop));
    }
    pushClassPrivateProperty(classBody, prop) {
        const node = this.parseClassPrivateProperty(prop);
        classBody.body.push(node);
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
    }
    pushClassAccessorProperty(classBody, prop, isPrivate) {
        if (!isPrivate && !prop.computed) {
            const key = prop.key;
            if (key.name === "constructor" || key.value === "constructor") {
                this.raise(Errors.ConstructorClassField, {
                    at: key
                });
            }
        }
        const node = this.parseClassAccessorProperty(prop);
        classBody.body.push(node);
        if (isPrivate) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
        }
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
        classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
        const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
        classBody.body.push(node);
        const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
        this.declareClassPrivateMethodInScope(node, kind);
    }
    declareClassPrivateMethodInScope(node, kind) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
    }
    parsePostMemberNameModifiers(methodOrProp) { }
    parseClassPrivateProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassPrivateProperty");
    }
    parseClassProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassProperty");
    }
    parseClassAccessorProperty(node) {
        this.parseInitializer(node);
        this.semicolon();
        return this.finishNode(node, "ClassAccessorProperty");
    }
    parseInitializer(node) {
        this.scope.enter(64 | 16);
        this.expressionScope.enter(newExpressionScope());
        this.prodParam.enter(0);
        node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
        this.expressionScope.exit();
        this.prodParam.exit();
        this.scope.exit();
    }
    parseClassId(node, isStatement, optionalId, bindingType = 8331) {
        if (tokenIsIdentifier(this.state.type)) {
            node.id = this.parseIdentifier();
            if (isStatement) {
                this.declareNameFromIdentifier(node.id, bindingType);
            }
        }
        else {
            if (optionalId || !isStatement) {
                node.id = null;
            }
            else {
                throw this.raise(Errors.MissingClassName, {
                    at: this.state.startLoc
                });
            }
        }
    }
    parseClassSuper(node) {
        node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(node, decorators) {
        const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
        const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
        const parseAfterDefault = !hasDefault || this.eat(12);
        const hasStar = parseAfterDefault && this.eatExportStar(node);
        const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
        const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
        const isFromRequired = hasDefault || hasStar;
        if (hasStar && !hasNamespace) {
            if (hasDefault)
                this.unexpected();
            if (decorators) {
                throw this.raise(Errors.UnsupportedDecoratorExport, {
                    at: node
                });
            }
            this.parseExportFrom(node, true);
            return this.finishNode(node, "ExportAllDeclaration");
        }
        const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
        if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
            this.unexpected(null, 5);
        }
        if (hasNamespace && parseAfterNamespace) {
            this.unexpected(null, 98);
        }
        let hasDeclaration;
        if (isFromRequired || hasSpecifiers) {
            hasDeclaration = false;
            if (decorators) {
                throw this.raise(Errors.UnsupportedDecoratorExport, {
                    at: node
                });
            }
            this.parseExportFrom(node, isFromRequired);
        }
        else {
            hasDeclaration = this.maybeParseExportDeclaration(node);
        }
        if (isFromRequired || hasSpecifiers || hasDeclaration) {
            var _node2$declaration;
            const node2 = node;
            this.checkExport(node2, true, false, !!node2.source);
            if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
                this.maybeTakeDecorators(decorators, node2.declaration, node2);
            }
            else if (decorators) {
                throw this.raise(Errors.UnsupportedDecoratorExport, {
                    at: node
                });
            }
            return this.finishNode(node2, "ExportNamedDeclaration");
        }
        if (this.eat(65)) {
            const node2 = node;
            const decl = this.parseExportDefaultExpression();
            node2.declaration = decl;
            if (decl.type === "ClassDeclaration") {
                this.maybeTakeDecorators(decorators, decl, node2);
            }
            else if (decorators) {
                throw this.raise(Errors.UnsupportedDecoratorExport, {
                    at: node
                });
            }
            this.checkExport(node2, true, true);
            return this.finishNode(node2, "ExportDefaultDeclaration");
        }
        this.unexpected(null, 5);
    }
    eatExportStar(node) {
        return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
        if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
            this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
            const id = maybeDefaultIdentifier || this.parseIdentifier(true);
            const specifier = this.startNodeAtNode(id);
            specifier.exported = id;
            node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
            return true;
        }
        return false;
    }
    maybeParseExportNamespaceSpecifier(node) {
        if (this.isContextual(93)) {
            if (!node.specifiers)
                node.specifiers = [];
            const specifier = this.startNodeAt(this.state.lastTokStartLoc);
            this.next();
            specifier.exported = this.parseModuleExportName();
            node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
            return true;
        }
        return false;
    }
    maybeParseExportNamedSpecifiers(node) {
        if (this.match(5)) {
            if (!node.specifiers)
                node.specifiers = [];
            const isTypeExport = node.exportKind === "type";
            node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
            node.source = null;
            node.declaration = null;
            if (this.hasPlugin("importAssertions")) {
                node.assertions = [];
            }
            return true;
        }
        return false;
    }
    maybeParseExportDeclaration(node) {
        if (this.shouldParseExportDeclaration()) {
            node.specifiers = [];
            node.source = null;
            if (this.hasPlugin("importAssertions")) {
                node.assertions = [];
            }
            node.declaration = this.parseExportDeclaration(node);
            return true;
        }
        return false;
    }
    isAsyncFunction() {
        if (!this.isContextual(95))
            return false;
        const next = this.nextTokenInLineStart();
        return this.isUnparsedContextual(next, "function");
    }
    parseExportDefaultExpression() {
        const expr = this.startNode();
        if (this.match(68)) {
            this.next();
            return this.parseFunction(expr, 1 | 4);
        }
        else if (this.isAsyncFunction()) {
            this.next();
            this.next();
            return this.parseFunction(expr, 1 | 4 | 8);
        }
        if (this.match(80)) {
            return this.parseClass(expr, true, true);
        }
        if (this.match(26)) {
            if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
                this.raise(Errors.DecoratorBeforeExport, {
                    at: this.state.startLoc
                });
            }
            return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
        }
        if (this.match(75) || this.match(74) || this.isLet()) {
            throw this.raise(Errors.UnsupportedDefaultExport, {
                at: this.state.startLoc
            });
        }
        const res = this.parseMaybeAssignAllowIn();
        this.semicolon();
        return res;
    }
    parseExportDeclaration(node) {
        if (this.match(80)) {
            const node = this.parseClass(this.startNode(), true, false);
            return node;
        }
        return this.parseStatementListItem();
    }
    isExportDefaultSpecifier() {
        const { type } = this.state;
        if (tokenIsIdentifier(type)) {
            if (type === 95 && !this.state.containsEsc || type === 100) {
                return false;
            }
            if ((type === 130 || type === 129) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
                    this.expectOnePlugin(["flow", "typescript"]);
                    return false;
                }
            }
        }
        else if (!this.match(65)) {
            return false;
        }
        const next = this.nextTokenStart();
        const hasFrom = this.isUnparsedContextual(next, "from");
        if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
            return true;
        }
        if (this.match(65) && hasFrom) {
            const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
            return nextAfterFrom === 34 || nextAfterFrom === 39;
        }
        return false;
    }
    parseExportFrom(node, expect) {
        if (this.eatContextual(98)) {
            node.source = this.parseImportSource();
            this.checkExport(node);
            this.maybeParseImportAttributes(node);
            this.checkJSONModuleImport(node);
        }
        else if (expect) {
            this.unexpected();
        }
        this.semicolon();
    }
    shouldParseExportDeclaration() {
        const { type } = this.state;
        if (type === 26) {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            if (this.hasPlugin("decorators")) {
                if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
                    this.raise(Errors.DecoratorBeforeExport, {
                        at: this.state.startLoc
                    });
                }
                return true;
            }
        }
        return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(node, checkNames, isDefault, isFrom) {
        if (checkNames) {
            var _node$specifiers;
            if (isDefault) {
                this.checkDuplicateExports(node, "default");
                if (this.hasPlugin("exportDefaultFrom")) {
                    var _declaration$extra;
                    const declaration = node.declaration;
                    if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
                        this.raise(Errors.ExportDefaultFromAsIdentifier, {
                            at: declaration
                        });
                    }
                }
            }
            else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
                for (const specifier of node.specifiers) {
                    const { exported } = specifier;
                    const exportName = exported.type === "Identifier" ? exported.name : exported.value;
                    this.checkDuplicateExports(specifier, exportName);
                    if (!isFrom && specifier.local) {
                        const { local } = specifier;
                        if (local.type !== "Identifier") {
                            this.raise(Errors.ExportBindingIsString, {
                                at: specifier,
                                localName: local.value,
                                exportName
                            });
                        }
                        else {
                            this.checkReservedWord(local.name, local.loc.start, true, false);
                            this.scope.checkLocalExport(local);
                        }
                    }
                }
            }
            else if (node.declaration) {
                if (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "ClassDeclaration") {
                    const id = node.declaration.id;
                    if (!id)
                        throw new Error("Assertion failure");
                    this.checkDuplicateExports(node, id.name);
                }
                else if (node.declaration.type === "VariableDeclaration") {
                    for (const declaration of node.declaration.declarations) {
                        this.checkDeclaration(declaration.id);
                    }
                }
            }
        }
    }
    checkDeclaration(node) {
        if (node.type === "Identifier") {
            this.checkDuplicateExports(node, node.name);
        }
        else if (node.type === "ObjectPattern") {
            for (const prop of node.properties) {
                this.checkDeclaration(prop);
            }
        }
        else if (node.type === "ArrayPattern") {
            for (const elem of node.elements) {
                if (elem) {
                    this.checkDeclaration(elem);
                }
            }
        }
        else if (node.type === "ObjectProperty") {
            this.checkDeclaration(node.value);
        }
        else if (node.type === "RestElement") {
            this.checkDeclaration(node.argument);
        }
        else if (node.type === "AssignmentPattern") {
            this.checkDeclaration(node.left);
        }
    }
    checkDuplicateExports(node, exportName) {
        if (this.exportedIdentifiers.has(exportName)) {
            if (exportName === "default") {
                this.raise(Errors.DuplicateDefaultExport, {
                    at: node
                });
            }
            else {
                this.raise(Errors.DuplicateExport, {
                    at: node,
                    exportName
                });
            }
        }
        this.exportedIdentifiers.add(exportName);
    }
    parseExportSpecifiers(isInTypeExport) {
        const nodes = [];
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
            if (first) {
                first = false;
            }
            else {
                this.expect(12);
                if (this.eat(8))
                    break;
            }
            const isMaybeTypeOnly = this.isContextual(130);
            const isString = this.match(133);
            const node = this.startNode();
            node.local = this.parseModuleExportName();
            nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
        }
        return nodes;
    }
    parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
        if (this.eatContextual(93)) {
            node.exported = this.parseModuleExportName();
        }
        else if (isString) {
            node.exported = cloneStringLiteral(node.local);
        }
        else if (!node.exported) {
            node.exported = cloneIdentifier(node.local);
        }
        return this.finishNode(node, "ExportSpecifier");
    }
    parseModuleExportName() {
        if (this.match(133)) {
            const result = this.parseStringLiteral(this.state.value);
            const surrogate = result.value.match(loneSurrogate);
            if (surrogate) {
                this.raise(Errors.ModuleExportNameHasLoneSurrogate, {
                    at: result,
                    surrogateCharCode: surrogate[0].charCodeAt(0)
                });
            }
            return result;
        }
        return this.parseIdentifier(true);
    }
    isJSONModuleImport(node) {
        if (node.assertions != null) {
            return node.assertions.some(({ key, value }) => {
                return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
            });
        }
        return false;
    }
    checkImportReflection(node) {
        const { specifiers } = node;
        const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
        if (node.phase === "source") {
            if (singleBindingType !== "ImportDefaultSpecifier") {
                this.raise(Errors.SourcePhaseImportRequiresDefault, {
                    at: specifiers[0].loc.start
                });
            }
        }
        else if (node.phase === "defer") {
            if (singleBindingType !== "ImportNamespaceSpecifier") {
                this.raise(Errors.DeferImportRequiresNamespace, {
                    at: specifiers[0].loc.start
                });
            }
        }
        else if (node.module) {
            var _node$assertions;
            if (singleBindingType !== "ImportDefaultSpecifier") {
                this.raise(Errors.ImportReflectionNotBinding, {
                    at: specifiers[0].loc.start
                });
            }
            if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
                this.raise(Errors.ImportReflectionHasAssertion, {
                    at: node.specifiers[0].loc.start
                });
            }
        }
    }
    checkJSONModuleImport(node) {
        if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
            const { specifiers } = node;
            if (specifiers != null) {
                const nonDefaultNamedSpecifier = specifiers.find(specifier => {
                    let imported;
                    if (specifier.type === "ExportSpecifier") {
                        imported = specifier.local;
                    }
                    else if (specifier.type === "ImportSpecifier") {
                        imported = specifier.imported;
                    }
                    if (imported !== undefined) {
                        return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
                    }
                });
                if (nonDefaultNamedSpecifier !== undefined) {
                    this.raise(Errors.ImportJSONBindingNotDefault, {
                        at: nonDefaultNamedSpecifier.loc.start
                    });
                }
            }
        }
    }
    isPotentialImportPhase(isExport) {
        if (isExport)
            return false;
        return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
    }
    applyImportPhase(node, isExport, phase, loc) {
        if (isExport) {
            return;
        }
        if (phase === "module") {
            this.expectPlugin("importReflection", loc);
            node.module = true;
        }
        else if (this.hasPlugin("importReflection")) {
            node.module = false;
        }
        if (phase === "source") {
            this.expectPlugin("sourcePhaseImports", loc);
            node.phase = "source";
        }
        else if (phase === "defer") {
            this.expectPlugin("deferredImportEvaluation", loc);
            node.phase = "defer";
        }
        else if (this.hasPlugin("sourcePhaseImports")) {
            node.phase = null;
        }
    }
    parseMaybeImportPhase(node, isExport) {
        if (!this.isPotentialImportPhase(isExport)) {
            this.applyImportPhase(node, isExport, null);
            return null;
        }
        const phaseIdentifier = this.parseIdentifier(true);
        const { type } = this.state;
        const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
        if (isImportPhase) {
            this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
            this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
            return null;
        }
        else {
            this.applyImportPhase(node, isExport, null);
            return phaseIdentifier;
        }
    }
    isPrecedingIdImportPhase(phase) {
        const { type } = this.state;
        return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
    }
    parseImport(node) {
        if (this.match(133)) {
            return this.parseImportSourceAndAttributes(node);
        }
        return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
    }
    parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
        node.specifiers = [];
        const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
        const parseNext = !hasDefault || this.eat(12);
        const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
        if (parseNext && !hasStar)
            this.parseNamedImportSpecifiers(node);
        this.expectContextual(98);
        return this.parseImportSourceAndAttributes(node);
    }
    parseImportSourceAndAttributes(node) {
        var _node$specifiers2;
        (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];
        node.source = this.parseImportSource();
        this.maybeParseImportAttributes(node);
        this.checkImportReflection(node);
        this.checkJSONModuleImport(node);
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
    }
    parseImportSource() {
        if (!this.match(133))
            this.unexpected();
        return this.parseExprAtom();
    }
    parseImportSpecifierLocal(node, specifier, type) {
        specifier.local = this.parseIdentifier();
        node.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    finishImportSpecifier(specifier, type, bindingType = 8201) {
        this.checkLVal(specifier.local, {
            in: {
                type
            },
            binding: bindingType
        });
        return this.finishNode(specifier, type);
    }
    parseImportAttributes() {
        this.expect(5);
        const attrs = [];
        const attrNames = new Set();
        do {
            if (this.match(8)) {
                break;
            }
            const node = this.startNode();
            const keyName = this.state.value;
            if (attrNames.has(keyName)) {
                this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
                    at: this.state.startLoc,
                    key: keyName
                });
            }
            attrNames.add(keyName);
            if (this.match(133)) {
                node.key = this.parseStringLiteral(keyName);
            }
            else {
                node.key = this.parseIdentifier(true);
            }
            this.expect(14);
            if (!this.match(133)) {
                throw this.raise(Errors.ModuleAttributeInvalidValue, {
                    at: this.state.startLoc
                });
            }
            node.value = this.parseStringLiteral(this.state.value);
            attrs.push(this.finishNode(node, "ImportAttribute"));
        } while (this.eat(12));
        this.expect(8);
        return attrs;
    }
    parseModuleAttributes() {
        const attrs = [];
        const attributes = new Set();
        do {
            const node = this.startNode();
            node.key = this.parseIdentifier(true);
            if (node.key.name !== "type") {
                this.raise(Errors.ModuleAttributeDifferentFromType, {
                    at: node.key
                });
            }
            if (attributes.has(node.key.name)) {
                this.raise(Errors.ModuleAttributesWithDuplicateKeys, {
                    at: node.key,
                    key: node.key.name
                });
            }
            attributes.add(node.key.name);
            this.expect(14);
            if (!this.match(133)) {
                throw this.raise(Errors.ModuleAttributeInvalidValue, {
                    at: this.state.startLoc
                });
            }
            node.value = this.parseStringLiteral(this.state.value);
            attrs.push(this.finishNode(node, "ImportAttribute"));
        } while (this.eat(12));
        return attrs;
    }
    maybeParseImportAttributes(node) {
        let attributes;
        let useWith = false;
        if (this.match(76)) {
            if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
                return;
            }
            this.next();
            {
                if (this.hasPlugin("moduleAttributes")) {
                    attributes = this.parseModuleAttributes();
                }
                else {
                    this.expectImportAttributesPlugin();
                    attributes = this.parseImportAttributes();
                }
            }
            useWith = true;
        }
        else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
            if (this.hasPlugin("importAttributes")) {
                if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
                    this.raise(Errors.ImportAttributesUseAssert, {
                        at: this.state.startLoc
                    });
                }
                this.addExtra(node, "deprecatedAssertSyntax", true);
            }
            else {
                this.expectOnePlugin(["importAttributes", "importAssertions"]);
            }
            this.next();
            attributes = this.parseImportAttributes();
        }
        else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
            attributes = [];
        }
        else {
            if (this.hasPlugin("moduleAttributes")) {
                attributes = [];
            }
            else
                return;
        }
        if (!useWith && this.hasPlugin("importAssertions")) {
            node.assertions = attributes;
        }
        else {
            node.attributes = attributes;
        }
    }
    maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
        if (maybeDefaultIdentifier) {
            const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
            specifier.local = maybeDefaultIdentifier;
            node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
            return true;
        }
        else if (tokenIsKeywordOrIdentifier(this.state.type)) {
            this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
            return true;
        }
        return false;
    }
    maybeParseStarImportSpecifier(node) {
        if (this.match(55)) {
            const specifier = this.startNode();
            this.next();
            this.expectContextual(93);
            this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
            return true;
        }
        return false;
    }
    parseNamedImportSpecifiers(node) {
        let first = true;
        this.expect(5);
        while (!this.eat(8)) {
            if (first) {
                first = false;
            }
            else {
                if (this.eat(14)) {
                    throw this.raise(Errors.DestructureNamedImport, {
                        at: this.state.startLoc
                    });
                }
                this.expect(12);
                if (this.eat(8))
                    break;
            }
            const specifier = this.startNode();
            const importedIsString = this.match(133);
            const isMaybeTypeOnly = this.isContextual(130);
            specifier.imported = this.parseModuleExportName();
            const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, undefined);
            node.specifiers.push(importSpecifier);
        }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
        if (this.eatContextual(93)) {
            specifier.local = this.parseIdentifier();
        }
        else {
            const { imported } = specifier;
            if (importedIsString) {
                throw this.raise(Errors.ImportBindingIsString, {
                    at: specifier,
                    importName: imported.value
                });
            }
            this.checkReservedWord(imported.name, specifier.loc.start, true, true);
            if (!specifier.local) {
                specifier.local = cloneIdentifier(imported);
            }
        }
        return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
    }
    isThisParam(param) {
        return param.type === "Identifier" && param.name === "this";
    }
}
class Parser extends StatementParser {
    constructor(options, input) {
        options = getOptions(options);
        super(options, input);
        this.options = options;
        this.initializeScopes();
        this.plugins = pluginsMap(this.options.plugins);
        this.filename = options.sourceFilename;
    }
    getScopeHandler() {
        return ScopeHandler;
    }
    parse() {
        this.enterInitialScopes();
        const file = this.startNode();
        const program = this.startNode();
        this.nextToken();
        file.errors = null;
        this.parseTopLevel(file, program);
        file.errors = this.state.errors;
        return file;
    }
}
function pluginsMap(plugins) {
    const pluginMap = new Map();
    for (const plugin of plugins) {
        const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];
        if (!pluginMap.has(name))
            pluginMap.set(name, options || {});
    }
    return pluginMap;
}
function parse(input, options) {
    var _options;
    if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
        options = Object.assign({}, options);
        try {
            options.sourceType = "module";
            const parser = getParser(options, input);
            const ast = parser.parse();
            if (parser.sawUnambiguousESM) {
                return ast;
            }
            if (parser.ambiguousScriptDifferentAst) {
                try {
                    options.sourceType = "script";
                    return getParser(options, input).parse();
                }
                catch (_unused) { }
            }
            else {
                ast.program.sourceType = "script";
            }
            return ast;
        }
        catch (moduleError) {
            try {
                options.sourceType = "script";
                return getParser(options, input).parse();
            }
            catch (_unused2) { }
            throw moduleError;
        }
    }
    else {
        return getParser(options, input).parse();
    }
}
function parseExpression(input, options) {
    const parser = getParser(options, input);
    if (parser.options.strictMode) {
        parser.state.strict = true;
    }
    return parser.getExpression();
}
function generateExportedTokenTypes(internalTokenTypes) {
    const tokenTypes = {};
    for (const typeName of Object.keys(internalTokenTypes)) {
        tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);
    }
    return tokenTypes;
}
const tokTypes = generateExportedTokenTypes(tt);
function getParser(options, input) {
    let cls = Parser;
    if (options != null && options.plugins) {
        validatePlugins(options.plugins);
        cls = getParserClass(options.plugins);
    }
    return new cls(options, input);
}
const parserClassCache = {};
function getParserClass(pluginsFromOptions) {
    const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));
    const key = pluginList.join("/");
    let cls = parserClassCache[key];
    if (!cls) {
        cls = Parser;
        for (const plugin of pluginList) {
            cls = mixinPlugins[plugin](cls);
        }
        parserClassCache[key] = cls;
    }
    return cls;
}
lib$1.parse = parse;
var parseExpression_1 = lib$1.parseExpression = parseExpression;
lib$1.tokTypes = tokTypes;
var isIdentifier = function (ast) {
    return ast.type === 'Identifier';
};
var isBinaryExpression = function (ast) {
    return ast.type === 'BinaryExpression';
};
var isMemberExpression = function (ast) {
    return ast.type === 'MemberExpression';
};
var isNumericLiteral = function (ast) {
    return ast.type === 'NumericLiteral';
};
var isStringLiteral = function (ast) {
    return ast.type === 'StringLiteral';
};
var isBooleanLiteral = function (ast) {
    return ast.type === 'BooleanLiteral';
};
var isNullLiteral = function (ast) {
    return ast.type === 'NullLiteral';
};
var isArrayExpression = function (ast) {
    return ast.type === 'ArrayExpression';
};
var isCallExpression = function (ast) {
    return ast.type === 'CallExpression';
};
var isLogicalExpression = function (ast) {
    return ast.type === 'LogicalExpression';
};
var isUnaryExpression = function (ast) {
    return ast.type === 'UnaryExpression';
};
var isThisExpression = function (ast) {
    return ast.type === 'ThisExpression';
};
var isConditionalExpression = function (ast) {
    return ast.type === 'ConditionalExpression';
};
var isV8IntrinsicIdentifier = function (node) {
    return node.type === 'V8IntrinsicIdentifier';
};
var functions = {};
var getFunction = function (name) {
    if (functions[name]) {
        return functions[name];
    }
    throw new Error("Function(" + name + ") did not be resigtered.");
};
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var Handlers = {
    BinaryExpression: function (ast, context) {
        if (isBinaryExpression(ast)) {
            switch (ast.operator) {
                case '+':
                    return evaluate$1(ast.left, context) + evaluate$1(ast.right, context);
                case '-':
                    return evaluate$1(ast.left, context) - evaluate$1(ast.right, context);
                case '*':
                    return evaluate$1(ast.left, context) * evaluate$1(ast.right, context);
                case '/':
                    return evaluate$1(ast.left, context) / evaluate$1(ast.right, context);
                case '===':
                    return evaluate$1(ast.left, context) === evaluate$1(ast.right, context);
                case '==':
                    return evaluate$1(ast.left, context) == evaluate$1(ast.right, context);
                case '!==':
                    return evaluate$1(ast.left, context) !== evaluate$1(ast.right, context);
                case '!=':
                    return evaluate$1(ast.left, context) != evaluate$1(ast.right, context);
                case '>':
                    return evaluate$1(ast.left, context) > evaluate$1(ast.right, context);
                case '>=':
                    return evaluate$1(ast.left, context) >= evaluate$1(ast.right, context);
                case '<':
                    return evaluate$1(ast.left, context) < evaluate$1(ast.right, context);
                case '<=':
                    return evaluate$1(ast.left, context) <= evaluate$1(ast.right, context);
                case 'in': {
                    var right = evaluate$1(ast.right, context);
                    if (!right)
                        return false;
                    if (typeof right === 'object' && right instanceof Array) {
                        return right.indexOf(evaluate$1(ast.left, context)) !== -1;
                    }
                    return false;
                }
            }
        }
        throw new Error();
    },
    ConditionalExpression: function (ast, context) {
        if (isConditionalExpression(ast)) {
            return evaluate$1(ast.test, context) ? evaluate$1(ast.consequent, context) : evaluate$1(ast.alternate, context);
        }
        throw new Error();
    },
    LogicalExpression: function (ast, context) {
        if (isLogicalExpression(ast)) {
            switch (ast.operator) {
                case '&&':
                    return evaluate$1(ast.left, context) && evaluate$1(ast.right, context);
                case '||':
                    return evaluate$1(ast.left, context) || evaluate$1(ast.right, context);
            }
        }
        throw new Error();
    },
    UnaryExpression: function (ast, context) {
        if (isUnaryExpression(ast)) {
            switch (ast.operator) {
                case '!':
                    return !evaluate$1(ast.argument, context);
                case '-':
                    return -evaluate$1(ast.argument, context);
            }
        }
        throw new Error();
    },
    Identifier: function (ast, context) {
        if (isIdentifier(ast)) {
            switch (ast.name) {
                case 'undefined':
                    return undefined;
                default:
                    return context[ast.name];
            }
        }
        throw new Error();
    },
    CallExpression: function (ast, context) {
        if (isCallExpression(ast)) {
            if (!isV8IntrinsicIdentifier(ast.callee) && isIdentifier(ast.callee)) {
                var func = getFunction(ast.callee.name);
                var args = ast.arguments.map(function (arg) {
                    return evaluate$1(arg, context);
                });
                return func.call.apply(func, __spreadArrays([null], args));
            }
        }
        throw new Error();
    },
    MemberExpression: function (ast, context) {
        if (isMemberExpression(ast)) {
            var obj = evaluate$1(ast.object, context);
            if (!obj)
                return undefined;
            if (isIdentifier(ast.property)) {
                return evaluate$1(ast.property, obj);
            }
            if (isMemberExpression(ast.property)) {
                return obj[evaluate$1(ast.property, context)];
            }
            if (isNumericLiteral(ast.property) || isStringLiteral(ast.property)) {
                return obj[ast.property.value];
            }
            if ((isBinaryExpression(ast.property) || isLogicalExpression(ast.property)) && typeof obj.filter === 'function') {
                return obj.filter(function (item) { return evaluate$1(ast.property, { context: context, __scope: item }); });
            }
        }
        throw new Error();
    },
    ThisExpression: function (ast, context) {
        if (isThisExpression(ast)) {
            return context.__scope;
        }
        throw new Error();
    },
    NumericLiteral: function (ast) {
        if (isNumericLiteral(ast)) {
            return ast.value;
        }
        throw new Error();
    },
    StringLiteral: function (ast) {
        if (isStringLiteral(ast)) {
            return ast.value;
        }
        throw new Error();
    },
    BooleanLiteral: function (ast) {
        if (isBooleanLiteral(ast)) {
            return ast.value;
        }
        throw new Error();
    },
    NullLiteral: function (ast) {
        if (isNullLiteral(ast)) {
            return null;
        }
        throw new Error();
    },
    ArrayExpression: function (ast, context) {
        if (isArrayExpression(ast)) {
            return ast.elements.map(function (elem) {
                return evaluate$1(elem, context);
            });
        }
        throw new Error();
    }
};
var evaluate$1 = function (code, context) {
    if (typeof code === 'string') {
        var ast = parseExpression_1(code, { tokens: true });
        return Handlers[ast.type](ast, context);
    }
    else {
        return Handlers[code.type](code, context);
    }
};
var evaluate = (function (code, context) {
    if (context === void 0) {
        context = {};
    }
    return evaluate$1(code, context);
});
var ElementAccessor = function (value, handleChangeInput, userReadOnly) {
    return (value && (react_1.default.createElement(Element$1, { key: value.field_id, field: value, hideLabel: true, isTableElement: true, handleChangeInput: handleChangeInput, userReadOnly: userReadOnly })));
};
var FooterRowLabel = function (groups, groupByIndex, tableOptions) {
    var footerRows = [];
    footerRows = __spreadArray$1(__spreadArray$1([], __read(footerRows), false), [""], false); //empty column for total sum row
    if (groups && groupByIndex != undefined) {
        _.mapValues(groups, function (group, i) {
            var _a;
            if (group && group.length > 0) {
                var groupByField = group[0][groupByIndex];
                if (groupByField) {
                    var fieldValue_1 = groupByField.field_value;
                    if (groupByField.field_type == ElementTypes.dropdown && groupByField.field_dropdown_options)
                        fieldValue_1 = (_a = groupByField.field_dropdown_options.find(function (o) { return o.value == fieldValue_1; })) === null || _a === void 0 ? void 0 : _a.label;
                    footerRows = __spreadArray$1(__spreadArray$1([], __read(footerRows), false), [fieldValue_1], false);
                }
            }
        });
    }
    return footerRows.map(function (field, i) {
        return (react_1.default.createElement("label", { key: i }, tableOptions && tableOptions.tableSumRowCustomLabel ? tableOptions.tableSumRowCustomLabel : "∑", " ", field));
    });
};
var getSumField = function (data, index, groupIndex) {
    var options = {};
    var fieldType;
    var isCurrency = false;
    var sum = _.sum(_.map(data, function (row, i) {
        var field = row[index];
        var field_value = field && field.field_value ? field.field_value : 0;
        if ((field_value === null || field_value === void 0 ? void 0 : field_value.toString().indexOf("€")) > -1) {
            isCurrency = true;
            field_value = field_value === null || field_value === void 0 ? void 0 : field_value.replace(".", "").replace(",", ".");
        }
        if (field) {
            var precision = fieldPrecision(field);
            var result = parseFloat(roundedValue(field_value, precision));
            if (i == 0) {
                //options & field type of sum field
                options = field.field_options;
                fieldType = field.field_type;
            }
            return !isNaN(result) ? result : 0;
        }
        else {
            return null;
        }
    }));
    if (sum !== null && sum !== undefined) {
        var sumField = {
            field_id: "sum-".concat(index).concat(groupIndex ? "-group-" + groupIndex : ""),
            field_name: "sum-".concat(index).concat(groupIndex ? "-group-" + groupIndex : ""),
            field_placeholder: sum.toString(),
            field_value: sum,
            field_label: !isCurrency ? sum === null || sum === void 0 ? void 0 : sum.toString() : Intl.NumberFormat("de-DE", { style: "currency", currency: "EUR" }).format(sum),
            field_options: options,
            field_readonly: true,
            field_type: fieldType,
        };
        return sumField;
    }
    return null;
};
var FooterSum = function (index, data, validationRule, groups) {
    var footerRows = [];
    var totalSumField = getSumField(data, index);
    if (totalSumField)
        footerRows = __spreadArray$1(__spreadArray$1([], __read(footerRows), false), [totalSumField], false);
    if (groups) {
        _.mapValues(groups, function (group, i) {
            var groupSumField = getSumField(group, index, i);
            if (groupSumField)
                footerRows = __spreadArray$1(__spreadArray$1([], __read(footerRows), false), [groupSumField], false);
        });
    }
    if (validationRule) {
        footerRows.map(function (field) {
            field.field_validation_rules = __assign$1({}, validationRule);
        });
    }
    return footerRows.map(function (field, i) { return react_1.default.createElement(Element$1, { key: i, field: field, hideLabel: true, isTableElement: true }); });
};
var getFormulaTerms = function (formula) {
    var terms = [];
    for (var i = 0; i < formula.length; i++) {
        if (formula.charAt(i) === "[") {
            var stopIndex = formula.indexOf("]", i);
            if (stopIndex !== -1)
                terms.push(formula.substring(i + 1, stopIndex));
        }
    }
    return terms;
};
function cleanFormulaExpression(formula) {
    var result = [];
    var terms = getFormulaTerms(formula);
    if (terms && terms.length > 0) {
        terms.forEach(function (term, i) {
            result.push({
                original: term,
                cleaned: cleanedString(term),
            });
        });
        result.map(function (item) {
            formula = formula.replace(item.original, item.cleaned);
        });
    }
    formula = formula.replace(/\[/g, "").replace(/\]/g, "");
    return formula;
}
function extractFormula(formula, headers, row) {
    var result = {};
    var terms = getFormulaTerms(formula);
    if (terms && terms.length > 0) {
        terms.forEach(function (term, i) {
            var fieldIndex = headers.findIndex(function (header) { return header === term; });
            if (row[fieldIndex]) {
                var value = row[fieldIndex].field_value ? row[fieldIndex].field_value : 0;
                if (row[fieldIndex].field_type == ElementTypes.checkbox) {
                    result[cleanedString(term)] = value == true || value == "checked" ? 1 : 0;
                }
                else {
                    var parsedValue = parseFloat(value);
                    result[cleanedString(term)] = !isNaN(parsedValue) ? parsedValue : 0;
                }
                if (i == 0) {
                    result["FieldTemplate"] = _.cloneDeep(row[fieldIndex]);
                }
            }
        });
    }
    return result;
}
function getConditionalValue(formula, headers, row, precision) {
    try {
        var cleanedFormula = cleanFormulaExpression(_.cloneDeep(formula));
        var context = extractFormula(formula, headers, row);
        var value = evaluate(cleanedFormula, context).toFixed(precision);
        var calculatedValue = roundedValue(value, precision);
        return calculatedValue;
    }
    catch (_a) {
        return 0;
    }
}
var getColumnValues = function (headers, data, showColumnSums, rowSumsFormula, columnSumFields, columnSumValidation, tableOptions, handleChangeInput, userReadOnly) {
    var columns = [];
    //calculation component
    data.forEach(function (row, i) {
        if (row && row.filter(function (d) { return d.field_type == ElementTypes.calculationComponent; }).length > -1) {
            var calculatedFields = row.filter(function (d) { return d.field_type == ElementTypes.calculationComponent; });
            calculatedFields.forEach(function (calculatedField) {
                if (calculatedField.field_options) {
                    var value = void 0;
                    var precision = fieldPrecision(calculatedField);
                    if (calculatedField.field_options.condition) {
                        value = getConditionalValue(calculatedField.field_options.condition, headers, row, precision);
                    }
                    if (calculatedField.field_options.formula) {
                        value = getConditionalValue(calculatedField.field_options.formula, headers, row, precision);
                    }
                    calculatedField.field_value = value;
                }
            });
        }
    });
    if (rowSumsFormula) {
        var cleanedFormula_1 = cleanFormulaExpression(_.cloneDeep(rowSumsFormula));
        data.forEach(function (row, i) {
            var context = extractFormula(rowSumsFormula, headers, row);
            var value = evaluate(cleanedFormula_1, context);
            var sumField = context["FieldTemplate"];
            if (sumField) {
                var calculatedValue = roundedValue(value, fieldPrecision(sumField));
                sumField.field_value = calculatedValue;
                sumField.field_label = calculatedValue;
                sumField.field_readonly = true;
                sumField.field_placeholder = "";
                sumField.field_required = false;
                sumField.field_id = sumField.field_name = "row_sum_".concat(i);
                var indexExistingField = row.findIndex(function (el) { return el["field_id"] === "row_sum_".concat(i); });
                if (indexExistingField === -1) {
                    row.push(sumField);
                }
                else {
                    row[indexExistingField] = sumField;
                }
            }
        });
    }
    var groups = [];
    var groupByIndex = 0;
    if (tableOptions && tableOptions.groupFooterBy) {
        tableOptions.groupFooterBy;
        groupByIndex = parseInt(getKeyByValue(headers, tableOptions.groupFooterBy));
        groups = data.reduce(function (groups, item) {
            var _a;
            if (item[groupByIndex] && "field_value" in item[groupByIndex]) {
                return __assign$1(__assign$1({}, groups), (_a = {}, _a[item[groupByIndex]["field_value"]] = __spreadArray$1(__spreadArray$1([], __read((groups[item[groupByIndex]["field_value"]] || [])), false), [item], false), _a));
            }
            else {
                // If the item doesn't have "field_value", return the groups as is
                return groups;
            }
        }, {});
    }
    var footerLabelColumnIndex = columnSumFields ? parseInt(getKeyByValue(headers, columnSumFields[0])) : null;
    if (footerLabelColumnIndex && footerLabelColumnIndex > 0)
        footerLabelColumnIndex -= 1;
    headers &&
        headers
            .filter(function (e) { return e; })
            .forEach(function (element, index) {
            var validationRule;
            if (columnSumValidation)
                validationRule = getValueByKey(columnSumValidation, element);
            if (data && data.length > 0 && data[0][index]) {
                columns.push({
                    accessor: function (row) { return (row[index] ? ElementAccessor(row[index], handleChangeInput, userReadOnly) : ""); },
                    Header: element,
                    id: element,
                    Filter: ColumnFilter,
                    filter: customTableFilter,
                    canResize: true,
                    sortType: function (rowA, rowB, columnId) {
                        var _a, _b, _c, _d;
                        var fieldA = (_b = (_a = rowA.values[columnId]) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.field;
                        var fieldB = (_d = (_c = rowB.values[columnId]) === null || _c === void 0 ? void 0 : _c.props) === null || _d === void 0 ? void 0 : _d.field;
                        var valA = fieldA ? getFieldValue(fieldA) : "";
                        var valB = fieldB ? getFieldValue(fieldB) : "";
                        return valA > valB ? 1 : valA < valB ? -1 : 0;
                    },
                    Footer: showColumnSums &&
                        (columnSumFields.indexOf(element) > -1
                            ? FooterSum(index, data, validationRule, groups)
                            : footerLabelColumnIndex !== null &&
                                footerLabelColumnIndex == index.toString() &&
                                FooterRowLabel(groups, groupByIndex, tableOptions)),
                });
            }
        });
    return columns;
};
var getFieldValue = function (field) {
    var _a;
    var val;
    if (field.field_type == ElementTypes.dropdown) {
        val = (_a = field.field_dropdown_options.find(function (o) { return o.value == field.field_value; })) === null || _a === void 0 ? void 0 : _a.label;
    }
    else if (field.field_type == ElementTypes.inputNumeric || field.field_type == ElementTypes.inputCurrency) {
        val = parseFloat(field.field_value);
    }
    else {
        val = field.field_value;
    }
    return val;
};
var TableElement = (0, react_1.memo)(function (props) {
    var field = props.field, hideLabel = props.hideLabel, handleChangeTableValue = props.handleChangeTableValue, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly, setScrollHeight = props.setScrollHeight;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, table_columns_sums = field.table_columns_sums, table_columns_sums_validation = field.table_columns_sums_validation, table_show_columns_sums = field.table_show_columns_sums;
    field.table_show_hidden_rows;
    var table_row_sums_formula = field.table_row_sums_formula, table_headers = field.table_headers, table_collapsed_headers = field.table_collapsed_headers, table_newRowTemplate = field.table_newRowTemplate, table_options = field.table_options, table_changes = field.table_changes;
    var _a = __read((0, react_1.useState)(field_value), 2), tableValue = _a[0], setTableValue = _a[1];
    var dataaccess = table_options && table_options["dataaccess"];
    var table_pageSize = table_options && table_options["tablePageSize"];
    (0, react_1.useEffect)(function () {
        setTableValue(field_value);
    }, [field_value]);
    (0, react_1.useEffect)(function () {
        if (field_value !== tableValue) {
            handleChangeTableValue && handleChangeTableValue(field, tableValue);
        }
    }, [tableValue]);
    var handleAddRow = function () {
        if (table_newRowTemplate) {
            var newIndex_1 = tableValue.length;
            var newEntryTemplate = _.cloneDeep(table_newRowTemplate);
            newEntryTemplate.forEach(function (field) {
                field.field_id = "".concat(field.field_id, "-").concat(field.field_id, "-").concat(newIndex_1);
                if (field.field_name)
                    field.field_name = "".concat(field.field_name, "-").concat(newIndex_1);
                field.field_row_index = newIndex_1;
                if ([ElementTypes.inputText, ElementTypes.inputCurrency, ElementTypes.inputNumeric].includes(field.field_type)) {
                    field.field_value = "";
                }
                if (field.field_options) {
                    if (field.field_options.optionalParam)
                        field.field_options.optionalParam = "".concat(field.field_options.optionalParam, "-").concat(newIndex_1);
                    if (field.field_options.updateProp)
                        field.field_options.updateProp = "".concat(field.field_options.updateProp, "-").concat(newIndex_1);
                }
            });
            newEntryTemplate.status = RowStatus.New;
            setTableValue(__spreadArray$1(__spreadArray$1([], __read(tableValue), false), [newEntryTemplate], false));
        }
    };
    var handleDeleteRow = function (rowIndex) {
        var row = tableValue[rowIndex];
        if (row.status && row.status == RowStatus.New) {
            setTableValue(tableValue.filter(function (value, i) { return i !== rowIndex; }));
        }
        else {
            if (row.status && row.status == RowStatus.Delete)
                row.status = null;
            else
                row.status = RowStatus.Delete;
            setTableValue(__spreadArray$1([], __read(tableValue), false));
        }
    };
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: true, required: field_required }, react_1.default.createElement(IbbFormTable, { title: field_id, table_name: !hideLabel && field_label, dataaccess: dataaccess, columns: getColumnValues(table_headers, tableValue, table_show_columns_sums, table_row_sums_formula, table_columns_sums, table_columns_sums_validation, table_options, handleChangeInput, userReadOnly), data: tableValue, tablePageSize: table_pageSize, table_newRowTemplate: table_newRowTemplate, showColumnSums: table_show_columns_sums, handleAddRow: handleAddRow, handleDeleteRow: handleDeleteRow, isReadOnly: userReadOnly, isTableVertical: table_options && table_options["tableVertical"], isTableCollapsible: table_collapsed_headers != null, isTableCopyable: table_options && table_options["tableCopyable"], isTableSortable: table_options && table_options["tableSortable"], isTableFilterable: table_options && table_options["tableFilterable"], isTableColumnsFilterable: table_options && table_options["tableColumnsFilterable"], isRowsDraggable: table_options && table_options["tableRowsDraggable"], groupRowsBy: table_options && table_options["groupRowsBy"], collapsedHeaders: table_collapsed_headers, table_changes: table_changes, setScrollHeight: setScrollHeight })));
});
var IbbFormTextArea = function (props) {
    var _a;
    var _b = __read((0, react_1.useState)(""), 2), validationError = _b[0], setValidationError = _b[1];
    var isTooLong = function () {
        var _a;
        return props.maxlength && ((_a = props.field_value) === null || _a === void 0 ? void 0 : _a.length) > props.maxlength;
    };
    (0, react_1.useEffect)(function () {
        if (isTooLong()) {
            handleValidationError(props.field_value);
        }
    }, [props.field_value]);
    var handleChange = function (field_id, event) {
        if (props.handleChangeInput)
            props.handleChangeInput(field_id, event);
        else {
            console.debug("Change Input Event not handled.");
        }
    };
    var handleKeyUp = function (event) {
        event && event.target && event.target.value && props.maxlength && handleValidationError(event.target.value);
    };
    var handleValidationError = function (value) {
        setValidationError(value.length + 1 > props.maxlength ? "Der Wert darf max. ".concat(props.maxlength, " Zeichen lang sein") : null);
    };
    var value = isTooLong() ? (_a = props.field_value) === null || _a === void 0 ? void 0 : _a.substring(0, props.maxlength) : props.field_value;
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwTextArea, { className: validationError && getInvalidStyle(), placeholder: props.field_placeholder, value: value, name: props.field_name, id: props.field_id, key: props.field_id, rows: props.options && props.options.rows ? props.options.rows : 12, onChange: function (event) { return handleChange(props.field_id, event); }, readOnly: props.readonly, maxLength: props.maxlength, onKeyUp: function (event) { return handleKeyUp(event); } }), react_1.default.createElement(IbbValidationMessage, { validationMessage: validationError })));
};
var TextareaElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly;
    props.focusKey;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, field_placeholder = field.field_placeholder, field_name = field.field_name, field_readonly = field.field_readonly, field_maxlength = field.field_maxlength, field_validation_rules = field.field_validation_rules;
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbFormTextArea, { field_id: field_id, field_placeholder: field_placeholder, field_label: field_label, field_value: field_value, field_name: field_name, readonly: field_readonly || userReadOnly, required: field_required, maxlength: field_maxlength, options: field_options, validationRules: field_validation_rules ? field_validation_rules : {}, handleChangeInput: handleChangeInput })));
};
var DatePickerElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly, focusKey = props.focusKey;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, field_placeholder = field.field_placeholder, field_name = field.field_name, field_readonly = field.field_readonly, field_validation_error = field.field_validation_error, field_validation_rules = field.field_validation_rules;
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbFormDatetimepicker, { field_id: field_id, field_placeholder: field_placeholder ? field_placeholder : field_label, field_label: field_label, field_value: field_value, field_name: field_name, readonly: field_readonly || userReadOnly, required: field_required, options: field_options, field_validation_error: field_validation_error, validationRules: field_validation_rules ? field_validation_rules : {}, handleChangeInput: handleChangeInput, focusKey: focusKey })));
};
var CheckboxElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, field_name = field.field_name, field_readonly = field.field_readonly, field_validation_rules = field.field_validation_rules, field_validation_action = field.field_validation_action;
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbFormCheckbox, { field_id: field_id, field_label: field_label, field_value: field_value, field_name: field_name, readonly: field_readonly || userReadOnly, options: field_options, hide_label: true, handleChangeInput: handleChangeInput, validationRules: field_validation_rules ? field_validation_rules : {}, validationAction: field_validation_action })));
};
var RadioButtonElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, field_name = field.field_name, field_readonly = field.field_readonly;
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbFormRadiobutton, { field_id: field_id, field_label: field_label, field_name: field_name, field_value: field_value, selections: [], readonly: field_readonly || userReadOnly, required: field_required, options: field_options, handleChangeInput: handleChangeInput })));
};
var DropdownElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label, field_value = field.field_value, field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, field_name = field.field_name, field_readonly = field.field_readonly, field_row_index = field.field_row_index, field_dropdown_options = field.field_dropdown_options, field_update_action = field.field_update_action;
    var readOnly = (field_readonly || userReadOnly) ? true : false;
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbDropdown, { field_id: field_id, field_label: field_label, field_value: field_value, field_name: field_name, field_row_index: field_row_index, field_options: field_options ? field_options : {}, defaultValue: field_value ? field_value : undefined, items: field_dropdown_options, readonly: readOnly, handleChangeInput: handleChangeInput, handleUpdateAction: field_update_action ? field_update_action : null })));
};
var faFileExcel = {
    prefix: 'far',
    iconName: 'file-excel',
    icon: [384, 512, [], "f1c3", "M48 448V64c0-8.8 7.2-16 16-16H224v80c0 17.7 14.3 32 32 32h80V448c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16zM64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V154.5c0-17-6.7-33.3-18.7-45.3L274.7 18.7C262.7 6.7 246.5 0 229.5 0H64zm90.9 233.3c-8.1-10.5-23.2-12.3-33.7-4.2s-12.3 23.2-4.2 33.7L161.6 320l-44.5 57.3c-8.1 10.5-6.3 25.5 4.2 33.7s25.5 6.3 33.7-4.2L192 359.1l37.1 47.6c8.1 10.5 23.2 12.3 33.7 4.2s12.3-23.2 4.2-33.7L222.4 320l44.5-57.3c8.1-10.5 6.3-25.5-4.2-33.7s-25.5-6.3-33.7 4.2L192 280.9l-37.1-47.6z"]
};
var ButtonElement = function (props) {
    var field = props.field, hideLabel = props.hideLabel, isTableElement = props.isTableElement;
    var field_type = field.field_type, field_id = field.field_id, field_label = field.field_label;
    field.field_value;
    var field_required = field.field_required, field_changes = field.field_changes, field_options = field.field_options, button_confirmationMessage = field.button_confirmationMessage, field_custom_action = field.field_custom_action, field_readonly = field.field_readonly;
    var customIcon = function (field_type, field_label) {
        switch (field_type) {
            case ElementTypes.downloadButton:
                var icon = field_label.toLowerCase().indexOf("excel") > -1 ? faFileExcel : faDownload;
                return react_1.default.createElement(FontAwesomeIcon, { icon: icon, width: 18, className: "mr-2" });
            default:
                return "";
        }
    };
    var getButtonType = function (field_id) {
        switch (field_id === null || field_id === void 0 ? void 0 : field_id.toLowerCase()) {
            case TableActions.update:
            case TableActions.create:
                return ButtonType.Primary;
            case TableActions.delete:
                return ButtonType.Danger;
            default:
                return ButtonType.Secondary;
        }
    };
    return (react_1.default.createElement(FieldWrapper, { type: field_type, id: field_id, label: !hideLabel && field_label, hideGrid: isTableElement, required: field_required, tooltipItems: field_changes }, react_1.default.createElement(IbbButton, { buttontype: getButtonType(field_id), icon: customIcon(field_type, field_label), children: field_label, disabled: field_readonly, options: field_options, message: button_confirmationMessage, onClick: field_custom_action, preventdefault: "true" })));
};
var LabelElement = function (props) {
    var field = props.field;
    var field_id = field.field_id, field_label = field.field_label, field_maxlength = field.field_maxlength, field_custom_style = field.field_custom_style, field_readonly = field.field_readonly;
    return (react_1.default.createElement(IbbFormLabelElement, { field_id: field_id, field_value: field_label, readonly: field_readonly, maxlength: field_maxlength, customStyle: field_custom_style }));
};
var LabelSize;
(function (LabelSize) {
    LabelSize[LabelSize["Small"] = 0] = "Small";
    LabelSize[LabelSize["Normal"] = 1] = "Normal";
    LabelSize[LabelSize["Large"] = 2] = "Large";
})(LabelSize || (exports.LabelSize = LabelSize = {}));
var IbbFormLabelElement = function (props) {
    return props.size && props.size == LabelSize.Large ? (react_1.default.createElement(TwLabelLarge, { id: props.field_id, value: props.field_value, className: props.customStyle, dangerouslySetInnerHTML: { __html: props.field_value } })) : (react_1.default.createElement(TwLabelNormal, { id: props.field_id, value: props.field_value, className: props.customStyle, dangerouslySetInnerHTML: { __html: props.field_value } }));
};
exports.IbbFormLabelElement = IbbFormLabelElement;
var HeadingElement = function (props) {
    var field = props.field, userReadOnly = props.userReadOnly;
    var field_id = field.field_id, field_label = field.field_label, field_maxlength = field.field_maxlength;
    field.field_custom_style;
    var field_readonly = field.field_readonly;
    return (react_1.default.createElement(IbbFormLabelElement, { field_id: field_id, field_value: field_label, readonly: field_readonly || userReadOnly, maxlength: field_maxlength, size: LabelSize.Large }));
};
var AccordionElement = function (props) {
    var _a;
    var field = props.field, handleChangeInput = props.handleChangeInput, handleChangeTableValue = props.handleChangeTableValue, isVisible = props.isVisible;
    var field_value = field.field_value;
    var allTabsClosed = (_a = field.field_options) === null || _a === void 0 ? void 0 : _a.allTabsClosed;
    return (react_1.default.createElement(IbbFormAccordion, { tabs: field_value, handleChangeInput: handleChangeInput, handleChangeTableValue: handleChangeTableValue, isVisible: isVisible, isAllTabsClosed: allTabsClosed }));
};
var ElementGroup = function (props) {
    var field = props.field, handleChangeInput = props.handleChangeInput, userReadOnly = props.userReadOnly;
    var field_value = field.field_value;
    return Array.isArray(field_value) ? (react_1.default.createElement(IbbFormElementGroup, { elements: field_value, handleChangeInput: handleChangeInput, userReadOnly: userReadOnly, isTableElement: true })) : (react_1.default.createElement(react_1.default.Fragment, null));
};
var ButtonTypes = [
    ElementTypes.subformButton,
    ElementTypes.openUrlButton,
    ElementTypes.actionButton,
    ElementTypes.customButton,
    ElementTypes.downloadButton,
    ElementTypes.dynamicDownloadButton,
];
var Element$1 = function (props) {
    var field = props.field;
    var field_type = field.field_type, custom_component = field.custom_component;
    switch (field_type) {
        case ElementTypes.inputText:
        case ElementTypes.inputNumeric:
        case ElementTypes.inputCurrency:
        case ElementTypes.inputPassword:
        case ElementTypes.calculationComponent:
            return react_1.default.createElement(InputElement, __assign$1({}, props));
        case ElementTypes.textarea:
            return react_1.default.createElement(TextareaElement, __assign$1({}, props));
        case ElementTypes.date:
            return react_1.default.createElement(DatePickerElement, __assign$1({}, props));
        case ElementTypes.checkbox:
            return react_1.default.createElement(CheckboxElement, __assign$1({}, props));
        case ElementTypes.radio:
            return react_1.default.createElement(RadioButtonElement, __assign$1({}, props));
        case ElementTypes.dropdown:
            return react_1.default.createElement(DropdownElement, __assign$1({}, props));
        case ElementTypes.subformButton:
        case ElementTypes.openUrlButton:
        case ElementTypes.actionButton:
        case ElementTypes.customButton:
        case ElementTypes.downloadButton:
        case ElementTypes.dynamicDownloadButton:
            return react_1.default.createElement(ButtonElement, __assign$1({}, props));
        case ElementTypes.label:
        case ElementTypes.labelTemplate:
            return react_1.default.createElement(LabelElement, __assign$1({}, props));
        case ElementTypes.heading:
            return react_1.default.createElement(HeadingElement, __assign$1({}, props));
        case ElementTypes.table:
            return react_1.default.createElement(TableElement, __assign$1({}, props));
        case ElementTypes.history:
        case ElementTypes.dynamicView:
            return react_1.default.createElement(IbbDynamicComponent, { customComponent: custom_component });
        case ElementTypes.accordion:
            return react_1.default.createElement(AccordionElement, __assign$1({}, props));
        case ElementTypes.elementGroup:
            return react_1.default.createElement(ElementGroup, __assign$1({}, props));
        default:
            //default input field
            return react_1.default.createElement(InputElement, __assign$1({}, props));
    }
};
var IbbFormAccordion = function (_a) {
    var tabs = _a.tabs;
    _a.isVisible;
    var userReadOnly = _a.userReadOnly, isAllTabsClosed = _a.isAllTabsClosed, handleChangeInput = _a.handleChangeInput, handleChangeTableValue = _a.handleChangeTableValue;
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwContainer, null, tabs.map(function (item, idx) {
        var contentElement = (0, react_1.useRef)(null);
        var isClosedByDefault = isAllTabsClosed ? true : idx !== 0;
        var _a = __read((0, react_1.useState)(!isClosedByDefault), 2), isOpened = _a[0], setOpened = _a[1];
        var _b = __read((0, react_1.useState)(null), 2), scrollHeight = _b[0], setScrollHeight = _b[1];
        var _c = __read((0, react_1.useState)("0px"), 2), height = _c[0], setHeight = _c[1];
        (0, react_1.useEffect)(function () {
            handleHeight(isClosedByDefault ? false : idx === 0);
        }, []);
        // useEffect(() => {
        //   setScrollHeight(contentElement?.current?.scrollHeight);
        // }, [contentElement?.current?.scrollHeight]);
        (0, react_1.useEffect)(function () {
            if (isOpened)
                handleHeight(isOpened);
        }, [item.map(function (f) { return f.field; }), scrollHeight]);
        var heading = Array.isArray(item) && item.find(function (i) { return i["field_type"] == ElementTypes.heading; });
        var title = heading && heading["field_label"] ? heading["field_label"] : "";
        var elements = Array.isArray(item) && (heading ? item.filter(function (i) { return i["field_label"] !== heading["field_label"]; }) : item);
        var handleOpenTab = function () {
            setOpened(!isOpened);
            handleHeight(!isOpened);
        };
        var handleHeight = function (isOpened) {
            var _a;
            setHeight(isOpened ? "".concat((_a = contentElement === null || contentElement === void 0 ? void 0 : contentElement.current) === null || _a === void 0 ? void 0 : _a.scrollHeight, "px") : "0px");
        };
        return (react_1.default.createElement(TwTabContainer, { key: idx }, react_1.default.createElement(TwTabHeader, { onClick: function () { return handleOpenTab(); } }, react_1.default.createElement(TwTabHeaderText, null, title), isOpened ? react_1.default.createElement(MinusIcon$1, { width: "16" }) : react_1.default.createElement(PlusIcon$1, { width: "16" })), react_1.default.createElement("div", { style: { height: height }, className: "bg-gray-100 transition-all duration-200 ".concat(!isOpened ? "overflow-hidden" : "") }, react_1.default.createElement(TwTabContent, { ref: contentElement }, elements.map(function (field, i) {
            if (field && (field.field_type == ElementTypes.label || field.field_type == ElementTypes.labelTemplate)) {
                var nextElem = elements[i + 1];
                if (nextElem &&
                    (nextElem.field_type === ElementTypes.inputText ||
                        nextElem.field_type === ElementTypes.inputNumeric ||
                        nextElem.field_type === ElementTypes.inputCurrency ||
                        nextElem.field_type === ElementTypes.inputPassword ||
                        nextElem.field_type === ElementTypes.dropdown ||
                        nextElem.field_type === ElementTypes.checkbox ||
                        nextElem.field_type === ElementTypes.radio ||
                        nextElem.field_type === ElementTypes.textarea)) {
                    field.field_custom_style = "block uppercase font-semibold";
                }
            }
            return (react_1.default.createElement(Element$1, { key: i, field: field, handleChangeInput: handleChangeInput, handleChangeTableValue: field && field.field_type == ElementTypes.table ? handleChangeTableValue : null, userReadOnly: userReadOnly, setScrollHeight: setScrollHeight }));
        })))));
    }))));
};
exports.IbbFormAccordion = IbbFormAccordion;
var TwContainer = F$3.div(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject(["accordion-container mx-auto"], ["accordion-container mx-auto"])));
var TwTabContainer = F$3.div(templateObject_2$6 || (templateObject_2$6 = __makeTemplateObject(["my-2"], ["my-2"])));
var TwTabHeader = F$3.div(templateObject_3$4 || (templateObject_3$4 = __makeTemplateObject(["bg-gray-200 p-4 flex justify-between text-black cursor-pointer"], ["bg-gray-200 p-4 flex justify-between text-black cursor-pointer"])));
var TwTabHeaderText = F$3.h4(templateObject_4$2 || (templateObject_4$2 = __makeTemplateObject(["font-semibold"], ["font-semibold"])));
var TwTabContent = F$3.div(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject(["p-4 accordion-tab-content border border-gray-200"], ["p-4 accordion-tab-content border border-gray-200"])));
var templateObject_1$8, templateObject_2$6, templateObject_3$4, templateObject_4$2, templateObject_5$1;
var IbbFormElementGroup = function (props) {
    var elements = props.elements;
    return elements.map(function (field, i) {
        var _a;
        return react_1.default.createElement(Element$1, __assign$1({ key: i, field: field }, props, { hideLabel: (_a = props.field_options) === null || _a === void 0 ? void 0 : _a.hideLabel }));
    });
};
exports.IbbFormElementGroup = IbbFormElementGroup;
var tinyDebounce = function debounce(fn, delay) {
    var timeoutID = null;
    return function () {
        clearTimeout(timeoutID);
        var args = arguments;
        var that = this;
        timeoutID = setTimeout(function () {
            fn.apply(that, args);
        }, delay);
    };
};
/**
 * Has own property.
 *
 * @type {Function}
 */
var has = Object.prototype.hasOwnProperty;
/**
 * To string.
 *
 * @type {Function}
 */
var toString = Object.prototype.toString;
/**
 * Test whether a value is "empty".
 *
 * @param {Mixed} val
 * @return {Boolean}
 */
function isEmpty(val) {
    // Null and Undefined...
    if (val == null)
        return true;
    // Booleans...
    if ('boolean' == typeof val)
        return false;
    // Numbers...
    if ('number' == typeof val)
        return val === 0;
    // Strings...
    if ('string' == typeof val)
        return val.length === 0;
    // Functions...
    if ('function' == typeof val)
        return val.length === 0;
    // Arrays...
    if (Array.isArray(val))
        return val.length === 0;
    // Errors...
    if (val instanceof Error)
        return val.message === '';
    // Objects...
    if (val.toString == toString) {
        switch (val.toString()) {
            // Maps, Sets, Files and Errors...
            case '[object File]':
            case '[object Map]':
            case '[object Set]': {
                return val.size === 0;
            }
            // Plain objects...
            case '[object Object]': {
                for (var key in val) {
                    if (has.call(val, key))
                        return false;
                }
                return true;
            }
        }
    }
    // Anything else...
    return false;
}
/**
 * Export `isEmpty`.
 *
 * @type {Function}
 */
var lib = isEmpty;
var src = { exports: {} };
//
// Main
//
function memoize(fn, options) {
    var cache = options && options.cache
        ? options.cache
        : cacheDefault;
    var serializer = options && options.serializer
        ? options.serializer
        : serializerDefault;
    var strategy = options && options.strategy
        ? options.strategy
        : strategyDefault;
    return strategy(fn, {
        cache: cache,
        serializer: serializer
    });
}
//
// Strategy
//
function isPrimitive(value) {
    return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === "string" 'unsafe' primitive for our needs
}
function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === 'undefined') {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
    }
    return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
    return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
    var strategy = variadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
    var strategy = monadic;
    return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
//
// Serializer
//
function serializerDefault() {
    return JSON.stringify(arguments);
}
//
// Cache
//
function ObjectWithoutPrototypeCache() {
    this.cache = Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.has = function (key) {
    return (key in this.cache);
};
ObjectWithoutPrototypeCache.prototype.get = function (key) {
    return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
    this.cache[key] = value;
};
var cacheDefault = {
    create: function create() {
        return new ObjectWithoutPrototypeCache();
    }
};
//
// API
//
src.exports = memoize;
src.exports.strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic
};
var memoize$1 = src.exports;
var validateData = function (data) { return !!data && !lib(data); };
var getValidatedData = function (data) {
    return validateData(data) ? data : [];
};
var walk = function (_a) {
    var data = _a.data, props = __rest$1(_a, ["data"]);
    var validatedData = getValidatedData(data);
    var propsWithDefaultValues = __assign$1({ parent: '', level: 0 }, props);
    var handleArray = function (dataAsArray) {
        return dataAsArray.reduce(function (all, node, index) {
            var branchProps = __assign$1({ node: node, index: index, nodeName: node.key }, propsWithDefaultValues);
            var branch = generateBranch(branchProps);
            return __spreadArray$1(__spreadArray$1([], __read(all), false), __read(branch), false);
        }, []);
    };
    var handleObject = function (dataAsObject) {
        return Object.entries(dataAsObject)
            .sort(function (a, b) { return a[1].index - b[1].index; }) // sorted by index
            .reduce(function (all, _a) {
            var _b = __read(_a, 2), nodeName = _b[0], node = _b[1];
            var branchProps = __assign$1({ node: node, nodeName: nodeName }, propsWithDefaultValues);
            var branch = generateBranch(branchProps);
            return __spreadArray$1(__spreadArray$1([], __read(all), false), __read(branch), false);
        }, []);
    };
    return Array.isArray(validatedData)
        ? handleArray(validatedData)
        : handleObject(validatedData);
};
var defaultMatchSearch = function (_a) {
    var label = _a.label, searchTerm = _a.searchTerm;
    var processString = function (text) { return text.trim().toLowerCase(); };
    return processString(label).includes(processString(searchTerm));
};
var defaultLocale = function (_a) {
    var label = _a.label;
    return label;
};
var generateBranch = function (_a) {
    var node = _a.node, nodeName = _a.nodeName, _b = _a.matchSearch, matchSearch = _b === void 0 ? defaultMatchSearch : _b, _c = _a.locale, locale = _c === void 0 ? defaultLocale : _c, props = __rest$1(_a, ["node", "nodeName", "matchSearch", "locale"]);
    var parent = props.parent, level = props.level, openNodes = props.openNodes, searchTerm = props.searchTerm;
    var nodes = node.nodes, _d = node.label, rawLabel = _d === void 0 ? 'unknown' : _d, nodeProps = __rest$1(node, ["nodes", "label"]);
    var key = [parent, nodeName].filter(function (x) { return x; }).join('/');
    var hasNodes = validateData(nodes);
    var isOpen = hasNodes && (openNodes.includes(key) || !!searchTerm);
    var label = locale(__assign$1({ label: rawLabel }, nodeProps));
    var isVisible = !searchTerm || matchSearch(__assign$1({ label: label, searchTerm: searchTerm }, nodeProps));
    var currentItem = __assign$1(__assign$1(__assign$1({}, props), nodeProps), { label: label, hasNodes: hasNodes, isOpen: isOpen, key: key });
    var data = getValidatedData(nodes);
    var nextLevelItems = isOpen
        ? walk(__assign$1(__assign$1({ data: data, locale: locale, matchSearch: matchSearch }, props), { parent: key, level: level + 1 }))
        : [];
    return isVisible ? __spreadArray$1([currentItem], __read(nextLevelItems), false) : nextLevelItems;
};
var fastWalk = memoize$1(walk);
var slowWalk = walk;
var DEFAULT_PADDING = 0.5;
var ICON_SIZE = 1.25;
var LEVEL_SPACE = 1.25;
var ToggleIcon = function (_a) {
    var on = _a.on, openedIcon = _a.openedIcon, closedIcon = _a.closedIcon;
    return (react_1.default.createElement("div", { role: "img", "aria-label": "Toggle", className: "rstm-toggle-icon-symbol" }, on ? openedIcon : closedIcon));
};
var ItemComponent = function (_a) {
    var _b = _a.hasNodes, hasNodes = _b === void 0 ? false : _b, _c = _a.isOpen, isOpen = _c === void 0 ? false : _c, _d = _a.level, level = _d === void 0 ? 0 : _d, onClickFunction = _a.onClickFunction, toggleNode = _a.toggleNode, showToggleIcon = _a.showToggleIcon, _e = _a.active, active = _e === void 0 ? false : _e, _f = _a.focused, focused = _f === void 0 ? false : _f, _g = _a.openedIcon, openedIcon = _g === void 0 ? react_1.default.createElement(ChevronDownIcon$1, { className: "h-3 w-3", "aria-hidden": "true" }) : _g, _h = _a.closedIcon, closedIcon = _h === void 0 ? react_1.default.createElement(ChevronRightIcon$3, { className: "h-3 w-3", "aria-hidden": "true" }) : _h, _j = _a.label, label = _j === void 0 ? "unknown" : _j, _k = _a.style, style = _k === void 0 ? {} : _k;
    return (react_1.default.createElement(TwListItem, { className: classNames$1("level".concat(level), "".concat(active ? "tree-item--active" : ""), "".concat(hasNodes ? "item--has-nodes" : ""), "".concat(focused ? "item--focused" : ""), "".concat(onClickFunction ? "cursor-pointer" : "cursor-default")), title: label, style: __assign$1({ paddingLeft: level == 0 ?
                "".concat(DEFAULT_PADDING +
                    ICON_SIZE * (hasNodes ? 0 : 1) +
                    1 * level //* LEVEL_SPACE
                , "rem") :
                "".concat(DEFAULT_PADDING +
                    ICON_SIZE * (hasNodes ? 0 : 1) +
                    1 * level * LEVEL_SPACE, "rem") }, style), role: "button", "aria-pressed": active, onClick: function (e) {
            hasNodes && toggleNode && toggleNode();
            onClickFunction && onClickFunction();
            e.stopPropagation();
        } }, level == 0 && hasNodes && showToggleIcon && (react_1.default.createElement(TwToggleIcon, { className: "toggle-icon", onClick: function (e) {
            hasNodes && toggleNode && toggleNode();
            e.stopPropagation();
        } }, react_1.default.createElement(ToggleIcon, { on: isOpen, openedIcon: openedIcon, closedIcon: closedIcon }))), label));
};
var generateItemsStyle = function (item) {
    var styles = "";
    if (item.className.indexOf("level0") > -1) {
        styles = "bg-ibb hover:bg-ibb-dark";
    }
    else if (item.className.indexOf("level1") > -1) {
        styles = "bg-ibb-light hover:bg-ibb text-white hover:text-white";
    }
    else if (item.className.indexOf("level2") > -1) {
        styles =
            "bg-gray-200 hover:bg-gray-300 text-gray-800 hover:text-gray-900 border-gray-300";
    }
    else {
        styles =
            "bg-gray-50 hover:bg-gray-200 text-gray-800 hover:text-gray-900 border-gray-200";
    }
    return styles;
};
var defaultChildren = function (_a) {
    var search = _a.search, items = _a.items;
    var onSearch = function (e) {
        var value = e.target.value;
        search && search(value);
    };
    return (react_1.default.createElement(react_1.default.Fragment, null, search && (react_1.default.createElement("input", { className: "rstm-search", "aria-label": "Type and search", type: "search", placeholder: "Suchen", onChange: onSearch })), react_1.default.createElement(TwList, null, items.map(function (props, i) { return (react_1.default.createElement(ItemComponent, __assign$1({ key: i }, props))); }))));
};
var TwList = F$3.ul(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject(["list-none p-0 w-full text-left"], ["list-none p-0 w-full text-left"])));
var TwListItem = F$3.li(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject(["relative p-2 text-white border-b border-gray-200 ", ""], ["relative p-2 text-white border-b border-gray-200 ", ""])), function (p) { return generateItemsStyle(p); });
var TwToggleIcon = F$3.div(templateObject_3$3 || (templateObject_3$3 = __makeTemplateObject(["inline-block pr-2"], ["inline-block pr-2"])));
var templateObject_1$7, templateObject_2$5, templateObject_3$3;
var KeyDown = function (_a) {
    var children = _a.children, up = _a.up, down = _a.down, left = _a.left, right = _a.right, enter = _a.enter;
    return (react_1.default.createElement("div", { tabIndex: 0, onKeyDown: function (e) {
            switch (e.key) {
                case 'ArrowUp': {
                    up();
                    break;
                }
                case 'ArrowDown': {
                    down();
                    break;
                }
                case 'ArrowLeft': {
                    left();
                    break;
                }
                case 'ArrowRight': {
                    right();
                    break;
                }
                case 'Enter': {
                    enter();
                    break;
                }
            }
        } }, children));
};
var defaultOnClick = function (props) { return console.log(props); }; // eslint-disable-line no-console
var IbbTreeMenu = /** @class */ (function (_super) {
    __extends(IbbTreeMenu, _super);
    function IbbTreeMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            openNodes: _this.props.initialOpenNodes || [],
            searchTerm: '',
            activeKey: _this.props.initialActiveKey || '',
            focusKey: _this.props.initialFocusKey || '',
        };
        _this.resetOpenNodes = function (newOpenNodes, activeKey, focusKey) {
            var initialOpenNodes = _this.props.initialOpenNodes;
            var openNodes = (Array.isArray(newOpenNodes) && newOpenNodes) || initialOpenNodes || [];
            _this.setState({ openNodes: openNodes, searchTerm: '', activeKey: activeKey || '', focusKey: focusKey || activeKey || '' });
        };
        _this.search = function (value) {
            var debounceTime = _this.props.debounceTime;
            var search = tinyDebounce(function (searchTerm) { return _this.setState({ searchTerm: searchTerm }); }, debounceTime);
            search(value);
        };
        _this.toggleNode = function (node) {
            if (!_this.props.openNodes) {
                var openNodes = _this.state.openNodes;
                var newOpenNodes = openNodes.includes(node)
                    ? openNodes.filter(function (openNode) { return openNode !== node; })
                    : __spreadArray$1(__spreadArray$1([], __read(openNodes), false), [node], false);
                _this.setState({ openNodes: newOpenNodes });
            }
        };
        _this.generateItems = function () {
            var _a = _this.props, data = _a.data, onClickItem = _a.onClickItem, locale = _a.locale, matchSearch = _a.matchSearch, showToggleIcon = _a.showToggleIcon;
            var searchTerm = _this.state.searchTerm;
            var openNodes = _this.props.openNodes || _this.state.openNodes;
            var activeKey = _this.props.activeKey || _this.state.activeKey;
            var focusKey = _this.props.focusKey || _this.state.focusKey;
            var defaultSearch = _this.props.cacheSearch ? fastWalk : slowWalk;
            var items = data
                ? defaultSearch({ data: data, openNodes: openNodes, searchTerm: searchTerm, locale: locale, matchSearch: matchSearch })
                : [];
            return items.map(function (item) {
                var focused = item.key === focusKey;
                var active = item.key === activeKey || item.active;
                var onClick = function () {
                    var newActiveKey = _this.props.activeKey || item.key;
                    _this.setState({ activeKey: newActiveKey, focusKey: newActiveKey });
                    onClickItem && onClickItem(item);
                };
                var toggleNode = item.hasNodes ? function () { return _this.toggleNode(item.key); } : undefined;
                return __assign$1(__assign$1({}, item), { focused: focused, active: active, onClick: onClick, toggleNode: toggleNode, showToggleIcon: showToggleIcon });
            });
        };
        _this.getKeyDownProps = function (items) {
            var onClickItem = _this.props.onClickItem;
            var _a = _this.state, focusKey = _a.focusKey, activeKey = _a.activeKey;
            _a.searchTerm;
            var focusIndex = items.findIndex(function (item) { return item.key === (focusKey || activeKey); });
            var getFocusKey = function (item) {
                var keyArray = item.key.split('/');
                return keyArray.length > 1
                    ? keyArray.slice(0, keyArray.length - 1).join('/')
                    : item.key;
            };
            return {
                up: function () {
                    _this.setState(function (_a) {
                        var focusKey = _a.focusKey;
                        return ({
                            focusKey: focusIndex > 0 ? items[focusIndex - 1].key : focusKey,
                        });
                    });
                },
                down: function () {
                    _this.setState(function (_a) {
                        var focusKey = _a.focusKey;
                        return ({
                            focusKey: focusIndex < items.length - 1 ? items[focusIndex + 1].key : focusKey,
                        });
                    });
                },
                left: function () {
                    var item = items[focusIndex];
                    if (item) {
                        _this.setState(function (_a) {
                            var openNodes = _a.openNodes, rest = __rest$1(_a, ["openNodes"]);
                            var newOpenNodes = openNodes.filter(function (node) { return node !== item.key; });
                            return item.isOpen
                                ? __assign$1(__assign$1({}, rest), { openNodes: newOpenNodes, focusKey: item.key }) : __assign$1(__assign$1({}, rest), { focusKey: getFocusKey(item) });
                        });
                    }
                },
                right: function () {
                    var _a = items[focusIndex], hasNodes = _a.hasNodes, key = _a.key;
                    if (hasNodes)
                        _this.setState(function (_a) {
                            var openNodes = _a.openNodes;
                            return ({ openNodes: __spreadArray$1(__spreadArray$1([], __read(openNodes), false), [key], false) });
                        });
                },
                enter: function () {
                    _this.setState(function (_a) {
                        var focusKey = _a.focusKey;
                        return ({ activeKey: focusKey });
                    });
                    onClickItem && onClickItem(items[focusIndex]);
                },
            };
        };
        return _this;
    }
    IbbTreeMenu.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, data = _a.data, initialOpenNodes = _a.initialOpenNodes, resetOpenNodesOnDataUpdate = _a.resetOpenNodesOnDataUpdate;
        if (prevProps.data !== data && resetOpenNodesOnDataUpdate && initialOpenNodes) {
            this.setState({ openNodes: initialOpenNodes });
        }
    };
    IbbTreeMenu.prototype.render = function () {
        var _a = this.props, children = _a.children, hasSearch = _a.hasSearch, disableKeyboard = _a.disableKeyboard;
        var searchTerm = this.state.searchTerm;
        var search = this.search;
        var items = this.generateItems();
        var resetOpenNodes = this.resetOpenNodes;
        var render = children || defaultChildren;
        var renderProps = hasSearch
            ? {
                search: search,
                resetOpenNodes: resetOpenNodes,
                items: items,
                searchTerm: searchTerm,
            }
            : { items: items, resetOpenNodes: resetOpenNodes };
        return disableKeyboard ? (render(renderProps)) : (react_1.default.createElement(KeyDown, __assign$1({}, this.getKeyDownProps(items)), render(renderProps)));
    };
    IbbTreeMenu.defaultProps = {
        data: {},
        onClickItem: defaultOnClick,
        debounceTime: 125,
        children: defaultChildren,
        hasSearch: true,
        cacheSearch: true,
        resetOpenNodesOnDataUpdate: false,
        disableKeyboard: false,
        showToggleIcon: true
    };
    return IbbTreeMenu;
}(react_1.default.Component));
exports.IbbTreeMenu = IbbTreeMenu;
var IbbLoader = function () {
    return (react_1.default.createElement(TwBackdrop, null, react_1.default.createElement(TwSpinner, null)));
};
exports.IbbLoader = IbbLoader;
var TwBackdrop = F$3.div(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject(["fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-200 opacity-75 flex flex-col items-center justify-center"], ["fixed top-0 left-0 right-0 bottom-0 w-full h-screen z-50 overflow-hidden bg-gray-200 opacity-75 flex flex-col items-center justify-center"])));
var TwSpinner = F$3.div(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject(["loader ease-linear rounded-full border-4 border-t-4 border-gray-400 h-12 w-12 mb-4"], ["loader ease-linear rounded-full border-4 border-t-4 border-gray-400 h-12 w-12 mb-4"])));
var templateObject_1$6, templateObject_2$4;
var GroupLabelRowComponent = function (_a) {
    var row = _a.row, getGroupLabelName = _a.getGroupLabelName, isRowVisible = _a.isRowVisible, toggleRowGroup = _a.toggleRowGroup, getHeaderCount = _a.getHeaderCount;
    var groupLabelName = getGroupLabelName(row);
    var toggleRowVisibility = function () {
        toggleRowGroup(groupLabelName);
    };
    var GroupRowWrapper = function (_a) {
        var children = _a.children, colSpan = _a.colSpan;
        return (react_1.default.createElement(TwTableBodyCell$2, { colSpan: colSpan ? colSpan : undefined, onClick: function () { return toggleRowVisibility(); }, className: "p-2 border-t border-b border-gray-700 cursor-pointer bg-white" }, react_1.default.createElement(TwGroupLabel, { className: "cursor-pointer" }, children)));
    };
    return (groupLabelName && (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(GroupRowWrapper, { colSpan: null }, isRowVisible(groupLabelName) ? react_1.default.createElement(ChevronDownIcon$1, { width: "16", className: "mr-2" }) : react_1.default.createElement(ChevronRightIcon$3, { width: "16", className: "mr-2" })), react_1.default.createElement(GroupRowWrapper, { colSpan: getHeaderCount(row) }, groupLabelName))));
};
var TableFooter = function (_a) {
    var numberFooterRows = _a.numberFooterRows, columns = _a.columns, visibleColumns = _a.visibleColumns, deleteButton = _a.deleteButton, createButton = _a.createButton, getIcon = _a.getIcon, handleAddRow = _a.handleAddRow, getButtonTitle = _a.getButtonTitle, isTableCopyable = _a.isTableCopyable, copyTableStyle = _a.copyTableStyle, isGroupedTable = _a.isGroupedTable;
    var isColumnVisible = function (header) { return (visibleColumns ? visibleColumns.indexOf(header) > -1 : true); };
    var FooterCellContent = function (_a) {
        var content = _a.content, header = _a.header;
        if (isColumnVisible(header))
            return content ? content : "";
        else
            return "";
    };
    return (react_1.default.createElement(TwTableFooter, null, (function () {
        var rows = [];
        var _loop_1 = function (i) {
            rows.push(react_1.default.createElement(TwTableFooterRow, { key: i }, isGroupedTable && react_1.default.createElement("th", null), columns.map(function (col, j) {
                var isFirstColumn = j == 0;
                return (react_1.default.createElement(TwTableFooterCell, { scope: "col", key: j, className: classNames$1(isColumnVisible(col.Header) ? "p-2" : getCollapsedStyle(), isTableCopyable ? copyTableStyle(isFirstColumn, true) : ""), title: col.Header }, col.Footer ? react_1.default.createElement(FooterCellContent, { content: col.Footer[i], header: col.Header }) : ""));
            }), i == 0 && createButton ? (react_1.default.createElement(TwTableFooterCell, { className: "p-2" }, react_1.default.createElement(IbbButton, { buttontype: ButtonType.Primary, children: getIcon(), disabled: false, onClick: function () { return handleAddRow(); }, title: getButtonTitle() }))) : (deleteButton && react_1.default.createElement(TwTableFooterCell, { className: "p-2" }))));
        };
        for (var i = 0; i < numberFooterRows; i++) {
            _loop_1(i);
        }
        return rows;
    })()));
};
var TwTableFooter = F$3.tfoot(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject(["bg-gray-200 hover:bg-gray-200 text-gray-900 border-t-4 border-gray-400 divide-y divide-gray-300"], ["bg-gray-200 hover:bg-gray-200 text-gray-900 border-t-4 border-gray-400 divide-y divide-gray-300"])));
var TwTableFooterRow = F$3.tr(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([""], [""])));
var TwTableFooterCell = F$3.th(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject(["text-right py-1 px-2 w-px flex-1 text-gray-700 font-bold align-top"], ["text-right py-1 px-2 w-px flex-1 text-gray-700 font-bold align-top"])));
var templateObject_1$5, templateObject_2$3, templateObject_3$2;
var getCollapsedStyle = function () {
    return "px-0 py-2 border-dotted border-gray-500 border-l border-r";
};
var getCopyTableStyle = function (isFirstColumn, isLastRow) {
    return "".concat(isFirstColumn ? "text-left" : "text-right", " ").concat(isLastRow ? "font-bold" : "font-normal");
};
var IbbTableHorizontal = function (_a) {
    var _b;
    var title = _a.title, getTableProps = _a.getTableProps, getTableBodyProps = _a.getTableBodyProps, data = _a.data, columns = _a.columns, page = _a.page, prepareRow = _a.prepareRow, isRowDeleted = _a.isRowDeleted, isReadOnly = _a.isReadOnly, deleteButtonAvailable = _a.deleteButtonAvailable, createButtonAvailable = _a.createButtonAvailable, getDeleteIcon = _a.getDeleteIcon, getAddIcon = _a.getAddIcon, getButtonTitle = _a.getButtonTitle, handleDeleteRow = _a.handleDeleteRow, handleAddRow = _a.handleAddRow, numberFooterRows = _a.numberFooterRows, isTableCollapsible = _a.isTableCollapsible, collapsedHeaders = _a.collapsedHeaders, isTableCopyable = _a.isTableCopyable, isTableSortable = _a.isTableSortable;
    _a.isTableFilterable;
    var isTableColumnsFilterable = _a.isTableColumnsFilterable;
    _a.groupRowsBy;
    var headerGroups = _a.headerGroups, setScrollHeight = _a.setScrollHeight, state = _a.state;
    var _c = __read((0, react_1.useState)(collapsedHeaders), 2), currentCollapsedHeaders = _c[0], setCurrentCollapsedHeaders = _c[1];
    var _d = __read((0, react_1.useState)([]), 2), currentCollapsedGroupRows = _d[0], setCurrentCollapsedGroupRows = _d[1];
    var _e = __read((0, react_1.useState)(null), 2), currentShownFilter = _e[0], setCurrentShownFilter = _e[1];
    var _f = __read((0, react_1.useState)([]), 2), visibleColumns = _f[0], setVisibleColumns = _f[1];
    var _g = __read((0, react_1.useState)(false), 2), isGroupedTable = _g[0], setIsGroupedTable = _g[1];
    var tableElementRef = (0, react_1.useRef)(null);
    var isColumnVisible = function (header) { return (currentCollapsedHeaders ? currentCollapsedHeaders.indexOf(header) == -1 : true); };
    var isRowVisible = function (groupName) {
        return isGroupedTable ? (currentCollapsedGroupRows ? currentCollapsedGroupRows.indexOf(groupName) == -1 : true) : true;
    };
    (0, react_1.useEffect)(function () {
        if (columns && columns.length > 0) {
            setVisibleColumns(currentCollapsedHeaders ? columns.filter(function (c) { return currentCollapsedHeaders.indexOf(c.Header) == -1; }) : columns);
        }
    }, [columns]);
    (0, react_1.useEffect)(function () {
        var _a;
        setScrollHeight && setScrollHeight((_a = tableElementRef === null || tableElementRef === void 0 ? void 0 : tableElementRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight);
    }, [(_b = tableElementRef === null || tableElementRef === void 0 ? void 0 : tableElementRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight, currentCollapsedHeaders, state.pageSize]);
    (0, react_1.useEffect)(function () {
        var _a;
        if (page && page.length > 0 && ((_a = page[0].cells) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            setIsGroupedTable(page[0].cells.some(function (c) { var _a, _b, _c; return (_c = (_b = (_a = c.value) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.field.field_options) === null || _c === void 0 ? void 0 : _c.isGroupLabel; }));
        }
    }, [page]);
    var toggleColumn = function (header) {
        var isCollapsed = currentCollapsedHeaders.includes(header);
        setCurrentCollapsedHeaders(function (prevHeaders) { return (isCollapsed ? prevHeaders.filter(function (h) { return h !== header; }) : __spreadArray$1(__spreadArray$1([], __read(prevHeaders), false), [header], false)); });
        setVisibleColumns(isCollapsed
            ? columns.filter(function (c) { return !currentCollapsedHeaders.includes(c.Header) || c.Header === header; })
            : visibleColumns.filter(function (c) { return c.Header !== header; }));
    };
    var toggleRowGroup = function (groupName) {
        var isCollapsed = currentCollapsedGroupRows.includes(groupName);
        setCurrentCollapsedGroupRows(function (prevHeaders) { return (isCollapsed ? prevHeaders.filter(function (h) { return h !== groupName; }) : __spreadArray$1(__spreadArray$1([], __read(prevHeaders), false), [groupName], false)); });
    };
    var toggleFilterActions = function (header) {
        if (currentShownFilter == header) {
            setCurrentShownFilter(null);
        }
        else {
            setCurrentShownFilter(header);
        }
    };
    var getColumnWidth = function (header) {
        if (!currentCollapsedHeaders || currentCollapsedHeaders.indexOf(header) == -1) {
            return "".concat(100 / visibleColumns.filter(function (c) { return c.id.toLowerCase() !== TableActions.update; }).length, "%");
        }
        else
            return 0;
    };
    var isSubRow = function (row) {
        return row && row.original && Array.isArray(row.original) && row.original.some(function (x) { var _a; return (_a = x.field_options) === null || _a === void 0 ? void 0 : _a.isSubRow; });
    };
    var isInvalidRow = function (row) {
        return row && row.original && Array.isArray(row.original) && row.original.some(function (x) { var _a; return (_a = x.field_options) === null || _a === void 0 ? void 0 : _a.isInvalidRow; });
    };
    var isGroupLabel = function (row) {
        var _a;
        return row && ((_a = row.cells) === null || _a === void 0 ? void 0 : _a.some(function (c) { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = c.value) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.field) === null || _c === void 0 ? void 0 : _c.field_options) === null || _d === void 0 ? void 0 : _d.isGroupLabel; }));
    };
    var getInvalidRowMessage = function (row) {
        var _a;
        return (_a = row.original.find(function (x) { var _a; return (_a = x.field_options) === null || _a === void 0 ? void 0 : _a.invalidRowMessage; })) === null || _a === void 0 ? void 0 : _a.field_options.invalidRowMessage;
    };
    var getHeaderCount = function (row) {
        var _a;
        return row && ((_a = row.cells) === null || _a === void 0 ? void 0 : _a.length) + (!isReadOnly && deleteButtonAvailable ? 1 : 0);
    };
    var getGroupLabelName = function (row) {
        var _a, _b, _c, _d;
        var foundGroupLabelName = (_a = row === null || row === void 0 ? void 0 : row.cells) === null || _a === void 0 ? void 0 : _a.find(function (cell) { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = cell.value) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.field) === null || _c === void 0 ? void 0 : _c.field_options) === null || _d === void 0 ? void 0 : _d.isGroupLabel; });
        return foundGroupLabelName ? (_d = (_c = (_b = foundGroupLabelName.value) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.field) === null || _d === void 0 ? void 0 : _d.field_value : "";
    };
    var getGroupName = function (row) {
        var _a, _b, _c, _d, _e;
        var foundGroupName = (_a = row === null || row === void 0 ? void 0 : row.cells) === null || _a === void 0 ? void 0 : _a.find(function (cell) { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = cell.value) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.field) === null || _c === void 0 ? void 0 : _c.field_options) === null || _d === void 0 ? void 0 : _d.group; });
        return foundGroupName ? (_e = (_d = (_c = (_b = foundGroupName.value) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.field) === null || _d === void 0 ? void 0 : _d.field_options) === null || _e === void 0 ? void 0 : _e.group : "";
    };
    return (
    // <ConditionalWrapper condition={isRowsDraggable} wrapper={children => <DndProvider backend={HTML5Backend}>{children}</DndProvider>}>
    data && (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwTable$3, __assign$1({}, getTableProps(), { id: title, ref: tableElementRef }), react_1.default.createElement(TwTableHead$2, null, headerGroups.map(function (headerGroup, i) {
        return (react_1.default.createElement("tr", __assign$1({}, headerGroup.getHeaderGroupProps(), { key: i }), isGroupedTable && react_1.default.createElement("th", null), headerGroup.headers.map(function (column, j) {
            var isFirstColumn = i == 0;
            return (react_1.default.createElement(TwTableHeader$3, { scope: "col", key: j, width: getColumnWidth(column.Header), className: classNames$1(isColumnVisible(column.Header) ? "p-2" : getCollapsedStyle(), (column.id === "actions" || column.id.toLowerCase() === TableActions.update) && "w-1", isTableCopyable ? getCopyTableStyle(isFirstColumn, false) : ""), "aria-label": column.Header }, react_1.default.createElement("div", { className: "flex-column-header" }, isTableCollapsible ? (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(ColumnCollapseButton, { isColumnVisible: isColumnVisible, toggleColumn: toggleColumn, column: column, title: column.Header }), react_1.default.createElement("div", { className: "px-2 ".concat(isColumnVisible(column.Header) ? "" : "hidden") }, column.id))) : (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement("div", { className: "px-2" }, column.Header))), react_1.default.createElement(ColumnActionsButton, { column: column, isTableSortable: isTableSortable, isColumnVisible: function () { return isColumnVisible(column.Header); }, isTableColumnsFilterable: isTableColumnsFilterable, toggleFilterActions: function () { return toggleFilterActions(column.Header); }, isOverlayVisible: currentShownFilter == column.Header }))));
        }), deleteButtonAvailable && react_1.default.createElement(TwTableHeader$3, { className: "w-1" })));
    })), react_1.default.createElement(TwTableBody$3, __assign$1({}, getTableBodyProps()), page.map(function (row, i) {
        prepareRow(row);
        var rowIsSubRow = isSubRow(row);
        var rowIsInvalid = isInvalidRow(row);
        var invalidRowMessage = rowIsInvalid ? getInvalidRowMessage(row) : undefined;
        var isDeleted = isRowDeleted(row.original);
        var isLastRow = !numberFooterRows && i == page.length - 1;
        var groupName = isGroupedTable && getGroupName(row);
        return [
            react_1.default.createElement(TwTableBodyRow$2, __assign$1({ key: i }, row.getRowProps(), { className: classNames$1(isDeleted ? "deleted-row" : "", rowIsInvalid ? "invalid-row" : "", isRowVisible(groupName) ? "" : "hidden"), style: rowIsInvalid && { borderBottom: 0 } }), isGroupedTable && isGroupLabel(row) ? (react_1.default.createElement(GroupLabelRowComponent, { row: row, getGroupLabelName: getGroupLabelName, isRowVisible: isRowVisible, toggleRowGroup: toggleRowGroup, getHeaderCount: getHeaderCount })) : (react_1.default.createElement(react_1.default.Fragment, null, isGroupedTable && react_1.default.createElement("td", null), row.cells.map(function (cell, j) {
                var isFirstColumn = j == 0;
                return (react_1.default.createElement(TwTableBodyCell$2, __assign$1({}, cell.getCellProps(), { role: "cell", key: j, className: classNames$1(isColumnVisible(cell.column.Header) ? "px-2 py-2" : getCollapsedStyle(), 
                    //cell.column.Header.toLowerCase() == TableActions.update && "text-right",
                    isTableCopyable ? getCopyTableStyle(isFirstColumn, isLastRow) : "", rowIsSubRow ? "sub-cell" : ""), style: rowIsSubRow ? { fontSize: ".75rem", textAlign: "right", fontStyle: "italic" } : null, title: cell.column.Header }), react_1.default.createElement(TwTableBodyCellContent$2, { className: classNames$1(isColumnVisible(cell.column.Header) ? "block" : "hidden") }, cell.render("Cell"))));
            }))), !isReadOnly && deleteButtonAvailable && (!isGroupedTable || (isGroupedTable && !isGroupLabel(row))) && (react_1.default.createElement(TwTableBodyCell$2, { key: "cell" }, react_1.default.createElement(TwTableBodyCellContent$2, { className: "text-right p-2" }, react_1.default.createElement(IbbButton, { buttontype: ButtonType.Danger, children: getDeleteIcon(isDeleted), disabled: false, onClick: function () { return handleDeleteRow(i); }, title: getButtonTitle(isDeleted) }))))),
            isInvalidRow && invalidRowMessage && (react_1.default.createElement(TwTableBodyRow$2, { key: "invalid-cell", className: classNames$1("invalid-row", isRowVisible(groupName) ? "" : "hidden"), style: { borderTop: "none" } }, react_1.default.createElement(TwTableBodyCell$2, { colSpan: getHeaderCount(row), className: "text-xs whitespace-pre-wrap text-red-700 px-1" }, react_1.default.createElement(TwTableBodyCellContent$2, { dangerouslySetInnerHTML: { __html: invalidRowMessage }, style: { padding: "5px" } })))),
        ];
    })), numberFooterRows > 0 && (react_1.default.createElement(TableFooter, { numberFooterRows: numberFooterRows, columns: columns, visibleColumns: visibleColumns.map(function (c) {
            return c.Header;
        }), deleteButton: deleteButtonAvailable, createButton: createButtonAvailable, getIcon: getAddIcon, getButtonTitle: getButtonTitle, handleAddRow: handleAddRow, isTableCopyable: isTableCopyable, copyTableStyle: getCopyTableStyle, isGroupedTable: isGroupedTable }))))));
};
var IbbTableVertical = function (_a) {
    var title = _a.title, getTableProps = _a.getTableProps, columns = _a.columns, rows = _a.rows, prepareRow = _a.prepareRow, isRowDeleted = _a.isRowDeleted, isReadOnly = _a.isReadOnly, deleteButtonAvailable = _a.deleteButtonAvailable, createButtonAvailable = _a.createButtonAvailable, getDeleteIcon = _a.getDeleteIcon, getAddIcon = _a.getAddIcon, getButtonTitle = _a.getButtonTitle, handleDeleteRow = _a.handleDeleteRow, handleAddRow = _a.handleAddRow;
    _a.numberFooterRows;
    _a.isTableCollapsible;
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwTable, __assign$1({}, getTableProps(), { id: title, className: "vertical-table" }), react_1.default.createElement(TwTableBody, null, columns.map(function (col, i) {
        return (react_1.default.createElement(TwTableBodyRow, { scope: "col", key: i, className: (col.id === "actions" || col.id.toLowerCase() === TableActions.update) && "w-1" }, react_1.default.createElement(TwTableHeader, { role: "cell", key: i, width: "25%" }, react_1.default.createElement(TwTableBodyCellContent, null, col.Header)), rows.map(function (row, j) {
            prepareRow(row);
            var isDeleted = isRowDeleted(row.original);
            var cell = row.cells[i];
            return (react_1.default.createElement(TwTableBodyCell, { role: "cell", key: j, className: classNames$1("".concat(isDeleted ? "deleted-row" : "")) }, react_1.default.createElement(TwTableBodyCellContent, { className: "text-left" }, cell.render("Cell"))));
        })));
    }), !isReadOnly && deleteButtonAvailable && (react_1.default.createElement(TwTableBodyRow, null, react_1.default.createElement(TwTableBodyCell, { role: "cell" }, react_1.default.createElement(TwTableBodyCellContent, null)), rows.map(function (row, i) {
        var isDeleted = isRowDeleted(row.original);
        return (react_1.default.createElement(TwTableBodyCell, { role: "cell", key: i, className: classNames$1("".concat(isDeleted ? "deleted-row" : ""), "text-right") }, react_1.default.createElement(TwTableBodyCellContent, null, react_1.default.createElement(IbbButton, { buttontype: ButtonType.Danger, children: getDeleteIcon(isDeleted), disabled: false, onClick: function () { return handleDeleteRow(i); }, title: getButtonTitle(isDeleted) }))));
    }))))), createButtonAvailable && (react_1.default.createElement("div", { className: "text-right p-2 mt-1" }, react_1.default.createElement(IbbButton, { buttontype: ButtonType.Primary, children: getAddIcon(" Hinzufügen"), disabled: false, onClick: function () { return handleAddRow(); }, title: getButtonTitle() })))));
};
var TwTable = F$3.table(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["min-w-full max-w-full w-full table-fixed"], ["min-w-full max-w-full w-full table-fixed"])));
var TwTableHeader = F$3.td(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject(["px-1 py-2 text-left text-sm text-gray-900 font-semibold border-t"], ["px-1 py-2 text-left text-sm text-gray-900 font-semibold border-t"])));
var TwTableBody = F$3.tbody(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject(["bg-gray-100 divide-y divide-gray-200"], ["bg-gray-100 divide-y divide-gray-200"])));
var TwTableBodyRow = F$3.tr(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject(["bg-gray-100 hover:bg-gray-200 text-gray-900 border-b"], ["bg-gray-100 hover:bg-gray-200 text-gray-900 border-b"])));
var TwTableBodyCell = F$3.td(templateObject_5 || (templateObject_5 = __makeTemplateObject(["px-1 py-2 whitespace-nowrap border-t border-b"], ["px-1 py-2 whitespace-nowrap border-t border-b"])));
var TwTableBodyCellContent = F$3.div(templateObject_6 || (templateObject_6 = __makeTemplateObject([""], [""])));
var templateObject_1$4, templateObject_2$2, templateObject_3$1, templateObject_4$1, templateObject_5, templateObject_6;
var IbbCopyButton = function (_a) {
    var elementId = _a.elementId;
    var _b = __read((0, react_1.useState)(false), 2), isCopied = _b[0], setIsCopied = _b[1];
    var _c = __read((0, react_1.useState)(react_1.default.createElement(react_1.default.Fragment, null, "Kopieren")), 2), copyButtonContent = _c[0], setCopyButtonContent = _c[1];
    (0, react_1.useEffect)(function () {
        if (isCopied)
            setCopyButtonContent(react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(CheckIcon$1, { width: "12", className: "mr-1" }), " Kopiert!"));
    }, [isCopied]);
    var copyTable = function () {
        var table = document.getElementById(elementId);
        var tableContent = getTable(table, true).outerHTML;
        function listener(e) {
            e.clipboardData.setData("text/html", tableContent);
            e.clipboardData.setData("text/plain", tableContent);
            e.preventDefault();
        }
        document.addEventListener("copy", listener);
        document.execCommand("copy");
        document.removeEventListener("copy", listener);
        getTable(table, false); //return original style
        setIsCopied(true);
    };
    var getTable = function (table, styled) {
        var tableRows = table.getElementsByTagName("tr");
        for (var i = 0; i < tableRows.length; i++) {
            var tableElements = tableRows[i].querySelectorAll("td, th, tf");
            for (var j = 0; j < tableElements.length; j++) {
                var child = tableElements[j];
                if (child.tagName && (child.tagName.toLowerCase() == "td" || child.tagName.toLowerCase() == "th" || child.tagName.toLowerCase() == "tf")) {
                    child = styleCell(child, j == 0, i == tableRows.length - 1, styled);
                }
            }
        }
        return table;
    };
    var styleCell = function (cell, isFirstColumn, isLastRow, styled) {
        var isSubCell = cell.classList && cell.classList.contains("sub-cell");
        cell["style"].border = styled ? "1px solid black" : "";
        cell["style"].fontFamily = styled ? "Arial" : "";
        cell["style"].fontSize = styled ? isSubCell ? "12.5px" : "14.5px" : "";
        cell["style"].textAlign = styled ? (isFirstColumn ? "left" : "right") : "";
        if (isLastRow) {
            cell["style"].fontWeight = styled ? "600" : "normal";
        }
        return cell;
    };
    return (react_1.default.createElement(IbbButton, { buttontype: ButtonType.Primary, children: copyButtonContent, disabled: false, title: "Tabelle kopieren", onClick: function () { return copyTable(); } }));
};
var RowStatus;
(function (RowStatus) {
    RowStatus[RowStatus["Set"] = 0] = "Set";
    RowStatus[RowStatus["New"] = 1] = "New";
    RowStatus[RowStatus["Delete"] = 2] = "Delete";
    RowStatus[RowStatus["Unknown"] = 3] = "Unknown";
})(RowStatus || (exports.RowStatus = RowStatus = {}));
var IbbFormTable = function (_a) {
    // Use the state and functions returned from useTable to build your UI
    var title = _a.title, table_name = _a.table_name, columns = _a.columns, data = _a.data, tablePageSize = _a.tablePageSize, dataaccess = _a.dataaccess, handleAddRow = _a.handleAddRow, handleDeleteRow = _a.handleDeleteRow, table_newRowTemplate = _a.table_newRowTemplate;
    _a.showColumnSums;
    var isReadOnly = _a.isReadOnly, isTableVertical = _a.isTableVertical, isTableCollapsible = _a.isTableCollapsible, isTableCopyable = _a.isTableCopyable, isTableSortable = _a.isTableSortable, isTableFilterable = _a.isTableFilterable, isTableColumnsFilterable = _a.isTableColumnsFilterable, groupRowsBy = _a.groupRowsBy, collapsedHeaders = _a.collapsedHeaders, table_changes = _a.table_changes, isRowsDraggable = _a.isRowsDraggable, setScrollHeight = _a.setScrollHeight;
    var initialState = (0, react_1.useMemo)(function () {
        return ({
            pageSize: tablePageSize ? tablePageSize : Number.MAX_VALUE, //default == unbegrenzt
        });
    }, []);
    var _b = reactTable.exports.useTable({
        data: data,
        columns: columns,
        initialState: initialState,
        globalFilter: function (rows, columnIds, filterValue) { return customTableFilter(rows, columnIds, filterValue); },
    }, reactTable.exports.useFilters, reactTable.exports.useGlobalFilter, reactTable.exports.useSortBy, reactTable.exports.useExpanded, reactTable.exports.usePagination), getTableProps = _b.getTableProps, getTableBodyProps = _b.getTableBodyProps, headerGroups = _b.headerGroups, rows = _b.rows, prepareRow = _b.prepareRow, page = _b.page, // Instead of using 'rows', we'll use page, which has only the rows for the active page
    canPreviousPage = _b.canPreviousPage, canNextPage = _b.canNextPage, pageOptions = _b.pageOptions, pageCount = _b.pageCount, gotoPage = _b.gotoPage, nextPage = _b.nextPage, previousPage = _b.previousPage;
    _b.pageSize;
    var setPageSize = _b.setPageSize, state = _b.state, preGlobalFilteredRows = _b.preGlobalFilteredRows, setGlobalFilter = _b.setGlobalFilter, globalFilter = _b.state.globalFilter;
    var isRowDeleted = function (row) {
        return row.status ? row.status == RowStatus.Delete : null;
    };
    var getAddIcon = function (text) {
        return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(PlusIcon$1, { width: "16" }), text));
    };
    var getDeleteIcon = function (isDeleted, text) {
        var icon = isDeleted == true ? react_1.default.createElement(ReplyIcon$1, { width: "16" }) : react_1.default.createElement(XIcon$1, { width: "16" });
        return (react_1.default.createElement(react_1.default.Fragment, null, icon, text));
    };
    var getButtonTitle = function (isDeleted) {
        return isDeleted !== undefined ? (isDeleted == true ? "Rückgängig" : "Zeile als gelöscht markieren") : "Zeile hinzufügen";
    };
    var getActionKey = function (action) {
        return Object.keys(TableActions)[Object.values(TableActions).indexOf(action)];
    };
    var dataAccessOptions = dataaccess ? dataaccess.split(",").map(function (o) { return o.trim(); }) : [];
    var createButtonAvailable = dataAccessOptions &&
        table_newRowTemplate &&
        !isReadOnly &&
        (dataAccessOptions.includes(getActionKey(TableActions.all)) || dataAccessOptions.includes(getActionKey(TableActions.create)));
    var deleteButtonAvailable = dataAccessOptions &&
        !isReadOnly &&
        (dataAccessOptions.includes(getActionKey(TableActions.all)) || dataAccessOptions.includes(getActionKey(TableActions.delete)));
    var getNumberFooterRows = function (columns) {
        var result = 0;
        var columnWithFooter = columns.find(function (c) { return c.Footer; });
        if (columnWithFooter)
            result = columnWithFooter.Footer.length;
        else if (createButtonAvailable) {
            result = 1;
        }
        return result;
    };
    var numberFooterRows = getNumberFooterRows(columns);
    var tableProps = (0, react_1.useMemo)(function () {
        return ({
            title: title,
            getTableProps: getTableProps,
            getTableBodyProps: getTableBodyProps,
            headerGroups: headerGroups,
            data: data,
            columns: columns,
            page: page,
            rows: rows,
            prepareRow: prepareRow,
            isRowDeleted: isRowDeleted,
            isReadOnly: isReadOnly,
            deleteButtonAvailable: deleteButtonAvailable,
            createButtonAvailable: createButtonAvailable,
            getDeleteIcon: getDeleteIcon,
            getAddIcon: getAddIcon,
            getButtonTitle: getButtonTitle,
            handleDeleteRow: handleDeleteRow,
            handleAddRow: handleAddRow,
            numberFooterRows: numberFooterRows,
            isTableCollapsible: isTableCollapsible,
            collapsedHeaders: collapsedHeaders,
            isTableCopyable: isTableCopyable,
            isTableSortable: isTableSortable,
            isTableFilterable: isTableFilterable,
            isTableColumnsFilterable: isTableColumnsFilterable,
            groupRowsBy: groupRowsBy,
            table_changes: table_changes,
            useFilters: reactTable.exports.useFilters,
            useGlobalFilter: reactTable.exports.useGlobalFilter,
            useSortBy: reactTable.exports.useSortBy,
            useExpanded: reactTable.exports.useExpanded,
            usePagination: reactTable.exports.usePagination,
            preGlobalFilteredRows: preGlobalFilteredRows,
            setGlobalFilter: setGlobalFilter,
            globalFilter: globalFilter,
            isRowsDraggable: isRowsDraggable,
            useTable: reactTable.exports.useTable,
            setScrollHeight: setScrollHeight,
            state: state,
        });
    }, [
        title,
        getTableProps,
        getTableBodyProps,
        headerGroups,
        data,
        columns,
        page,
        rows,
        prepareRow,
        isRowDeleted,
        isReadOnly,
        deleteButtonAvailable,
        createButtonAvailable,
        getDeleteIcon,
        getAddIcon,
        getButtonTitle,
        handleDeleteRow,
        handleAddRow,
        numberFooterRows,
        isTableCollapsible,
        collapsedHeaders,
        isTableCopyable,
        isTableSortable,
        isTableFilterable,
        isTableColumnsFilterable,
        groupRowsBy,
        table_changes,
        reactTable.exports.useFilters,
        reactTable.exports.useGlobalFilter,
        reactTable.exports.useSortBy,
        reactTable.exports.useExpanded,
        reactTable.exports.usePagination,
        preGlobalFilteredRows,
        setGlobalFilter,
        globalFilter,
        isRowsDraggable,
        reactTable.exports.useTable,
        setScrollHeight,
        state,
    ]);
    var MemoizedTable = (0, react_1.useMemo)(function () {
        return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwTableInnerContainer, null, isTableVertical ? react_1.default.createElement(IbbTableVertical, __assign$1({}, tableProps)) : react_1.default.createElement(IbbTableHorizontal, __assign$1({}, tableProps)))));
    }, [tableProps]);
    return (react_1.default.createElement(react_1.default.Fragment, null, (table_name || table_changes || isTableCopyable || isTableFilterable) && (react_1.default.createElement("div", { className: "flex justify-between", style: { minHeight: "30px", marginBottom: "5px", marginTop: "10px" } }, react_1.default.createElement(TwInputFieldLabel, null, table_name ? table_name : ""), react_1.default.createElement("div", { className: "flex-container-justified-items" }, table_changes && (react_1.default.createElement(IbbFieldTooltip, { tooltipItems: table_changes, tooltipLabel: "Tabellen-L\u00F6schhistorie", arrowPosition: "right" }, react_1.default.createElement(FontAwesomeIcon, { icon: faHistory, className: "text-gray-800" }))), isTableFilterable && (react_1.default.createElement(GlobalFilter, { preGlobalFilteredRows: preGlobalFilteredRows, globalFilter: globalFilter, setGlobalFilter: setGlobalFilter, placeholder: "Suche ..." })), isTableCopyable && react_1.default.createElement(IbbCopyButton, { elementId: tableProps.title })))), react_1.default.createElement(TwTableContainer, null, MemoizedTable), rows &&
        tablePageSize &&
        rows.length > 0 &&
        tablePageSize > 0 && ( //if tablePageSize is set
    react_1.default.createElement(IbbTablePagination, { state: state, canPreviousPage: canPreviousPage, canNextPage: canNextPage, previousPage: previousPage, nextPage: nextPage, gotoPage: gotoPage, setPageSize: setPageSize, pageOptions: pageOptions, pageCount: pageCount, countRows: preGlobalFilteredRows === null || preGlobalFilteredRows === void 0 ? void 0 : preGlobalFilteredRows.length }))));
};
exports.IbbFormTable = IbbFormTable;
var TwTableContainer = F$3.div(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject(["flex flex-col"], ["flex flex-col"])));
var TwTableInnerContainer = F$3.div(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject(["-my-2 py-2 align-middle inline-block min-w-full overflow-visible"], ["-my-2 py-2 align-middle inline-block min-w-full overflow-visible"]))); //overflow-x-auto
F$3.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["flex flex-row-reverse gap-x-2"], ["flex flex-row-reverse gap-x-2"])));
F$3.div(templateObject_4 || (templateObject_4 = __makeTemplateObject(["flex flex-col"], ["flex flex-col"])));
var templateObject_1$3, templateObject_2$1, templateObject_3, templateObject_4;
var IbbBreadcrumb = function (_a) {
    var breadcrumb = _a.breadcrumb;
    return (react_1.default.createElement("nav", { className: "flex mb-2 p-0-3 bg-gray-200", "aria-label": "Breadcrumb" }, react_1.default.createElement("ol", { className: "inline-flex items-center space-x-1 md:space-x-3" }, breadcrumb && (react_1.default.createElement("li", { className: "inline-flex items-center m-0", style: { marginLeft: 0 } }, breadcrumb.icon, react_1.default.createElement("a", { href: breadcrumb.link ? breadcrumb.link : "#", className: "inline-flex pl-4 pr-2 text-gray-800 uppercase text-bold tracking-wide font-semibold h-5/6 flex items-center hover:text-gray-900" }, breadcrumb.name))), breadcrumb &&
        breadcrumb.children &&
        breadcrumb.children.length > 0 &&
        breadcrumb.children.map(function (item, i) {
            return (react_1.default.createElement("li", { key: i, className: "inline-flex items-center ml-0", style: { marginLeft: 0 } }, react_1.default.createElement("svg", { className: "w-6 h-6 text-gray-400", fill: "currentColor", viewBox: "0 0 20 20", xmlns: "http://www.w3.org/2000/svg" }, react_1.default.createElement("path", { fillRule: "evenodd", d: "M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z", clipRule: "evenodd" })), item.link ? (react_1.default.createElement("a", { href: item.link, className: "inline-flex px-4 ml-2 text-gray-800 uppercase text-bold tracking-wide font-semibold h-5/6 flex items-center hover:text-gray-900" }, item.name)) : (react_1.default.createElement("span", { className: "uppercase ml-2 text-bold tracking-wide font-semibold h-5/6 text-gray-700" }, item.name))));
        }))));
};
exports.IbbBreadcrumb = IbbBreadcrumb;
// #Home Icon:
// <svg className="mr-2 w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
function styleInject(css, ref) {
    if (ref === void 0)
        ref = {};
    var insertAt = ref.insertAt;
    if (!css || typeof document === 'undefined') {
        return;
    }
    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';
    if (insertAt === 'top') {
        if (head.firstChild) {
            head.insertBefore(style, head.firstChild);
        }
        else {
            head.appendChild(style);
        }
    }
    else {
        head.appendChild(style);
    }
    if (style.styleSheet) {
        style.styleSheet.cssText = css;
    }
    else {
        style.appendChild(document.createTextNode(css));
    }
}
var css_248z = "/*modal*/\n\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1055;\n  display: none;\n  width: 100%;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  outline: 0;\n}\n\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 0.5rem;\n  pointer-events: none;\n}\n\n.modal.fade .modal-dialog {\n  transition: transform 0.3s ease-out;\n  transform: translate(0, -50px);\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .modal.fade .modal-dialog {\n    transition: none;\n  }\n}\n\n.modal.show .modal-dialog {\n  transform: none;\n}\n\n.modal.modal-static .modal-dialog {\n  transform: scale(1.02);\n}\n\n.modal-dialog-scrollable {\n  height: calc(100% - 1rem);\n}\n\n.modal-dialog-scrollable .modal-content {\n  max-height: 100%;\n  overflow: hidden;\n}\n\n.modal-dialog-scrollable .modal-body {\n  overflow-y: auto;\n}\n\n.modal-dialog-centered {\n  display: flex;\n  align-items: center;\n  min-height: calc(100% - 1rem);\n}\n\n.modal-content {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1050;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(112, 112, 112, var(--tw-bg-opacity));\n}\n\n.modal-backdrop.fade {\n  opacity: 0;\n}\n\n.modal-backdrop.show {\n  opacity: 0.5;\n}\n\n.modal-header {\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: space-between;\n  padding: 1rem 1rem;\n  border-bottom: 1px solid #dee2e6;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px);\n}\n\n.modal-header .btn-close {\n  padding: 0.5rem 0.5rem;\n  margin: -0.5rem -0.5rem -0.5rem auto;\n}\n\n.modal-title {\n  margin-bottom: 0;\n  line-height: 1.5;\n}\n\n.modal-body {\n  position: relative;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n\n.modal-footer {\n  display: flex;\n  flex-wrap: wrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: flex-end;\n  padding: 0.75rem;\n  border-top: 1px solid #dee2e6;\n  border-bottom-right-radius: calc(0.3rem - 1px);\n  border-bottom-left-radius: calc(0.3rem - 1px);\n}\n\n.modal-footer > * {\n  margin: 0.25rem;\n}\n\n@media (min-width: 576px) {\n  .modal-dialog {\n    max-width: 500px;\n    margin: 1.75rem auto;\n  }\n\n  .modal-dialog-scrollable {\n    height: calc(100% - 3.5rem);\n  }\n\n  .modal-dialog-centered {\n    min-height: calc(100% - 3.5rem);\n  }\n\n  .modal-sm {\n    max-width: 300px;\n  }\n}\n\n@media (min-width: 992px) {\n  .modal-lg,\r\n  .modal-xl {\n    max-width: 800px;\n  }\n}\n\n@media (min-width: 1200px) {\n  .modal-xl {\n    max-width: 1140px;\n  }\n}\n\n.modal-fullscreen {\n  width: 100vw;\n  max-width: none;\n  height: 100%;\n  margin: 0;\n}\n\n.modal-fullscreen .modal-content {\n  height: 100%;\n  border: 0;\n  border-radius: 0;\n}\n\n.modal-fullscreen .modal-header {\n  border-radius: 0;\n}\n\n.modal-fullscreen .modal-body {\n  overflow-y: auto;\n}\n\n.modal-fullscreen .modal-footer {\n  border-radius: 0;\n}\n\n@media (max-width: 575.98px) {\n  .modal-fullscreen-sm-down {\n    width: 100vw;\n    max-width: none;\n    height: 100%;\n    margin: 0;\n  }\n\n  .modal-fullscreen-sm-down .modal-content {\n    height: 100%;\n    border: 0;\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-sm-down .modal-header {\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-sm-down .modal-body {\n    overflow-y: auto;\n  }\n\n  .modal-fullscreen-sm-down .modal-footer {\n    border-radius: 0;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .modal-fullscreen-md-down {\n    width: 100vw;\n    max-width: none;\n    height: 100%;\n    margin: 0;\n  }\n\n  .modal-fullscreen-md-down .modal-content {\n    height: 100%;\n    border: 0;\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-md-down .modal-header {\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-md-down .modal-body {\n    overflow-y: auto;\n  }\n\n  .modal-fullscreen-md-down .modal-footer {\n    border-radius: 0;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .modal-fullscreen-lg-down {\n    width: 100vw;\n    max-width: none;\n    height: 100%;\n    margin: 0;\n  }\n\n  .modal-fullscreen-lg-down .modal-content {\n    height: 100%;\n    border: 0;\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-lg-down .modal-header {\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-lg-down .modal-body {\n    overflow-y: auto;\n  }\n\n  .modal-fullscreen-lg-down .modal-footer {\n    border-radius: 0;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .modal-fullscreen-xl-down {\n    width: 100vw;\n    max-width: none;\n    height: 100%;\n    margin: 0;\n  }\n\n  .modal-fullscreen-xl-down .modal-content {\n    height: 100%;\n    border: 0;\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-xl-down .modal-header {\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-xl-down .modal-body {\n    overflow-y: auto;\n  }\n\n  .modal-fullscreen-xl-down .modal-footer {\n    border-radius: 0;\n  }\n}\n\n@media (max-width: 1399.98px) {\n  .modal-fullscreen-xxl-down {\n    width: 100vw;\n    max-width: none;\n    height: 100%;\n    margin: 0;\n  }\n\n  .modal-fullscreen-xxl-down .modal-content {\n    height: 100%;\n    border: 0;\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-xxl-down .modal-header {\n    border-radius: 0;\n  }\n\n  .modal-fullscreen-xxl-down .modal-body {\n    overflow-y: auto;\n  }\n\n  .modal-fullscreen-xxl-down .modal-footer {\n    border-radius: 0;\n  }\n}\n\n.modal .btn {\n  padding: 0.5rem 1rem;\n  line-height: 1rem;\n  border-width: 1px;\n}\n\n.modal .btn-primary {\n  color: white;\n  background-color: #00adcc;\n}\n\n.modal .btn-primary:hover {\n  border-color: white;\n  background-color: #009cca;\n}\n\n.modal .btn-secondary {\n  color: rgba(45, 55, 72, var(--text-opacity));\n}\n\n.modal .btn-secondary:hover {\n  background-color: #e2e8f0;\n  border-color: white;\n}\r\n";
styleInject(css_248z);
var IbbModalWindow = function (_a) {
    var show = _a.show, toggleModal = _a.toggleModal, readOnly = _a.readOnly, disableSave = _a.disableSave, customActionButton = _a.customActionButton, stringResources = _a.stringResources, maxWidth = _a.maxWidth, children = _a.children;
    var cancelButtonRef = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(function () {
        if (show || children) {
            var rootNode = document.getElementById("root");
            rootNode && rootNode["inert"] && (rootNode["inert"] = false);
        }
    }, [show, children]);
    return (children && (react_1.default.createElement(tt$1.Root, { show: show, as: react_1.Fragment }, react_1.default.createElement(_t, { as: "div", className: "fixed z-10 inset-0 overflow-y-auto", initialFocus: cancelButtonRef, onClose: function () { return null; } }, react_1.default.createElement("div", { className: "flex items-end justify-center md:pt-4 md:px-4 md:pb-20 text-center sm:block sm:p-0" }, react_1.default.createElement(tt$1.Child, { as: react_1.Fragment, enter: "ease-out duration-300", enterFrom: "opacity-0", enterTo: "opacity-100", leave: "ease-in duration-200", leaveFrom: "opacity-100", leaveTo: "opacity-0" }, react_1.default.createElement(_t.Overlay, { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" })), react_1.default.createElement("span", { className: "hidden sm:inline-block sm:align-top sm:h-screen", "aria-hidden": "true" }, "\u200B"), react_1.default.createElement(tt$1.Child, { as: react_1.Fragment, enter: "ease-out duration-300", enterFrom: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95", enterTo: "opacity-100 translate-y-0 sm:scale-100", leave: "ease-in duration-200", leaveFrom: "opacity-100 translate-y-0 sm:scale-100", leaveTo: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" }, react_1.default.createElement("div", { id: "modal-dialog", className: "inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all md:w-3-4 sm:w-full sm:align-top", style: maxWidth && { maxWidth: maxWidth } }, react_1.default.createElement("div", { className: "bg-white p-6 pb-2 rounded-lg" }, react_1.default.createElement("div", { id: "modal-content", className: "w-full" }, react_1.default.createElement(XIcon$1, { width: "16", className: "text-gray-700 cursor-pointer", style: {
            position: "absolute",
            right: "10px",
            top: "10px",
        }, onClick: function () { return toggleModal(false); } }), react_1.default.createElement("div", { className: "text-left" }, react_1.default.createElement("div", { className: "mt-2" }, react_1.default.createElement("div", null, children))))), react_1.default.createElement("div", { className: "px-6 pb-4 flex content-between space-x-2 items-right float-right" }, react_1.default.createElement(IbbButton, { onClick: function () { return toggleModal(false); }, buttontype: ButtonType.Secondary }, stringResources.cancel), !readOnly &&
        (customActionButton ? (customActionButton) : (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(IbbButton, { buttontype: ButtonType.Submit, form: "generic-form", attr: [stringResources.save], disabled: disableSave }, stringResources.save), react_1.default.createElement(IbbButton, { buttontype: ButtonType.Submit, form: "generic-form", attr: [stringResources.saveAndClose], disabled: disableSave }, stringResources.saveAndClose))))))))))));
};
exports.IbbModalWindow = IbbModalWindow;
var IbbDynamicFormBlock = function (_a) {
    var fields = _a.fields, readOnly = _a.readOnly, isVisible = _a.isVisible, focusKey = _a.focusKey;
    var _b = __read((0, react_1.useState)(fields), 2), currentFieldBlock = _b[0], setCurrentFieldBlock = _b[1];
    (0, react_1.useEffect)(function () {
        setCurrentFieldBlock(fields);
    }, [fields]);
    var handleChangeInput = function (currentField, id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit) {
        if (currentField) {
            var newValue = getElementValue(currentField, id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit);
            focusKey = currentField.field_id;
            currentField.field_value = newValue;
            setCurrentFieldBlock(__spreadArray$1([], __read(currentFieldBlock), false));
        }
    };
    var handleChangeTableValue = function (field, newValue) {
        if (field.field_type === ElementTypes.table && newValue && newValue.length > 0) {
            field.field_value = newValue;
            setCurrentFieldBlock(__spreadArray$1([], __read(currentFieldBlock), false));
        }
    };
    return (react_1.default.createElement(TwFormBlockElements, null, currentFieldBlock &&
        currentFieldBlock.map(function (currentField, i) {
            return (react_1.default.createElement("div", { className: "px-4 mb-4", key: i }, react_1.default.createElement(Element$1, { key: currentField.field_id, field: currentField, handleChangeInput: function (id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit) {
                    return handleChangeInput(currentField, id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit);
                }, handleChangeTableValue: function (field, newValue) { return handleChangeTableValue(field, newValue); }, userReadOnly: readOnly, isVisible: isVisible, focusKey: focusKey })));
        })));
};
exports.IbbDynamicFormBlock = IbbDynamicFormBlock;
var TwFormBlockElements = F$3.div(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["m-auto"], ["m-auto"])));
var templateObject_1$2;
var focusKey;
var IbbDynamicForm = (0, react_1.memo)(function IbbDynamicForm(_a) {
    var _this = this;
    var blocks = _a.blocks, id = _a.id, onSubmit = _a.onSubmit, readOnly = _a.readOnly, customClass = _a.customClass, hideTitles = _a.hideTitles;
    var handleSubmit = function (e) {
        return __awaiter(_this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                e.preventDefault();
                data = e.currentTarget;
                onSubmit(e, data);
                return [2 /*return*/];
            });
        });
    };
    return (
    // onSubmit={onSubmit}
    react_1.default.createElement("form", { id: id, onSubmit: function (e) { return handleSubmit(e); }, className: customClass, autoComplete: "off" }, blocks
        ? blocks.map(function (block, i) {
            return (react_1.default.createElement(TwFormBlockContainer, { key: i, id: block.propertyName, className: classNames$1("form-block", block.display ? "form-block-visible" : "form-block-hidden") }, !hideTitles && block.title && react_1.default.createElement(TwFormBlockTitle, null, block.title), react_1.default.createElement(IbbDynamicFormBlock, { fields: block.fields, readOnly: readOnly, isVisible: block.display, focusKey: focusKey })));
        })
        : null));
});
exports.IbbDynamicForm = IbbDynamicForm;
var TwFormBlockContainer = F$3.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["p-4 bg-gray-100 mb-2"], ["p-4 bg-gray-100 mb-2"])));
var TwFormBlockTitle = F$3.h3(templateObject_2 || (templateObject_2 = __makeTemplateObject(["px-4 mb-4 text-gray-800 uppercase text-bold tracking-wide font-semibold"], ["px-4 mb-4 text-gray-800 uppercase text-bold tracking-wide font-semibold"])));
var templateObject_1$1, templateObject_2;
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar)
                    ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || from);
}
/**
 * Escape regex char
 *
 * See: https://stackoverflow.com/questions/17885855/use-dynamic-variable-string-as-regex-pattern-in-javascript
 */
var escapeRegExp = function (stringToGoIntoTheRegex) {
    return stringToGoIntoTheRegex.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};
var abbrMap = { k: 1000, m: 1000000, b: 1000000000 };
/**
 * Parse a value with abbreviation e.g 1k = 1000
 */
var parseAbbrValue = function (value, decimalSeparator) {
    if (decimalSeparator === void 0) {
        decimalSeparator = '.';
    }
    var reg = new RegExp("(\\d+(" + escapeRegExp(decimalSeparator) + "\\d*)?)([kmb])$", 'i');
    var match = value.match(reg);
    if (match) {
        var digits = match[1], abbr = match[3];
        var multiplier = abbrMap[abbr.toLowerCase()];
        return Number(digits.replace(decimalSeparator, '.')) * multiplier;
    }
    return undefined;
};
/**
 * Remove group separator from value eg. 1,000 > 1000
 */
var removeSeparators = function (value, separator) {
    if (separator === void 0) {
        separator = ',';
    }
    var reg = new RegExp(escapeRegExp(separator), 'g');
    return value.replace(reg, '');
};
/**
 * Remove invalid characters
 */
var removeInvalidChars = function (value, validChars) {
    var chars = escapeRegExp(validChars.join(''));
    var reg = new RegExp("[^\\d" + chars + "]", 'gi');
    return value.replace(reg, '');
};
/**
 * Remove prefix, separators and extra decimals from value
 */
var cleanValue = function (_a) {
    var value = _a.value, _b = _a.groupSeparator, groupSeparator = _b === void 0 ? ',' : _b, _c = _a.decimalSeparator, decimalSeparator = _c === void 0 ? '.' : _c, _d = _a.allowDecimals, allowDecimals = _d === void 0 ? true : _d, _e = _a.decimalsLimit, decimalsLimit = _e === void 0 ? 2 : _e, _f = _a.allowNegativeValue, allowNegativeValue = _f === void 0 ? true : _f, _g = _a.disableAbbreviations, disableAbbreviations = _g === void 0 ? false : _g, _h = _a.prefix, prefix = _h === void 0 ? '' : _h, _j = _a.transformRawValue, transformRawValue = _j === void 0 ? function (rawValue) { return rawValue; } : _j;
    var transformedValue = transformRawValue(value);
    if (transformedValue === '-') {
        return transformedValue;
    }
    var abbreviations = disableAbbreviations ? [] : ['k', 'm', 'b'];
    var reg = new RegExp("((^|\\D)-\\d)|(-" + escapeRegExp(prefix) + ")");
    var isNegative = reg.test(transformedValue);
    // Is there a digit before the prefix? eg. 1$
    var _k = RegExp("(\\d+)-?" + escapeRegExp(prefix)).exec(value) || [], prefixWithValue = _k[0], preValue = _k[1];
    var withoutPrefix = prefix
        ? prefixWithValue
            ? transformedValue.replace(prefixWithValue, '').concat(preValue)
            : transformedValue.replace(prefix, '')
        : transformedValue;
    var withoutSeparators = removeSeparators(withoutPrefix, groupSeparator);
    var withoutInvalidChars = removeInvalidChars(withoutSeparators, __spreadArray([
        groupSeparator,
        decimalSeparator
    ], abbreviations));
    var valueOnly = withoutInvalidChars;
    if (!disableAbbreviations) {
        // disallow letter without number
        if (abbreviations.some(function (letter) { return letter === withoutInvalidChars.toLowerCase().replace(decimalSeparator, ''); })) {
            return '';
        }
        var parsed = parseAbbrValue(withoutInvalidChars, decimalSeparator);
        if (parsed) {
            valueOnly = String(parsed);
        }
    }
    var includeNegative = isNegative && allowNegativeValue ? '-' : '';
    if (decimalSeparator && valueOnly.includes(decimalSeparator)) {
        var _l = withoutInvalidChars.split(decimalSeparator), int = _l[0], decimals = _l[1];
        var trimmedDecimals = decimalsLimit && decimals ? decimals.slice(0, decimalsLimit) : decimals;
        var includeDecimals = allowDecimals ? "" + decimalSeparator + trimmedDecimals : '';
        return "" + includeNegative + int + includeDecimals;
    }
    return "" + includeNegative + valueOnly;
};
var fixedDecimalValue = function (value, decimalSeparator, fixedDecimalLength) {
    if (fixedDecimalLength !== undefined && value.length > 1) {
        if (fixedDecimalLength === 0) {
            return value.replace(decimalSeparator, '');
        }
        if (value.includes(decimalSeparator)) {
            var _a = value.split(decimalSeparator), int = _a[0], decimals = _a[1];
            if (decimals.length === fixedDecimalLength) {
                return value;
            }
            if (decimals.length > fixedDecimalLength) {
                return "" + int + decimalSeparator + decimals.slice(0, fixedDecimalLength);
            }
        }
        var reg = value.length > fixedDecimalLength
            ? new RegExp("(\\d+)(\\d{" + fixedDecimalLength + "})")
            : new RegExp("(\\d)(\\d+)");
        var match = value.match(reg);
        if (match) {
            var int = match[1], decimals = match[2];
            return "" + int + decimalSeparator + decimals;
        }
    }
    return value;
};
var getSuffix = function (value, _a) {
    var _b = _a.groupSeparator, groupSeparator = _b === void 0 ? ',' : _b, _c = _a.decimalSeparator, decimalSeparator = _c === void 0 ? '.' : _c;
    var suffixReg = new RegExp("\\d([^" + escapeRegExp(groupSeparator) + escapeRegExp(decimalSeparator) + "0-9]+)");
    var suffixMatch = value.match(suffixReg);
    return suffixMatch ? suffixMatch[1] : undefined;
};
/**
 * Format value with decimal separator, group separator and prefix
 */
var formatValue = function (options) {
    var _value = options.value, decimalSeparator = options.decimalSeparator, intlConfig = options.intlConfig, decimalScale = options.decimalScale, _a = options.prefix, prefix = _a === void 0 ? '' : _a, _b = options.suffix, suffix = _b === void 0 ? '' : _b;
    if (_value === '' || _value === undefined) {
        return '';
    }
    if (_value === '-') {
        return '-';
    }
    var isNegative = new RegExp("^\\d?-" + (prefix ? escapeRegExp(prefix) + "?" : '') + "\\d").test(_value);
    var value = decimalSeparator !== '.'
        ? replaceDecimalSeparator(_value, decimalSeparator, isNegative)
        : _value;
    var defaultNumberFormatOptions = {
        minimumFractionDigits: decimalScale || 0,
        maximumFractionDigits: 20,
    };
    var numberFormatter = intlConfig
        ? new Intl.NumberFormat(intlConfig.locale, intlConfig.currency
            ? __assign(__assign({}, defaultNumberFormatOptions), { style: 'currency', currency: intlConfig.currency }) : defaultNumberFormatOptions)
        : new Intl.NumberFormat(undefined, defaultNumberFormatOptions);
    var parts = numberFormatter.formatToParts(Number(value));
    var formatted = replaceParts(parts, options);
    // Does intl formatting add a suffix?
    var intlSuffix = getSuffix(formatted, __assign({}, options));
    // Include decimal separator if user input ends with decimal separator
    var includeDecimalSeparator = _value.slice(-1) === decimalSeparator ? decimalSeparator : '';
    var _c = value.match(RegExp('\\d+\\.(\\d+)')) || [], decimals = _c[1];
    // Keep original decimal padding if no decimalScale
    if (decimalScale === undefined && decimals && decimalSeparator) {
        if (formatted.includes(decimalSeparator)) {
            formatted = formatted.replace(RegExp("(\\d+)(" + escapeRegExp(decimalSeparator) + ")(\\d+)", 'g'), "$1$2" + decimals);
        }
        else {
            if (intlSuffix && !suffix) {
                formatted = formatted.replace(intlSuffix, "" + decimalSeparator + decimals + intlSuffix);
            }
            else {
                formatted = "" + formatted + decimalSeparator + decimals;
            }
        }
    }
    if (suffix && includeDecimalSeparator) {
        return "" + formatted + includeDecimalSeparator + suffix;
    }
    if (intlSuffix && includeDecimalSeparator) {
        return formatted.replace(intlSuffix, "" + includeDecimalSeparator + intlSuffix);
    }
    if (intlSuffix && suffix) {
        return formatted.replace(intlSuffix, "" + includeDecimalSeparator + suffix);
    }
    return [formatted, includeDecimalSeparator, suffix].join('');
};
/**
 * Before converting to Number, decimal separator has to be .
 */
var replaceDecimalSeparator = function (value, decimalSeparator, isNegative) {
    var newValue = value;
    if (decimalSeparator && decimalSeparator !== '.') {
        newValue = newValue.replace(RegExp(escapeRegExp(decimalSeparator), 'g'), '.');
        if (isNegative && decimalSeparator === '-') {
            newValue = "-" + newValue.slice(1);
        }
    }
    return newValue;
};
var replaceParts = function (parts, _a) {
    var prefix = _a.prefix, groupSeparator = _a.groupSeparator, decimalSeparator = _a.decimalSeparator, decimalScale = _a.decimalScale, _b = _a.disableGroupSeparators, disableGroupSeparators = _b === void 0 ? false : _b;
    return parts
        .reduce(function (prev, _a, i) {
        var type = _a.type, value = _a.value;
        if (i === 0 && prefix) {
            if (type === 'minusSign') {
                return [value, prefix];
            }
            if (type === 'currency') {
                return __spreadArray(__spreadArray([], prev), [prefix]);
            }
            return [prefix, value];
        }
        if (type === 'currency') {
            return prefix ? prev : __spreadArray(__spreadArray([], prev), [value]);
        }
        if (type === 'group') {
            return !disableGroupSeparators
                ? __spreadArray(__spreadArray([], prev), [groupSeparator !== undefined ? groupSeparator : value]) : prev;
        }
        if (type === 'decimal') {
            if (decimalScale !== undefined && decimalScale === 0) {
                return prev;
            }
            return __spreadArray(__spreadArray([], prev), [decimalSeparator !== undefined ? decimalSeparator : value]);
        }
        if (type === 'fraction') {
            return __spreadArray(__spreadArray([], prev), [decimalScale !== undefined ? value.slice(0, decimalScale) : value]);
        }
        return __spreadArray(__spreadArray([], prev), [value]);
    }, [''])
        .join('');
};
var defaultConfig = {
    currencySymbol: '',
    groupSeparator: '',
    decimalSeparator: '',
    prefix: '',
    suffix: '',
};
/**
 * Get locale config from input or default
 */
var getLocaleConfig = function (intlConfig) {
    var _a = intlConfig || {}, locale = _a.locale, currency = _a.currency;
    var numberFormatter = locale
        ? new Intl.NumberFormat(locale, currency ? { currency: currency, style: 'currency' } : undefined)
        : new Intl.NumberFormat();
    return numberFormatter.formatToParts(1000.1).reduce(function (prev, curr, i) {
        if (curr.type === 'currency') {
            if (i === 0) {
                return __assign(__assign({}, prev), { currencySymbol: curr.value, prefix: curr.value });
            }
            else {
                return __assign(__assign({}, prev), { currencySymbol: curr.value, suffix: curr.value });
            }
        }
        if (curr.type === 'group') {
            return __assign(__assign({}, prev), { groupSeparator: curr.value });
        }
        if (curr.type === 'decimal') {
            return __assign(__assign({}, prev), { decimalSeparator: curr.value });
        }
        return prev;
    }, defaultConfig);
};
var isNumber = function (input) { return RegExp(/\d/, 'gi').test(input); };
var padTrimValue = function (value, decimalSeparator, decimalScale) {
    if (decimalSeparator === void 0) {
        decimalSeparator = '.';
    }
    if (decimalScale === undefined || value === '' || value === undefined) {
        return value;
    }
    if (!value.match(/\d/g)) {
        return '';
    }
    var _a = value.split(decimalSeparator), int = _a[0], decimals = _a[1];
    if (decimalScale === 0) {
        return int;
    }
    var newValue = decimals || '';
    if (newValue.length < decimalScale) {
        while (newValue.length < decimalScale) {
            newValue += '0';
        }
    }
    else {
        newValue = newValue.slice(0, decimalScale);
    }
    return "" + int + decimalSeparator + newValue;
};
/**
 * Based on the last key stroke and the cursor position, update the value
 * and reposition the cursor to the right place
 */
var repositionCursor = function (_a) {
    var selectionStart = _a.selectionStart, value = _a.value, lastKeyStroke = _a.lastKeyStroke, stateValue = _a.stateValue, groupSeparator = _a.groupSeparator;
    var cursorPosition = selectionStart;
    var modifiedValue = value;
    if (stateValue && cursorPosition) {
        var splitValue = value.split('');
        // if cursor is to right of groupSeparator and backspace pressed, delete the character to the left of the separator and reposition the cursor
        if (lastKeyStroke === 'Backspace' && stateValue[cursorPosition] === groupSeparator) {
            splitValue.splice(cursorPosition - 1, 1);
            cursorPosition -= 1;
        }
        // if cursor is to left of groupSeparator and delete pressed, delete the character to the right of the separator and reposition the cursor
        if (lastKeyStroke === 'Delete' && stateValue[cursorPosition] === groupSeparator) {
            splitValue.splice(cursorPosition, 1);
            cursorPosition += 1;
        }
        modifiedValue = splitValue.join('');
        return { modifiedValue: modifiedValue, cursorPosition: cursorPosition };
    }
    return { modifiedValue: modifiedValue, cursorPosition: selectionStart };
};
var CurrencyInput = (0, react_1.forwardRef)(function (_a, ref) {
    var _b = _a.allowDecimals, allowDecimals = _b === void 0 ? true : _b, _c = _a.allowNegativeValue, allowNegativeValue = _c === void 0 ? true : _c, id = _a.id, name = _a.name, className = _a.className, customInput = _a.customInput, decimalsLimit = _a.decimalsLimit, defaultValue = _a.defaultValue, _d = _a.disabled, disabled = _d === void 0 ? false : _d, userMaxLength = _a.maxLength, userValue = _a.value, onValueChange = _a.onValueChange, fixedDecimalLength = _a.fixedDecimalLength, placeholder = _a.placeholder, decimalScale = _a.decimalScale, prefix = _a.prefix, suffix = _a.suffix, intlConfig = _a.intlConfig, step = _a.step, min = _a.min, max = _a.max, _e = _a.disableGroupSeparators, disableGroupSeparators = _e === void 0 ? false : _e, _f = _a.disableAbbreviations, disableAbbreviations = _f === void 0 ? false : _f, _decimalSeparator = _a.decimalSeparator, _groupSeparator = _a.groupSeparator, onChange = _a.onChange, onFocus = _a.onFocus, onBlur = _a.onBlur, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, transformRawValue = _a.transformRawValue, props = __rest(_a, ["allowDecimals", "allowNegativeValue", "id", "name", "className", "customInput", "decimalsLimit", "defaultValue", "disabled", "maxLength", "value", "onValueChange", "fixedDecimalLength", "placeholder", "decimalScale", "prefix", "suffix", "intlConfig", "step", "min", "max", "disableGroupSeparators", "disableAbbreviations", "decimalSeparator", "groupSeparator", "onChange", "onFocus", "onBlur", "onKeyDown", "onKeyUp", "transformRawValue"]);
    if (_decimalSeparator && isNumber(_decimalSeparator)) {
        throw new Error('decimalSeparator cannot be a number');
    }
    if (_groupSeparator && isNumber(_groupSeparator)) {
        throw new Error('groupSeparator cannot be a number');
    }
    var localeConfig = (0, react_1.useMemo)(function () { return getLocaleConfig(intlConfig); }, [intlConfig]);
    var decimalSeparator = _decimalSeparator || localeConfig.decimalSeparator || '';
    var groupSeparator = _groupSeparator || localeConfig.groupSeparator || '';
    if (decimalSeparator &&
        groupSeparator &&
        decimalSeparator === groupSeparator &&
        disableGroupSeparators === false) {
        throw new Error('decimalSeparator cannot be the same as groupSeparator');
    }
    var formatValueOptions = {
        decimalSeparator: decimalSeparator,
        groupSeparator: groupSeparator,
        disableGroupSeparators: disableGroupSeparators,
        intlConfig: intlConfig,
        prefix: prefix || localeConfig.prefix,
        suffix: suffix,
    };
    var cleanValueOptions = {
        decimalSeparator: decimalSeparator,
        groupSeparator: groupSeparator,
        allowDecimals: allowDecimals,
        decimalsLimit: decimalsLimit || fixedDecimalLength || 2,
        allowNegativeValue: allowNegativeValue,
        disableAbbreviations: disableAbbreviations,
        prefix: prefix || localeConfig.prefix,
        transformRawValue: transformRawValue,
    };
    var formattedStateValue = defaultValue !== undefined && defaultValue !== null
        ? formatValue(__assign(__assign({}, formatValueOptions), { decimalScale: decimalScale, value: String(defaultValue) }))
        : userValue !== undefined && userValue !== null
            ? formatValue(__assign(__assign({}, formatValueOptions), { decimalScale: decimalScale, value: String(userValue) }))
            : '';
    var _g = (0, react_1.useState)(formattedStateValue), stateValue = _g[0], setStateValue = _g[1];
    var _h = (0, react_1.useState)(false), dirty = _h[0], setDirty = _h[1];
    var _j = (0, react_1.useState)(0), cursor = _j[0], setCursor = _j[1];
    var _k = (0, react_1.useState)(0), changeCount = _k[0], setChangeCount = _k[1];
    var _l = (0, react_1.useState)(null), lastKeyStroke = _l[0], setLastKeyStroke = _l[1];
    var inputRef = (0, react_1.useRef)(null);
    (0, react_1.useImperativeHandle)(ref, function () { return inputRef.current; });
    /**
     * Process change in value
     */
    var processChange = function (value, selectionStart) {
        setDirty(true);
        var _a = repositionCursor({
            selectionStart: selectionStart,
            value: value,
            lastKeyStroke: lastKeyStroke,
            stateValue: stateValue,
            groupSeparator: groupSeparator,
        }), modifiedValue = _a.modifiedValue, cursorPosition = _a.cursorPosition;
        var stringValue = cleanValue(__assign({ value: modifiedValue }, cleanValueOptions));
        if (userMaxLength && stringValue.replace(/-/g, '').length > userMaxLength) {
            return;
        }
        if (stringValue === '' || stringValue === '-' || stringValue === decimalSeparator) {
            onValueChange && onValueChange(undefined, name, { float: null, formatted: '', value: '' });
            setStateValue(stringValue);
            // Always sets cursor after '-' or decimalSeparator input
            setCursor(1);
            return;
        }
        var stringValueWithoutSeparator = decimalSeparator
            ? stringValue.replace(decimalSeparator, '.')
            : stringValue;
        var numberValue = parseFloat(stringValueWithoutSeparator);
        var formattedValue = formatValue(__assign({ value: stringValue }, formatValueOptions));
        if (cursorPosition !== undefined && cursorPosition !== null) {
            // Prevent cursor jumping
            var newCursor = cursorPosition + (formattedValue.length - value.length);
            newCursor = newCursor <= 0 ? (prefix ? prefix.length : 0) : newCursor;
            setCursor(newCursor);
            setChangeCount(changeCount + 1);
        }
        setStateValue(formattedValue);
        if (onValueChange) {
            var values = {
                float: numberValue,
                formatted: formattedValue,
                value: stringValue,
            };
            onValueChange(stringValue, name, values);
        }
    };
    /**
     * Handle change event
     */
    var handleOnChange = function (event) {
        var _a = event.target, value = _a.value, selectionStart = _a.selectionStart;
        processChange(value, selectionStart);
        onChange && onChange(event);
    };
    /**
     * Handle focus event
     */
    var handleOnFocus = function (event) {
        onFocus && onFocus(event);
        return stateValue ? stateValue.length : 0;
    };
    /**
     * Handle blur event
     *
     * Format value by padding/trimming decimals if required by
     */
    var handleOnBlur = function (event) {
        var value = event.target.value;
        var valueOnly = cleanValue(__assign({ value: value }, cleanValueOptions));
        if (valueOnly === '-' || valueOnly === decimalSeparator || !valueOnly) {
            setStateValue('');
            onBlur && onBlur(event);
            return;
        }
        var fixedDecimals = fixedDecimalValue(valueOnly, decimalSeparator, fixedDecimalLength);
        var newValue = padTrimValue(fixedDecimals, decimalSeparator, decimalScale !== undefined ? decimalScale : fixedDecimalLength);
        var numberValue = parseFloat(newValue.replace(decimalSeparator, '.'));
        var formattedValue = formatValue(__assign(__assign({}, formatValueOptions), { value: newValue }));
        if (onValueChange) {
            onValueChange(newValue, name, {
                float: numberValue,
                formatted: formattedValue,
                value: newValue,
            });
        }
        setStateValue(formattedValue);
        onBlur && onBlur(event);
    };
    /**
     * Handle key down event
     *
     * Increase or decrease value by step
     */
    var handleOnKeyDown = function (event) {
        var key = event.key;
        setLastKeyStroke(key);
        if (step && (key === 'ArrowUp' || key === 'ArrowDown')) {
            event.preventDefault();
            setCursor(stateValue.length);
            var currentValue = parseFloat(userValue !== undefined && userValue !== null
                ? String(userValue).replace(decimalSeparator, '.')
                : cleanValue(__assign({ value: stateValue }, cleanValueOptions))) || 0;
            var newValue = key === 'ArrowUp' ? currentValue + step : currentValue - step;
            if (min !== undefined && newValue < min) {
                return;
            }
            if (max !== undefined && newValue > max) {
                return;
            }
            var fixedLength = String(step).includes('.')
                ? Number(String(step).split('.')[1].length)
                : undefined;
            processChange(String(fixedLength ? newValue.toFixed(fixedLength) : newValue).replace('.', decimalSeparator));
        }
        onKeyDown && onKeyDown(event);
    };
    /**
     * Handle key up event
     *
     * Move cursor if there is a suffix to prevent user typing past suffix
     */
    var handleOnKeyUp = function (event) {
        var key = event.key, selectionStart = event.currentTarget.selectionStart;
        if (key !== 'ArrowUp' && key !== 'ArrowDown' && stateValue !== '-') {
            var suffix_1 = getSuffix(stateValue, { groupSeparator: groupSeparator, decimalSeparator: decimalSeparator });
            if (suffix_1 && selectionStart && selectionStart > stateValue.length - suffix_1.length) {
                /* istanbul ignore else */
                if (inputRef.current) {
                    var newCursor = stateValue.length - suffix_1.length;
                    inputRef.current.setSelectionRange(newCursor, newCursor);
                }
            }
        }
        onKeyUp && onKeyUp(event);
    };
    (0, react_1.useEffect)(function () {
        // prevent cursor jumping if editing value
        if (dirty &&
            stateValue !== '-' &&
            inputRef.current &&
            document.activeElement === inputRef.current) {
            inputRef.current.setSelectionRange(cursor, cursor);
        }
    }, [stateValue, cursor, inputRef, dirty, changeCount]);
    /**
     * If user has only entered "-" or decimal separator,
     * keep the char to allow them to enter next value
     */
    var getRenderValue = function () {
        if (userValue !== undefined &&
            userValue !== null &&
            stateValue !== '-' &&
            (!decimalSeparator || stateValue !== decimalSeparator)) {
            return formatValue(__assign(__assign({}, formatValueOptions), { decimalScale: dirty ? undefined : decimalScale, value: String(userValue) }));
        }
        return stateValue;
    };
    var inputProps = __assign({ type: 'text', inputMode: 'decimal', id: id,
        name: name,
        className: className, onChange: handleOnChange, onBlur: handleOnBlur, onFocus: handleOnFocus, onKeyDown: handleOnKeyDown, onKeyUp: handleOnKeyUp, placeholder: placeholder,
        disabled: disabled, value: getRenderValue(), ref: inputRef }, props);
    if (customInput) {
        var CustomInput = customInput;
        return react_1.default.createElement(CustomInput, __assign({}, inputProps));
    }
    return react_1.default.createElement("input", __assign({}, inputProps));
});
CurrencyInput.displayName = 'CurrencyInput';
var CurrencyInputField = function (_a) {
    var props = _a.props, value = _a.value, validationError = _a.validationError, handleBlur = _a.handleBlur, handleChange = _a.handleChange, focusKey = _a.focusKey;
    var numberFieldProps = {
        decimalSeparator: props.options && props.options.decimalsymbol ? props.options.decimalsymbol : ",",
        groupSeparator: props.options && props.options.thousandssymbol ? props.options.thousandssymbol : ".",
        decimalsLimit: props.options && props.options.precision ? parseInt(props.options.precision) : 0,
        allowNegative: props.options && props.options.allowNegative ? props.options.allowNegative : false,
    };
    var validationRules = props.validationRules ? props.validationRules : {};
    (0, react_1.useMemo)(function () {
        return !isEmpty$1(value) ? formatNumberValue(value, numberFieldProps.decimalsLimit) : "";
    }, [value]);
    var hasAddon = props.options && props.options.suffix;
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwInputFieldWithAddonContainer, null, react_1.default.createElement(CurrencyInput, { className: [getInputStyle(), validationError && getInvalidStyle()].join(" "), key: props.field_id, id: props.field_id, name: props.field_name, placeholder: props.field_placeholder ? props.field_placeholder : "", value: !isEmpty$1(value) ? formatNumberValue(value, numberFieldProps.decimalsLimit) : "", decimalsLimit: numberFieldProps.decimalsLimit, fixedDecimalLength: numberFieldProps.decimalsLimit, decimalSeparator: numberFieldProps.decimalSeparator, decimalScale: numberFieldProps.decimalsLimit, groupSeparator: numberFieldProps.groupSeparator, autoFocus: focusKey && focusKey == props.field_id, onBlur: function (event) { return handleBlur(event, validationRules, numberFieldProps); }, onChange: function (event) {
            return handleChange(props.field_id, event, validationRules, numberFieldProps.allowNegative, numberFieldProps.decimalSeparator, numberFieldProps.groupSeparator, numberFieldProps.decimalsLimit);
        }, readOnly: props.readonly }), hasAddon && (react_1.default.createElement(TwInputFieldAddonContainer, null, react_1.default.createElement(TwInputFieldAddon, { className: validationError && getInvalidStyle(), onClick: props.options.suffix_custom_action }, props.options.suffix)))), react_1.default.createElement(IbbValidationMessage, { validationMessage: validationError })));
};
var PasswordInputField = function (_a) {
    var props = _a.props, value = _a.value, handleChange = _a.handleChange, validationError = _a.validationError, focusKey = _a.focusKey;
    var _b = __read((0, react_1.useState)(false), 2), showValue = _b[0], setShowValue = _b[1];
    var _c = __read((0, react_1.useState)(InputType.password), 2), type = _c[0], setType = _c[1];
    var toggleShowValue = function () {
        setShowValue(!showValue);
    };
    (0, react_1.useEffect)(function () {
        showValue ? setType(InputType.text) : setType(InputType.password);
    }, [showValue]);
    (0, react_1.useMemo)(function () {
        return !isEmpty$1(value) ? value : "";
    }, [value]);
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwInputFieldWithAddonContainer, null, react_1.default.createElement(TwPasswordField, { className: validationError && getInvalidStyle(), key: props.field_id, id: props.field_id, type: InputType[type], name: props.field_name, placeholder: props.field_placeholder ? props.field_placeholder : "", value: !isEmpty$1(value) ? value : "", autoFocus: focusKey && focusKey == props.field_id, onChange: function (event) { return handleChange(props.field_id, event); }, readOnly: props.readonly }), react_1.default.createElement(TwInputFieldAddonContainer, null, react_1.default.createElement(TwInputFieldAddon, { className: validationError && getInvalidStyle(), onClick: function () { return toggleShowValue(); } }, showValue ? (react_1.default.createElement(EyeOffIcon$1, { width: "16", className: "text-gray-700 cursor-pointer" })) : (react_1.default.createElement(EyeIcon$1, { width: "16", className: "text-gray-700 cursor-pointer" }))))), react_1.default.createElement(IbbValidationMessage, { validationMessage: validationError })));
};
var DefaultInputField = function (_a) {
    var props = _a.props, value = _a.value, currentInputType = _a.currentInputType, handleChange = _a.handleChange, handleBlur = _a.handleBlur, handleKeyUp = _a.handleKeyUp, validationError = _a.validationError, focusKey = _a.focusKey;
    var numberFieldProps;
    if (currentInputType == InputType.number) {
        numberFieldProps = {
            decimalSeparator: ",",
            groupSeparator: "",
            decimalsLimit: props.options && props.options.precision ? parseInt(props.options.precision) : 0,
            allowNegative: props.options && props.options.allowNegative ? props.options.allowNegative : false,
        };
    }
    var validationRules = props.validationRules ? props.validationRules : {};
    (0, react_1.useMemo)(function () {
        return !isEmpty$1(value) ? (currentInputType == InputType.number ? formatNumberValue(value, numberFieldProps.decimalsLimit) : value) : "";
    }, [value]);
    var hasAddon = props.options && props.options.suffix;
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwInputFieldWithAddonContainer, null, react_1.default.createElement(TwInputField, { className: [getInputStyle(), validationError && getInvalidStyle()].join(" "), type: InputType[currentInputType], placeholder: props.field_placeholder, key: props.field_id, id: props.field_id, name: props.field_name, maxLength: props.maxlength, readOnly: props.readonly, value: !isEmpty$1(value) ? (currentInputType == InputType.number ? formatNumberValue(value, numberFieldProps.decimalsLimit) : value) : "", onChange: function (event) {
            return numberFieldProps
                ? handleChange(props.field_id, event, validationRules, numberFieldProps.allowNegative, numberFieldProps.decimalSeparator, numberFieldProps.groupSeparator, numberFieldProps.decimalsLimit)
                : handleChange(props.field_id, event, validationRules);
        }, autoFocus: focusKey && focusKey == props.field_id, onBlur: function (event) { return handleBlur(event, validationRules, numberFieldProps); }, onKeyUp: function (event) { return handleKeyUp(event, props.maxlength); } }), hasAddon && (react_1.default.createElement(TwInputFieldAddonContainer, null, react_1.default.createElement(TwInputFieldAddon, { className: validationError && getInvalidStyle(), onClick: props.options.suffix_custom_action }, props.options.suffix)))), react_1.default.createElement(IbbValidationMessage, { validationMessage: validationError })));
};
var InputType;
(function (InputType) {
    InputType[InputType["text"] = 0] = "text";
    InputType[InputType["currency"] = 1] = "currency";
    InputType[InputType["number"] = 2] = "number";
    InputType[InputType["password"] = 3] = "password";
})(InputType || (exports.InputType = InputType = {}));
var IbbFormInput = function (props) {
    var _a = __read((0, react_1.useState)(props.field_validation_error), 2), validationError = _a[0], setValidationError = _a[1];
    var _b = __read((0, react_1.useState)(null), 2), fieldEnabledByThisProperty = _b[0], setFieldEnabledByThisProperty = _b[1];
    var currentInputType = (0, react_1.useMemo)(function () {
        return props.input_type ? props.input_type : InputType.text;
    }, [props.input_type]);
    (0, react_1.useMemo)(function () {
        return props.field_value;
    }, [props.field_value]);
    (0, react_1.useEffect)(function () {
        if (props.validationRules) {
            var dependentProperty = document.querySelector("[attr-enable='".concat(props.field_name, "']"));
            var validationMessage = validateField(props.field_value, props.field_name, props.validationRules, props.required);
            if (validationMessage) {
                validationMessage += props.field_validation_error ? "\n | ".concat(props.field_validation_error) : "";
                setValidationError(validationMessage);
            }
            setFieldEnabledByThisProperty(dependentProperty);
        }
    }, [, props.field_value]);
    (0, react_1.useEffect)(function () {
        handleValidationAction();
    }, []);
    (0, react_1.useEffect)(function () {
        if (props.field_validation_error) {
            setValidationError(props.field_validation_error);
        }
    }, [props.field_validation_error]);
    (0, react_1.useEffect)(function () {
        var isInvalid = validationError && validationError !== "";
        if (fieldEnabledByThisProperty) {
            fieldEnabledByThisProperty.disabled = isInvalid;
        }
    }, [validationError]);
    (0, react_1.useEffect)(function () {
        if (fieldEnabledByThisProperty && !props.field_value)
            fieldEnabledByThisProperty.disabled = true;
    }, [fieldEnabledByThisProperty, props.field_value]);
    var handleChange = function (field_id, event, validationRules, allowNegative, decimalSeparator, groupSeparator, decimalsLimit) {
        if (props.handleChangeInput) {
            props.handleChangeInput(field_id, event, allowNegative, decimalSeparator, groupSeparator, decimalsLimit);
        }
        if (validationRules) {
            setValidationError(validateField(event.target.value, props.field_name, validationRules, props.required));
        }
    };
    var handleBlur = function (event, validationRules, numberFieldProps) {
        var value = event.target.value;
        if (!value && !props.required)
            return;
        if (numberFieldProps) {
            value = parseFloat(unformatNumberValue(value, numberFieldProps.groupSeparator, numberFieldProps.decimalSeparator)).toFixed(numberFieldProps.decimalsLimit);
            event.target.value = value;
        }
        handleChange(props.field_id, event, validationRules, numberFieldProps ? numberFieldProps.allowNegative : null);
        handleValidationAction();
    };
    var handleKeyUp = function (event, maxlength) {
        if (event && event.target && event.target.value && maxlength && event.target.value.length > maxlength) {
            setValidationError("Der Wert darf max. ".concat(maxlength, " Zeichen lang sein"));
        }
    };
    function handleValidationAction() {
        if (props.validationRules && props.validationRules.endpoint && props.validationAction) {
            props.validationAction(props.field_name, props.field_value);
        }
    }
    var getInputField = function (currentInputType) {
        switch (currentInputType) {
            case InputType.currency:
                return (react_1.default.createElement(CurrencyInputField, { props: props, value: props.field_value, handleBlur: handleBlur, handleChange: handleChange, validationError: validationError, focusKey: props.focusKey }));
            case InputType.password:
                return (react_1.default.createElement(PasswordInputField, { props: props, value: props.field_value, handleChange: handleChange, validationError: validationError, focusKey: props.focusKey }));
            default:
                return (react_1.default.createElement(DefaultInputField, { props: props, value: props.field_value, currentInputType: currentInputType, handleKeyUp: handleKeyUp, handleBlur: handleBlur, handleChange: handleChange, validationError: validationError, focusKey: props.focusKey }));
        }
    };
    return react_1.default.createElement(react_1.default.Fragment, null, getInputField(currentInputType));
};
exports.IbbFormInput = IbbFormInput;
var stringResources = {
    edit: "Bearbeiten",
    view: "Ansehen",
    create: "Erstellen",
    save: "Speichern",
    saveAndClose: "Speichern und schließen",
    delete: "Löschen",
    cancel: "Abbrechen",
};
var ButtonType;
(function (ButtonType) {
    ButtonType[ButtonType["Primary"] = 0] = "Primary";
    ButtonType[ButtonType["Secondary"] = 1] = "Secondary";
    ButtonType[ButtonType["Success"] = 2] = "Success";
    ButtonType[ButtonType["Warning"] = 3] = "Warning";
    ButtonType[ButtonType["Danger"] = 4] = "Danger";
    ButtonType[ButtonType["Info"] = 5] = "Info";
    ButtonType[ButtonType["Submit"] = 6] = "Submit";
})(ButtonType || (exports.ButtonType = ButtonType = {}));
var IbbButton = function (props) {
    var buttontype = props.buttontype, icon = props.icon, children = props.children, title = props.title, disabled = props.disabled, form = props.form, attr = props.attr, options = props.options, message = props.message, onClick = props.onClick;
    props.customAction;
    var preventdefault = props.preventdefault;
    var _a = __read((0, react_1.useState)(false), 2), showConfirmationModal = _a[0], setShowConfirmationModal = _a[1];
    var type = buttontype == ButtonType.Submit ? "submit" : "button";
    var toggleConfirmationModal = function () {
        setShowConfirmationModal(!showConfirmationModal);
    };
    var ConfirmationDialog = function () {
        return (react_1.default.createElement(IbbModalWindow, { show: showConfirmationModal, toggleModal: toggleConfirmationModal, readOnly: false, disableSave: false, stringResources: stringResources, customActionButton: react_1.default.createElement(IbbButton, { buttontype: ButtonType.Submit, children: "Bestätigen", disabled: false, onClick: function (e) {
                    onClick(e);
                    toggleConfirmationModal();
                }, title: "" }), maxWidth: "50%" }, message));
    };
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwButton, __assign$1({ type: type }, props, { form: form, title: title, disabled: disabled, "data-attribute": attr &&
            attr.map(function (a) {
                return a;
            }), onMouseDown: preventdefault == "true" ? function (e) { return e.preventDefault(); } : null, "attr-enable": options && options.enabledByProperty }, (options &&
        options.withConfirmation && {
        onClick: function (e) {
            e.preventDefault();
            setShowConfirmationModal(true);
        },
    })), icon, children), showConfirmationModal && react_1.default.createElement(ConfirmationDialog, null)));
};
exports.IbbButton = IbbButton;
var getButtonColors = function (buttonProps) {
    switch (buttonProps.buttontype) {
        case ButtonType.Primary:
        case ButtonType.Submit: {
            return "bg-ibb border-ibb" + (buttonProps.disabled ? "" : " hover:border-ibb-dark hover:bg-ibb-dark");
        }
        case ButtonType.Secondary: {
            return "bg-gray-50 border-gray-300" + (buttonProps.disabled ? "" : " hover:border-gray-300 hover:bg-gray-300");
        }
        case ButtonType.Success: {
            return "bg-green-500 border-green-700" + (buttonProps.disabled ? "" : " hover:border-green-700 hover:bg-green-700");
        }
        case ButtonType.Warning: {
            return "bg-yellow-500 border-yellow-700" + (buttonProps.disabled ? "" : " hover:border-yellow-700 hover:bg-yellow-700");
        }
        case ButtonType.Danger: {
            return "bg-red-500 border-red-700" + (buttonProps.disabled ? "" : " hover:border-red-700 hover:bg-red-700");
        }
        case ButtonType.Info: {
            return "bg-indigo-500 border-indigo-700" + (buttonProps.disabled ? "" : " hover:border-indigo-700 hover:bg-indigo-700");
        }
        default: {
            return ("bg-transparent text-blue-700 hover:text-white border-blue-500 hover:border-transparent" + (buttonProps.disabled ? "" : " hover:bg-blue-500"));
        }
    }
};
var TwButton = F$3.button(templateObject_1 || (templateObject_1 = __makeTemplateObject(["", " ", " ", " border px-4 py-2 max-w-32 appearance-none hover:border-white min-h-[40px]"], ["", " ", " ", " border px-4 py-2 max-w-32 appearance-none hover:border-white min-h-[40px]"])), function (p) { return getButtonColors(p); }, function (p) { return classNames$1(p.customclasses); }, function (p) {
    return p.disabled
        ? "text-gray-800 opacity-50 cursor-not-allowed"
        : p.buttontype == ButtonType.Secondary
            ? "text-gray-800"
            : "text-white";
});
var templateObject_1;
var IbbFormCheckbox = function (_a) {
    var field_id = _a.field_id, field_label = _a.field_label, field_name = _a.field_name, field_value = _a.field_value, readonly = _a.readonly;
    _a.options;
    var hide_label = _a.hide_label, validationRules = _a.validationRules, validationAction = _a.validationAction, handleChangeInput = _a.handleChangeInput;
    var handleChange = function (field_id, event) {
        var isCheckedValue = event === null || event === void 0 ? void 0 : event.target.checked;
        if (handleChangeInput) {
            handleChangeInput(field_id, event);
        }
        else {
            setIsChecked(isCheckedValue);
        }
        handleValidationAction(isCheckedValue);
    };
    var _b = __read((0, react_1.useState)(field_value), 2), isChecked = _b[0], setIsChecked = _b[1];
    (0, react_1.useEffect)(function () {
        setIsChecked(field_value ? field_value : false);
    }, [field_value]);
    function handleValidationAction(isChecked) {
        if (validationRules && validationRules.endpoint && validationAction) {
            validationAction(field_name, isChecked === null || isChecked === void 0 ? void 0 : isChecked.toString());
        }
    }
    return (react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(TwInputFieldLabel, { htmlFor: field_id }, react_1.default.createElement(TwInputCheckbox, { type: "checkbox", id: field_id, name: field_name, checked: isChecked ? true : false, disabled: readonly, onChange: function (event) { return handleChange(field_id, event); } }), !hide_label && react_1.default.createElement(TwInputCheckboxInlineLabel, null, field_label))));
};
exports.IbbFormCheckbox = IbbFormCheckbox;
